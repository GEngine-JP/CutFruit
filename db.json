{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/search/index.php","path":"search/index.php","modified":0,"renderable":0},{"_id":"themes/hexo-theme-yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-yelee/source/img/flake.png","path":"img/flake.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1465959934010},{"_id":"themes/hexo-theme-yelee/README.md","hash":"825ab90532b65fe925ada7ba513e45e8dccc7a82","modified":1466054194743},{"_id":"themes/hexo-theme-yelee/_config.yml","hash":"9e75fb8b1d129497afaf62a530d350c69151ac5f","modified":1466127311946},{"_id":"themes/hexo-theme-yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1466054194776},{"_id":"source/search/index.php","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465956676337},{"_id":"source/_posts/2016-4-23-angularjs_validat.md","hash":"fcbdd1894f7c9e61ec438a9d3b13bb548df5c1fc","modified":1466127311883},{"_id":"source/404/index.md","hash":"278701f14434c58990334c2a0c5021a79076ddcc","modified":1466069612246},{"_id":"source/_posts/2016-4-27-angularjs_$http_anysc.md","hash":"e30bbff9d045a262fb4afc4b5db387ae47038045","modified":1466127311897},{"_id":"source/_posts/2016-4-25-ui-router_use.md","hash":"a10dbd386617950a0dfd4f6c4a3c1f0c6b847164","modified":1466127311886},{"_id":"source/_posts/2016-4-28-from_ng-options.md","hash":"cc9e28b873c76e0bb05ce571573409f91b721012","modified":1466127311902},{"_id":"source/_posts/2016-5-11-markdown_syntax.md","hash":"59a19bc0dcb9ec95881d9ecb1d0dc0898db43e0b","modified":1466127311908},{"_id":"source/_posts/2016-5-12-linux_crontab_task.md","hash":"ba355a6e007b839dcdc2f48fb5d265c7a9e68af1","modified":1466046961719},{"_id":"source/_posts/2016-5-13-nodejs_online_chat.md","hash":"467d4cabcd95ec990bb7c7d100c3631bb20d39a7","modified":1466127311914},{"_id":"source/_posts/2016-5-14-aboutme.md","hash":"588ded87bbd252b269a0b5d0db8c7df0cd1cbdf9","modified":1465981575596},{"_id":"source/_posts/2016-5-14-webpack_basic_use.md","hash":"6c78a7cbad5a15452fa1686df1934efc03c36026","modified":1466070507500},{"_id":"source/_posts/2016-5-16-nodejs_process.md","hash":"0d4939bdc92979d9b7e6890704fa6548e4ad06ba","modified":1466068259065},{"_id":"source/_posts/2016-5-17-webpack_loader.md","hash":"3be02646b46e8495a0b37c26375ea66cc103e9d8","modified":1466061008303},{"_id":"source/_posts/2016-5-17-webpack_plugins.md","hash":"f6ad1a46ed7986a117dd9aef3a234e4d606409bf","modified":1466060584092},{"_id":"source/_posts/2016-5-18-webpack_params.md","hash":"ae74d6b50764c7aad5517b1ef744bcb95b417175","modified":1466061081054},{"_id":"source/_posts/2016-5-19-es6_syntax.md","hash":"9f92134fd8bb664e6fb753a914f58ffda45d23ec","modified":1466061643723},{"_id":"source/_posts/2016-5-19-javasciprt_syntax.md","hash":"6476d838451a39373edd6cd59fe1f50b226b233d","modified":1466061676021},{"_id":"source/_posts/2016-5-24-nodejs_koa.md","hash":"7d9245bddd266f4a84aca9263ca6fd38dc47d513","modified":1466058601567},{"_id":"source/_posts/2016-5-26-koa_generator.md","hash":"0df6674aab8a9518325bda7a1d13eeaada531d92","modified":1466058223267},{"_id":"source/_posts/2016-5-27-mongodb_use.md","hash":"3f8706a5e8ee5eb2f1cd4e68f11c6ecc297e2f53","modified":1466057959782},{"_id":"source/_posts/2016-5-3-angularjs_keyboard_event.md","hash":"2b1922657b988b2350cc690668d5d84ae0baf839","modified":1466127311918},{"_id":"source/_posts/2016-5-30-markdownpad2.md","hash":"972a77a23fbdfdd4fad1a5f55c9ad75700c2998f","modified":1466056891047},{"_id":"source/_posts/2016-5-4-angularjs_checkbox.md","hash":"217cbe519d5e829c93a26908964834a5a00a9424","modified":1466127311922},{"_id":"source/_posts/2016-5-5-atom_use_and_plugins.md","hash":"34193a664871d3db8e8d6dd6bc84124c7fdfbf66","modified":1466127311931},{"_id":"source/_posts/2016-6-1-npm_modules_share.md","hash":"bfb8d9b9c4a26138f138cc2bcc377d4533a20000","modified":1466056073395},{"_id":"source/_posts/2016-6-2-nodejs_spider_system.md","hash":"3627c50517152bedcbf87a0f9eef1e7a87873be1","modified":1466056262963},{"_id":"source/_posts/2016-6-2-package.json_scripts.md","hash":"916ce70f91b05b43b22c075a7f0e1ec6f88e9c20","modified":1466054457355},{"_id":"source/_posts/2016-6-7-gulp_use.md","hash":"b5a6c8893e58885981f6d494a05ff87c9cae87ca","modified":1466127311940},{"_id":"source/about/index.md","hash":"da6841af22d1be17530bfaab6a58755ce1ab100a","modified":1466127982043},{"_id":"source/search/index.md","hash":"4ec8f54ceaaf671eb5d75db9ed6b7f0a79e372c5","modified":1465956630069},{"_id":"source/tags/index.md","hash":"30ec36f97c6929c73a19fa5b4338d7ef76260bfb","modified":1465961093636},{"_id":"themes/hexo-theme-yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1465959934008},{"_id":"themes/hexo-theme-yelee/languages/default.yml","hash":"9ab84dc75602f84b02d050426cbd1406580d40d9","modified":1466054194753},{"_id":"themes/hexo-theme-yelee/languages/zh-Hans.yml","hash":"2a40f9c82c3f8e446672baac48449839e10873e7","modified":1466054194760},{"_id":"themes/hexo-theme-yelee/languages/en.yml","hash":"fb168c7900487acb0a663e774a60bb046a11f7d7","modified":1466054194757},{"_id":"themes/hexo-theme-yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1466054194765},{"_id":"themes/hexo-theme-yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1466054194770},{"_id":"themes/hexo-theme-yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1465959934264},{"_id":"themes/hexo-theme-yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1465959934266},{"_id":"themes/hexo-theme-yelee/layout/index.ejs","hash":"2030c8f693fceec8f32934dbd4f8f8050d90d237","modified":1466127311951},{"_id":"themes/hexo-theme-yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1466054194772},{"_id":"themes/hexo-theme-yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465959934277},{"_id":"themes/hexo-theme-yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1465959934278},{"_id":"themes/hexo-theme-yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1465959934279},{"_id":"themes/hexo-theme-yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1465959934281},{"_id":"themes/hexo-theme-yelee/layout/_partial/after-footer.ejs","hash":"60906cb6c6d8ced0196f785c40c3e10dab649d4d","modified":1465959934036},{"_id":"themes/hexo-theme-yelee/layout/_partial/article.ejs","hash":"29749e14db1a5f1ab5e82f486ac0c7f8417c86c0","modified":1465959934065},{"_id":"themes/hexo-theme-yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1465959934039},{"_id":"themes/hexo-theme-yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1465959934048},{"_id":"themes/hexo-theme-yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1465959934109},{"_id":"themes/hexo-theme-yelee/layout/_partial/footer.ejs","hash":"9e486d6a5043dd723389cb651c83a7233e9772e0","modified":1465976597426},{"_id":"themes/hexo-theme-yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1465959934173},{"_id":"themes/hexo-theme-yelee/layout/_partial/head.ejs","hash":"9cba318551b9455539d39c00a06f73b7927ca3d6","modified":1465959934192},{"_id":"themes/hexo-theme-yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1465959934196},{"_id":"themes/hexo-theme-yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1465959934193},{"_id":"themes/hexo-theme-yelee/layout/_partial/left-col.ejs","hash":"06c5fa07ee00abd62198f33d5e29928fb192b588","modified":1466067358042},{"_id":"themes/hexo-theme-yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1465959934210},{"_id":"themes/hexo-theme-yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1465959934213},{"_id":"themes/hexo-theme-yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1465959934217},{"_id":"themes/hexo-theme-yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1465959934220},{"_id":"themes/hexo-theme-yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1465959934251},{"_id":"themes/hexo-theme-yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1465975695838},{"_id":"themes/hexo-theme-yelee/layout/_partial/toc.ejs","hash":"53bc5091b92703c96e90472c0b4c82ad5ef10965","modified":1465959934263},{"_id":"themes/hexo-theme-yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1465959934323},{"_id":"themes/hexo-theme-yelee/source/css/_variables.styl","hash":"803faa7a85d9fafb8072a2abd912b46c546eee92","modified":1465959934429},{"_id":"themes/hexo-theme-yelee/source/css/style.styl","hash":"30cb6b33627d9e1a18e9a19627441282df93c99a","modified":1466127311954},{"_id":"themes/hexo-theme-yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1465959934305},{"_id":"themes/hexo-theme-yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1465959934302},{"_id":"themes/hexo-theme-yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1465959934309},{"_id":"themes/hexo-theme-yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1465959934313},{"_id":"themes/hexo-theme-yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1465959934441},{"_id":"themes/hexo-theme-yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1465959934442},{"_id":"themes/hexo-theme-yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1465959934443},{"_id":"themes/hexo-theme-yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1465959934444},{"_id":"themes/hexo-theme-yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1465959934445},{"_id":"themes/hexo-theme-yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1465959934447},{"_id":"themes/hexo-theme-yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1465959934448},{"_id":"themes/hexo-theme-yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1465959934449},{"_id":"themes/hexo-theme-yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1465959934450},{"_id":"themes/hexo-theme-yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1465959934451},{"_id":"themes/hexo-theme-yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1465959934453},{"_id":"themes/hexo-theme-yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1465959934454},{"_id":"themes/hexo-theme-yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1465959934452},{"_id":"themes/hexo-theme-yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1465959934460},{"_id":"themes/hexo-theme-yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1465959934461},{"_id":"themes/hexo-theme-yelee/source/js/main.js","hash":"ac2a3fc075432c6d9651c3b8ee56bf6e5d072ff4","modified":1465959934467},{"_id":"themes/hexo-theme-yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1465959934473},{"_id":"themes/hexo-theme-yelee/source/js/pc.js","hash":"1e4cdfa31e828e11b848fed3c3541c6591bf9b5d","modified":1465959934490},{"_id":"themes/hexo-theme-yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1465959934497},{"_id":"themes/hexo-theme-yelee/source/js/toc.js","hash":"a36e55a655551d75d703210326bbf54d98fc86fb","modified":1465959934504},{"_id":"themes/hexo-theme-yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1465959934322},{"_id":"themes/hexo-theme-yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1465959934317},{"_id":"themes/hexo-theme-yelee/source/js/embed.js","hash":"4b4b5058a6e4d75cbf34d8e1b9ed6af3361bfc91","modified":1465969282579},{"_id":"themes/hexo-theme-yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1465959934115},{"_id":"themes/hexo-theme-yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1465959934149},{"_id":"themes/hexo-theme-yelee/layout/_partial/comments/duoshuo.ejs","hash":"75b805b41de4139ed3f338d718a4ad3273546638","modified":1466067358031},{"_id":"themes/hexo-theme-yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1465959934162},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1465959934226},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1465959934229},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1465959934237},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1465959934242},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1465959934247},{"_id":"themes/hexo-theme-yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1465959934248},{"_id":"themes/hexo-theme-yelee/source/css/_partial/archive.styl","hash":"27ccc6374d04cd93717a2b6c587342b6cbe6fc80","modified":1465959934326},{"_id":"themes/hexo-theme-yelee/source/css/_partial/article.styl","hash":"b9ecd0c6ea348d5d865390b2497c7f24180c882b","modified":1465959934330},{"_id":"themes/hexo-theme-yelee/source/css/_partial/footer.styl","hash":"e920a40d228b844f8636ae3c1c202850e779e38d","modified":1465959934362},{"_id":"themes/hexo-theme-yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1465959934366},{"_id":"themes/hexo-theme-yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1465959934363},{"_id":"themes/hexo-theme-yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1465959934369},{"_id":"themes/hexo-theme-yelee/source/css/_partial/main.styl","hash":"371770b054ca345d53d92cea08e977ac1a495fa2","modified":1465959934373},{"_id":"themes/hexo-theme-yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1465959934376},{"_id":"themes/hexo-theme-yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1465959934379},{"_id":"themes/hexo-theme-yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1465959934385},{"_id":"themes/hexo-theme-yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1465959934382},{"_id":"themes/hexo-theme-yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1465959934388},{"_id":"themes/hexo-theme-yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1465959934391},{"_id":"themes/hexo-theme-yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1465959934394},{"_id":"themes/hexo-theme-yelee/source/css/_partial/toc.styl","hash":"25a951db2960655db3a6c344c8ad228c7c2e1222","modified":1465959934397},{"_id":"themes/hexo-theme-yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1465959934399},{"_id":"themes/hexo-theme-yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1465959934402},{"_id":"themes/hexo-theme-yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1465959934401},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1465959934286},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1465959934294},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1465959934290},{"_id":"themes/hexo-theme-yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1465959934298},{"_id":"themes/hexo-theme-yelee/source/img/avatar.png","hash":"c48182d4135fd2d1a80f9e82f42b50d1d77ac8cd","modified":1465891468328},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1465959934333},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1465959934336},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1465959934350},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1465959934347},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1465959934353},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1465959934356},{"_id":"themes/hexo-theme-yelee/source/css/_partial/customise/social-icon.styl","hash":"59805e22dd29d260742c9892a23c7014dbdb3fb1","modified":1465967101389},{"_id":"public/atom.xml","hash":"8e7834490dc2029bdf77af04b5e9f927f5ff7963","modified":1469252372926},{"_id":"public/search.xml","hash":"7aea901adc768dc2862598d69ba4d241533904ee","modified":1469252372895},{"_id":"public/sitemap.xml","hash":"34d6896b5eebaea1a9cbdcbee077e07bd20aeb35","modified":1469252372926},{"_id":"public/404/index.html","hash":"810a1339553133b302fc3542b95ab69a78868e22","modified":1466065276113},{"_id":"public/about/index.html","hash":"a3749d0a9dd650665b302edd71414e565926168b","modified":1469252388316},{"_id":"public/search/index.html","hash":"bd3acc0e5ef671b79c88d14f11c7fe868076f11f","modified":1469252388316},{"_id":"public/tags/index.html","hash":"680ec2ac558ec6e530821d52dc6f04986cdc3fbb","modified":1469252388316},{"_id":"public/2016/06/07/2016-6-7-gulp_use/index.html","hash":"83aea0345877b02b7b5cf29f99ba15cef93a28cd","modified":1466146946660},{"_id":"public/2016/06/03/2016-6-2-nodejs_spider_system/index.html","hash":"5700d7a14b17873cb9e4bb320651c8f4dfe95ff0","modified":1466146946660},{"_id":"public/2016/06/02/2016-6-2-package.json_scripts/index.html","hash":"b164b81ce8ea5a74b36d1c1eff74d58267bbb93c","modified":1466146946660},{"_id":"public/2016/06/01/2016-6-1-npm_modules_share/index.html","hash":"85a3a6eac2020d6d2d0c0f599db4b2f50c77c118","modified":1466146946660},{"_id":"public/2016/05/30/2016-5-30-markdownpad2/index.html","hash":"261a8fac631a8f78f72ea80bad879198dbd37dac","modified":1466146946660},{"_id":"public/2016/05/27/2016-5-27-mongodb_use/index.html","hash":"a86d1df4454ef9fb892dcc4ebc475162288c2546","modified":1466146946660},{"_id":"public/2016/05/26/2016-5-26-koa_generator/index.html","hash":"6316cc5c45873f260d459c0d6c32c31303bdce16","modified":1466146946660},{"_id":"public/2016/05/24/2016-5-24-nodejs_koa/index.html","hash":"e676c4a6ba1e1740db2a91229f77a1e1aad19e28","modified":1466146946660},{"_id":"public/2016/05/20/2016-5-19-javasciprt_syntax/index.html","hash":"c8dfdc6a40039928d714517e264af2cf204fb55d","modified":1466146946660},{"_id":"public/2016/05/19/2016-5-19-es6_syntax/index.html","hash":"4d0d68cd3898c91d389a1f5e24f607f6a142865b","modified":1466146946660},{"_id":"public/2016/05/17/2016-5-17-webpack_loader/index.html","hash":"94cb329b017ecd9e551133d0a88b38d9990913d4","modified":1466146946660},{"_id":"public/2016/05/17/2016-5-17-webpack_plugins/index.html","hash":"f5761152c680d36ebf4d94a00873681ff770b887","modified":1466146946661},{"_id":"public/2016/05/17/2016-5-18-webpack_params/index.html","hash":"d4d620fa96de75e620a84216978cee281c1f4b23","modified":1466146946661},{"_id":"public/2016/05/16/2016-5-16-nodejs_process/index.html","hash":"fb075ac76752c7f12522902578db2cfaaf4d7998","modified":1466146946661},{"_id":"public/2016/05/14/2016-5-14-webpack_basic_use/index.html","hash":"4c0e49109c7689693016c00a29aa944c84b6685f","modified":1466146946661},{"_id":"public/2016/05/14/2016-5-14-aboutme/index.html","hash":"f27ed5032a0807a3334a2cb18d0eebe783f70cf4","modified":1466146946661},{"_id":"public/2016/05/13/2016-5-13-nodejs_online_chat/index.html","hash":"6d6fc3668af25bbd012f583e2b1d25d9a9dd6c6e","modified":1466146946661},{"_id":"public/2016/05/12/2016-5-12-linux_crontab_task/index.html","hash":"35e2721cb52e72b7aa03fbd95a7ea5ff24ed7fcc","modified":1466146946661},{"_id":"public/2016/05/11/2016-5-3-angularjs_keyboard_event/index.html","hash":"d583992bc2fb179bec6f95a725fcb042ac6e4ecd","modified":1466146946661},{"_id":"public/2016/05/11/2016-4-27-angularjs_$http_anysc/index.html","hash":"1274210032db023375383b657157d3317ad8fb2e","modified":1466146946661},{"_id":"public/2016/05/11/2016-5-4-angularjs_checkbox/index.html","hash":"49316a8ff68ca73734789639c64100dcf3cecbbd","modified":1466146946661},{"_id":"public/2016/05/11/2016-5-5-atom_use_and_plugins/index.html","hash":"f56518eb15455a997930f3f3114d935f7bb2ad34","modified":1466146946661},{"_id":"public/2016/05/11/2016-5-11-markdown_syntax/index.html","hash":"7b3e92cea9a3086fdb4175abdd16566330a22b4a","modified":1466146946661},{"_id":"public/2016/05/11/2016-4-25-ui-router_use/index.html","hash":"7040b62434d37dac61c2aeabcfbf1d77bb803078","modified":1466146946661},{"_id":"public/2016/05/11/2016-4-28-from_ng-options/index.html","hash":"2a25fcbc0a53d9f306b3e8393c6f906eb4ed6d12","modified":1466146946661},{"_id":"public/2016/05/10/2016-4-23-angularjs_validat/index.html","hash":"0e1a77fed91dd4b1a9f3ce3331d8085b2adfdac1","modified":1466146946661},{"_id":"public/archives/index.html","hash":"7411e848d4a9e35f71db99a2e859bed0cb905e2f","modified":1469252388316},{"_id":"public/categories/angularjs表单验证/index.html","hash":"a729b62d80e7f825443c86faa3790ebc5305545d","modified":1469252388316},{"_id":"public/categories/angularjs增删改查/index.html","hash":"c86dac2fc622fc853c7d3b73e3359e7539329373","modified":1469252388316},{"_id":"public/categories/ng-options/index.html","hash":"9d799ab22e07834be10198ada5cb0781b3b9de50","modified":1469252388316},{"_id":"public/categories/angularjs之ui-router/index.html","hash":"1b73fbfc100bde8640401222b07a2b333a3df1b2","modified":1469252388316},{"_id":"public/categories/markdown/index.html","hash":"1d0b98d14539991e7b37dbf462e22ff5ad69b6b4","modified":1469252388316},{"_id":"public/categories/nodejs之net模块/index.html","hash":"3fec5a0452e54f98a554fed2ae07be9f1df5d7f8","modified":1469252388316},{"_id":"public/categories/生活随笔/index.html","hash":"a2c551c10ddcbcdd447e1e795c38b02017b8841b","modified":1469252388316},{"_id":"public/categories/linux的crontab/index.html","hash":"3e2501a634fe3989a886c8882f82feb99fca648f","modified":1466146946662},{"_id":"public/categories/自动化构建工具/index.html","hash":"b5969c0fb05556572cac709b41fd6ad0040be9f3","modified":1466392197659},{"_id":"public/categories/nodejs之process/index.html","hash":"697dfaa82f9c882a33c5a1b69f77016419e71297","modified":1469252388316},{"_id":"public/categories/webpack处理器/index.html","hash":"118d4a822d70cb7920be648f72702484c76f8517","modified":1469252388316},{"_id":"public/categories/webpack/index.html","hash":"6c212f5d832740be4aeba94fc50cf4bba009c4bb","modified":1469252388316},{"_id":"public/categories/webpack插件/index.html","hash":"3008ba1a6d0e4781583bbabfa540c216e2f1c0cf","modified":1469252388316},{"_id":"public/categories/es6/index.html","hash":"c6b6a112c2a2ccba46210bd3257260ee5e906380","modified":1469252388316},{"_id":"public/categories/koa/index.html","hash":"8cf2d9bd13acb340cad1a48bc6b7d31d8afbe0bb","modified":1469252388316},{"_id":"public/categories/javascript/index.html","hash":"38009692a2114c52ad03e4ab906c6b6e3997e690","modified":1469252388316},{"_id":"public/categories/mongodb/index.html","hash":"b2933bea75d74758b121afa499cdb8604fa83193","modified":1469252388316},{"_id":"public/categories/angularjs键盘事件/index.html","hash":"676a573c42625debfcd8a988751bf4e749764894","modified":1469252388316},{"_id":"public/categories/ng-checkbox/index.html","hash":"9384399774dd17740100a2ab00ba17190c2aebe8","modified":1469252388316},{"_id":"public/categories/atom插件/index.html","hash":"33ad79f171535dd277bb8af41371ed11f0282ca6","modified":1469252388316},{"_id":"public/categories/npm/index.html","hash":"ae072a8c8ce12c97f1abcfe8b038e5c16b1f0d11","modified":1469252388316},{"_id":"public/categories/nodejs/index.html","hash":"4563ae1fa0885005356ed28ad7373bf2a338e9a7","modified":1466146946663},{"_id":"public/categories/gulp/index.html","hash":"8f3483f4c78525de59f14e45aba91fabadfaf16d","modified":1469252388316},{"_id":"public/index.html","hash":"3d39a3daa2637f48774f63a3252fea6d0e8f5974","modified":1469252388331},{"_id":"public/page/2/index.html","hash":"8410851ad832c27b3c8ce58a971aabbcdfe5a766","modified":1469252388331},{"_id":"public/tags/angularjs/index.html","hash":"84975c2205db9639d0c69dd1f15ffeed36744efe","modified":1466396028551},{"_id":"public/tags/markdown/index.html","hash":"f4605c08eb5ba321b02848f59625f59da813bfd8","modified":1469252388331},{"_id":"public/tags/nodejs/index.html","hash":"29036da03d7d8e636448d50ba10f1afce758e4df","modified":1466391575688},{"_id":"public/tags/生活/index.html","hash":"d4d0f763c60de99d9dafb0f750c8aa9f20970ee1","modified":1469252388331},{"_id":"public/tags/linux/index.html","hash":"ee36adfceee446ff9da4f62eb2830c5a3bf3d7bd","modified":1469252388331},{"_id":"public/tags/webpack/index.html","hash":"544977d60dbddea5f32ea08c98e615fef93b51fb","modified":1469252388331},{"_id":"public/tags/es6/index.html","hash":"0c051c598db896630b1455a4ffa3ba39942a2404","modified":1469252388331},{"_id":"public/tags/javascript/index.html","hash":"b355f5216a791de8ef7cf5a48ae1a05bd4b16a07","modified":1469252388331},{"_id":"public/tags/mongodb/index.html","hash":"c71cca2b49503934606db18da3cd34a9266fe741","modified":1469252388331},{"_id":"public/tags/atom/index.html","hash":"a02717fce44b84723620f8e55181b8f904f6f140","modified":1466393450672},{"_id":"public/tags/npm/index.html","hash":"5169dbff5434732e9efd4188f15f9a7b29642f42","modified":1469252388331},{"_id":"public/tags/gulp/index.html","hash":"d9755117e38152acf4d9e17b8a38eee4f9c131ce","modified":1469252388331},{"_id":"public/search/index.php","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466392437127},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1466392437139},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1466392437139},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1466392437139},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1466392437139},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1466392437139},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1466392437139},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1466392437139},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1466392437140},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1466392437140},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1466392437140},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1466392437140},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1466392437140},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1466392437140},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1466392437140},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1466392437140},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1466392437140},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1466392437140},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1466392437140},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1466392437140},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1466392437140},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1466392437140},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1466392437140},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1466392438190},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1466392438192},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1466392438214},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1466392438214},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1466392438214},{"_id":"public/js/main.js","hash":"4bd3a2af9544f0b593f41befbcc9afe116c29631","modified":1466392438214},{"_id":"public/js/toc.js","hash":"1f5d73b8d9ac332ed43ad79dbd72941a86b949aa","modified":1466392438214},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1466392438214},{"_id":"public/js/pc.js","hash":"973d1bb0bf775c98479b36714b59e127721b37bc","modified":1466392438214},{"_id":"public/css/style.css","hash":"2b65f94ac43d260644f72a72fc23f92eb174e51d","modified":1466392438214},{"_id":"public/js/embed.js","hash":"451deba864ee694f3bf0bf0b4e68501d7524b3c0","modified":1466392438214},{"_id":"public/img/avatar.png","hash":"c48182d4135fd2d1a80f9e82f42b50d1d77ac8cd","modified":1466392438215},{"_id":"public/404.html","hash":"509e59ec55bff798e0ac84e0be30cba262e94874","modified":1469252388316},{"_id":"themes/hexo-theme-yelee/source/img/flake.png","hash":"c9ffbbf2affd167191c8cab54b96e5a8e8dc9468","modified":1466089092000},{"_id":"public/img/flake.png","hash":"c9ffbbf2affd167191c8cab54b96e5a8e8dc9468","modified":1466392437140},{"_id":"public/page/3/index.html","hash":"734847fa5ed8f9edf7305228aeb0d648ecbe1883","modified":1469252388331},{"_id":"public/page/4/index.html","hash":"974b946148d05e417ae0736cc46e743041b2d07c","modified":1469252388331},{"_id":"public/page/5/index.html","hash":"87dba37aebc9caf9970b0b0d9632f53b4967141d","modified":1469252388331},{"_id":"public/page/6/index.html","hash":"aecc63fd7b23d745ffe62390a1dc4ecea3f6568c","modified":1469252388331},{"_id":"public/tags/angularjs/page/2/index.html","hash":"f79becb54d826e973aaf632bb0bf6487e0599fc7","modified":1466146946664},{"_id":"source/_posts/2016-6-17_linux_disk.md","hash":"cfceb2e47d308a6117eea4fdf8215a2d315b7fe9","modified":1466129830524},{"_id":"public/categories/linux/index.html","hash":"b924894605822dac0f735d512ab66b41b0c78431","modified":1466129076205},{"_id":"public/tags/linux磁盘挂载/index.html","hash":"0612558bf56916f976a75662d85307ba008856d8","modified":1466129076205},{"_id":"public/2016/06/17/2016-6-17_linux_disk/index.html","hash":"d759a11089555812ff8c54b12d53d736595c7ded","modified":1466146946660},{"_id":"public/categories/linux磁盘挂载/index.html","hash":"1870f85050a12063bb5c906cf4086acd5b8e683e","modified":1469252388316},{"_id":"source/_posts/2016-6-17_linux_chmod.md","hash":"b361a475fffbad192d6a329f687c4272b7495f1c","modified":1466134063303},{"_id":"public/categories/linux权限操作/index.html","hash":"36c62d19c42dd99d94f9b15fdcd95d6b2aec64e2","modified":1469252388316},{"_id":"public/2016/06/17/2016-6-17_linux_chmod/index.html","hash":"fdf3fd8339dc15dfea5ed73f9442629927b82ea8","modified":1466146946660},{"_id":"source/_posts/2015-08-19.hello-world.md","hash":"9580eaa92286e2dffc9711349922b9369d28be87","modified":1466146684069},{"_id":"source/_posts/2015-08-28.Front-End-Study.md","hash":"0a2d348ffe6d134b3fde01f90a1fae3fe1a4fd62","modified":1466146684098},{"_id":"source/_posts/2015-08-30.EndNote-Markdown.md","hash":"ac754e34907ba3967612c01c757568add47e9137","modified":1466146684102},{"_id":"source/_posts/2015-09-29.duoshuo-style.md","hash":"cb9db76dcf920830f8f0e97812d8d655e4e649aa","modified":1466146684113},{"_id":"source/_posts/2015-09-20.windows-mac-software.md","hash":"5a4aa7e8e6507b14b937d65acede221a0763b153","modified":1466146684106},{"_id":"source/_posts/2015-10-16.hexo-404-page.md","hash":"44a1ffa0270ec649607a6d58318dd92297c158c1","modified":1466146684117},{"_id":"source/_posts/2015-10-25.hexo-tag-cloud.md","hash":"d2c575268d3bdb46493623534b7cf638f8288370","modified":1466146684131},{"_id":"source/_posts/2015-10-31.excel-markdown-table.md","hash":"3c87c71ce254710c2aa57497dd59af458ccdb783","modified":1466146684138},{"_id":"source/_posts/2015-11-04.hexo-deployment.md","hash":"6ba311b2c8fbcfcf0bf0dfffbc33cea7401b1dd5","modified":1466146684142},{"_id":"source/_posts/2015-11-09.web-style-guide.md","hash":"fc7770876014b882e48e3a8ec2f7539a35c29f15","modified":1466146684150},{"_id":"source/_posts/2015-11-16.png-gif-transparency.md","hash":"dbf1417a9904190a7e36416cef04263e58f1130d","modified":1466146684154},{"_id":"source/_posts/2015-11-23.anki-templates.md","hash":"1029d485ac70e5568e9edd16575f8917a0a95274","modified":1466146684157},{"_id":"source/_posts/2015-11-23.git-command.md","hash":"5b0c74cf5d8bd92a925415392921759d4330fbbb","modified":1466146684173},{"_id":"source/_posts/2015-11-30.sublime-config.md","hash":"b55b178dc40fa1ea9097768cc6a460d0161663d8","modified":1466146684176},{"_id":"source/_posts/2015-12-09.css-font-family.md","hash":"e83f2a58bde0bf8e4f4c78d1820c64a3770313bb","modified":1466146684182},{"_id":"source/_posts/2015-12-21.common-hexo-commands.md","hash":"14a2f62ad8c3f156b60297f5cb2c8ff7d76c7194","modified":1466146684185},{"_id":"source/_posts/2015-12-22.anki-excel-shortcuts.md","hash":"9311d0ce74640223dda3ccefddbefecf285cb07f","modified":1466146684193},{"_id":"source/_posts/2016-01-01.hexo-config-true-false.md","hash":"92b67c3c5c541ac71a426015daa52bef4db1dde8","modified":1466146684206},{"_id":"source/_posts/2016-01-02.hexo-comments.md","hash":"f370315c0d5cae7606d0e4e821d5149967a443a6","modified":1466146684247},{"_id":"source/_posts/2016-01-10.hexo-post-version-control.md","hash":"c3cba53463cb1afdde3cda7bc293d53d52994a08","modified":1466146684264},{"_id":"source/_posts/2016-02-16.front-end-tools.md","hash":"8894d268781ca4644a0ddacd59e542820da22a96","modified":1466146684268},{"_id":"source/_posts/2016-03-04.markdown-table-style.md","hash":"20ea1085cd9573bd5a086141885279403f42ffa4","modified":1466146684279},{"_id":"source/_posts/2016-04-18.text-overflow-ellipsis.md","hash":"ddfcab6331b1bc79ea5df8537d39bec4ef5b45a8","modified":1466146684287},{"_id":"source/_posts/2016-03-27.hexo-browsersync.md","hash":"2d1ec55c161bffde297873f73260af4e06e60d86","modified":1466146684282},{"_id":"source/_posts/2016-05-11.public-dns.md","hash":"07f732bbc7b583a4cefdeb297952fe07888a8fcf","modified":1466146684304},{"_id":"source/_posts/2016-05-31.hexo-local-search.md","hash":"e88fbbb5d176ce7db9862404b450c262fa01b977","modified":1466146684347},{"_id":"source/_posts/2016-05-17.image-compression.md","hash":"07a0f39596f45f0be5183d0d7dd0ef67e82bfa48","modified":1466146684310},{"_id":"source/_posts/2016-04-20.baidu-share-fontawesome.md","hash":"6fb71e1c1e9a666a73bdb0f9ee011e25787b5a86","modified":1466146684299},{"_id":"source/_posts/2016-06-13.hexo-collapsible-toc.md","hash":"6f0474af1323f5aeb4d37117f2b2d92dd8678abc","modified":1466146684361},{"_id":"source/_posts/2016-06-14.duoshuo-disqus-comment-count.md","hash":"2cb8aee253bb2d64b6dda5eff04999b8988a87ed","modified":1466146684379},{"_id":"source/_posts/2015-08-20.blog-building.md","hash":"1e5870f4bb3d510e7d66ac3fc6a3ab5a52f3f219","modified":1466146684086},{"_id":"public/tags/JavaScript/index.html","hash":"4309e0e68443c135b0bbcf852d37dd41d253116c","modified":1469252388331},{"_id":"public/tags/Markdown/index.html","hash":"6f8db1693039b3935ff89a6923981456f7d749fd","modified":1466391575689},{"_id":"public/2016/06/14/duoshuo-disqus-comment-count/index.html","hash":"fa3441ca93a7d37c9341a27f323209a4e601568d","modified":1466146946669},{"_id":"public/2016/06/13/hexo-collapsible-toc/index.html","hash":"7e3d5f525d6cdc384438c1ad94b030474a3fb341","modified":1466146946669},{"_id":"public/2016/05/31/hexo-local-search/index.html","hash":"e470b65601627e3e44d707a1c7194d8a8d745c94","modified":1466146946669},{"_id":"public/2016/05/17/image-compression/index.html","hash":"365bfbf2ba27eec2643b198b45855c9a2b9920ff","modified":1466146946669},{"_id":"public/2016/05/11/public-dns/index.html","hash":"0ba74623231fd0cc99191fa37336f5a24fbc20eb","modified":1466146946669},{"_id":"public/2016/04/20/baidu-share-fontawesome/index.html","hash":"c0949098bf13b0cca1efdd4a0a2fcbdb5be3559c","modified":1466146946669},{"_id":"public/2016/04/18/text-overflow-ellipsis/index.html","hash":"b4a0cdfd8b862e74d0ea4f72c2b429bf716e3a64","modified":1466146946670},{"_id":"public/2016/03/27/hexo-browsersync/index.html","hash":"88b8ddf14e60f735c49536d9fb6c3a963190340d","modified":1466146946670},{"_id":"public/2016/03/04/markdown-table-style/index.html","hash":"bdc80536c799d27723dca4457ee6d8e207d87456","modified":1466146946670},{"_id":"public/2016/01/10/hexo-post-version-control/index.html","hash":"8b9bcaf26b3c9eb0da75709421350bd8acc1ed94","modified":1466146946670},{"_id":"public/2016/02/16/front-end-tools/index.html","hash":"013541d7c80a82ac9a1282cecbf96840faf0f432","modified":1466146946670},{"_id":"public/2016/01/02/hexo-comments/index.html","hash":"22d4123ef59d5ff2ab81e589bbb840e8f9d05c31","modified":1466146946670},{"_id":"public/2016/01/01/hexo-config-true-false/index.html","hash":"02ea34c8cdd28911f2a91ac9024623f5b87479a0","modified":1466146946670},{"_id":"public/2015/12/22/anki-excel-shortcuts/index.html","hash":"dfeeb62d0771f75104419e090ccab1511e377fd3","modified":1466146946670},{"_id":"public/2015/12/21/common-hexo-commands/index.html","hash":"eebc62df8453a41fe7f80ef3b0d51b7f253bbe48","modified":1466146946670},{"_id":"public/2015/12/09/css-font-family/index.html","hash":"6999c8f6ecd0a2f7167c6c4d0c2396f43d0f91e8","modified":1466146946670},{"_id":"public/2015/11/30/sublime-config/index.html","hash":"beda3262bd41ebd55e56e7183c6902da1e77d8b7","modified":1466146946670},{"_id":"public/2015/11/23/anki-templates/index.html","hash":"aa3196b6e5fb5377941b2697e2de296ab76221bc","modified":1466146946670},{"_id":"public/2015/11/09/web-style-guide/index.html","hash":"511c5ff0379e2c833bc06a026d3e878b7378d458","modified":1466146946670},{"_id":"public/2015/11/23/git-command/index.html","hash":"1df2460136ba5034c6a6aede152f58d0455b9089","modified":1466146946671},{"_id":"public/2015/11/16/png-gif-transparency/index.html","hash":"bbbf9f6eb9a3609eecf1494593aa6dd16f73889b","modified":1466146946671},{"_id":"public/2015/11/04/hexo-deployment/index.html","hash":"bba1662660f4b69926eac68532e539b12db31d2e","modified":1466146946671},{"_id":"public/2015/10/31/excel-markdown-table/index.html","hash":"11a8e44193bc92f3d45c74c5bf190cd0e55c95bb","modified":1466146946671},{"_id":"public/2015/10/25/hexo-tag-cloud/index.html","hash":"1bf99a7fa73caddc451a3005466d6378c4106852","modified":1466146946671},{"_id":"public/2015/10/16/hexo-404-page/index.html","hash":"8d4c4eb35dfd90b4a00e4b09334fa20a5a5efcf4","modified":1466146946671},{"_id":"public/2015/09/29/duoshuo-style/index.html","hash":"7bdcac05658bd248ce0f057862ed20cf4950673d","modified":1466146946672},{"_id":"public/2015/09/20/windows-mac-software/index.html","hash":"ad50bd80c4709e01323aaba0ba3ac2a6d7102779","modified":1466146946672},{"_id":"public/2015/08/28/Front-End-Study/index.html","hash":"7342fecba5bd8dde958ea2c3ea5825e4f7624529","modified":1466146946672},{"_id":"public/2015/08/30/EndNote-Markdown/index.html","hash":"8ce094f026eba1a0194262a53358bfd131cca00e","modified":1466146946672},{"_id":"public/2015/08/20/blog-building/index.html","hash":"aa473852e9646ea8e01e85b8c0699bde423d15fd","modified":1466146946672},{"_id":"public/2015/08/19/2015-08-19.hello-world/index.html","hash":"f09343df80ecb8dbc95e661a7be414fece7ea0eb","modified":1466146946672},{"_id":"public/categories/术业专攻/index.html","hash":"f503ebc454efe0b36ce1141207fa8daaebd87de5","modified":1469252388316},{"_id":"public/categories/术业专攻/page/2/index.html","hash":"40cdf789edbdde5cf633e939c264ae052c13250c","modified":1466146946672},{"_id":"public/categories/术业专攻/page/3/index.html","hash":"15d58e7ae8ffa414268b492454c2347f13a6233f","modified":1466146946672},{"_id":"public/categories/术业专攻/page/4/index.html","hash":"3ced2b6ce5ee2d63eb9d6778ba67c77884d9198b","modified":1466146946672},{"_id":"public/categories/触类旁通/index.html","hash":"52024336610ba0e0b71086caecb78c6c3359a97c","modified":1469252388316},{"_id":"public/categories/触类旁通/page/2/index.html","hash":"db277625fa909f1b5e5947901f5a877e73c0a077","modified":1466149886278},{"_id":"public/categories/自用笔记/index.html","hash":"1e918afd87a92ccd2fdb0e8e9d3e50da27b12097","modified":1469252388316},{"_id":"public/categories/自用笔记/page/2/index.html","hash":"644ca418371dcd63a7153319f583760be736ae75","modified":1466146946672},{"_id":"public/categories/自用笔记/术业专攻/index.html","hash":"8534e609e12ff49e86b425d816ed5999dcf2cd9b","modified":1469252388316},{"_id":"public/categories/自用笔记/术业专攻/page/2/index.html","hash":"2bad6a2a060895aee88a1be2102f62a1c020aec3","modified":1466146946672},{"_id":"public/page/7/index.html","hash":"782046d179e1944904123b8a0c5e46f7f94d3a20","modified":1466149886276},{"_id":"public/page/8/index.html","hash":"40623ac5c65835d2d04f8f2e6c5ef77fe5790dfa","modified":1466149886276},{"_id":"public/page/9/index.html","hash":"bd5d41b601fdbbf4ead89b3187137e17e4ae4d31","modified":1466146946673},{"_id":"public/page/10/index.html","hash":"37c5355c2e482a52a834ae4da5c971c3722e024a","modified":1466146946673},{"_id":"public/page/11/index.html","hash":"3eff81f3bb365e5b94cbbf61f532d2d0390143f8","modified":1466146946673},{"_id":"public/page/12/index.html","hash":"e346ec92f4d3f1a3b90acb68b128aa8533dc85ec","modified":1466146946673},{"_id":"public/tags/HTML/index.html","hash":"bdf60dca397dbaffd35a502a57ce561a27c6c508","modified":1466146946673},{"_id":"public/tags/CSS/index.html","hash":"26fac332ab806bc51e37db53a23f3976d6f0041c","modified":1466391575689},{"_id":"public/tags/CSS/page/2/index.html","hash":"f6b21800ffef5b9cd6401a658b59e15e4a8ae5c3","modified":1466146946673},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"9ef0921c26f62ff16ede3b194f027f6debd0f8d4","modified":1466146946673},{"_id":"public/tags/Git/index.html","hash":"2e8670412db191ee1c78585ffcf03e58cf9378bf","modified":1466146946674},{"_id":"public/tags/EndNote/index.html","hash":"ae31a4e5e7bf43d86dbcbdc17347ec19da35a032","modified":1466146946674},{"_id":"public/tags/Reference/index.html","hash":"5f5ae6f4b963e43a4506ec3a1a7611355e34f818","modified":1466146946674},{"_id":"public/tags/多说/index.html","hash":"f191b5a5e1ed3228d09a05ff1350eb65e368394f","modified":1466391575689},{"_id":"public/tags/UA/index.html","hash":"6683081c64ca719c15cdbdd8c84de17bcc632611","modified":1466146946675},{"_id":"public/tags/Hexo/index.html","hash":"fe21f13977f0074c0be7c6edb67e5045a6443c23","modified":1466146946675},{"_id":"public/tags/Hexo/page/2/index.html","hash":"2d9ce7b737e18b1d536f257c8ec5f79c6da9fb6a","modified":1466146946675},{"_id":"public/tags/Hexo/page/3/index.html","hash":"b047b5407e162e355fd90225432413bdd51d525a","modified":1466146946675},{"_id":"public/tags/Windows/index.html","hash":"6b6f41a5835fea94fb827963835d087f07059198","modified":1466391575689},{"_id":"public/tags/Mac/index.html","hash":"2ae80f8469950601b8d2ec50e2ff13c48bca06f5","modified":1466391575689},{"_id":"public/tags/Software/index.html","hash":"6f58e339eaf591e6cf2e71e7180e8cd5947407f5","modified":1466391575689},{"_id":"public/tags/TagCloud/index.html","hash":"c93ab42bef1106d4b0161c917255c720af9f121e","modified":1466146946676},{"_id":"public/tags/Excel/index.html","hash":"7434b38af9a89af9b15d0f733cd7ae6c992e2533","modified":1466391575689},{"_id":"public/tags/Table/index.html","hash":"ce34a66cb3187ffdd71c5da930d8371852156fd1","modified":1466391575689},{"_id":"public/tags/GitHub/index.html","hash":"7a8304fe75664fc2e1b00bf5df970ec777961090","modified":1466146946676},{"_id":"public/tags/PhotoShop/index.html","hash":"e51c7b25ca351e2c013dedf1b0b51d357ebbca69","modified":1469252388331},{"_id":"public/tags/GIF/index.html","hash":"36cc2f662008667032ed6cd9477578b044c8764a","modified":1466146946676},{"_id":"public/tags/PNG/index.html","hash":"a987ca8df06e8d52de25da3948dc39d4dc378b76","modified":1466146946676},{"_id":"public/tags/PowerPoint/index.html","hash":"a71658754700c9c0362cc30642fae802bedb1790","modified":1466391575690},{"_id":"public/tags/Anki/index.html","hash":"9f0d1aa520cd134e15e88a7a4d134694b9a81c62","modified":1466391575690},{"_id":"public/tags/Sublime/index.html","hash":"6fdca9a55e76edbde1a7ca61490aa8031fbdcf54","modified":1466391575690},{"_id":"public/tags/font-family/index.html","hash":"af8147d8d563ad9919ba890fa28f1ce0d2e60c60","modified":1466391575690},{"_id":"public/tags/DNS/index.html","hash":"6aea88960dd612cdf03e9e7b652a846d3e4298c9","modified":1466391575690},{"_id":"public/tags/Browsersync/index.html","hash":"43073cd45ee2173732c515d726eda6870957fa74","modified":1466146946677},{"_id":"public/tags/jQuery/index.html","hash":"7490ca2bb0793fd88575f589fa07bc161529f254","modified":1466391575690},{"_id":"public/tags/Yelee/index.html","hash":"ab76216f3b18461e8f31447e345245d0129733d3","modified":1466146946677},{"_id":"public/tags/Font-Awesome/index.html","hash":"1dde70e18f611ca29f7baaa0b129718782c065d5","modified":1466150710068},{"_id":"public/tags/Disqus/index.html","hash":"31d46bb8c74e85f514775abeeaf9e5bb116f1b3f","modified":1466391575690},{"_id":"public/tags/JSON/index.html","hash":"56bc0dc5f1567b017edefbe094f5247817ec57f9","modified":1466391575690},{"_id":"public/tags/WordPress/index.html","hash":"e1f6fb3b9f5b8568bf2c88d29521a3008e3b9839","modified":1466146946677},{"_id":"source/_posts/2016-04-23.angularjs_validate.md","hash":"6fe38017e7d8c4b3f1444c8da9e91f7e63451731","modified":1467082341157},{"_id":"source/_posts/2016-04-25.ui-router_use.md","hash":"d4b83a5b2f9b3c7c4f2765f0e2618e738d2bd4c2","modified":1467082338741},{"_id":"source/_posts/2016-04-27.angularjs_$http_anysc.md","hash":"253c3236e8467112c948974705fb61ac3b11cc3c","modified":1467082336109},{"_id":"source/_posts/2016-04-28.from_ng-options.md","hash":"11a53b1c870db5c0d35d6ec59b5660430424f330","modified":1467082333454},{"_id":"source/_posts/2016-05-03.angularjs_keyboard_event.md","hash":"e55e8ab9f188527d0ec3147199e5bb256c2b3b78","modified":1467082330975},{"_id":"source/_posts/2016-05-04.angularjs_checkbox.md","hash":"629196adf47080254055b2f0ee0648fd4f2418d5","modified":1467082328573},{"_id":"source/_posts/2016-05-05.atom_use_and_plugins.md","hash":"e965ac7561e3ad003863c92cb5fb605bb29cc6d4","modified":1467082316314},{"_id":"source/_posts/2016-05-12.linux_crontab_task.md","hash":"a1c397f32d4cd91e0cae383e5ce03500302f2fe7","modified":1467082304335},{"_id":"source/_posts/2016-05-11.markdown_syntax.md","hash":"f7db55568c2d42b524f2e8f58ab2257bd35de646","modified":1467082311679},{"_id":"source/_posts/2016-05-13.nodejs_online_chat.md","hash":"3a8c78db817830bc6ef9d519c0cfa87484320dd8","modified":1467082298748},{"_id":"source/_posts/2016-05-14.aboutme.md","hash":"3a76d39501a680793f33f4d03b74f99d207dd9ce","modified":1467082292313},{"_id":"source/_posts/2016-05-14.webpack_basic_use.md","hash":"88c34a15b0fff0eef918739146141d6017cd955e","modified":1467082275032},{"_id":"source/_posts/2016-05-16.excel_markdown_table.md","hash":"c328277b45335e1fd9a18cd6f604e7efd384c143","modified":1467082271628},{"_id":"source/_posts/2016-05-16.nodejs_process.md","hash":"fba41fcdb8bab41086ef1a026cb9238a00019fbe","modified":1467082263670},{"_id":"source/_posts/2016-05-17.webpack_loader.md","hash":"e61e6f0df4eb425b6184b5d04c395094cf3df373","modified":1467082255960},{"_id":"source/_posts/2016-05-17.webpack_plugins.md","hash":"5ca57e4f4af9b9bddbd2e8910a9720faa7d61ead","modified":1467082248240},{"_id":"source/_posts/2016-05-18.webpack_params.md","hash":"5e0f33604673fe97aa561435ad95f77feed9a9f9","modified":1467082239768},{"_id":"source/_posts/2016-05-19.es6_syntax.md","hash":"d4b1e3e719751c5d86110b5ae2ca4c0fcfdaa79e","modified":1467082233918},{"_id":"source/_posts/2016-05-19.javasciprt_syntax.md","hash":"503e07a51eb02e5d0d86dffa9fbd60de40871533","modified":1467082227723},{"_id":"source/_posts/2016-05-21.png_gif_transparency.md","hash":"6f7a8e65021836d1e788a8921988aafc3d9c76ee","modified":1467082218551},{"_id":"source/_posts/2016-05-23.anki_templates.md","hash":"2e24424807539a94c4a24d43f7bfd31c30a7fb96","modified":1467082212630},{"_id":"source/_posts/2016-05-24.nodejs_koa.md","hash":"a696b9a1ca467fcba361d1fbcd48f786cc763c38","modified":1467082205172},{"_id":"source/_posts/2016-05-25.sublime_config.md","hash":"a3aba3f373af897d293170a63c46d3c4a87a45ce","modified":1467082194991},{"_id":"source/_posts/2016-05-26.koa_generator.md","hash":"4b375d6daa45d1d3bbfa9d7c7b68adfc791d0639","modified":1467082188684},{"_id":"source/_posts/2016-05-27.mongodb_use.md","hash":"4d458ab9a64bd59cf3ad73c025a3d7ecc8f62066","modified":1467082179941},{"_id":"source/_posts/2016-06-01.npm_modules_share.md","hash":"1250a0c740987f549111777fd0c532baeb5d54d4","modified":1467082165132},{"_id":"source/_posts/2016-05-30.markdownpad2.md","hash":"3ac48defc673ace1afb8fd638d704cc22be9c67e","modified":1467082171359},{"_id":"source/_posts/2016-06-02.nodejs_spider_system.md","hash":"797adca422a88b192deb1f4becce651e73228f9c","modified":1467082156496},{"_id":"source/_posts/2016-06-02.package.json_scripts.md","hash":"4b40a9f7c4d06f3a7cf838c3f11c03a2ab84ae43","modified":1467082151092},{"_id":"source/_posts/2016-06-03.css_font_family.md","hash":"26feb8deaf81353b19590cb4e3706146df84950d","modified":1467082145413},{"_id":"source/_posts/2016-06-04.anki_excel_shortcuts.md","hash":"0b2c259f0e69ab149134a45629682ec3e13550ed","modified":1467082139284},{"_id":"source/_posts/2016-06-05.baidu_share_fontawesome.md","hash":"a125b926f4c21781987a5cf4166ef080eb818b4f","modified":1466148971261},{"_id":"source/_posts/2016-06-05.front_end_tools.md","hash":"617048e91ee42a274f925019f443ec3ad884909b","modified":1467082133128},{"_id":"source/_posts/2016-06-06.windows_mac_software.md","hash":"5a0da1ea488cf0395958997a2f20b9aa4f6432aa","modified":1466151610929},{"_id":"source/_posts/2016-06-07.gulp_use.md","hash":"4ca07af627c79b102e8c0191c4ceb0fc3b63a1ba","modified":1467082111164},{"_id":"source/_posts/2016-06-07.markdown_table_style.md","hash":"6b99ccdd255b58f0072b209261b94e4b7d1f6814","modified":1467082105717},{"_id":"source/_posts/2016-06-17.linux_chmod.md","hash":"b31981fe853a721bf03dfdc390f3f7a232695170","modified":1467082086843},{"_id":"source/_posts/2016-06-17.duoshuo_disqus_comment_ount.md","hash":"02eab2c523631adc822573eb7f11c8fd89dc8c55","modified":1467082094171},{"_id":"source/_posts/2016-06-17.linux_disk.md","hash":"15b74bf12627544bb7db27be8fd5ae440a39af97","modified":1467082080403},{"_id":"source/_posts/2016-06-17.public_dns.md","hash":"ab690a56f3cd3512a88eb32ddb4ffa9e039b7e2c","modified":1467082071562},{"_id":"public/tags/javascript/page/2/index.html","hash":"7671e84d8ea57bb52aed68bd1cd589e1deb9c47c","modified":1469252388331},{"_id":"public/tags/gif/index.html","hash":"cebfd75b90488c245412854befb886d95d25c3a2","modified":1466389868590},{"_id":"public/tags/png/index.html","hash":"0dfac2a778b2e6d9812f4ce3d883d477ee83fd44","modified":1466389868590},{"_id":"public/tags/html/index.html","hash":"0a6385ca659cc1fa65591c06aa5a087a360aaa19","modified":1469252388331},{"_id":"public/tags/css/index.html","hash":"24616d217b4dd8b88007b6345e216011d38f4652","modified":1469252388331},{"_id":"public/tags/git/index.html","hash":"267d3fb67a424a1902ecf8fa33d6bb7cd158d115","modified":1469252388331},{"_id":"public/2016/12/09/css-font-family/index.html","hash":"f262f2013a1031f8ad0781f9c1652ed151cb126d","modified":1466150710058},{"_id":"public/2016/06/17/2016-06-17.duoshuo_disqus_comment_ount/index.html","hash":"1217a7a8afe7637a524739fb9ab2c6da937e8c8a","modified":1466214585825},{"_id":"public/2016/06/17/public_dns/index.html","hash":"68587ce7774fcf2e9bf3774feed72b2d780997dc","modified":1469252388316},{"_id":"public/2016/06/17/linux_chmod/index.html","hash":"85dd7e044ee42abbe306d9ac24d7606ce0926ec4","modified":1469252388316},{"_id":"public/2016/06/17/linux_disk/index.html","hash":"6cc9e56b73fa289668734c9803b6b74fa4351453","modified":1469252388316},{"_id":"public/2016/06/07/markdown-table-style/index.html","hash":"7cdc5baa0cfbf97c0cc085ae2220382d19dea2e3","modified":1469252388316},{"_id":"public/2016/06/07/gulp_use/index.html","hash":"d7cf10120a0eb26da7cba20657525bc47a84a9f0","modified":1469252388316},{"_id":"public/2016/06/06/windows_mac_software/index.html","hash":"1a3025aab3459e72fe4ea7772159d6620a7a89b7","modified":1466391575683},{"_id":"public/2016/06/05/front-end-tools/index.html","hash":"8598924de61c7cfb3ac2799cc61a03dde9a5611a","modified":1469252388316},{"_id":"public/2016/06/05/baidu_share_fontawesome/index.html","hash":"7f0b07f3efff0d5913e2f5bc1f67a312cc5eec65","modified":1466150710061},{"_id":"public/2016/06/04/anki-excel-shortcuts/index.html","hash":"68859483cb84a57a20f55e8f482dc34b91334f3d","modified":1469252388316},{"_id":"public/2016/06/03/node_spider/index.html","hash":"8edda181eb5ef8d27533698bd2213ed3e175a89c","modified":1469252388316},{"_id":"public/2016/06/02/package.json_scripts/index.html","hash":"2a7f7c245bf43f3c125aafebee5d2478f8e8384b","modified":1469252388316},{"_id":"public/2016/06/01/npm_modules_share/index.html","hash":"375f165026f551102d2f59d9a5e566d152281ef5","modified":1469252388316},{"_id":"public/2016/05/30/markdownpad2/index.html","hash":"935d17c208d76ab20a6737b18d7ba6d2a775d687","modified":1469252388316},{"_id":"public/2016/05/27/mongodb_use/index.html","hash":"bcd527a196d3075778b3da13c4403383e13247f2","modified":1469252388316},{"_id":"public/2016/05/26/koa_generator/index.html","hash":"cb408180ac459ec84b2ee6e5936e434dea9a78b5","modified":1469252388316},{"_id":"public/2016/05/24/node_koa/index.html","hash":"317c8ca7fa7a156f706fd3a392857cfbfa4d3f24","modified":1469252388316},{"_id":"public/2016/05/20/javascript_syntax/index.html","hash":"ae8470d1e7ad33ee2b0ce6066a5833277038874b","modified":1469252388316},{"_id":"public/2016/05/19/es6_syntax/index.html","hash":"0573d36ea6245febb0655d928911ed2f82a41790","modified":1469252388316},{"_id":"public/2016/05/17/webpack_plugins/index.html","hash":"a2bfab3aef36244c14463bf457eeb1c5deb185bf","modified":1469252388316},{"_id":"public/2016/05/17/webpack_link/index.html","hash":"050a3defb56ed1de2189a21d871e3831db0b97ce","modified":1469252388316},{"_id":"public/2016/05/17/webpack_params/index.html","hash":"40edd0c81598de31fbeb2299f5b58f6b85ea3755","modified":1469252388316},{"_id":"public/2016/05/16/excel_markdown_table/index.html","hash":"8a796df47ab3158b40fe4717ca8f86f313429c91","modified":1469252388316},{"_id":"public/2016/05/16/node_process/index.html","hash":"4290ba403e6c9852deba8c15340c129af985213b","modified":1469252388316},{"_id":"public/2016/05/14/webpack_basic_use/index.html","hash":"f368f35ee67146915315b27e646c7dec864381cc","modified":1469252388316},{"_id":"public/2016/05/14/about_me/index.html","hash":"cd095d6efc510d92115348f9112c42cd3f5d7c7d","modified":1469252388316},{"_id":"public/2016/05/13/node_online_chat/index.html","hash":"26bed3cbf2252abb0088ce9f4e9dc228d8e9bca5","modified":1469252388316},{"_id":"public/2016/05/12/linux_crontab/index.html","hash":"db598506d121346150af6521c0f3106570b9af9e","modified":1469252388316},{"_id":"public/2016/05/11/ng-checkbox/index.html","hash":"098fb27eff0f87f20983065298d2dc8c363f7774","modified":1469252388316},{"_id":"public/2016/05/11/angular_http/index.html","hash":"6f82c6b93f483a0805321dfd6e0e70fea3bf8780","modified":1469252388316},{"_id":"public/2016/05/11/angular_ui_router/index.html","hash":"fa038025c258b693dcfbcc0b6c4667bc7a7b94c6","modified":1469252388316},{"_id":"public/2016/05/11/ng-options/index.html","hash":"987a844cda0d681d4b19b91ccbeb62ccf31813d6","modified":1469252388316},{"_id":"public/2016/05/11/markdown_syntax/index.html","hash":"f76df2a1f83b5885a22ffdd4571776390f2b1163","modified":1469252388316},{"_id":"public/2016/05/11/angularjs_keyboard_event/index.html","hash":"5ce6fd4cd0ca0583aba9d5c46352a4d0ed71ff9a","modified":1469252388316},{"_id":"public/2016/05/11/atom_plugins/index.html","hash":"0fd2ae4bb6d78800567cd7ed8df757a6c7e61b02","modified":1469252388316},{"_id":"public/2016/05/10/angular_validate/index.html","hash":"abebaeef3cd4b61d629f58496a1af46437dea195","modified":1469252388316},{"_id":"public/2015/11/30/sublime_config/index.html","hash":"54f2ccdc731bc1a5b49b6b2f79033368574ceee8","modified":1469252388316},{"_id":"public/2015/11/23/anki_templates/index.html","hash":"1b9ef4b1e99f92feb0bccd79bd575633552fa0f0","modified":1469252388316},{"_id":"public/2015/11/16/png_gif_transparency/index.html","hash":"290517962fb676ed24f7b3921f3aada1d9699101","modified":1469252388316},{"_id":"public/categories/linux-crontab/index.html","hash":"6aeb09d3ac60098c3a705b7d16842a8a1b776fa7","modified":1469252388316},{"_id":"public/categories/webpack/自动化构建工具/index.html","hash":"2cce5cfeec07717238e45664a5971f4a11cb3d13","modified":1466214585831},{"_id":"public/categories/node/index.html","hash":"633e2de3a7e17724b79b37797cb9611ae91a2b90","modified":1469252388316},{"_id":"public/tags/es6/page/2/index.html","hash":"68748b37fd5a6f8601f005b3f241faa553b78fe6","modified":1466149886287},{"_id":"public/tags/javascript/page/3/index.html","hash":"46df6e2be74c851ae0d640545860df926354ea05","modified":1469252388331},{"_id":"public/tags/angular/index.html","hash":"e2c8d72cb10a993a750c6688bf920fc5ec8e28cb","modified":1469252388331},{"_id":"public/tags/validate/index.html","hash":"8dbc29a1ab9388fe429c23ae34c36e3195fc51a1","modified":1466391575690},{"_id":"public/tags/ui-router/index.html","hash":"c939d6bc3374e17c7c305b397fb5824b5eb1536d","modified":1466391575690},{"_id":"public/tags/http/index.html","hash":"267c23ce8e90ec7f8001f8c62c719f2de35542a8","modified":1466391575690},{"_id":"public/tags/plugins/index.html","hash":"c2deefacdbf7e360b3beec93776b406971e88311","modified":1466391575690},{"_id":"public/tags/开发工具/index.html","hash":"b6551d23c3803ba3f93948efa97eb3c7bc225124","modified":1469252388331},{"_id":"public/tags/定时任务/index.html","hash":"9c8591a6cc7faad6e1c2b1bad2f2b4a98821937a","modified":1466391575690},{"_id":"public/tags/博客/index.html","hash":"7e62aaa93c0bd43f46647350e5b13cba6d45bf81","modified":1466391575690},{"_id":"public/tags/telnet/index.html","hash":"4fb703552fd2db480b2fa64e79d976fec5f4b3cb","modified":1466391575690},{"_id":"public/tags/关于我/index.html","hash":"e09a6c5d18a9c3c98b3c4fb78666d5b58208e21f","modified":1466391575690},{"_id":"public/tags/自动化构建工具/index.html","hash":"3e32b89deddeef052ee146595d9d0f11ad2b3a3b","modified":1466392437126},{"_id":"public/tags/loaders/index.html","hash":"515e579769dbd229083d3ea33607ef3b53bd6d2e","modified":1466214585838},{"_id":"public/tags/es5/index.html","hash":"bc5b4226598022bc4813aa5910d411abd5717f44","modified":1469252388331},{"_id":"public/tags/node/index.html","hash":"7ed0cd0cdecd0116876370ac020651a2f84ad022","modified":1469252388331},{"_id":"public/tags/node/page/2/index.html","hash":"90553faa2dc3f542465de1ff5d44c72ab3940c4b","modified":1469252388331},{"_id":"public/tags/koa/index.html","hash":"63a20d69b12fa6b23ac392dd141815ce4e3a4853","modified":1469252388331},{"_id":"public/tags/爬虫/index.html","hash":"4c0b86d7e9cab74f9050bb2fc75c1e8dccf30812","modified":1466391575691},{"_id":"public/tags/javscript/index.html","hash":"213e87d87514dd016e1ba4674a8ede2dc359ea79","modified":1466392437126},{"_id":"public/tags/script/index.html","hash":"359d5e5f8f63a60112d94393ca3bd41b6eefb711","modified":1466391575691},{"_id":"public/tags/服务器/index.html","hash":"bf7215e2c5eba16be8195e8c21cc843418c286a6","modified":1466391575691},{"_id":"public/tags/liux/index.html","hash":"f1819f79fd754f813993a8e22211db90bc92230d","modified":1466150496545},{"_id":"public/tags/硬盘/index.html","hash":"92ef60aa1f6a814645ce49337e5bb4d654f8e454","modified":1466214585839},{"_id":"public/2016/06/03/css-font-family/index.html","hash":"ca3e2fb0d10a8654c51995da00ec5d79f703a71d","modified":1469252388316},{"_id":"public/2016/06/17/duoshuo_comment/index.html","hash":"40728f0a665b753eb64b2dd79857cf85a5550245","modified":1469252388316},{"_id":"public/categories/webpack/javascript/index.html","hash":"9b00819e244e1c4dd1cbe141fab55e0ee8e879f9","modified":1469252388316},{"_id":"public/categories/webpack/javascript/node/index.html","hash":"f7357d9d1339a884d9374fd89f3632ccea61da79","modified":1469252388316},{"_id":"public/categories/webpack/javascript/node/自动化构建工具/index.html","hash":"1fdef5312ba279219231750783a9894d9219e2ef","modified":1466391575693},{"_id":"public/tags/前端/index.html","hash":"9c0cb38a4a144e210fca57937f2439406ec7d84b","modified":1466391575693},{"_id":"public/tags/excel/index.html","hash":"c94b16436dcaaae7b554c41a7a36010c066dd739","modified":1469252388331},{"_id":"public/tags/jquery/index.html","hash":"7784bb7c70b46845f94c10c430921b7063f0c84b","modified":1469252388331},{"_id":"public/categories/webpack/javascript/node/开发工具/index.html","hash":"e361b169f700e5c5f0e3c92ee3f1a41d01daa037","modified":1469252388316},{"_id":"public/categories/开发工具/index.html","hash":"ef00177ca5fa65815051fb8dcb768de16ca24a32","modified":1469252388316},{"_id":"source/_posts/2016-06-20.react_environment.md","hash":"a10b09c057b069ba7963ceb5439c8fffff07095b","modified":1467082024210},{"_id":"public/2016/06/29/react_environment/index.html","hash":"2a3d740fec11b1c179195662adf32bbd73c6bc1b","modified":1466589260472},{"_id":"public/categories/前端框架/index.html","hash":"f6f86656d1f79cc8446e34186a600b9d035f855f","modified":1469252388331},{"_id":"public/tags/reactjs/index.html","hash":"4c8047f621d1c89fa814862e7137a3905ed75cfa","modified":1469252388331},{"_id":"source/_posts/2016-06-22.angular2语法学习笔记.md","hash":"884885f17b5d096a72b78bfb7c80ce1d0db81037","modified":1466589241175},{"_id":"public/2016/06/22/angular2_study/index.html","hash":"b9e1909e17c56302d82d796978443e0e8bad6852","modified":1466589260472},{"_id":"public/tags/sass/index.html","hash":"9a4808976e97a5732a7d79d09390cec112e48024","modified":1469252388331},{"_id":"public/tags/typescript/index.html","hash":"557709f2fe7ee7b9f751bb0f3581a775a2ac3e40","modified":1469252388331},{"_id":"source/_posts/2016-06-22.angular2_study_note_component.md","hash":"8d06dfd25443e22daabfa3abba0145ff84748a0e","modified":1467082023620},{"_id":"source/_posts/2016-06-22.angular2_study_note_environment.md","hash":"f3e76ddc811e8a1010b094cb53c6621757c8d4fb","modified":1467082023045},{"_id":"source/_posts/2016-06-24.angular2_study_note_ngfor.md","hash":"aadf9855d82068303a49ca79fa2690b1c34ed35b","modified":1467008829494},{"_id":"public/2016/06/22/angular2_study_note_component/index.html","hash":"47fcab5023c271bd4ecf30303a562f90f7b72625","modified":1467016614047},{"_id":"public/2016/06/22/angular2_study_note_environment/index.html","hash":"5e96703e9f9d33b67c4082cfa7d89aee169655c8","modified":1469252388316},{"_id":"public/2016/06/21/react_environment/index.html","hash":"b0fc1b659d5629728a9b18ce6a172c1fbc6b47c4","modified":1469252388316},{"_id":"public/categories/angular2/index.html","hash":"a5eb8476959e964113f821bbe8b15c7ca05e707e","modified":1469252388331},{"_id":"public/tags/angular2/index.html","hash":"bd416c55c32c05d375450fc2b5706221a408ac33","modified":1469252388331},{"_id":"source/_posts/2016-06-23.angular2_study_note_environment.md","hash":"f3e76ddc811e8a1010b094cb53c6621757c8d4fb","modified":1467082023045},{"_id":"source/_posts/2016-06-24.angular2_study_note_click_event.md","hash":"0d6603ce96831e1e1659d63212552833d5431515","modified":1467257219980},{"_id":"public/2016/06/24/angular2_study_note_click_event/index.html","hash":"e7d877e3306db27fa57a771652efd015499ff569","modified":1467013388868},{"_id":"public/2016/06/23/angular2_study_note_environment/index.html","hash":"244c283c1b6e8253ac59d067f9314b5ee42ba9b1","modified":1467016614046},{"_id":"source/_posts/2016-06-25.angular2_study_note_ng-tag.md","hash":"88fa775bc1992b987bdd4d2e44508d9b49ece994","modified":1467273135720},{"_id":"public/2016/06/25/angular2_study_note_ng-tag/index.html","hash":"093735d028a7b26a4e905b422efabc0d814652b8","modified":1469252388316},{"_id":"public/2016/06/24/angular2_study_note_ng-tag/index.html","hash":"217f5a9e7f043118809f21876b200345b629216c","modified":1469252388316},{"_id":"public/2016/06/23/angular2_study_note_component/index.html","hash":"c54c1871270d841cee54b2e3a97cac5d027b58b2","modified":1469252388316},{"_id":"source/_posts/2016-06-26.angular2_study_note_other.md","hash":"99682928775ea8b29d051555258fe4ce10a27f8d","modified":1467278859601},{"_id":"source/_posts/2016-06-27.angular2_study_service_http.md","hash":"fef2a77aaf0e35f55a074d95ec20ac36e25a6b98","modified":1467082043053},{"_id":"public/2016/06/27/angular2_study_service_http/index.html","hash":"cd7256add6e0715088d8d89f43b3e634e538cb6c","modified":1469252388316},{"_id":"public/2016/06/26/angular2_study_note_other/index.html","hash":"4f84cbd0edb083d8a10f4ab122311f972073046c","modified":1469252388316},{"_id":"public/tags/webpack/page/2/index.html","hash":"cd3b18a22a00fe47bd5e18c591dab16d01a7cf33","modified":1469252388331},{"_id":"source/_posts/2016-06-28.angular2_study_form.md","hash":"a567137dabc6c2e7b9b31dce8fa330f2b5e4a2a5","modified":1467277899051},{"_id":"source/_posts/2016-06-29.angular2_study_router.md","hash":"3edeeb3d0b8a7b43dc620fc5be0f5935f38b4257","modified":1467082051388},{"_id":"source/_posts/2016-06-30.angular2_study_test.md","hash":"a7aaedb754cc15e81c3bf86cbd5fee78590325cd","modified":1467082055780},{"_id":"public/2016/06/29/angular2_study_test/index.html","hash":"92db020b5af6664aa3a5aed229b23b99166236ff","modified":1467194839840},{"_id":"public/2016/06/29/angular2_study_forms/index.html","hash":"903e5f6e206baf980f026cf84c4c9076326822fb","modified":1469252388316},{"_id":"public/2016/06/28/angular2_study_forms/index.html","hash":"df24844332e4dcf2ab65678653c3df095213801b","modified":1469252388316},{"_id":"source/_posts/2016-07-01.year_2016_study_plan.md","hash":"3e95f3aa31de0f8d76c28ee461a470e838d35f29","modified":1467260887355},{"_id":"public/2016/07/01/2016_study_plan/index.html","hash":"dcceb69f78538b90a3391ba42a829bcc0d23ee7d","modified":1469252388316},{"_id":"public/categories/生活/index.html","hash":"54a62a248c79b8bbe0ffc1d19aec98eaa5fce8fb","modified":1469252388331},{"_id":"source/_posts/2016-07-02.javascript_design_pattern.md","hash":"c251819656994bc22e4c9f11f6577d3b15cc71d3","modified":1467082060745},{"_id":"public/2016/07/01/javascript_design_pattern/index.html","hash":"d1da6c9911f021390beb1be5f2fcbf32cb16835d","modified":1467038044128},{"_id":"public/2016/07/02/javascript_design_pattern/index.html","hash":"10de6d4410be345c40dc32ae86ad6ab159af7caf","modified":1469252388316},{"_id":"source/_posts/2016-06-23.angular2_study_note_component.md","hash":"8d06dfd25443e22daabfa3abba0145ff84748a0e","modified":1467082023620},{"_id":"source/_posts/2016-07-03.angular2_study_animate.md","hash":"a08d3f80152c9bb913731e5bd7cdc435adcb4621","modified":1467176109662},{"_id":"public/2016/07/02/angular2_study_animate/index.html","hash":"42694029673ceead5aa608ffb1f330706efc1398","modified":1467194839850},{"_id":"source/_posts/2016-06-30.angular2_study_animate.md","hash":"f10113af3c1428616f35a1de3b280ba8c5f14692","modified":1467260442628},{"_id":"public/2016/06/30/angular2_study_animate/index.html","hash":"d9fe6406ea5efdf954d30f5db066b0c8b4cfcd9f","modified":1469252388316},{"_id":"source/_posts/2016-07-12.rxjs_study.md","hash":"a8230a173f78f731303574e0a546a421beac6d89","modified":1468310060090},{"_id":"public/2016/07/12/javascript_rxjs_study_1/index.html","hash":"86fd287d6a854fb70270bfd054c9a3b6959394aa","modified":1469252388316},{"_id":"public/tags/rxjs/index.html","hash":"06cd8342a78a1ff4ef10a6cb5f9108384aaf2265","modified":1469252388331},{"_id":"source/_posts/2016-07-21.angular_api.md","hash":"484c81a695c2cb1f36b29eaf646ed71de7c51dc5","modified":1469085600118},{"_id":"public/2016/07/12/angular2_api/index.html","hash":"4fc75007ae966cea8d660833f919e665ba3d1be4","modified":1469085471776},{"_id":"public/categories/angular2/page/2/index.html","hash":"0e5798ee03680c18d8848a44e2b6e9adbe2110a9","modified":1469252388331},{"_id":"public/tags/angular2/page/2/index.html","hash":"252a716038d122518410035383f35315ad055e90","modified":1469252388331},{"_id":"public/2016/07/21/angular2_api/index.html","hash":"26840c4564ba6d549d65cf27cdd43bda8799a9ef","modified":1469085852415},{"_id":"source/_posts/2016-07-21.angular_api_common.md","hash":"3135377d3c8d759c16f42f8316a078362e61ae4c","modified":1469090471777},{"_id":"source/_posts/2016-07-22.angular_api_core.md","hash":"4a031dd4eb1d590a8eb087dcc730530d6cd7216e","modified":1469243558846},{"_id":"source/_posts/2016-07-23.angular_api_http.md","hash":"2e9fd7318b0459c33341e95fd9436e62cb65ab66","modified":1469091144746},{"_id":"source/_posts/2016-07-25.angular_api_compiler.md","hash":"36869553d14e696eb6f084a073d569e17bbbcba9","modified":1469091137183},{"_id":"source/_posts/2016-07-24.angular_api_forms.md","hash":"316262290ea91c4797b6e08d03f5e63ed0f42a9e","modified":1469091140473},{"_id":"source/_posts/2016-07-26.angular_api_platform-browser.md","hash":"b7a53ba4d2e1b024f8a64b6bcec3646fbcc239cb","modified":1469091113279},{"_id":"source/_posts/2016-07-27.angular_api_platform-browser-dynamic.md","hash":"cf0b126ee72d2537127ecb81554e7f595f7d8f5e","modified":1469091132017},{"_id":"source/_posts/2016-07-28.angular_api_router.md","hash":"940899b283b208e71055b40747395e715c6a82cb","modified":1469252352019},{"_id":"public/2016/07/28/angular2_api_roter/index.html","hash":"7231592ecde1263691f75f7d71132c7bb616a789","modified":1469252388316},{"_id":"public/2016/07/27/angular2_api_platform-browser-dynamic/index.html","hash":"50c8c288e09599ec1eccb1305d7ccb49c7d8aa29","modified":1469252388316},{"_id":"public/2016/07/26/angular2_api_platform-browser/index.html","hash":"8074343ba0b4817090b6dde5f9274fa2cea0b16d","modified":1469252388316},{"_id":"public/2016/07/25/angular2_api_compiler/index.html","hash":"f5e1bbb444f8dea19fde0bb5172dfe59a0ed6b68","modified":1469252388316},{"_id":"public/2016/07/24/angular2_api_forms/index.html","hash":"346c68ddb17e565442ad2f902a028607524faad6","modified":1469252388316},{"_id":"public/2016/07/23/angular2_api_http/index.html","hash":"701dd8177561dd7c2309bd043778c1386e0cb36e","modified":1469252388316},{"_id":"public/2016/07/22/angular2_api_core/index.html","hash":"296f0b4e760bee936d839d238cb0598a799f1e52","modified":1469252388316},{"_id":"public/2016/07/21/angular2_api_common/index.html","hash":"71fe0bcad3c55b4f6ef853579eb838ed26828bcd","modified":1469252388316}],"Category":[{"name":"angularjs表单验证","_id":"ciphvpgyn0005scmcdhcydd90"},{"name":"angularjs增删改查","_id":"ciphvpgz3000cscmc2kbxkhj4"},{"name":"ng-options","_id":"ciphvpgzc000jscmcuqffoufb"},{"name":"angularjs之ui-router","_id":"ciphvpgzh000pscmcgzeo0p08"},{"name":"markdown","_id":"ciphvpgzm000vscmcip5awyxh"},{"name":"nodejs之net模块","_id":"ciphvpgzx0012scmcs3j076ke"},{"name":"生活随笔","_id":"ciphvph020018scmcz5oezgbh"},{"name":"linux的crontab","_id":"ciphvph06001gscmcv69f0rv7"},{"name":"自动化构建工具","_id":"ciphvph0f001nscmc4z84ia6h"},{"name":"nodejs之process","_id":"ciphvph0p001vscmcvlkx38xw"},{"name":"webpack处理器","_id":"ciphvph0u0023scmc4thbcvhs"},{"name":"webpack","_id":"ciphvph0x002ascmcn1y661qn"},{"name":"webpack插件","_id":"ciphvph0y002escmc2z4653bl"},{"name":"es6","_id":"ciphvph0z002iscmck2e5wnrv"},{"name":"koa","_id":"ciphvph10002mscmcbh1qbhyw"},{"name":"javascript","_id":"ciphvph11002qscmc76gsz76a"},{"name":"mongodb","_id":"ciphvph15002yscmcqgggofjz"},{"name":"angularjs键盘事件","_id":"ciphvph170032scmc7e7nd3nu"},{"name":"ng-checkbox","_id":"ciphvph170035scmc27c6jwrl"},{"name":"atom插件","_id":"ciphvph180037scmcp0mekcbn"},{"name":"npm","_id":"ciphvph190039scmcllaivg9q"},{"name":"nodejs","_id":"ciphvph1a003bscmcnghypjkn"},{"name":"gulp","_id":"ciphvph1b003fscmcjqqcrdav"},{"name":"linux","_id":"cipj3e6ug0002x0mcupcvo4pm"},{"name":"linux磁盘挂载","_id":"cipj3unqq0001m8mc2ls5t6si"},{"name":"linux权限操作","_id":"cipj47bs10002wgmc6j1w3s27"},{"name":"术业专攻","_id":"cipje13hf0004fcmc73jta0ld"},{"name":"触类旁通","_id":"cipje13hl0009fcmcpo8hxkqz"},{"name":"自用笔记","_id":"cipje13i0000qfcmckwnh5vaf"},{"name":"术业专攻","parent":"cipje13i0000qfcmckwnh5vaf","_id":"cipje13ia0015fcmc56csnpn9"},{"name":"linux-crontab","_id":"cipjfs5ty000k4wmckbdw57gq"},{"name":"自动化构建工具","parent":"ciphvph0x002ascmcn1y661qn","_id":"cipjfs5ut001l4wmc8mb00lcz"},{"name":"node","_id":"cipjfs5vo002m4wmcmlxmgy7r"},{"name":"javascript","parent":"ciphvph0x002ascmcn1y661qn","_id":"cipnfoiyg00042cmc8afwtrsc"},{"name":"node","parent":"cipnfoiyg00042cmc8afwtrsc","_id":"cipnfoiyt00082cmcs3p7s7e5"},{"name":"自动化构建工具","parent":"cipnfoiyt00082cmcs3p7s7e5","_id":"cipnfoiyu00092cmcbho63ado"},{"name":"开发工具","parent":"cipnfoiyt00082cmcs3p7s7e5","_id":"cipng1u160003acmcspzpza8w"},{"name":"开发工具","_id":"cipng6zt500002omcebgk4vwk"},{"name":"前端框架","_id":"cipnrw0ab000234mct8yl0rn1"},{"name":"angular2","_id":"cipxmbse70003jsmc527q6h4u"},{"name":"生活","_id":"cipxux8tx0002jomcgbi58yva"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"_content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\">\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\n---\n<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\">\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","date":"2016-06-16T09:33:32.278Z","updated":"2016-06-16T09:33:32.246Z","path":"/404.html","_id":"ciphvpgy80000scmc7uha0i2a","layout":"page","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\"><br><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n        display: none;\n    }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\"><br><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"xiaomo\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n"},{"title":"关于我 & 留言板","date":"2015-09-30T12:31:36.000Z","fancybox":false,"_content":"\n<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px ;\n\t\theight: 56px ;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n</style>\n\n---\n\n　　**2015年6月，从毕业仪式完成的那一刻，我似乎长大了不少。终于可以将自己热衷的变成应用到实现的工作中，开始了我的编程之路 <span>——</span> java游戏开发工程师。渐渐的，我对前端的热爱越来越不能自拔，为能如愿转职，开始利用业余时间，努力钻研，希望这一天尽早到来！**\n\n<p class=\"sign\"><span>——</span>小莫</p>\n\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"chrome\">\n\n**开博缘由:**\n> 在建立改造博客网站的过程中，学习和巩固前端基本知识；\n> 通过写博客的方式，加深理解，显性化自己的隐性知识；\n> 共享知识，吸引同好，交流进步。\n\n\n**人生历程:**\n > 1. 1992年出生于湖北；\n > 1. 2011年考入武汉工商学院-电子商务系；\n > 1. 2015年毕业,然后在杭州实习；\n > 1. 2014年曾供职于东忠集团、中智汇；\n > 1. 2015年毕业后参与java游戏的开发并专注于前端技术的学习和研究。\n\n\n**学习前端前的一些个人相关信息和经验:**\n > 1. 非计算机类专业，文科生，编程经验基本为零；\n > 1. 能流畅阅读大部分英文资料；\n > 1. 经常折腾各种系统、软件和手机 APP；\n > 1. 善用利用搜索解决各类问题；\n > 1. 追求“秩序”，喜欢把各种事物变得井井有条。\n \n \n **兴趣东好:**\n  > 1. 爱上网 ；\n  > 1. 爱游戏 ；\n  > 1. 爱打球 ；\n  > 1. 爱折腾 ；\n  > 1. 爱编程 。\n\n**欢迎交流:**\n> 个人邮件及社交网站等信息见左侧边栏底部；\n> 有什么留言或问题直接在文末留下评论即可。\n\n<hr>\n**最近访客:**\n<ul class=\"ds-recent-visitors\" data-num-items=\"46\" data-avatar-size=\"40\"></ul>\n","source":"about/index.md","raw":"title: 关于我 & 留言板\ndate: 2015-09-30 20:31:36\nfancybox: false\n---\n\n<style type=\"text/css\">\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.player {\n\t\ttext-align: center;\n\t\tmargin: .5em auto 0;\n\t\twidth: 100%;\n\t\tmax-width: 22em;\n\t}\n\t.player br {\n\t\tdisplay: none;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n\t#ds-recent-visitors {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\t#ds-recent-visitors div img {\n\t\tdisplay: inline-block !important;\n\t\twidth: 56px ;\n\t\theight: 56px ;\n\t\tborder-radius: 50%;\n\t\tborder: 1px solid #ddd;\n\t\tpadding: 2px;\n\t}\n\t.article-entry img:first-child {\n\t\tdisplay: block;\n\t}\n\t.article-entry span {\n\t\tfont-family: Arial;\n\t}\n\t#ds-hot-posts {\n\t\tdisplay: none;\n\t}\n</style>\n\n---\n\n　　**2015年6月，从毕业仪式完成的那一刻，我似乎长大了不少。终于可以将自己热衷的变成应用到实现的工作中，开始了我的编程之路 <span>——</span> java游戏开发工程师。渐渐的，我对前端的热爱越来越不能自拔，为能如愿转职，开始利用业余时间，努力钻研，希望这一天尽早到来！**\n\n<p class=\"sign\"><span>——</span>小莫</p>\n\n<img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"chrome\">\n\n**开博缘由:**\n> 在建立改造博客网站的过程中，学习和巩固前端基本知识；\n> 通过写博客的方式，加深理解，显性化自己的隐性知识；\n> 共享知识，吸引同好，交流进步。\n\n\n**人生历程:**\n > 1. 1992年出生于湖北；\n > 1. 2011年考入武汉工商学院-电子商务系；\n > 1. 2015年毕业,然后在杭州实习；\n > 1. 2014年曾供职于东忠集团、中智汇；\n > 1. 2015年毕业后参与java游戏的开发并专注于前端技术的学习和研究。\n\n\n**学习前端前的一些个人相关信息和经验:**\n > 1. 非计算机类专业，文科生，编程经验基本为零；\n > 1. 能流畅阅读大部分英文资料；\n > 1. 经常折腾各种系统、软件和手机 APP；\n > 1. 善用利用搜索解决各类问题；\n > 1. 追求“秩序”，喜欢把各种事物变得井井有条。\n \n \n **兴趣东好:**\n  > 1. 爱上网 ；\n  > 1. 爱游戏 ；\n  > 1. 爱打球 ；\n  > 1. 爱折腾 ；\n  > 1. 爱编程 。\n\n**欢迎交流:**\n> 个人邮件及社交网站等信息见左侧边栏底部；\n> 有什么留言或问题直接在文末留下评论即可。\n\n<hr>\n**最近访客:**\n<ul class=\"ds-recent-visitors\" data-num-items=\"46\" data-avatar-size=\"40\"></ul>\n","updated":"2016-06-17T01:46:22.043Z","path":"about/index.html","_id":"ciphvpgyh0002scmclao4tcl9","comments":1,"layout":"page","content":"<style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px ;\n        height: 56px ;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n</style>\n\n<hr>\n<p>　　<strong>2015年6月，从毕业仪式完成的那一刻，我似乎长大了不少。终于可以将自己热衷的变成应用到实现的工作中，开始了我的编程之路 <span>——</span> java游戏开发工程师。渐渐的，我对前端的热爱越来越不能自拔，为能如愿转职，开始利用业余时间，努力钻研，希望这一天尽早到来！</strong></p>\n<p class=\"sign\"><span>——</span>小莫</p>\n\n<p><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"chrome\"></p>\n<p><strong>开博缘由:</strong></p>\n<blockquote>\n<p>在建立改造博客网站的过程中，学习和巩固前端基本知识；<br>通过写博客的方式，加深理解，显性化自己的隐性知识；<br>共享知识，吸引同好，交流进步。</p>\n</blockquote>\n<p><strong>人生历程:</strong></p>\n<blockquote>\n<ol>\n<li>1992年出生于湖北；</li>\n<li>2011年考入武汉工商学院-电子商务系；</li>\n<li>2015年毕业,然后在杭州实习；</li>\n<li>2014年曾供职于东忠集团、中智汇；</li>\n<li>2015年毕业后参与java游戏的开发并专注于前端技术的学习和研究。</li>\n</ol>\n</blockquote>\n<p><strong>学习前端前的一些个人相关信息和经验:</strong></p>\n<blockquote>\n<ol>\n<li>非计算机类专业，文科生，编程经验基本为零；</li>\n<li>能流畅阅读大部分英文资料；</li>\n<li>经常折腾各种系统、软件和手机 APP；</li>\n<li>善用利用搜索解决各类问题；</li>\n<li>追求“秩序”，喜欢把各种事物变得井井有条。</li>\n</ol>\n</blockquote>\n<p> <strong>兴趣东好:</strong></p>\n<blockquote>\n<ol>\n<li>爱上网 ；</li>\n<li>爱游戏 ；</li>\n<li>爱打球 ；</li>\n<li>爱折腾 ；</li>\n<li>爱编程 。</li>\n</ol>\n</blockquote>\n<p><strong>欢迎交流:</strong></p>\n<blockquote>\n<p>个人邮件及社交网站等信息见左侧边栏底部；<br>有什么留言或问题直接在文末留下评论即可。</p>\n</blockquote>\n<p><hr><br><strong>最近访客:</strong></p>\n<ul class=\"ds-recent-visitors\" data-num-items=\"46\" data-avatar-size=\"40\"></ul>\n","excerpt":"","more":"<style type=\"text/css\">\n    strong a {\n        color: #747474;\n    }\n    .player {\n        text-align: center;\n        margin: .5em auto 0;\n        width: 100%;\n        max-width: 22em;\n    }\n    .player br {\n        display: none;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n    #ds-recent-visitors {\n        margin: 0;\n        padding: 0;\n    }\n    #ds-recent-visitors div img {\n        display: inline-block !important;\n        width: 56px ;\n        height: 56px ;\n        border-radius: 50%;\n        border: 1px solid #ddd;\n        padding: 2px;\n    }\n    .article-entry img:first-child {\n        display: block;\n    }\n    .article-entry span {\n        font-family: Arial;\n    }\n    #ds-hot-posts {\n        display: none;\n    }\n</style>\n\n<hr>\n<p>　　<strong>2015年6月，从毕业仪式完成的那一刻，我似乎长大了不少。终于可以将自己热衷的变成应用到实现的工作中，开始了我的编程之路 <span>——</span> java游戏开发工程师。渐渐的，我对前端的热爱越来越不能自拔，为能如愿转职，开始利用业余时间，努力钻研，希望这一天尽早到来！</strong></p>\n<p class=\"sign\"><span>——</span>小莫</p>\n\n<p><img src=\"http://static.xiaomo.info/images/aboutme.gif\" title=\"chrome\"></p>\n<p><strong>开博缘由:</strong></p>\n<blockquote>\n<p>在建立改造博客网站的过程中，学习和巩固前端基本知识；<br>通过写博客的方式，加深理解，显性化自己的隐性知识；<br>共享知识，吸引同好，交流进步。</p>\n</blockquote>\n<p><strong>人生历程:</strong></p>\n<blockquote>\n<ol>\n<li>1992年出生于湖北；</li>\n<li>2011年考入武汉工商学院-电子商务系；</li>\n<li>2015年毕业,然后在杭州实习；</li>\n<li>2014年曾供职于东忠集团、中智汇；</li>\n<li>2015年毕业后参与java游戏的开发并专注于前端技术的学习和研究。</li>\n</ol>\n</blockquote>\n<p><strong>学习前端前的一些个人相关信息和经验:</strong></p>\n<blockquote>\n<ol>\n<li>非计算机类专业，文科生，编程经验基本为零；</li>\n<li>能流畅阅读大部分英文资料；</li>\n<li>经常折腾各种系统、软件和手机 APP；</li>\n<li>善用利用搜索解决各类问题；</li>\n<li>追求“秩序”，喜欢把各种事物变得井井有条。</li>\n</ol>\n</blockquote>\n<p> <strong>兴趣东好:</strong></p>\n<blockquote>\n<ol>\n<li>爱上网 ；</li>\n<li>爱游戏 ；</li>\n<li>爱打球 ；</li>\n<li>爱折腾 ；</li>\n<li>爱编程 。</li>\n</ol>\n</blockquote>\n<p><strong>欢迎交流:</strong></p>\n<blockquote>\n<p>个人邮件及社交网站等信息见左侧边栏底部；<br>有什么留言或问题直接在文末留下评论即可。</p>\n</blockquote>\n<p><hr><br><strong>最近访客:</strong></p>\n<ul class=\"ds-recent-visitors\" data-num-items=\"46\" data-avatar-size=\"40\"></ul>\n"},{"title":"search","date":"2016-06-15T02:10:10.000Z","_content":"# 搜索\nsearch:\n    path: search/search.xml","source":"search/index.md","raw":"---\ntitle: search\ndate: 2016-06-15 10:10:10\n---\n# 搜索\nsearch:\n    path: search/search.xml","updated":"2016-06-15T02:10:30.069Z","path":"search/index.html","comments":1,"layout":"page","_id":"ciphvpgyn0006scmc1swj16gr","content":"<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><p>search:<br>    path: search/search.xml</p>\n","excerpt":"","more":"<h1 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h1><p>search:<br>    path: search/search.xml</p>\n"},{"title":"tags","date":"2016-06-15T03:24:53.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-15 11:24:53\n---\n","updated":"2016-06-15T03:24:53.636Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciphvpgyr0008scmc1w6xoob1","content":"","excerpt":"","more":""}],"Post":[{"author":"小莫","date":"2016-05-09T16:00:00.000Z","title":"angularjs的验证系统","_content":"使用angularjs的验证系统来做前端验证需要注意的一些地方\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、 效果图\n ![angularjs验证效果图](http://static.xiaomo.info/images/validate.gif)\n## 二、 要点\n### 1：form\n给form起一个名字,并禁掉原生的验证\n### 2. 显示时机\n\n这个div是要在内容发生变化且不合法才会显示\n\n\n```\n   <div class=\"error\" ng-show=\"addBlogForm.title.$dirty && addBlogForm.title.$invalid\">\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.required\">请输入标题内容</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.minlength\">标题内容最少长度为3</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.maxlength\">标题最大长度为64</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.unique\">\n                        这个标题己经被用过了，请换一个标题吧\n                    </small>\n     </div>\n```\n\n### 3. 格式\n格式为fromName.inputName.$error.xxx   例子如上\n\n### 4. 判断\n将提交按钮是否可用交给ng来判断:合法的时候才可用\n\n>代码示例\n\n```\n <button ng-click=\"addBlog()\" class=\"btn btn-info\" ng-disabled=\"addBlogForm.$invalid\">添加博客\n```\n## 三、插件\n 以上介绍的是angularjs的原生的验证，下面是一些关于验证的扩展插件\n\n|所属|名字|\n| :-----: |:-----:|\n|angular-ui|ng-messages|\n|第三方扩展| w5cValidator|\n|jquery-validate|JQ的插件|\n\n## 四、 github\n附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","source":"_posts/2016-04-23.angularjs_validate.md","raw":"---\nauthor: 小莫\ndate: 2016-05-10\ntitle: angularjs的验证系统\ntags:\n- angular\n- javascript\ncategory: angularjs表单验证\npermalink: angular_validate\n---\n使用angularjs的验证系统来做前端验证需要注意的一些地方\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、 效果图\n ![angularjs验证效果图](http://static.xiaomo.info/images/validate.gif)\n## 二、 要点\n### 1：form\n给form起一个名字,并禁掉原生的验证\n### 2. 显示时机\n\n这个div是要在内容发生变化且不合法才会显示\n\n\n```\n   <div class=\"error\" ng-show=\"addBlogForm.title.$dirty && addBlogForm.title.$invalid\">\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.required\">请输入标题内容</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.minlength\">标题内容最少长度为3</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.maxlength\">标题最大长度为64</small>\n                    <small class=\"error\" ng-show=\"addBlogForm.title.$error.unique\">\n                        这个标题己经被用过了，请换一个标题吧\n                    </small>\n     </div>\n```\n\n### 3. 格式\n格式为fromName.inputName.$error.xxx   例子如上\n\n### 4. 判断\n将提交按钮是否可用交给ng来判断:合法的时候才可用\n\n>代码示例\n\n```\n <button ng-click=\"addBlog()\" class=\"btn btn-info\" ng-disabled=\"addBlogForm.$invalid\">添加博客\n```\n## 三、插件\n 以上介绍的是angularjs的原生的验证，下面是一些关于验证的扩展插件\n\n|所属|名字|\n| :-----: |:-----:|\n|angular-ui|ng-messages|\n|第三方扩展| w5cValidator|\n|jquery-validate|JQ的插件|\n\n## 四、 github\n附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","slug":"angular_validate","published":1,"updated":"2016-06-28T02:52:21.157Z","_id":"cipjfs5sd00004wmcfn519w9f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用angularjs的验证系统来做前端验证需要注意的一些地方<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><p> <img src=\"http://static.xiaomo.info/images/validate.gif\" alt=\"angularjs验证效果图\"></p>\n<h2 id=\"二、-要点\"><a href=\"#二、-要点\" class=\"headerlink\" title=\"二、 要点\"></a>二、 要点</h2><h3 id=\"1：form\"><a href=\"#1：form\" class=\"headerlink\" title=\"1：form\"></a>1：form</h3><p>给form起一个名字,并禁掉原生的验证</p>\n<h3 id=\"2-显示时机\"><a href=\"#2-显示时机\" class=\"headerlink\" title=\"2. 显示时机\"></a>2. 显示时机</h3><p>这个div是要在内容发生变化且不合法才会显示</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$dirty &amp;&amp; addBlogForm.title.$invalid\"</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.required\"</span>&gt;请输入标题内容&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.minlength\"</span>&gt;标题内容最少长度为<span class=\"number\">3</span>&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.maxlength\"</span>&gt;标题最大长度为<span class=\"number\">64</span>&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.unique\"</span>&gt;</span><br><span class=\"line\">                     这个标题己经被用过了，请换一个标题吧</span><br><span class=\"line\">                 &lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式\"><a href=\"#3-格式\" class=\"headerlink\" title=\"3. 格式\"></a>3. 格式</h3><p>格式为fromName.inputName.$error.xxx   例子如上</p>\n<h3 id=\"4-判断\"><a href=\"#4-判断\" class=\"headerlink\" title=\"4. 判断\"></a>4. 判断</h3><p>将提交按钮是否可用交给ng来判断:合法的时候才可用</p>\n<blockquote>\n<p>代码示例</p>\n</blockquote>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"addBlog()\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-info\"</span> ng-disabled=<span class=\"string\">\"addBlogForm.$invalid\"</span>&gt;添加博客</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、插件\"><a href=\"#三、插件\" class=\"headerlink\" title=\"三、插件\"></a>三、插件</h2><p> 以上介绍的是angularjs的原生的验证，下面是一些关于验证的扩展插件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">所属</th>\n<th style=\"text-align:center\">名字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">angular-ui</td>\n<td style=\"text-align:center\">ng-messages</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第三方扩展</td>\n<td style=\"text-align:center\">w5cValidator</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jquery-validate</td>\n<td style=\"text-align:center\">JQ的插件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"四、-github\"><a href=\"#四、-github\" class=\"headerlink\" title=\"四、 github\"></a>四、 github</h2><p>附上我github的地址<br>   <a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856</a></p>\n","excerpt":"<p>使用angularjs的验证系统来做前端验证需要注意的一些地方<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><p> <img src=\"http://static.xiaomo.info/images/validate.gif\" alt=\"angularjs验证效果图\"></p>\n<h2 id=\"二、-要点\"><a href=\"#二、-要点\" class=\"headerlink\" title=\"二、 要点\"></a>二、 要点</h2><h3 id=\"1：form\"><a href=\"#1：form\" class=\"headerlink\" title=\"1：form\"></a>1：form</h3><p>给form起一个名字,并禁掉原生的验证</p>\n<h3 id=\"2-显示时机\"><a href=\"#2-显示时机\" class=\"headerlink\" title=\"2. 显示时机\"></a>2. 显示时机</h3><p>这个div是要在内容发生变化且不合法才会显示</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$dirty &amp;&amp; addBlogForm.title.$invalid\"</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.required\"</span>&gt;请输入标题内容&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.minlength\"</span>&gt;标题内容最少长度为<span class=\"number\">3</span>&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.maxlength\"</span>&gt;标题最大长度为<span class=\"number\">64</span>&lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"keyword\">small</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"error\"</span> ng-show=<span class=\"string\">\"addBlogForm.title.$error.unique\"</span>&gt;</span><br><span class=\"line\">                     这个标题己经被用过了，请换一个标题吧</span><br><span class=\"line\">                 &lt;/<span class=\"keyword\">small</span>&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式\"><a href=\"#3-格式\" class=\"headerlink\" title=\"3. 格式\"></a>3. 格式</h3><p>格式为fromName.inputName.$error.xxx   例子如上</p>\n<h3 id=\"4-判断\"><a href=\"#4-判断\" class=\"headerlink\" title=\"4. 判断\"></a>4. 判断</h3><p>将提交按钮是否可用交给ng来判断:合法的时候才可用</p>\n<blockquote>\n<p>代码示例</p>\n</blockquote>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"addBlog()\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-info\"</span> ng-disabled=<span class=\"string\">\"addBlogForm.$invalid\"</span>&gt;添加博客</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、插件\"><a href=\"#三、插件\" class=\"headerlink\" title=\"三、插件\"></a>三、插件</h2><p> 以上介绍的是angularjs的原生的验证，下面是一些关于验证的扩展插件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">所属</th>\n<th style=\"text-align:center\">名字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">angular-ui</td>\n<td style=\"text-align:center\">ng-messages</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第三方扩展</td>\n<td style=\"text-align:center\">w5cValidator</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jquery-validate</td>\n<td style=\"text-align:center\">JQ的插件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"四、-github\"><a href=\"#四、-github\" class=\"headerlink\" title=\"四、 github\"></a>四、 github</h2><p>附上我github的地址<br>   <a href=\"https://github.com/qq83387856\">https://github.com/qq83387856</a></p>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"第三方组件ui-router的简单使用","_content":"因为1.x的angularjs自带的ng-router功能比较弱，不支持路由嵌套。因些我们要使用到ui-router这个组件\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、ui-router基本思路\n1. 多视图用@，嵌套用parent.child这种子路由\n2. 要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由  \n3. 要切换的路由ui-sref用子路由   \n* main.a\n* main.b\n* main.c\n* main.d\n*  ....\n\n## 二、效果图\n![uirouter效果](http://static.xiaomo.info/images/uirouter.gif)\n\n## 三、代码实例\n\n### 1. html 使用ui-sref\n```\n    <div class=\"col-md-1 list-group\" style=\"text-align: center\">\n        <a ui-sref=\"main.authority\" class=\"list-group-item\">权限管理</a>\n        <a ui-sref=\"main.blog\" class=\"list-group-item\">博客管理</a>\n        <a ui-sref=\"main.user\" class=\"list-group-item\">用户管理</a>\n        <a ui-sref=\"main.tag\" class=\"list-group-item\">标签管理</a>\n        <a ui-sref=\"main.changeLog\" class=\"list-group-item\">更新日志</a>\n        <a ui-sref=\"main.links\" class=\"list-group-item\">友情连接</a>\n        <a ui-sref=\"main.systemSet\" class=\"list-group-item\">系统设置</a>\n    </div>\n\n```\n\n### 2. app.js 路由配置\n```\n\tmyApp.config(function ($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider.otherwise('/login');\n    $stateProvider\n    /* ===========================================================登录===========================================================================*/\n        .state('login', {//登录\n            url: '/login',\n            templateUrl: './login.html',\n            controller: 'AdminLoginController'\n        })\n        .state('main', {//主界面\n            url: '/main',\n            templateUrl: './src/tpls/common/home.html',\n            controller: 'BasicInfoController'\n        })\n        /* ===========================================================博客===========================================================================*/\n        .state('main.blog', {//博客列表\n            url: '/blog',\n            templateUrl: './src/tpls/blog/blogList.html',\n            controller: 'BlogListController'\n        })\n        .state('main.addBlog', {//添加博客\n            url: '/addBlog',\n            templateUrl: './src/tpls/blog/addBlog.html',\n            controller: 'BlogAddController'\n        })\n        .state('main.editBlog', {//编辑博客\n            url: '/editBlog/:id',\n            templateUrl: './src/tpls/blog/editBlog.html',\n            controller: 'BlogEditController'\n        })\n        /* ===========================================================权限===========================================================================*/\n        .state('main.authority', {//权限列表\n            url: '/authority',\n            templateUrl: './src/tpls/authority/authorityList.html',\n            controller: 'AdminListController'\n        })\n        .state('main.addAuthority', {//添加权限\n            url: '/addAuthority',\n            templateUrl: './src/tpls/authority/AddAuthority.html',\n            controller: 'AdminAddController'\n        })\n        .state('main.editAuthority', {//编辑权限\n            url: '/editAuthority/:id',\n            templateUrl: './src/tpls/authority/authorityEdit.html',\n            controller: 'AdminEditController'\n        })\n        /* ===========================================================用户===========================================================================*/\n        .state('main.user', {//用户列表\n            url: '/user',\n            templateUrl: './src/tpls/user/userList.html',\n            controller: 'UserListController'\n        })\n        .state('main.addUser', {//添加用户\n            url: '/addUser',\n            templateUrl: './src/tpls/user/addUser.html',\n            controller: 'UserAddController'\n        })\n        .state('main.editUser', {//编辑用户\n            url: '/editUser/:id',\n            templateUrl: './src/tpls/user/editUser.html',\n            controller: 'UserEditController'\n        })\n        /* ===========================================================标签===========================================================================*/\n        .state('main.tag', {//标签列表\n            url: '/tag',\n            templateUrl: './src/tpls/tag/tagList.html',\n            controller: 'TagListController'\n        })\n        .state('main.addTag', {//添加标签\n            url: '/addTag',\n            templateUrl: './src/tpls/tag/addTag.html',\n            controller: 'TagAddController'\n        })\n        .state('main.editTag', {//编辑标签\n            url: '/editTag',\n            templateUrl: './src/tpls/tag/editTag.html',\n            controller: 'TagEditController'\n        })\n        /* ===========================================================日志===========================================================================*/\n        .state('main.changeLog', {//更新日志列表\n            url: '/changeLog',\n            templateUrl: './src/tpls/changeLog/changeLog.html',\n            controller: 'ChangeLogListController'\n        })\n        .state('main.addChangeLog', {//添加更新日志\n            url: '/addChangeLog',\n            templateUrl: './src/tpls/changeLog/addChangeLog.html',\n            controller: 'ChangeLogAddController'\n        })\n        .state('main.editChangeLog', {//编辑更新日志\n            url: '/editChangeLog',\n            templateUrl: './src/tpls/changeLog/editChangeLog.html',\n            controller: 'ChangeLogEditController'\n        })\n        /* ===========================================================友链===========================================================================*/\n        .state('main.links', {//友情链接列表\n            url: '/links',\n            templateUrl: './src/tpls/links/linkList.html',\n            controller: 'LinkListController'\n        })\n        .state('main.addLink', {//添加友情链接\n            url: '/addLink',\n            templateUrl: './src/tpls/links/addLink.html',\n            controller: 'LinkAddController'\n        })\n        .state('main.editLink', {//编辑友情链接\n            url: '/editLink',\n            templateUrl: './src/tpls/links/editLink.html',\n            controller: 'LinkEditController'\n        })\n        /* ===========================================================系统===========================================================================*/\n        .state('main.systemSet', {//系统设置\n            url: '/systemSet',\n            templateUrl: './src/tpls/systemSet/systemSet.html'\n        })\n});\n\n```\n\n## 四、 github\n附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","source":"_posts/2016-04-25.ui-router_use.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: 第三方组件ui-router的简单使用\ntags:\n- angular\n- javascript\ncategory: angularjs之ui-router\npermalink: angular_ui_router\n---\n因为1.x的angularjs自带的ng-router功能比较弱，不支持路由嵌套。因些我们要使用到ui-router这个组件\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、ui-router基本思路\n1. 多视图用@，嵌套用parent.child这种子路由\n2. 要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由  \n3. 要切换的路由ui-sref用子路由   \n* main.a\n* main.b\n* main.c\n* main.d\n*  ....\n\n## 二、效果图\n![uirouter效果](http://static.xiaomo.info/images/uirouter.gif)\n\n## 三、代码实例\n\n### 1. html 使用ui-sref\n```\n    <div class=\"col-md-1 list-group\" style=\"text-align: center\">\n        <a ui-sref=\"main.authority\" class=\"list-group-item\">权限管理</a>\n        <a ui-sref=\"main.blog\" class=\"list-group-item\">博客管理</a>\n        <a ui-sref=\"main.user\" class=\"list-group-item\">用户管理</a>\n        <a ui-sref=\"main.tag\" class=\"list-group-item\">标签管理</a>\n        <a ui-sref=\"main.changeLog\" class=\"list-group-item\">更新日志</a>\n        <a ui-sref=\"main.links\" class=\"list-group-item\">友情连接</a>\n        <a ui-sref=\"main.systemSet\" class=\"list-group-item\">系统设置</a>\n    </div>\n\n```\n\n### 2. app.js 路由配置\n```\n\tmyApp.config(function ($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider.otherwise('/login');\n    $stateProvider\n    /* ===========================================================登录===========================================================================*/\n        .state('login', {//登录\n            url: '/login',\n            templateUrl: './login.html',\n            controller: 'AdminLoginController'\n        })\n        .state('main', {//主界面\n            url: '/main',\n            templateUrl: './src/tpls/common/home.html',\n            controller: 'BasicInfoController'\n        })\n        /* ===========================================================博客===========================================================================*/\n        .state('main.blog', {//博客列表\n            url: '/blog',\n            templateUrl: './src/tpls/blog/blogList.html',\n            controller: 'BlogListController'\n        })\n        .state('main.addBlog', {//添加博客\n            url: '/addBlog',\n            templateUrl: './src/tpls/blog/addBlog.html',\n            controller: 'BlogAddController'\n        })\n        .state('main.editBlog', {//编辑博客\n            url: '/editBlog/:id',\n            templateUrl: './src/tpls/blog/editBlog.html',\n            controller: 'BlogEditController'\n        })\n        /* ===========================================================权限===========================================================================*/\n        .state('main.authority', {//权限列表\n            url: '/authority',\n            templateUrl: './src/tpls/authority/authorityList.html',\n            controller: 'AdminListController'\n        })\n        .state('main.addAuthority', {//添加权限\n            url: '/addAuthority',\n            templateUrl: './src/tpls/authority/AddAuthority.html',\n            controller: 'AdminAddController'\n        })\n        .state('main.editAuthority', {//编辑权限\n            url: '/editAuthority/:id',\n            templateUrl: './src/tpls/authority/authorityEdit.html',\n            controller: 'AdminEditController'\n        })\n        /* ===========================================================用户===========================================================================*/\n        .state('main.user', {//用户列表\n            url: '/user',\n            templateUrl: './src/tpls/user/userList.html',\n            controller: 'UserListController'\n        })\n        .state('main.addUser', {//添加用户\n            url: '/addUser',\n            templateUrl: './src/tpls/user/addUser.html',\n            controller: 'UserAddController'\n        })\n        .state('main.editUser', {//编辑用户\n            url: '/editUser/:id',\n            templateUrl: './src/tpls/user/editUser.html',\n            controller: 'UserEditController'\n        })\n        /* ===========================================================标签===========================================================================*/\n        .state('main.tag', {//标签列表\n            url: '/tag',\n            templateUrl: './src/tpls/tag/tagList.html',\n            controller: 'TagListController'\n        })\n        .state('main.addTag', {//添加标签\n            url: '/addTag',\n            templateUrl: './src/tpls/tag/addTag.html',\n            controller: 'TagAddController'\n        })\n        .state('main.editTag', {//编辑标签\n            url: '/editTag',\n            templateUrl: './src/tpls/tag/editTag.html',\n            controller: 'TagEditController'\n        })\n        /* ===========================================================日志===========================================================================*/\n        .state('main.changeLog', {//更新日志列表\n            url: '/changeLog',\n            templateUrl: './src/tpls/changeLog/changeLog.html',\n            controller: 'ChangeLogListController'\n        })\n        .state('main.addChangeLog', {//添加更新日志\n            url: '/addChangeLog',\n            templateUrl: './src/tpls/changeLog/addChangeLog.html',\n            controller: 'ChangeLogAddController'\n        })\n        .state('main.editChangeLog', {//编辑更新日志\n            url: '/editChangeLog',\n            templateUrl: './src/tpls/changeLog/editChangeLog.html',\n            controller: 'ChangeLogEditController'\n        })\n        /* ===========================================================友链===========================================================================*/\n        .state('main.links', {//友情链接列表\n            url: '/links',\n            templateUrl: './src/tpls/links/linkList.html',\n            controller: 'LinkListController'\n        })\n        .state('main.addLink', {//添加友情链接\n            url: '/addLink',\n            templateUrl: './src/tpls/links/addLink.html',\n            controller: 'LinkAddController'\n        })\n        .state('main.editLink', {//编辑友情链接\n            url: '/editLink',\n            templateUrl: './src/tpls/links/editLink.html',\n            controller: 'LinkEditController'\n        })\n        /* ===========================================================系统===========================================================================*/\n        .state('main.systemSet', {//系统设置\n            url: '/systemSet',\n            templateUrl: './src/tpls/systemSet/systemSet.html'\n        })\n});\n\n```\n\n## 四、 github\n附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","slug":"angular_ui_router","published":1,"updated":"2016-06-28T02:52:18.741Z","_id":"cipjfs5sl00014wmcc0ggb7tr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>因为1.x的angularjs自带的ng-router功能比较弱，不支持路由嵌套。因些我们要使用到ui-router这个组件<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、ui-router基本思路\"><a href=\"#一、ui-router基本思路\" class=\"headerlink\" title=\"一、ui-router基本思路\"></a>一、ui-router基本思路</h2><ol>\n<li>多视图用@，嵌套用parent.child这种子路由</li>\n<li>要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由  </li>\n<li>要切换的路由ui-sref用子路由   </li>\n</ol>\n<ul>\n<li>main.a</li>\n<li>main.b</li>\n<li>main.c</li>\n<li>main.d</li>\n<li>….</li>\n</ul>\n<h2 id=\"二、效果图\"><a href=\"#二、效果图\" class=\"headerlink\" title=\"二、效果图\"></a>二、效果图</h2><p><img src=\"http://static.xiaomo.info/images/uirouter.gif\" alt=\"uirouter效果\"></p>\n<h2 id=\"三、代码实例\"><a href=\"#三、代码实例\" class=\"headerlink\" title=\"三、代码实例\"></a>三、代码实例</h2><h3 id=\"1-html-使用ui-sref\"><a href=\"#1-html-使用ui-sref\" class=\"headerlink\" title=\"1. html 使用ui-sref\"></a>1. html 使用ui-sref</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-1 list-group\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.authority\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>权限管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.blog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>博客管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.user\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>用户管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.tag\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>标签管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.changeLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>更新日志<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.links\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>友情连接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.systemSet\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-app-js-路由配置\"><a href=\"#2-app-js-路由配置\" class=\"headerlink\" title=\"2. app.js 路由配置\"></a>2. app.js 路由配置</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"selector-tag\">myApp</span><span class=\"selector-class\">.config</span>(function ($stateProvider, $urlRouterProvider) &#123;</span><br><span class=\"line\">    $urlRouterProvider<span class=\"selector-class\">.otherwise</span>(<span class=\"string\">'/login'</span>);</span><br><span class=\"line\">    $<span class=\"selector-tag\">stateProvider</span></span><br><span class=\"line\">    <span class=\"comment\">/* ===========================================================登录===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'login'</span>, &#123;<span class=\"comment\">//登录</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./login.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminLoginController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main'</span>, &#123;<span class=\"comment\">//主界面</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/common/home.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BasicInfoController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================博客===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.blog'</span>, &#123;<span class=\"comment\">//博客列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/blog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/blogList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addBlog'</span>, &#123;<span class=\"comment\">//添加博客</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addBlog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/addBlog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editBlog'</span>, &#123;<span class=\"comment\">//编辑博客</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editBlog/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/editBlog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================权限===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.authority'</span>, &#123;<span class=\"comment\">//权限列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/authority'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/authorityList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addAuthority'</span>, &#123;<span class=\"comment\">//添加权限</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addAuthority'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/AddAuthority.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editAuthority'</span>, &#123;<span class=\"comment\">//编辑权限</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editAuthority/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/authorityEdit.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================用户===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.user'</span>, &#123;<span class=\"comment\">//用户列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/userList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addUser'</span>, &#123;<span class=\"comment\">//添加用户</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addUser'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/addUser.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editUser'</span>, &#123;<span class=\"comment\">//编辑用户</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editUser/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/editUser.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================标签===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.tag'</span>, &#123;<span class=\"comment\">//标签列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/tag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/tagList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addTag'</span>, &#123;<span class=\"comment\">//添加标签</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addTag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/addTag.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editTag'</span>, &#123;<span class=\"comment\">//编辑标签</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editTag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/editTag.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================日志===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.changeLog'</span>, &#123;<span class=\"comment\">//更新日志列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/changeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/changeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addChangeLog'</span>, &#123;<span class=\"comment\">//添加更新日志</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addChangeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/addChangeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editChangeLog'</span>, &#123;<span class=\"comment\">//编辑更新日志</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editChangeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/editChangeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================友链===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.links'</span>, &#123;<span class=\"comment\">//友情链接列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/links'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/linkList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addLink'</span>, &#123;<span class=\"comment\">//添加友情链接</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addLink'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/addLink.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editLink'</span>, &#123;<span class=\"comment\">//编辑友情链接</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editLink'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/editLink.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================系统===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.systemSet'</span>, &#123;<span class=\"comment\">//系统设置</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/systemSet'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/systemSet/systemSet.html'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-github\"><a href=\"#四、-github\" class=\"headerlink\" title=\"四、 github\"></a>四、 github</h2><p>附上我github的地址<br>   <a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856</a></p>\n","excerpt":"<p>因为1.x的angularjs自带的ng-router功能比较弱，不支持路由嵌套。因些我们要使用到ui-router这个组件<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、ui-router基本思路\"><a href=\"#一、ui-router基本思路\" class=\"headerlink\" title=\"一、ui-router基本思路\"></a>一、ui-router基本思路</h2><ol>\n<li>多视图用@，嵌套用parent.child这种子路由</li>\n<li>要切换的视图(main)用ui-view,始终不会变成其他内容的不需要路由  </li>\n<li>要切换的路由ui-sref用子路由   </li>\n</ol>\n<ul>\n<li>main.a</li>\n<li>main.b</li>\n<li>main.c</li>\n<li>main.d</li>\n<li>….</li>\n</ul>\n<h2 id=\"二、效果图\"><a href=\"#二、效果图\" class=\"headerlink\" title=\"二、效果图\"></a>二、效果图</h2><p><img src=\"http://static.xiaomo.info/images/uirouter.gif\" alt=\"uirouter效果\"></p>\n<h2 id=\"三、代码实例\"><a href=\"#三、代码实例\" class=\"headerlink\" title=\"三、代码实例\"></a>三、代码实例</h2><h3 id=\"1-html-使用ui-sref\"><a href=\"#1-html-使用ui-sref\" class=\"headerlink\" title=\"1. html 使用ui-sref\"></a>1. html 使用ui-sref</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-1 list-group\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.authority\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>权限管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.blog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>博客管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.user\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>用户管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.tag\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>标签管理<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.changeLog\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>更新日志<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.links\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>友情连接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">ui-sref</span>=<span class=\"string\">\"main.systemSet\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>系统设置<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-app-js-路由配置\"><a href=\"#2-app-js-路由配置\" class=\"headerlink\" title=\"2. app.js 路由配置\"></a>2. app.js 路由配置</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"selector-tag\">myApp</span><span class=\"selector-class\">.config</span>(function ($stateProvider, $urlRouterProvider) &#123;</span><br><span class=\"line\">    $urlRouterProvider<span class=\"selector-class\">.otherwise</span>(<span class=\"string\">'/login'</span>);</span><br><span class=\"line\">    $<span class=\"selector-tag\">stateProvider</span></span><br><span class=\"line\">    <span class=\"comment\">/* ===========================================================登录===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'login'</span>, &#123;<span class=\"comment\">//登录</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/login'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./login.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminLoginController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main'</span>, &#123;<span class=\"comment\">//主界面</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/main'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/common/home.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BasicInfoController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================博客===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.blog'</span>, &#123;<span class=\"comment\">//博客列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/blog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/blogList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addBlog'</span>, &#123;<span class=\"comment\">//添加博客</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addBlog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/addBlog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editBlog'</span>, &#123;<span class=\"comment\">//编辑博客</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editBlog/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/blog/editBlog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'BlogEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================权限===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.authority'</span>, &#123;<span class=\"comment\">//权限列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/authority'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/authorityList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addAuthority'</span>, &#123;<span class=\"comment\">//添加权限</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addAuthority'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/AddAuthority.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editAuthority'</span>, &#123;<span class=\"comment\">//编辑权限</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editAuthority/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/authority/authorityEdit.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'AdminEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================用户===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.user'</span>, &#123;<span class=\"comment\">//用户列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/user'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/userList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addUser'</span>, &#123;<span class=\"comment\">//添加用户</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addUser'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/addUser.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editUser'</span>, &#123;<span class=\"comment\">//编辑用户</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editUser/:id'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/user/editUser.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'UserEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================标签===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.tag'</span>, &#123;<span class=\"comment\">//标签列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/tag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/tagList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addTag'</span>, &#123;<span class=\"comment\">//添加标签</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addTag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/addTag.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editTag'</span>, &#123;<span class=\"comment\">//编辑标签</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editTag'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/tag/editTag.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'TagEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================日志===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.changeLog'</span>, &#123;<span class=\"comment\">//更新日志列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/changeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/changeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addChangeLog'</span>, &#123;<span class=\"comment\">//添加更新日志</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addChangeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/addChangeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editChangeLog'</span>, &#123;<span class=\"comment\">//编辑更新日志</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editChangeLog'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/changeLog/editChangeLog.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'ChangeLogEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================友链===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.links'</span>, &#123;<span class=\"comment\">//友情链接列表</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/links'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/linkList.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkListController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.addLink'</span>, &#123;<span class=\"comment\">//添加友情链接</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/addLink'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/addLink.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkAddController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.editLink'</span>, &#123;<span class=\"comment\">//编辑友情链接</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/editLink'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/links/editLink.html'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">controller</span>: <span class=\"string\">'LinkEditController'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">/* ===========================================================系统===========================================================================*/</span></span><br><span class=\"line\">        <span class=\"selector-class\">.state</span>(<span class=\"string\">'main.systemSet'</span>, &#123;<span class=\"comment\">//系统设置</span></span><br><span class=\"line\">            <span class=\"attribute\">url</span>: <span class=\"string\">'/systemSet'</span>,</span><br><span class=\"line\">            <span class=\"attribute\">templateUrl</span>: <span class=\"string\">'./src/tpls/systemSet/systemSet.html'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-github\"><a href=\"#四、-github\" class=\"headerlink\" title=\"四、 github\"></a>四、 github</h2><p>附上我github的地址<br>   <a href=\"https://github.com/qq83387856\">https://github.com/qq83387856</a></p>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"使用angularjs的$http异步删除数据","_content":"因为我在使用angularjs做异步删除数据的时候遇到了一些问题，所以把这些问题记录下面供大家参考，也加深自己的印象。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、前言\n有人会说删除这东西有什么可讲的，写个删除的service，controller调用一下不就完了。\n嗯...看起来是这样，但是具体实现起来真的有这么简单吗？首先有以下几个坑\n* 怎么确定数据是否删除成功？\n* 怎么同步视图的数据库的内容？\n\n## 二、 思路\n### 1.实现方式一\n删除数据库中对应的内容,然后将$scope中的对应的内容splice\n### 2.实现方式二\n删除数据库中对应的内容，然后再reload一下数据(也就是再调用一次查询方法，这种消耗可想而知，并且还要保证先删除数据再查询)\n\n## 三、 具体实现方式\n>删除数据的service：用异步，返回promise\n```\nservice('deleteBlogService',//删除博客\n        ['$rootScope',\n            '$http',\n            '$q',\n            function ($rootScope, $http, $q) {\n                var result = {};\n                result.operate = function (blogId) {\n                    var deferred = $q.defer();\n                    $http({\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                        },\n                        url: $rootScope.$baseUrl + \"/admin/blog/deleteBlogById\",\n                        method: 'GET',\n                        dataType: 'json',\n                        params: {\n                            id: blogId\n                        }\n                    })\n                        .success(function (data) {\n                            deferred.resolve(data);\n                            console.log(\"删除成功！\");\n                        })\n                        .error(function () {\n                            deferred.reject();\n                            alert(\"删除失败！\")\n                        });\n                    return deferred.promise;\n                };\n                return result;\n            }])\n```\ncontroller里面注意事项\n>要特别注意执行顺序：确保己经删除完成之后再去reload数据，不然会出来视图不更新\n\n```\n                /**\n                 * 删除博客\n                 */\n                $scope.deleteBlog = function (blogId) {\n                    var deletePromise = deleteBlogService.operate(blogId);\n                    deletePromise.then(function (data) {\n                        if (data.status == 200) {\n                            var promise = getBlogListService.operate($scope.currentPage);\n                            promise.then(function (data) {\n                                $scope.blogs = data.blogs;\n                                $scope.pageCount = $scope.blogs.totalPages;\n                            });\n                        }\n                    });\n                };\n```\n","source":"_posts/2016-04-27.angularjs_$http_anysc.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: 使用angularjs的$http异步删除数据\ntags:\n- angular\n- javascript\ncategory: angularjs增删改查\npermalink: angular_http\n---\n因为我在使用angularjs做异步删除数据的时候遇到了一些问题，所以把这些问题记录下面供大家参考，也加深自己的印象。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、前言\n有人会说删除这东西有什么可讲的，写个删除的service，controller调用一下不就完了。\n嗯...看起来是这样，但是具体实现起来真的有这么简单吗？首先有以下几个坑\n* 怎么确定数据是否删除成功？\n* 怎么同步视图的数据库的内容？\n\n## 二、 思路\n### 1.实现方式一\n删除数据库中对应的内容,然后将$scope中的对应的内容splice\n### 2.实现方式二\n删除数据库中对应的内容，然后再reload一下数据(也就是再调用一次查询方法，这种消耗可想而知，并且还要保证先删除数据再查询)\n\n## 三、 具体实现方式\n>删除数据的service：用异步，返回promise\n```\nservice('deleteBlogService',//删除博客\n        ['$rootScope',\n            '$http',\n            '$q',\n            function ($rootScope, $http, $q) {\n                var result = {};\n                result.operate = function (blogId) {\n                    var deferred = $q.defer();\n                    $http({\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                        },\n                        url: $rootScope.$baseUrl + \"/admin/blog/deleteBlogById\",\n                        method: 'GET',\n                        dataType: 'json',\n                        params: {\n                            id: blogId\n                        }\n                    })\n                        .success(function (data) {\n                            deferred.resolve(data);\n                            console.log(\"删除成功！\");\n                        })\n                        .error(function () {\n                            deferred.reject();\n                            alert(\"删除失败！\")\n                        });\n                    return deferred.promise;\n                };\n                return result;\n            }])\n```\ncontroller里面注意事项\n>要特别注意执行顺序：确保己经删除完成之后再去reload数据，不然会出来视图不更新\n\n```\n                /**\n                 * 删除博客\n                 */\n                $scope.deleteBlog = function (blogId) {\n                    var deletePromise = deleteBlogService.operate(blogId);\n                    deletePromise.then(function (data) {\n                        if (data.status == 200) {\n                            var promise = getBlogListService.operate($scope.currentPage);\n                            promise.then(function (data) {\n                                $scope.blogs = data.blogs;\n                                $scope.pageCount = $scope.blogs.totalPages;\n                            });\n                        }\n                    });\n                };\n```\n","slug":"angular_http","published":1,"updated":"2016-06-28T02:52:16.109Z","_id":"cipjfs5tg00034wmce2ed5wy6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>因为我在使用angularjs做异步删除数据的时候遇到了一些问题，所以把这些问题记录下面供大家参考，也加深自己的印象。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>有人会说删除这东西有什么可讲的，写个删除的service，controller调用一下不就完了。<br>嗯…看起来是这样，但是具体实现起来真的有这么简单吗？首先有以下几个坑</p>\n<ul>\n<li>怎么确定数据是否删除成功？</li>\n<li>怎么同步视图的数据库的内容？</li>\n</ul>\n<h2 id=\"二、-思路\"><a href=\"#二、-思路\" class=\"headerlink\" title=\"二、 思路\"></a>二、 思路</h2><h3 id=\"1-实现方式一\"><a href=\"#1-实现方式一\" class=\"headerlink\" title=\"1.实现方式一\"></a>1.实现方式一</h3><p>删除数据库中对应的内容,然后将$scope中的对应的内容splice</p>\n<h3 id=\"2-实现方式二\"><a href=\"#2-实现方式二\" class=\"headerlink\" title=\"2.实现方式二\"></a>2.实现方式二</h3><p>删除数据库中对应的内容，然后再reload一下数据(也就是再调用一次查询方法，这种消耗可想而知，并且还要保证先删除数据再查询)</p>\n<h2 id=\"三、-具体实现方式\"><a href=\"#三、-具体实现方式\" class=\"headerlink\" title=\"三、 具体实现方式\"></a>三、 具体实现方式</h2><blockquote>\n<p>删除数据的service：用异步，返回promise<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service(<span class=\"string\">'deleteBlogService'</span>,<span class=\"comment\">//删除博客</span></span><br><span class=\"line\">        [<span class=\"string\">'$rootScope'</span>,</span><br><span class=\"line\">            <span class=\"string\">'$http'</span>,</span><br><span class=\"line\">            <span class=\"string\">'$q'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($rootScope, $http, $q)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">                result.operate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(blogId)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> deferred = $q.defer();</span><br><span class=\"line\">                    $http(&#123;</span><br><span class=\"line\">                        headers: &#123;</span><br><span class=\"line\">                            <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        url: $rootScope.$baseUrl + <span class=\"string\">\"/admin/blog/deleteBlogById\"</span>,</span><br><span class=\"line\">                        method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">                        dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">                        params: &#123;</span><br><span class=\"line\">                            id: blogId</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                        .success(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">                            deferred.resolve(data);</span><br><span class=\"line\">                            console.log(<span class=\"string\">\"删除成功！\"</span>);</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .error(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            deferred.reject();</span><br><span class=\"line\">                            alert(<span class=\"string\">\"删除失败！\"</span>)</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> deferred.promise;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;])</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>controller里面注意事项</p>\n<blockquote>\n<p>要特别注意执行顺序：确保己经删除完成之后再去reload数据，不然会出来视图不更新</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 删除博客</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">$scope.deleteBlog = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(blogId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deletePromise = deleteBlogService.operate(blogId);</span><br><span class=\"line\">    deletePromise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> promise = getBlogListService.operate($scope.currentPage);</span><br><span class=\"line\">            promise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">                $scope.blogs = data.blogs;</span><br><span class=\"line\">                $scope.pageCount = $scope.blogs.totalPages;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>因为我在使用angularjs做异步删除数据的时候遇到了一些问题，所以把这些问题记录下面供大家参考，也加深自己的印象。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>有人会说删除这东西有什么可讲的，写个删除的service，controller调用一下不就完了。<br>嗯…看起来是这样，但是具体实现起来真的有这么简单吗？首先有以下几个坑</p>\n<ul>\n<li>怎么确定数据是否删除成功？</li>\n<li>怎么同步视图的数据库的内容？</li>\n</ul>\n<h2 id=\"二、-思路\"><a href=\"#二、-思路\" class=\"headerlink\" title=\"二、 思路\"></a>二、 思路</h2><h3 id=\"1-实现方式一\"><a href=\"#1-实现方式一\" class=\"headerlink\" title=\"1.实现方式一\"></a>1.实现方式一</h3><p>删除数据库中对应的内容,然后将$scope中的对应的内容splice</p>\n<h3 id=\"2-实现方式二\"><a href=\"#2-实现方式二\" class=\"headerlink\" title=\"2.实现方式二\"></a>2.实现方式二</h3><p>删除数据库中对应的内容，然后再reload一下数据(也就是再调用一次查询方法，这种消耗可想而知，并且还要保证先删除数据再查询)</p>\n<h2 id=\"三、-具体实现方式\"><a href=\"#三、-具体实现方式\" class=\"headerlink\" title=\"三、 具体实现方式\"></a>三、 具体实现方式</h2><blockquote>\n<p>删除数据的service：用异步，返回promise<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service(<span class=\"string\">'deleteBlogService'</span>,<span class=\"comment\">//删除博客</span></span><br><span class=\"line\">        [<span class=\"string\">'$rootScope'</span>,</span><br><span class=\"line\">            <span class=\"string\">'$http'</span>,</span><br><span class=\"line\">            <span class=\"string\">'$q'</span>,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($rootScope, $http, $q)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\">                result.operate = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(blogId)</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> deferred = $q.defer();</span><br><span class=\"line\">                    $http(&#123;</span><br><span class=\"line\">                        headers: &#123;</span><br><span class=\"line\">                            <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        url: $rootScope.$baseUrl + <span class=\"string\">\"/admin/blog/deleteBlogById\"</span>,</span><br><span class=\"line\">                        method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">                        dataType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">                        params: &#123;</span><br><span class=\"line\">                            id: blogId</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                        .success(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">                            deferred.resolve(data);</span><br><span class=\"line\">                            console.log(<span class=\"string\">\"删除成功！\"</span>);</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .error(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                            deferred.reject();</span><br><span class=\"line\">                            alert(<span class=\"string\">\"删除失败！\"</span>)</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> deferred.promise;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;])</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>controller里面注意事项</p>\n<blockquote>\n<p>要特别注意执行顺序：确保己经删除完成之后再去reload数据，不然会出来视图不更新</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 删除博客</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">$scope.deleteBlog = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(blogId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deletePromise = deleteBlogService.operate(blogId);</span><br><span class=\"line\">    deletePromise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> promise = getBlogListService.operate($scope.currentPage);</span><br><span class=\"line\">            promise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(data)</span> </span>&#123;</span><br><span class=\"line\">                $scope.blogs = data.blogs;</span><br><span class=\"line\">                $scope.pageCount = $scope.blogs.totalPages;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"表单添加之ng-options","_content":"我们在使用select>option的时候经常会遇到一些问题，这里是对ng-options使用的一些总结。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、前言\n这个ng-options感觉略坑啊，跟原生的select、option不太一样\n\n## 二、 要解决的几个问题\n### 1. select下拉框的默认值\n### 2. 通过选择不同的值传给后台\n### 3. ng-options的值要设置在$scope中\n\n## 三、 代码实例\n### 1.html中的展示\n\n\n```\n<div class=\"form-group\">\n    <label class=\"col-md-2 control-label\">\n        权限：\n    </label>\n    <div class=\"col-md-10\">\n        <select title=\"权限\" ng-model=\"adminUser.authLevel\"\n                ng-options=\"authLevel.name for authLevel in adminUser.authLevels\">\n            <option value=\"\">-- 请选择 --</option>\n        </select>\n        {{adminUser.authLevel}}\n    </div>\n</div>\n```\n\n>代码解释：ng-options类似于ng-repeat,把$scope中的内容循环展示出来,设置一个ng-model\n\n### 2. controller\n controller中设置ng-options的默认值\n\n```\n $scope.adminUser = {};\n $scope.adminUser.authLevels = [{'id': 1, 'name': '超级管理员'}, {'id': 2, 'name': '普通管理员'}];\n```\n\n>controller中接收设置的ng-model,就可以解决html和controller之间的通讯了\n\n## 三、参考文档\n\n参考自 ：[runjs源码](http://runjs.cn/code/nhi8ubrb)\n","source":"_posts/2016-04-28.from_ng-options.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: 表单添加之ng-options\ntags:\n- angular\n- javascript\ncategory: ng-options\npermalink: ng-options\n---\n我们在使用select>option的时候经常会遇到一些问题，这里是对ng-options使用的一些总结。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、前言\n这个ng-options感觉略坑啊，跟原生的select、option不太一样\n\n## 二、 要解决的几个问题\n### 1. select下拉框的默认值\n### 2. 通过选择不同的值传给后台\n### 3. ng-options的值要设置在$scope中\n\n## 三、 代码实例\n### 1.html中的展示\n\n\n```\n<div class=\"form-group\">\n    <label class=\"col-md-2 control-label\">\n        权限：\n    </label>\n    <div class=\"col-md-10\">\n        <select title=\"权限\" ng-model=\"adminUser.authLevel\"\n                ng-options=\"authLevel.name for authLevel in adminUser.authLevels\">\n            <option value=\"\">-- 请选择 --</option>\n        </select>\n        {{adminUser.authLevel}}\n    </div>\n</div>\n```\n\n>代码解释：ng-options类似于ng-repeat,把$scope中的内容循环展示出来,设置一个ng-model\n\n### 2. controller\n controller中设置ng-options的默认值\n\n```\n $scope.adminUser = {};\n $scope.adminUser.authLevels = [{'id': 1, 'name': '超级管理员'}, {'id': 2, 'name': '普通管理员'}];\n```\n\n>controller中接收设置的ng-model,就可以解决html和controller之间的通讯了\n\n## 三、参考文档\n\n参考自 ：[runjs源码](http://runjs.cn/code/nhi8ubrb)\n","slug":"ng-options","published":1,"updated":"2016-06-28T02:52:13.454Z","_id":"cipjfs5ti00054wmc6zsg0cj6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们在使用select&gt;option的时候经常会遇到一些问题，这里是对ng-options使用的一些总结。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>这个ng-options感觉略坑啊，跟原生的select、option不太一样</p>\n<h2 id=\"二、-要解决的几个问题\"><a href=\"#二、-要解决的几个问题\" class=\"headerlink\" title=\"二、 要解决的几个问题\"></a>二、 要解决的几个问题</h2><h3 id=\"1-select下拉框的默认值\"><a href=\"#1-select下拉框的默认值\" class=\"headerlink\" title=\"1. select下拉框的默认值\"></a>1. select下拉框的默认值</h3><h3 id=\"2-通过选择不同的值传给后台\"><a href=\"#2-通过选择不同的值传给后台\" class=\"headerlink\" title=\"2. 通过选择不同的值传给后台\"></a>2. 通过选择不同的值传给后台</h3><h3 id=\"3-ng-options的值要设置在-scope中\"><a href=\"#3-ng-options的值要设置在-scope中\" class=\"headerlink\" title=\"3. ng-options的值要设置在$scope中\"></a>3. ng-options的值要设置在$scope中</h3><h2 id=\"三、-代码实例\"><a href=\"#三、-代码实例\" class=\"headerlink\" title=\"三、 代码实例\"></a>三、 代码实例</h2><h3 id=\"1-html中的展示\"><a href=\"#1-html中的展示\" class=\"headerlink\" title=\"1.html中的展示\"></a>1.html中的展示</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2 control-label\"</span>&gt;</span></span><br><span class=\"line\">        权限：</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-10\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">title</span>=<span class=\"string\">\"权限\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"adminUser.authLevel\"</span></span><br><span class=\"line\">                <span class=\"attr\">ng-options</span>=<span class=\"string\">\"authLevel.name for authLevel in adminUser.authLevels\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>-- 请选择 --<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;adminUser.authLevel&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>代码解释：ng-options类似于ng-repeat,把$scope中的内容循环展示出来,设置一个ng-model</p>\n</blockquote>\n<h3 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2. controller\"></a>2. controller</h3><p> controller中设置ng-options的默认值</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.adminUser = &#123;&#125;;</span><br><span class=\"line\">$scope.adminUser.authLevels = [&#123;<span class=\"string\">'id'</span>: <span class=\"number\">1</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'超级管理员'</span>&#125;, &#123;<span class=\"string\">'id'</span>: <span class=\"number\">2</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'普通管理员'</span>&#125;];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>controller中接收设置的ng-model,就可以解决html和controller之间的通讯了</p>\n</blockquote>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><p>参考自 ：<a href=\"http://runjs.cn/code/nhi8ubrb\" target=\"_blank\" rel=\"external\">runjs源码</a></p>\n","excerpt":"<p>我们在使用select&gt;option的时候经常会遇到一些问题，这里是对ng-options使用的一些总结。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>这个ng-options感觉略坑啊，跟原生的select、option不太一样</p>\n<h2 id=\"二、-要解决的几个问题\"><a href=\"#二、-要解决的几个问题\" class=\"headerlink\" title=\"二、 要解决的几个问题\"></a>二、 要解决的几个问题</h2><h3 id=\"1-select下拉框的默认值\"><a href=\"#1-select下拉框的默认值\" class=\"headerlink\" title=\"1. select下拉框的默认值\"></a>1. select下拉框的默认值</h3><h3 id=\"2-通过选择不同的值传给后台\"><a href=\"#2-通过选择不同的值传给后台\" class=\"headerlink\" title=\"2. 通过选择不同的值传给后台\"></a>2. 通过选择不同的值传给后台</h3><h3 id=\"3-ng-options的值要设置在-scope中\"><a href=\"#3-ng-options的值要设置在-scope中\" class=\"headerlink\" title=\"3. ng-options的值要设置在$scope中\"></a>3. ng-options的值要设置在$scope中</h3><h2 id=\"三、-代码实例\"><a href=\"#三、-代码实例\" class=\"headerlink\" title=\"三、 代码实例\"></a>三、 代码实例</h2><h3 id=\"1-html中的展示\"><a href=\"#1-html中的展示\" class=\"headerlink\" title=\"1.html中的展示\"></a>1.html中的展示</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-2 control-label\"</span>&gt;</span></span><br><span class=\"line\">        权限：</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-10\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">title</span>=<span class=\"string\">\"权限\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"adminUser.authLevel\"</span></span><br><span class=\"line\">                <span class=\"attr\">ng-options</span>=<span class=\"string\">\"authLevel.name for authLevel in adminUser.authLevels\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span>&gt;</span>-- 请选择 --<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;adminUser.authLevel&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>代码解释：ng-options类似于ng-repeat,把$scope中的内容循环展示出来,设置一个ng-model</p>\n</blockquote>\n<h3 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2. controller\"></a>2. controller</h3><p> controller中设置ng-options的默认值</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.adminUser = &#123;&#125;;</span><br><span class=\"line\">$scope.adminUser.authLevels = [&#123;<span class=\"string\">'id'</span>: <span class=\"number\">1</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'超级管理员'</span>&#125;, &#123;<span class=\"string\">'id'</span>: <span class=\"number\">2</span>, <span class=\"string\">'name'</span>: <span class=\"string\">'普通管理员'</span>&#125;];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>controller中接收设置的ng-model,就可以解决html和controller之间的通讯了</p>\n</blockquote>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><p>参考自 ：<a href=\"http://runjs.cn/code/nhi8ubrb\">runjs源码</a></p>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"angularjs复选框","_content":"使用angularjs做复选框，这也是一个常见的需求。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、代码\n\n### 1. html\n```\n<div ng-repeat=\"tag in tags.content track by $index \">\n        <input type=\"checkbox\"\n               title=\"标签\"\n               class=\"btn \"\n               id=\"{{tag.id}}\"\n               name=\"{{tag.name}}\"\n               ng-checked=\"isSelected(tag.id)\" //动态 true false\n               ng-click=\"updateSelection($event,tag.id)\" //将id添加到Array中\n               ng-model=\"tags\">\n        {{tag.name}}\n</div>\n```\n\n### 2. controller\n\n```\n    $scope.selected = [];\n    $scope.selectedTags = [];\n\n    //实际操作数组的方法\n    var updateSelected = function (action, id, name) {\n        if (action == 'add' && $scope.selected.indexOf(id) == -1) {\n            $scope.selected.push(id);\n            $scope.selectedTags.push(name);\n        }\n        if (action == 'remove' && $scope.selected.indexOf(id) != -1) {\n            var idx = $scope.selected.indexOf(id);\n            $scope.selected.splice(idx, 1);\n            $scope.selectedTags.splice(idx, 1);\n        }\n        console.log($scope.selected);\n    };\n\n    //根据传入的动作和要操作的id更新Array\n    $scope.updateSelection = function ($event, id) {\n        var checkbox = $event.target;\n        var action = (checkbox.checked ? 'add' : 'remove');\n        updateSelected(action, id, checkbox.name);\n    };\n\n    //返回true false\n    $scope.isSelected = function (id) {\n        return $scope.selected.indexOf(id) >= 0;\n    };\n```\n\n## 二、效果图\n\n![checkbox效果图](http://static.xiaomo.info/images/checkbox.gif)\n\n## 三、参考文档\n> [ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示](http://www.cnblogs.com/CheeseZH/p/4517701.html)\n\n## 四、 附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","source":"_posts/2016-05-04.angularjs_checkbox.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: angularjs复选框\ntags:\n- angular\n- javascript\ncategory: ng-checkbox\npermalink: ng-checkbox\n---\n使用angularjs做复选框，这也是一个常见的需求。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、代码\n\n### 1. html\n```\n<div ng-repeat=\"tag in tags.content track by $index \">\n        <input type=\"checkbox\"\n               title=\"标签\"\n               class=\"btn \"\n               id=\"{{tag.id}}\"\n               name=\"{{tag.name}}\"\n               ng-checked=\"isSelected(tag.id)\" //动态 true false\n               ng-click=\"updateSelection($event,tag.id)\" //将id添加到Array中\n               ng-model=\"tags\">\n        {{tag.name}}\n</div>\n```\n\n### 2. controller\n\n```\n    $scope.selected = [];\n    $scope.selectedTags = [];\n\n    //实际操作数组的方法\n    var updateSelected = function (action, id, name) {\n        if (action == 'add' && $scope.selected.indexOf(id) == -1) {\n            $scope.selected.push(id);\n            $scope.selectedTags.push(name);\n        }\n        if (action == 'remove' && $scope.selected.indexOf(id) != -1) {\n            var idx = $scope.selected.indexOf(id);\n            $scope.selected.splice(idx, 1);\n            $scope.selectedTags.splice(idx, 1);\n        }\n        console.log($scope.selected);\n    };\n\n    //根据传入的动作和要操作的id更新Array\n    $scope.updateSelection = function ($event, id) {\n        var checkbox = $event.target;\n        var action = (checkbox.checked ? 'add' : 'remove');\n        updateSelected(action, id, checkbox.name);\n    };\n\n    //返回true false\n    $scope.isSelected = function (id) {\n        return $scope.selected.indexOf(id) >= 0;\n    };\n```\n\n## 二、效果图\n\n![checkbox效果图](http://static.xiaomo.info/images/checkbox.gif)\n\n## 三、参考文档\n> [ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示](http://www.cnblogs.com/CheeseZH/p/4517701.html)\n\n## 四、 附上我github的地址\n   [https://github.com/qq83387856](https://github.com/qq83387856)\n","slug":"ng-checkbox","published":1,"updated":"2016-06-28T02:52:08.573Z","_id":"cipjfs5tl00084wmc3qg9d0pe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用angularjs做复选框，这也是一个常见的需求。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、代码\"><a href=\"#一、代码\" class=\"headerlink\" title=\"一、代码\"></a>一、代码</h2><h3 id=\"1-html\"><a href=\"#1-html\" class=\"headerlink\" title=\"1. html\"></a>1. html</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"tag in tags.content track by $index \"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span><br><span class=\"line\">               <span class=\"attr\">title</span>=<span class=\"string\">\"标签\"</span></span><br><span class=\"line\">               <span class=\"attr\">class</span>=<span class=\"string\">\"btn \"</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;tag.id&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span><br><span class=\"line\">               <span class=\"attr\">name</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;tag.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span><br><span class=\"line\">               <span class=\"attr\">ng-checked</span>=<span class=\"string\">\"isSelected(tag.id)\"</span> //动态 <span class=\"attr\">true</span> <span class=\"attr\">false</span></span><br><span class=\"line\">               <span class=\"attr\">ng-click</span>=<span class=\"string\">\"updateSelection($event,tag.id)\"</span> //将<span class=\"attr\">id</span>添加到<span class=\"attr\">Array</span>中</span><br><span class=\"line\">               <span class=\"attr\">ng-model</span>=<span class=\"string\">\"tags\"</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;tag.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2. controller\"></a>2. controller</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.selected = [];</span><br><span class=\"line\">$scope.selectedTags = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际操作数组的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updateSelected = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(action, id, name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"string\">'add'</span> &amp;&amp; $scope.selected.indexOf(id) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        $scope.selected.push(id);</span><br><span class=\"line\">        $scope.selectedTags.push(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"string\">'remove'</span> &amp;&amp; $scope.selected.indexOf(id) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> idx = $scope.selected.indexOf(id);</span><br><span class=\"line\">        $scope.selected.splice(idx, <span class=\"number\">1</span>);</span><br><span class=\"line\">        $scope.selectedTags.splice(idx, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log($scope.selected);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据传入的动作和要操作的id更新Array</span></span><br><span class=\"line\">$scope.updateSelection = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($event, id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> checkbox = $event.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> action = (checkbox.checked ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span>);</span><br><span class=\"line\">    updateSelected(action, id, checkbox.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回true false</span></span><br><span class=\"line\">$scope.isSelected = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $scope.selected.indexOf(id) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、效果图\"><a href=\"#二、效果图\" class=\"headerlink\" title=\"二、效果图\"></a>二、效果图</h2><p><img src=\"http://static.xiaomo.info/images/checkbox.gif\" alt=\"checkbox效果图\"></p>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/CheeseZH/p/4517701.html\" target=\"_blank\" rel=\"external\">ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示</a></p>\n</blockquote>\n<h2 id=\"四、-附上我github的地址\"><a href=\"#四、-附上我github的地址\" class=\"headerlink\" title=\"四、 附上我github的地址\"></a>四、 附上我github的地址</h2><p>   <a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856</a></p>\n","excerpt":"<p>使用angularjs做复选框，这也是一个常见的需求。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、代码\"><a href=\"#一、代码\" class=\"headerlink\" title=\"一、代码\"></a>一、代码</h2><h3 id=\"1-html\"><a href=\"#1-html\" class=\"headerlink\" title=\"1. html\"></a>1. html</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"tag in tags.content track by $index \"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span></span><br><span class=\"line\">               <span class=\"attr\">title</span>=<span class=\"string\">\"标签\"</span></span><br><span class=\"line\">               <span class=\"attr\">class</span>=<span class=\"string\">\"btn \"</span></span><br><span class=\"line\">               <span class=\"attr\">id</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;tag.id&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span><br><span class=\"line\">               <span class=\"attr\">name</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;tag.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span></span><br><span class=\"line\">               <span class=\"attr\">ng-checked</span>=<span class=\"string\">\"isSelected(tag.id)\"</span> //动态 <span class=\"attr\">true</span> <span class=\"attr\">false</span></span><br><span class=\"line\">               <span class=\"attr\">ng-click</span>=<span class=\"string\">\"updateSelection($event,tag.id)\"</span> //将<span class=\"attr\">id</span>添加到<span class=\"attr\">Array</span>中</span><br><span class=\"line\">               <span class=\"attr\">ng-model</span>=<span class=\"string\">\"tags\"</span>&gt;</span></span><br><span class=\"line\">        </span><span class=\"template-variable\">&#123;&#123;tag.name&#125;&#125;</span><span class=\"xml\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-controller\"><a href=\"#2-controller\" class=\"headerlink\" title=\"2. controller\"></a>2. controller</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.selected = [];</span><br><span class=\"line\">$scope.selectedTags = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实际操作数组的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> updateSelected = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(action, id, name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"string\">'add'</span> &amp;&amp; $scope.selected.indexOf(id) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        $scope.selected.push(id);</span><br><span class=\"line\">        $scope.selectedTags.push(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == <span class=\"string\">'remove'</span> &amp;&amp; $scope.selected.indexOf(id) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> idx = $scope.selected.indexOf(id);</span><br><span class=\"line\">        $scope.selected.splice(idx, <span class=\"number\">1</span>);</span><br><span class=\"line\">        $scope.selectedTags.splice(idx, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log($scope.selected);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据传入的动作和要操作的id更新Array</span></span><br><span class=\"line\">$scope.updateSelection = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($event, id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> checkbox = $event.target;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> action = (checkbox.checked ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span>);</span><br><span class=\"line\">    updateSelected(action, id, checkbox.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回true false</span></span><br><span class=\"line\">$scope.isSelected = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $scope.selected.indexOf(id) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、效果图\"><a href=\"#二、效果图\" class=\"headerlink\" title=\"二、效果图\"></a>二、效果图</h2><p><img src=\"http://static.xiaomo.info/images/checkbox.gif\" alt=\"checkbox效果图\"></p>\n<h2 id=\"三、参考文档\"><a href=\"#三、参考文档\" class=\"headerlink\" title=\"三、参考文档\"></a>三、参考文档</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/CheeseZH/p/4517701.html\">ZH奶酪：AngularJS判断checkbox/复选框是否选中并实时显示</a></p>\n</blockquote>\n<h2 id=\"四、-附上我github的地址\"><a href=\"#四、-附上我github的地址\" class=\"headerlink\" title=\"四、 附上我github的地址\"></a>四、 附上我github的地址</h2><p>   <a href=\"https://github.com/qq83387856\">https://github.com/qq83387856</a></p>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"atom的使用和插件的安装","_content":"由于生活在天朝这个神奇的国度，因此任何网站都会被强。因此安装插件就会很困扰，那么我们除了翻墙要怎么去解决这个问题呢？\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/atom.png)](https://github.com/qq83387856)\n## 一、在讲插件之前，插入一个小知识\n\n怎么使用atom实时预览markdown效果\n>windows下 `ctrl+shit+p`打开搜索框，输入 `mdpt` 之后`enter`就可以看到实时效果了\n\n## 二、 插件安装\n\n`file -> Settings -> install `即可打开插件安装列表。\n> 注意！！注意！但是你会发现99%的插件安装都不成功。所以 这就是问题所在\n\n但是不要气馁，我们有的是办法。虽然`install`页不能安装，但是可以搜索啊。\n\n我们搜索想要的插件，他会有一个issues界面，我们打开这个界面就可以找到他github的仓库地址。\n>好了，正戏开始！！！！\n\n### 1. 搜索插件\n`preferences->update`可以搜索插件,然后找到github地址\n### 2. 下载插件\n在atom的插件配置文件目录下把该插件clone下来。\n### 3. 下载依赖\ncd到插件根目录，然后cnpm install 或者npm install\n### 4. 插件生效\n重启atom,你就会发现你想要的插件装好了。\n\n******\n总结：虽然我们折腾了这么多东西，但是终究是实现了我们的目的不是么？谁让我们生在天朝这个神奇的国度呢。\n\n## 三. 插件卸载\n\n这个就不用多说了吧，直接删除插件目录下对应的文件夹就好了\n\n## 四、 最后给个gif的教程\n配着文字版看 真是爽歪歪有木有！！！\n![atom插件安装分享](http://static.xiaomo.info/images/atomPlugins.gif)\n","source":"_posts/2016-05-05.atom_use_and_plugins.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: atom的使用和插件的安装\ntags:\n- 开发工具\ncategory: atom插件\npermalink: atom_plugins\n---\n由于生活在天朝这个神奇的国度，因此任何网站都会被强。因此安装插件就会很困扰，那么我们除了翻墙要怎么去解决这个问题呢？\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/atom.png)](https://github.com/qq83387856)\n## 一、在讲插件之前，插入一个小知识\n\n怎么使用atom实时预览markdown效果\n>windows下 `ctrl+shit+p`打开搜索框，输入 `mdpt` 之后`enter`就可以看到实时效果了\n\n## 二、 插件安装\n\n`file -> Settings -> install `即可打开插件安装列表。\n> 注意！！注意！但是你会发现99%的插件安装都不成功。所以 这就是问题所在\n\n但是不要气馁，我们有的是办法。虽然`install`页不能安装，但是可以搜索啊。\n\n我们搜索想要的插件，他会有一个issues界面，我们打开这个界面就可以找到他github的仓库地址。\n>好了，正戏开始！！！！\n\n### 1. 搜索插件\n`preferences->update`可以搜索插件,然后找到github地址\n### 2. 下载插件\n在atom的插件配置文件目录下把该插件clone下来。\n### 3. 下载依赖\ncd到插件根目录，然后cnpm install 或者npm install\n### 4. 插件生效\n重启atom,你就会发现你想要的插件装好了。\n\n******\n总结：虽然我们折腾了这么多东西，但是终究是实现了我们的目的不是么？谁让我们生在天朝这个神奇的国度呢。\n\n## 三. 插件卸载\n\n这个就不用多说了吧，直接删除插件目录下对应的文件夹就好了\n\n## 四、 最后给个gif的教程\n配着文字版看 真是爽歪歪有木有！！！\n![atom插件安装分享](http://static.xiaomo.info/images/atomPlugins.gif)\n","slug":"atom_plugins","published":1,"updated":"2016-06-28T02:51:56.314Z","_id":"cipjfs5tn000b4wmclfa475e2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于生活在天朝这个神奇的国度，因此任何网站都会被强。因此安装插件就会很困扰，那么我们除了翻墙要怎么去解决这个问题呢？<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/atom.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、在讲插件之前，插入一个小知识\"><a href=\"#一、在讲插件之前，插入一个小知识\" class=\"headerlink\" title=\"一、在讲插件之前，插入一个小知识\"></a>一、在讲插件之前，插入一个小知识</h2><p>怎么使用atom实时预览markdown效果</p>\n<blockquote>\n<p>windows下 <code>ctrl+shit+p</code>打开搜索框，输入 <code>mdpt</code> 之后<code>enter</code>就可以看到实时效果了</p>\n</blockquote>\n<h2 id=\"二、-插件安装\"><a href=\"#二、-插件安装\" class=\"headerlink\" title=\"二、 插件安装\"></a>二、 插件安装</h2><p><code>file -&gt; Settings -&gt; install</code>即可打开插件安装列表。</p>\n<blockquote>\n<p>注意！！注意！但是你会发现99%的插件安装都不成功。所以 这就是问题所在</p>\n</blockquote>\n<p>但是不要气馁，我们有的是办法。虽然<code>install</code>页不能安装，但是可以搜索啊。</p>\n<p>我们搜索想要的插件，他会有一个issues界面，我们打开这个界面就可以找到他github的仓库地址。</p>\n<blockquote>\n<p>好了，正戏开始！！！！</p>\n</blockquote>\n<h3 id=\"1-搜索插件\"><a href=\"#1-搜索插件\" class=\"headerlink\" title=\"1. 搜索插件\"></a>1. 搜索插件</h3><p><code>preferences-&gt;update</code>可以搜索插件,然后找到github地址</p>\n<h3 id=\"2-下载插件\"><a href=\"#2-下载插件\" class=\"headerlink\" title=\"2. 下载插件\"></a>2. 下载插件</h3><p>在atom的插件配置文件目录下把该插件clone下来。</p>\n<h3 id=\"3-下载依赖\"><a href=\"#3-下载依赖\" class=\"headerlink\" title=\"3. 下载依赖\"></a>3. 下载依赖</h3><p>cd到插件根目录，然后cnpm install 或者npm install</p>\n<h3 id=\"4-插件生效\"><a href=\"#4-插件生效\" class=\"headerlink\" title=\"4. 插件生效\"></a>4. 插件生效</h3><p>重启atom,你就会发现你想要的插件装好了。</p>\n<hr>\n<p>总结：虽然我们折腾了这么多东西，但是终究是实现了我们的目的不是么？谁让我们生在天朝这个神奇的国度呢。</p>\n<h2 id=\"三-插件卸载\"><a href=\"#三-插件卸载\" class=\"headerlink\" title=\"三. 插件卸载\"></a>三. 插件卸载</h2><p>这个就不用多说了吧，直接删除插件目录下对应的文件夹就好了</p>\n<h2 id=\"四、-最后给个gif的教程\"><a href=\"#四、-最后给个gif的教程\" class=\"headerlink\" title=\"四、 最后给个gif的教程\"></a>四、 最后给个gif的教程</h2><p>配着文字版看 真是爽歪歪有木有！！！<br><img src=\"http://static.xiaomo.info/images/atomPlugins.gif\" alt=\"atom插件安装分享\"></p>\n","excerpt":"<p>由于生活在天朝这个神奇的国度，因此任何网站都会被强。因此安装插件就会很困扰，那么我们除了翻墙要怎么去解决这个问题呢？<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/atom.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、在讲插件之前，插入一个小知识\"><a href=\"#一、在讲插件之前，插入一个小知识\" class=\"headerlink\" title=\"一、在讲插件之前，插入一个小知识\"></a>一、在讲插件之前，插入一个小知识</h2><p>怎么使用atom实时预览markdown效果</p>\n<blockquote>\n<p>windows下 <code>ctrl+shit+p</code>打开搜索框，输入 <code>mdpt</code> 之后<code>enter</code>就可以看到实时效果了</p>\n</blockquote>\n<h2 id=\"二、-插件安装\"><a href=\"#二、-插件安装\" class=\"headerlink\" title=\"二、 插件安装\"></a>二、 插件安装</h2><p><code>file -&gt; Settings -&gt; install</code>即可打开插件安装列表。</p>\n<blockquote>\n<p>注意！！注意！但是你会发现99%的插件安装都不成功。所以 这就是问题所在</p>\n</blockquote>\n<p>但是不要气馁，我们有的是办法。虽然<code>install</code>页不能安装，但是可以搜索啊。</p>\n<p>我们搜索想要的插件，他会有一个issues界面，我们打开这个界面就可以找到他github的仓库地址。</p>\n<blockquote>\n<p>好了，正戏开始！！！！</p>\n</blockquote>\n<h3 id=\"1-搜索插件\"><a href=\"#1-搜索插件\" class=\"headerlink\" title=\"1. 搜索插件\"></a>1. 搜索插件</h3><p><code>preferences-&gt;update</code>可以搜索插件,然后找到github地址</p>\n<h3 id=\"2-下载插件\"><a href=\"#2-下载插件\" class=\"headerlink\" title=\"2. 下载插件\"></a>2. 下载插件</h3><p>在atom的插件配置文件目录下把该插件clone下来。</p>\n<h3 id=\"3-下载依赖\"><a href=\"#3-下载依赖\" class=\"headerlink\" title=\"3. 下载依赖\"></a>3. 下载依赖</h3><p>cd到插件根目录，然后cnpm install 或者npm install</p>\n<h3 id=\"4-插件生效\"><a href=\"#4-插件生效\" class=\"headerlink\" title=\"4. 插件生效\"></a>4. 插件生效</h3><p>重启atom,你就会发现你想要的插件装好了。</p>\n<hr>\n<p>总结：虽然我们折腾了这么多东西，但是终究是实现了我们的目的不是么？谁让我们生在天朝这个神奇的国度呢。</p>\n<h2 id=\"三-插件卸载\"><a href=\"#三-插件卸载\" class=\"headerlink\" title=\"三. 插件卸载\"></a>三. 插件卸载</h2><p>这个就不用多说了吧，直接删除插件目录下对应的文件夹就好了</p>\n<h2 id=\"四、-最后给个gif的教程\"><a href=\"#四、-最后给个gif的教程\" class=\"headerlink\" title=\"四、 最后给个gif的教程\"></a>四、 最后给个gif的教程</h2><p>配着文字版看 真是爽歪歪有木有！！！<br><img src=\"http://static.xiaomo.info/images/atomPlugins.gif\" alt=\"atom插件安装分享\"></p>"},{"author":"小莫","date":"2016-05-11T16:00:00.000Z","title":"linux下使用定时器跑任务","_content":"我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、准备工作  ##\n1. 选好一个目录放shell脚本\n2. 写一个shell,注意最好是echo一句话，方便测试\n3. 确保你的机器上装了crontab服务且处于开启状态\n\n## 二、正式开工 ##\n### 1. 检查crontab服务  \n键入命令 `/sbin/service crond status `    \n返回结果:  `crond (pid  6621) is running...`  如果是运行状态就是可以的    \n\n### 2. 写shell的目录\n切换到目标目录 `cd /data2/xiaomo.info/java/bin`\n\n### 3. 开始写shell   \n创建文件：`$: touch gitpull.sh`  \n打开文件：`$: vim gitpull.sh `  \n粘入以下内容  \n```\n    #!/bin/sh\n    cd /data2/xiaomo.info/myBlog\n    git pull\n    echo '当前时间'`date '+%Y-%m-%d %H:%M:%S'`'执行git clone 命令';\n```\n\n### 4. 写定时任务\n查看定时任务 `$: crontab -l`     \n创建定时任务 `$: crontab -e `   \n粘入下面的内容   \n```\n  #每分钟 执行git clone 命令\n\t*/1 * * * * /bin/sh /data2/xiaomo.info/java/bin/gitpull.sh >>/data2/xiaomo.info/java/bin/git.log &\n```\n\n## 三、验证设置的定时任务是否生效 ##    \n\n说明：在定时任务中 使用 `>>` 可以将`echo`的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   \n\n```\n\ttail -f /data2/xiaomo.info/java/bin/git.log\n```\n观察一下一分钟后是否有日志打出，有的话就代表执行成功！！\n\n## 四、参考文档 ##     \n>[定时任务参考文档](http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html)\n","source":"_posts/2016-05-12.linux_crontab_task.md","raw":"---\nauthor: 小莫\ndate: 2016-05-12\ntitle: linux下使用定时器跑任务\ntags:\n- linux\ncategory: linux-crontab\npermalink: linux_crontab\n---\n我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、准备工作  ##\n1. 选好一个目录放shell脚本\n2. 写一个shell,注意最好是echo一句话，方便测试\n3. 确保你的机器上装了crontab服务且处于开启状态\n\n## 二、正式开工 ##\n### 1. 检查crontab服务  \n键入命令 `/sbin/service crond status `    \n返回结果:  `crond (pid  6621) is running...`  如果是运行状态就是可以的    \n\n### 2. 写shell的目录\n切换到目标目录 `cd /data2/xiaomo.info/java/bin`\n\n### 3. 开始写shell   \n创建文件：`$: touch gitpull.sh`  \n打开文件：`$: vim gitpull.sh `  \n粘入以下内容  \n```\n    #!/bin/sh\n    cd /data2/xiaomo.info/myBlog\n    git pull\n    echo '当前时间'`date '+%Y-%m-%d %H:%M:%S'`'执行git clone 命令';\n```\n\n### 4. 写定时任务\n查看定时任务 `$: crontab -l`     \n创建定时任务 `$: crontab -e `   \n粘入下面的内容   \n```\n  #每分钟 执行git clone 命令\n\t*/1 * * * * /bin/sh /data2/xiaomo.info/java/bin/gitpull.sh >>/data2/xiaomo.info/java/bin/git.log &\n```\n\n## 三、验证设置的定时任务是否生效 ##    \n\n说明：在定时任务中 使用 `>>` 可以将`echo`的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   \n\n```\n\ttail -f /data2/xiaomo.info/java/bin/git.log\n```\n观察一下一分钟后是否有日志打出，有的话就代表执行成功！！\n\n## 四、参考文档 ##     \n>[定时任务参考文档](http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html)\n","slug":"linux_crontab","published":1,"updated":"2016-06-28T02:51:44.335Z","_id":"cipjfs5tt000e4wmcyz6puicx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>选好一个目录放shell脚本</li>\n<li>写一个shell,注意最好是echo一句话，方便测试</li>\n<li>确保你的机器上装了crontab服务且处于开启状态</li>\n</ol>\n<h2 id=\"二、正式开工\"><a href=\"#二、正式开工\" class=\"headerlink\" title=\"二、正式开工\"></a>二、正式开工</h2><h3 id=\"1-检查crontab服务\"><a href=\"#1-检查crontab服务\" class=\"headerlink\" title=\"1. 检查crontab服务\"></a>1. 检查crontab服务</h3><p>键入命令 <code>/sbin/service crond status</code><br>返回结果:  <code>crond (pid  6621) is running...</code>  如果是运行状态就是可以的    </p>\n<h3 id=\"2-写shell的目录\"><a href=\"#2-写shell的目录\" class=\"headerlink\" title=\"2. 写shell的目录\"></a>2. 写shell的目录</h3><p>切换到目标目录 <code>cd /data2/xiaomo.info/java/bin</code></p>\n<h3 id=\"3-开始写shell\"><a href=\"#3-开始写shell\" class=\"headerlink\" title=\"3. 开始写shell\"></a>3. 开始写shell</h3><p>创建文件：<code>$: touch gitpull.sh</code><br>打开文件：<code>$: vim gitpull.sh</code><br>粘入以下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data2/xiaomo.info/myB<span class=\"built_in\">log</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'当前时间'</span>`date <span class=\"string\">'+%Y-%m-%d %H:%M:%S'</span>`<span class=\"string\">'执行git clone 命令'</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-写定时任务\"><a href=\"#4-写定时任务\" class=\"headerlink\" title=\"4. 写定时任务\"></a>4. 写定时任务</h3><p>查看定时任务 <code>$: crontab -l</code><br>创建定时任务 <code>$: crontab -e</code><br>粘入下面的内容<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#每分钟 执行git clone 命令</span></span><br><span class=\"line\">*/<span class=\"number\">1</span> * * * * <span class=\"meta-keyword\">/bin/</span>sh <span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/gitpull.sh &gt;&gt;<span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/git.log &amp;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、验证设置的定时任务是否生效\"><a href=\"#三、验证设置的定时任务是否生效\" class=\"headerlink\" title=\"三、验证设置的定时任务是否生效\"></a>三、验证设置的定时任务是否生效</h2><p>说明：在定时任务中 使用 <code>&gt;&gt;</code> 可以将<code>echo</code>的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   </p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f <span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/git.log</span><br></pre></td></tr></table></figure>\n<p>观察一下一分钟后是否有日志打出，有的话就代表执行成功！！</p>\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html\" target=\"_blank\" rel=\"external\">定时任务参考文档</a></p>\n</blockquote>\n","excerpt":"<p>我打算把github的代码用jenkins实时同步到线上，但是因为买的阿里云是个学习机内存太小容易跌机，因此打算使用linux的定时任务来做同步。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><ol>\n<li>选好一个目录放shell脚本</li>\n<li>写一个shell,注意最好是echo一句话，方便测试</li>\n<li>确保你的机器上装了crontab服务且处于开启状态</li>\n</ol>\n<h2 id=\"二、正式开工\"><a href=\"#二、正式开工\" class=\"headerlink\" title=\"二、正式开工\"></a>二、正式开工</h2><h3 id=\"1-检查crontab服务\"><a href=\"#1-检查crontab服务\" class=\"headerlink\" title=\"1. 检查crontab服务\"></a>1. 检查crontab服务</h3><p>键入命令 <code>/sbin/service crond status</code><br>返回结果:  <code>crond (pid  6621) is running...</code>  如果是运行状态就是可以的    </p>\n<h3 id=\"2-写shell的目录\"><a href=\"#2-写shell的目录\" class=\"headerlink\" title=\"2. 写shell的目录\"></a>2. 写shell的目录</h3><p>切换到目标目录 <code>cd /data2/xiaomo.info/java/bin</code></p>\n<h3 id=\"3-开始写shell\"><a href=\"#3-开始写shell\" class=\"headerlink\" title=\"3. 开始写shell\"></a>3. 开始写shell</h3><p>创建文件：<code>$: touch gitpull.sh</code><br>打开文件：<code>$: vim gitpull.sh</code><br>粘入以下内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data2/xiaomo.info/myB<span class=\"built_in\">log</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'当前时间'</span>`date <span class=\"string\">'+%Y-%m-%d %H:%M:%S'</span>`<span class=\"string\">'执行git clone 命令'</span>;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-写定时任务\"><a href=\"#4-写定时任务\" class=\"headerlink\" title=\"4. 写定时任务\"></a>4. 写定时任务</h3><p>查看定时任务 <code>$: crontab -l</code><br>创建定时任务 <code>$: crontab -e</code><br>粘入下面的内容<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#每分钟 执行git clone 命令</span></span><br><span class=\"line\">*/<span class=\"number\">1</span> * * * * <span class=\"meta-keyword\">/bin/</span>sh <span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/gitpull.sh &gt;&gt;<span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/git.log &amp;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、验证设置的定时任务是否生效\"><a href=\"#三、验证设置的定时任务是否生效\" class=\"headerlink\" title=\"三、验证设置的定时任务是否生效\"></a>三、验证设置的定时任务是否生效</h2><p>说明：在定时任务中 使用 <code>&gt;&gt;</code> 可以将<code>echo</code>的内容转到日志中，因此 我们只需要查看日志中有没有输出对应的话就可以判断是否生效。   </p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f <span class=\"meta-keyword\">/data2/</span>xiaomo.info<span class=\"meta-keyword\">/java/</span>bin/git.log</span><br></pre></td></tr></table></figure>\n<p>观察一下一分钟后是否有日志打出，有的话就代表执行成功！！</p>\n<h2 id=\"四、参考文档\"><a href=\"#四、参考文档\" class=\"headerlink\" title=\"四、参考文档\"></a>四、参考文档</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/joer/archive/2010/09/23/1841240.html\">定时任务参考文档</a></p>\n</blockquote>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"angularjs键盘事件","_content":"\n 使用angularjs的键盘事件来增强用户体验。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、绑定键盘事件\n（尤其注意：不能用a标签，不然会失效）\n>推荐button\n### 方法一：ng内置指令\n```\n<button ng-click=\"login()\" ng-keypress=\"todoSomething($event)\" class=\"btn btn-success btn-lg\" ng-disabled=\"loginForm.$invalid\">\n    登录\n</button>\n```\n>说明：在对应的控制器中的$scope上绑定一个todoSomething方法\n```\n    $scope.todoSomething=function($event){\n        if($event.keyCode==13){//回车\n            login();\n        }\n    }\n```\n### 方法二：自定义指令\n> html\n```\n<button ng-click=\"login()\" ng-enter=\"login()\" class=\"btn btn-success btn-lg\" ng-disabled=\"loginForm.$invalid\">\n    登录\n</button>\n```\n>指令\n```\nmyApp.directive('ngEnter', function () {\n        return function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (event) {\n                if (event.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.ngEnter);\n                    });\n                    event.preventDefault();\n                }\n            });\n        };\n    });\n```\n## 二、总结\n\n两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低\n\n>参考文档：[angularjs学习笔记—事件指令](https://segmentfault.com/a/1190000002634554#articleHeader8)\n","source":"_posts/2016-05-03.angularjs_keyboard_event.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: angularjs键盘事件\ntags:\n- angular\n- javascript\ncategory: angularjs键盘事件\npermalink: angularjs_keyboard_event\n---\n\n 使用angularjs的键盘事件来增强用户体验。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、绑定键盘事件\n（尤其注意：不能用a标签，不然会失效）\n>推荐button\n### 方法一：ng内置指令\n```\n<button ng-click=\"login()\" ng-keypress=\"todoSomething($event)\" class=\"btn btn-success btn-lg\" ng-disabled=\"loginForm.$invalid\">\n    登录\n</button>\n```\n>说明：在对应的控制器中的$scope上绑定一个todoSomething方法\n```\n    $scope.todoSomething=function($event){\n        if($event.keyCode==13){//回车\n            login();\n        }\n    }\n```\n### 方法二：自定义指令\n> html\n```\n<button ng-click=\"login()\" ng-enter=\"login()\" class=\"btn btn-success btn-lg\" ng-disabled=\"loginForm.$invalid\">\n    登录\n</button>\n```\n>指令\n```\nmyApp.directive('ngEnter', function () {\n        return function (scope, element, attrs) {\n            element.bind(\"keydown keypress\", function (event) {\n                if (event.which === 13) {\n                    scope.$apply(function () {\n                        scope.$eval(attrs.ngEnter);\n                    });\n                    event.preventDefault();\n                }\n            });\n        };\n    });\n```\n## 二、总结\n\n两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低\n\n>参考文档：[angularjs学习笔记—事件指令](https://segmentfault.com/a/1190000002634554#articleHeader8)\n","slug":"angularjs_keyboard_event","published":1,"updated":"2016-06-28T02:52:10.975Z","_id":"cipjfs5tw000i4wmcy8mb07mh","comments":1,"layout":"post","photos":[],"link":"","content":"<p> 使用angularjs的键盘事件来增强用户体验。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、绑定键盘事件\"><a href=\"#一、绑定键盘事件\" class=\"headerlink\" title=\"一、绑定键盘事件\"></a>一、绑定键盘事件</h2><p>（尤其注意：不能用a标签，不然会失效）</p>\n<blockquote>\n<p>推荐button</p>\n<h3 id=\"方法一：ng内置指令\"><a href=\"#方法一：ng内置指令\" class=\"headerlink\" title=\"方法一：ng内置指令\"></a>方法一：ng内置指令</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"login()\"</span> ng-keypress=<span class=\"string\">\"todoSomething($event)\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-success btn-lg\"</span> ng-disabled=<span class=\"string\">\"loginForm.$invalid\"</span>&gt;</span><br><span class=\"line\">    登录</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：在对应的控制器中的$scope上绑定一个todoSomething方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.todoSomething=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($event)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($event.keyCode==<span class=\"number\">13</span>)&#123;<span class=\"comment\">//回车</span></span><br><span class=\"line\">        login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"方法二：自定义指令\"><a href=\"#方法二：自定义指令\" class=\"headerlink\" title=\"方法二：自定义指令\"></a>方法二：自定义指令</h3><blockquote>\n<p>html<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"login()\"</span> ng-enter=<span class=\"string\">\"login()\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-success btn-lg\"</span> ng-disabled=<span class=\"string\">\"loginForm.$invalid\"</span>&gt;</span><br><span class=\"line\">    登录</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>指令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">'ngEnter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(scope, element, attrs)</span> </span>&#123;</span><br><span class=\"line\">            element.bind(<span class=\"string\">\"keydown keypress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event.which === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">                    scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        scope.$eval(attrs.ngEnter);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    event.preventDefault();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"二、总结\"><a href=\"#二、总结\" class=\"headerlink\" title=\"二、总结\"></a>二、总结</h2><p>两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低</p>\n<blockquote>\n<p>参考文档：<a href=\"https://segmentfault.com/a/1190000002634554#articleHeader8\" target=\"_blank\" rel=\"external\">angularjs学习笔记—事件指令</a></p>\n</blockquote>\n","excerpt":"<p> 使用angularjs的键盘事件来增强用户体验。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、绑定键盘事件\"><a href=\"#一、绑定键盘事件\" class=\"headerlink\" title=\"一、绑定键盘事件\"></a>一、绑定键盘事件</h2><p>（尤其注意：不能用a标签，不然会失效）</p>\n<blockquote>\n<p>推荐button</p>\n<h3 id=\"方法一：ng内置指令\"><a href=\"#方法一：ng内置指令\" class=\"headerlink\" title=\"方法一：ng内置指令\"></a>方法一：ng内置指令</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"login()\"</span> ng-keypress=<span class=\"string\">\"todoSomething($event)\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-success btn-lg\"</span> ng-disabled=<span class=\"string\">\"loginForm.$invalid\"</span>&gt;</span><br><span class=\"line\">    登录</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：在对应的控制器中的$scope上绑定一个todoSomething方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.todoSomething=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($event)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($event.keyCode==<span class=\"number\">13</span>)&#123;<span class=\"comment\">//回车</span></span><br><span class=\"line\">        login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"方法二：自定义指令\"><a href=\"#方法二：自定义指令\" class=\"headerlink\" title=\"方法二：自定义指令\"></a>方法二：自定义指令</h3><blockquote>\n<p>html<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button ng-<span class=\"built_in\">click</span>=<span class=\"string\">\"login()\"</span> ng-enter=<span class=\"string\">\"login()\"</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"btn btn-success btn-lg\"</span> ng-disabled=<span class=\"string\">\"loginForm.$invalid\"</span>&gt;</span><br><span class=\"line\">    登录</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>指令<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">'ngEnter'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(scope, element, attrs)</span> </span>&#123;</span><br><span class=\"line\">            element.bind(<span class=\"string\">\"keydown keypress\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(event)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (event.which === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">                    scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        scope.$eval(attrs.ngEnter);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    event.preventDefault();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"二、总结\"><a href=\"#二、总结\" class=\"headerlink\" title=\"二、总结\"></a>二、总结</h2><p>两种方法都能实现敲回车登录的功能，不过推荐指令的方式，对$scope的污染比较低</p>\n<blockquote>\n<p>参考文档：<a href=\"https://segmentfault.com/a/1190000002634554#articleHeader8\">angularjs学习笔记—事件指令</a></p>\n</blockquote>"},{"author":"小莫","date":"2016-05-10T16:00:00.000Z","title":"markdown语法","_content":"markdown的一些基本语法，大致够用了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 1.标题(h标签)\nh1-h6对应1-6个#\n\n## 2.列表(li>li)\n### 1. 无序列表\n\n#### 代码\n\n```\n    * 1\n    * 2\n    * 3\n```\n\n#### 效果图\n* 1\n* 2\n* 3\n\n### 2. 有序列表\n\n#### 代码\n\n```\n    1. 1\n    2. 2\n    3. 3\n```\n\n#### 效果图\n1. 1\n2. 2\n3. 3\n\n## 3.引用(blockquote)\n\n### 代码\n\n```\n>这个是引用的内容\n```\n\n### 效果图\n>这个是引用的内容\n\n## 4.图片与链接\n### 1. 图片\n\n名字、url\n\n#### 代码\n\n```\n![小莫](http://mouapp.com/Mou_128.png)\n```\n\n#### 效果图\n![小莫](http://mouapp.com/Mou_128.png)\n\n### 2.链接\n\n#### 代码\n\n```\n[小莫的主页](http://www.xiaomo.info)\n```\n\n#### 效果图\n[小莫的主页](http://www.xiaomo.info)\n\n## 5.粗体与斜体\n### 说明\n用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。\n\n#### 代码\n\n```\n**这里是粗体**\n*这里是斜体*\n```\n\n#### 效果图\n**这里是粗体**\n*这里是斜体*\n\n## 6.表格\n### 说明：\n\n#### 代码\n\n```\n冒号控制居中样式 连续三根短横线表格\n| Tables        | Are           | Cool  |\n| :-----------: |:--------:  | :---:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n```\n\n#### 效果图\n冒号控制居中样式 连续三根短横线表格\n| Tables        | Are           | Cool  |\n| :-----------: |:--------:  | :---:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 7.代码框\n\n（一个tab即可,如果没效果用3个飘号[esc下面那个]）\n\n    function Hello(){\n            console.log(\"hello\");\n        }\n\n\n## 8.分割线(hr)  \n三个或三个以上的星号、减号或者下划线\n\n## 9.换行、分段  \n行末加两个或以上个空格\n分段：两个回车\n\n## 10. 带url的目录\n\n### 代码\n\n\n```\n    [1. 安装][1]  \n    [2. 目录结构][2]  \n    [3. 配置说明][3]  \n    [4. 编写博客][4]  \n\n    [1]:http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\n    [2]:http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\n    [3]:http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\n    [4]:http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\n```\n\n### 效果图\n\n[1. 安装][1]  \n[2. 目录结构][2]  \n[3. 配置说明][3]  \n[4. 编写博客][4]  \n\n[1]:http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\n[2]:http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\n[3]:http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\n[4]:http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\n","source":"_posts/2016-05-11.markdown_syntax.md","raw":"---\nauthor: 小莫\ndate: 2016-05-11\ntitle: markdown语法\ntags:\n- markdown\ncategory: markdown\npermalink: markdown_syntax\n---\nmarkdown的一些基本语法，大致够用了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 1.标题(h标签)\nh1-h6对应1-6个#\n\n## 2.列表(li>li)\n### 1. 无序列表\n\n#### 代码\n\n```\n    * 1\n    * 2\n    * 3\n```\n\n#### 效果图\n* 1\n* 2\n* 3\n\n### 2. 有序列表\n\n#### 代码\n\n```\n    1. 1\n    2. 2\n    3. 3\n```\n\n#### 效果图\n1. 1\n2. 2\n3. 3\n\n## 3.引用(blockquote)\n\n### 代码\n\n```\n>这个是引用的内容\n```\n\n### 效果图\n>这个是引用的内容\n\n## 4.图片与链接\n### 1. 图片\n\n名字、url\n\n#### 代码\n\n```\n![小莫](http://mouapp.com/Mou_128.png)\n```\n\n#### 效果图\n![小莫](http://mouapp.com/Mou_128.png)\n\n### 2.链接\n\n#### 代码\n\n```\n[小莫的主页](http://www.xiaomo.info)\n```\n\n#### 效果图\n[小莫的主页](http://www.xiaomo.info)\n\n## 5.粗体与斜体\n### 说明\n用两个 * 包含一段文本就是粗体的语法，用一个 * 包含一段文本就是斜体的语法。\n\n#### 代码\n\n```\n**这里是粗体**\n*这里是斜体*\n```\n\n#### 效果图\n**这里是粗体**\n*这里是斜体*\n\n## 6.表格\n### 说明：\n\n#### 代码\n\n```\n冒号控制居中样式 连续三根短横线表格\n| Tables        | Are           | Cool  |\n| :-----------: |:--------:  | :---:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n```\n\n#### 效果图\n冒号控制居中样式 连续三根短横线表格\n| Tables        | Are           | Cool  |\n| :-----------: |:--------:  | :---:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\n## 7.代码框\n\n（一个tab即可,如果没效果用3个飘号[esc下面那个]）\n\n    function Hello(){\n            console.log(\"hello\");\n        }\n\n\n## 8.分割线(hr)  \n三个或三个以上的星号、减号或者下划线\n\n## 9.换行、分段  \n行末加两个或以上个空格\n分段：两个回车\n\n## 10. 带url的目录\n\n### 代码\n\n\n```\n    [1. 安装][1]  \n    [2. 目录结构][2]  \n    [3. 配置说明][3]  \n    [4. 编写博客][4]  \n\n    [1]:http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\n    [2]:http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\n    [3]:http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\n    [4]:http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\n```\n\n### 效果图\n\n[1. 安装][1]  \n[2. 目录结构][2]  \n[3. 配置说明][3]  \n[4. 编写博客][4]  \n\n[1]:http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\n[2]:http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\n[3]:http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\n[4]:http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\n","slug":"markdown_syntax","published":1,"updated":"2016-06-28T02:51:51.679Z","_id":"cipjfs5tz000m4wmcoybhkkxj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>markdown的一些基本语法，大致够用了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"1-标题-h标签\"><a href=\"#1-标题-h标签\" class=\"headerlink\" title=\"1.标题(h标签)\"></a>1.标题(h标签)</h2><p>h1-h6对应1-6个#</p>\n<h2 id=\"2-列表-li-gt-li\"><a href=\"#2-列表-li-gt-li\" class=\"headerlink\" title=\"2.列表(li&gt;li)\"></a>2.列表(li&gt;li)</h2><h3 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h3><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>1</span><br><span class=\"line\"><span class=\"bullet\">* </span>2</span><br><span class=\"line\"><span class=\"bullet\">* </span>3</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<h3 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>1</span><br><span class=\"line\"><span class=\"bullet\">2. </span>2</span><br><span class=\"line\"><span class=\"bullet\">3. </span>3</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><ol>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ol>\n<h2 id=\"3-引用-blockquote\"><a href=\"#3-引用-blockquote\" class=\"headerlink\" title=\"3.引用(blockquote)\"></a>3.引用(blockquote)</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这个是引用的内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><blockquote>\n<p>这个是引用的内容</p>\n</blockquote>\n<h2 id=\"4-图片与链接\"><a href=\"#4-图片与链接\" class=\"headerlink\" title=\"4.图片与链接\"></a>4.图片与链接</h2><h3 id=\"1-图片\"><a href=\"#1-图片\" class=\"headerlink\" title=\"1. 图片\"></a>1. 图片</h3><p>名字、url</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">小莫</span>](<span class=\"link\">http://mouapp.com/Mou_128.png</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"http://mouapp.com/Mou_128.png\" alt=\"小莫\"></p>\n<h3 id=\"2-链接\"><a href=\"#2-链接\" class=\"headerlink\" title=\"2.链接\"></a>2.链接</h3><h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">小莫的主页</span>](<span class=\"link\">http://www.xiaomo.info</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-4\"><a href=\"#效果图-4\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><a href=\"http://www.xiaomo.info\" target=\"_blank\" rel=\"external\">小莫的主页</a></p>\n<h2 id=\"5-粗体与斜体\"><a href=\"#5-粗体与斜体\" class=\"headerlink\" title=\"5.粗体与斜体\"></a>5.粗体与斜体</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*这里是粗体*</span>*</span><br><span class=\"line\"><span class=\"strong\">*这里是斜体*</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-5\"><a href=\"#效果图-5\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><strong>这里是粗体</strong><br><em>这里是斜体</em></p>\n<h2 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h2><h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒号控制居中样式 连续三根短横线表格</span><br><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| <span class=\"symbol\">:-----------</span>: |<span class=\"symbol\">:--------</span>:  | <span class=\"symbol\">:---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\">| col <span class=\"number\">3</span> is      | right-aligned | <span class=\"variable\">$1600</span> |</span><br><span class=\"line\">| col <span class=\"number\">2</span> is      | centered      |   <span class=\"variable\">$12</span> |</span><br><span class=\"line\">| zebra stripes | are neat      |    <span class=\"variable\">$1</span> |</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-6\"><a href=\"#效果图-6\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p>冒号控制居中样式 连续三根短横线表格<br>| Tables        | Are           | Cool  |<br>| :———–: |:——–:  | :—:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>\n<h2 id=\"7-代码框\"><a href=\"#7-代码框\" class=\"headerlink\" title=\"7.代码框\"></a>7.代码框</h2><p>（一个tab即可,如果没效果用3个飘号[esc下面那个]）</p>\n<pre><code>function Hello(){\n        console.log(&quot;hello&quot;);\n    }\n</code></pre><h2 id=\"8-分割线-hr\"><a href=\"#8-分割线-hr\" class=\"headerlink\" title=\"8.分割线(hr)\"></a>8.分割线(hr)</h2><p>三个或三个以上的星号、减号或者下划线</p>\n<h2 id=\"9-换行、分段\"><a href=\"#9-换行、分段\" class=\"headerlink\" title=\"9.换行、分段\"></a>9.换行、分段</h2><p>行末加两个或以上个空格<br>分段：两个回车</p>\n<h2 id=\"10-带url的目录\"><a href=\"#10-带url的目录\" class=\"headerlink\" title=\"10. 带url的目录\"></a>10. 带url的目录</h2><h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">1. 安装</span>][<span class=\"symbol\">1</span>]  </span><br><span class=\"line\">[<span class=\"string\">2. 目录结构</span>][<span class=\"symbol\">2</span>]  </span><br><span class=\"line\">[<span class=\"string\">3. 配置说明</span>][<span class=\"symbol\">3</span>]  </span><br><span class=\"line\">[<span class=\"string\">4. 编写博客</span>][<span class=\"symbol\">4</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">1</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/install.html</span></span><br><span class=\"line\">[<span class=\"symbol\">2</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html</span></span><br><span class=\"line\">[<span class=\"symbol\">3</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/config.html</span></span><br><span class=\"line\">[<span class=\"symbol\">4</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图-7\"><a href=\"#效果图-7\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\" target=\"_blank\" rel=\"external\">1. 安装</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\" target=\"_blank\" rel=\"external\">2. 目录结构</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\" target=\"_blank\" rel=\"external\">3. 配置说明</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\" target=\"_blank\" rel=\"external\">4. 编写博客</a>  </p>\n","excerpt":"<p>markdown的一些基本语法，大致够用了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"1-标题-h标签\"><a href=\"#1-标题-h标签\" class=\"headerlink\" title=\"1.标题(h标签)\"></a>1.标题(h标签)</h2><p>h1-h6对应1-6个#</p>\n<h2 id=\"2-列表-li-gt-li\"><a href=\"#2-列表-li-gt-li\" class=\"headerlink\" title=\"2.列表(li&gt;li)\"></a>2.列表(li&gt;li)</h2><h3 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h3><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>1</span><br><span class=\"line\"><span class=\"bullet\">* </span>2</span><br><span class=\"line\"><span class=\"bullet\">* </span>3</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<h3 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>1</span><br><span class=\"line\"><span class=\"bullet\">2. </span>2</span><br><span class=\"line\"><span class=\"bullet\">3. </span>3</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-1\"><a href=\"#效果图-1\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><ol>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ol>\n<h2 id=\"3-引用-blockquote\"><a href=\"#3-引用-blockquote\" class=\"headerlink\" title=\"3.引用(blockquote)\"></a>3.引用(blockquote)</h2><h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这个是引用的内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图-2\"><a href=\"#效果图-2\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><blockquote>\n<p>这个是引用的内容</p>\n</blockquote>\n<h2 id=\"4-图片与链接\"><a href=\"#4-图片与链接\" class=\"headerlink\" title=\"4.图片与链接\"></a>4.图片与链接</h2><h3 id=\"1-图片\"><a href=\"#1-图片\" class=\"headerlink\" title=\"1. 图片\"></a>1. 图片</h3><p>名字、url</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">小莫</span>](<span class=\"link\">http://mouapp.com/Mou_128.png</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-3\"><a href=\"#效果图-3\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"http://mouapp.com/Mou_128.png\" alt=\"小莫\"></p>\n<h3 id=\"2-链接\"><a href=\"#2-链接\" class=\"headerlink\" title=\"2.链接\"></a>2.链接</h3><h4 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">小莫的主页</span>](<span class=\"link\">http://www.xiaomo.info</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-4\"><a href=\"#效果图-4\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><a href=\"http://www.xiaomo.info\">小莫的主页</a></p>\n<h2 id=\"5-粗体与斜体\"><a href=\"#5-粗体与斜体\" class=\"headerlink\" title=\"5.粗体与斜体\"></a>5.粗体与斜体</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法。</p>\n<h4 id=\"代码-5\"><a href=\"#代码-5\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*这里是粗体*</span>*</span><br><span class=\"line\"><span class=\"strong\">*这里是斜体*</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-5\"><a href=\"#效果图-5\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><strong>这里是粗体</strong><br><em>这里是斜体</em></p>\n<h2 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h2><h3 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h3><h4 id=\"代码-6\"><a href=\"#代码-6\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">冒号控制居中样式 连续三根短横线表格</span><br><span class=\"line\">| Tables        | Are           | Cool  |</span><br><span class=\"line\">| <span class=\"symbol\">:-----------</span>: |<span class=\"symbol\">:--------</span>:  | <span class=\"symbol\">:---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\">| col <span class=\"number\">3</span> is      | right-aligned | <span class=\"variable\">$1600</span> |</span><br><span class=\"line\">| col <span class=\"number\">2</span> is      | centered      |   <span class=\"variable\">$12</span> |</span><br><span class=\"line\">| zebra stripes | are neat      |    <span class=\"variable\">$1</span> |</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果图-6\"><a href=\"#效果图-6\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p>冒号控制居中样式 连续三根短横线表格<br>| Tables        | Are           | Cool  |<br>| :———–: |:——–:  | :—:|<br>| col 3 is      | right-aligned | $1600 |<br>| col 2 is      | centered      |   $12 |<br>| zebra stripes | are neat      |    $1 |</p>\n<h2 id=\"7-代码框\"><a href=\"#7-代码框\" class=\"headerlink\" title=\"7.代码框\"></a>7.代码框</h2><p>（一个tab即可,如果没效果用3个飘号[esc下面那个]）</p>\n<pre><code>function Hello(){\n        console.log(&quot;hello&quot;);\n    }\n</code></pre><h2 id=\"8-分割线-hr\"><a href=\"#8-分割线-hr\" class=\"headerlink\" title=\"8.分割线(hr)\"></a>8.分割线(hr)</h2><p>三个或三个以上的星号、减号或者下划线</p>\n<h2 id=\"9-换行、分段\"><a href=\"#9-换行、分段\" class=\"headerlink\" title=\"9.换行、分段\"></a>9.换行、分段</h2><p>行末加两个或以上个空格<br>分段：两个回车</p>\n<h2 id=\"10-带url的目录\"><a href=\"#10-带url的目录\" class=\"headerlink\" title=\"10. 带url的目录\"></a>10. 带url的目录</h2><h3 id=\"代码-7\"><a href=\"#代码-7\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">1. 安装</span>][<span class=\"symbol\">1</span>]  </span><br><span class=\"line\">[<span class=\"string\">2. 目录结构</span>][<span class=\"symbol\">2</span>]  </span><br><span class=\"line\">[<span class=\"string\">3. 配置说明</span>][<span class=\"symbol\">3</span>]  </span><br><span class=\"line\">[<span class=\"string\">4. 编写博客</span>][<span class=\"symbol\">4</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">1</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/install.html</span></span><br><span class=\"line\">[<span class=\"symbol\">2</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html</span></span><br><span class=\"line\">[<span class=\"symbol\">3</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/config.html</span></span><br><span class=\"line\">[<span class=\"symbol\">4</span>]:<span class=\"link\">http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"效果图-7\"><a href=\"#效果图-7\" class=\"headerlink\" title=\"效果图\"></a>效果图</h3><p><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/install.html\">1. 安装</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/struct.html\">2. 目录结构</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/config.html\">3. 配置说明</a><br><a href=\"http://gitblogdoc.sinaapp.com/blog/gitblog/edit.html\">4. 编写博客</a>  </p>"},{"author":"小莫","date":"2016-05-12T16:00:00.000Z","title":"使用nodejs搭建一个简易的即时聊天软件","_content":"最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、搭建简易的服务器##\n`vim server.js`\n```\n//引入node的net模块\nvar net = require('net')\n//创建一个服务器\nvar chatServer = net.createServer();\n//定义一个客户端列表\nvar clientList = [];\n//监听连接...\nchatServer.on('connection', function(client) {\n//给客户端反馈\nclient.name = client.remoteAddress+':'+client.remotePort;\nclient.write('Hi!'+client.name+',您己成功连接服务器，可以正常通讯了..\\n');\nconsole.log(client.name+'加入了聊天...')\n//将客户端放到客户端列表中\nclientList.push(client);\n//监听客户端信信息并给出反馈\nclient.on('data', function(data) {\n// 把数据发送给所有客户端\n      broadcast(data,client);\n    });\n\n//监听离线事件\nclient.on('end',function(){\n    console.log(client.name+'quit...')\n    clientList.splice(clientList.indexOf(client),1);\n    client.write('用户:'+client.name+'退出了当前服务\\n');\n    })\n//监听错误事件\nclient.on('error',function(e){\n    console.log(e);\n})\n\n})\n/**\n *  广播消息\n **/\n function broadcast(message,client){\n     var cleanUp=[];\n     for(var i=0;i<clientList.length;i++) {\n         if(clientList[i]!==client[i]){\n             if(clientList[i].writable){\n             clientList[i].write(client.name+'说:'+message);\n             } else{\n                 cleanUp.push(clientList[i]);\n                 clientList[i].destroy();\n             }\n         }\n     }\n     //在写入循环中删除死节点，消除垃圾索引\n     for(var i =0;i<cleanUp.length;i++){\n         clientList.splice(clientList.indexOf(cleanUp[i],i));\n     }\n }\n\n```\n开启服务器\n`node server.js`\n`chatServer is running at port 9000...`  \n此时服务己经成功开启\n\n## 二、客户端连接##\n格式： `telnet host port`  \n例如我在本地再开启一个shell窗口  \n `telnet localhost 9000`  \n Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..\n\n## 三、测试效果   \n### 1. 开启服务器\n### 2. 客户端连接\n### 3. 测试通讯  \n下面是gif效果图\n![tcp在线聊天服务器](http://static.xiaomo.info/images/tcpServer.gif)\n","source":"_posts/2016-05-13.nodejs_online_chat.md","raw":"---\nauthor: 小莫\ndate: 2016-05-13\ntitle: 使用nodejs搭建一个简易的即时聊天软件\ntags:\n- node\n- javascript\n- linux\ncategory: nodejs之net模块\npermalink: node_online_chat\n---\n最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、搭建简易的服务器##\n`vim server.js`\n```\n//引入node的net模块\nvar net = require('net')\n//创建一个服务器\nvar chatServer = net.createServer();\n//定义一个客户端列表\nvar clientList = [];\n//监听连接...\nchatServer.on('connection', function(client) {\n//给客户端反馈\nclient.name = client.remoteAddress+':'+client.remotePort;\nclient.write('Hi!'+client.name+',您己成功连接服务器，可以正常通讯了..\\n');\nconsole.log(client.name+'加入了聊天...')\n//将客户端放到客户端列表中\nclientList.push(client);\n//监听客户端信信息并给出反馈\nclient.on('data', function(data) {\n// 把数据发送给所有客户端\n      broadcast(data,client);\n    });\n\n//监听离线事件\nclient.on('end',function(){\n    console.log(client.name+'quit...')\n    clientList.splice(clientList.indexOf(client),1);\n    client.write('用户:'+client.name+'退出了当前服务\\n');\n    })\n//监听错误事件\nclient.on('error',function(e){\n    console.log(e);\n})\n\n})\n/**\n *  广播消息\n **/\n function broadcast(message,client){\n     var cleanUp=[];\n     for(var i=0;i<clientList.length;i++) {\n         if(clientList[i]!==client[i]){\n             if(clientList[i].writable){\n             clientList[i].write(client.name+'说:'+message);\n             } else{\n                 cleanUp.push(clientList[i]);\n                 clientList[i].destroy();\n             }\n         }\n     }\n     //在写入循环中删除死节点，消除垃圾索引\n     for(var i =0;i<cleanUp.length;i++){\n         clientList.splice(clientList.indexOf(cleanUp[i],i));\n     }\n }\n\n```\n开启服务器\n`node server.js`\n`chatServer is running at port 9000...`  \n此时服务己经成功开启\n\n## 二、客户端连接##\n格式： `telnet host port`  \n例如我在本地再开启一个shell窗口  \n `telnet localhost 9000`  \n Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..\n\n## 三、测试效果   \n### 1. 开启服务器\n### 2. 客户端连接\n### 3. 测试通讯  \n下面是gif效果图\n![tcp在线聊天服务器](http://static.xiaomo.info/images/tcpServer.gif)\n","slug":"node_online_chat","published":1,"updated":"2016-06-28T02:51:38.748Z","_id":"cipjfs5u1000p4wmcs8100oqi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、搭建简易的服务器\"><a href=\"#一、搭建简易的服务器\" class=\"headerlink\" title=\"一、搭建简易的服务器\"></a>一、搭建简易的服务器</h2><p><code>vim server.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入node的net模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>)</span><br><span class=\"line\"><span class=\"comment\">//创建一个服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chatServer = net.createServer();</span><br><span class=\"line\"><span class=\"comment\">//定义一个客户端列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clientList = [];</span><br><span class=\"line\"><span class=\"comment\">//监听连接...</span></span><br><span class=\"line\">chatServer.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">client</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//给客户端反馈</span></span><br><span class=\"line\">client.name = client.remoteAddress+<span class=\"string\">':'</span>+client.remotePort;</span><br><span class=\"line\">client.write(<span class=\"string\">'Hi!'</span>+client.name+<span class=\"string\">',您己成功连接服务器，可以正常通讯了..\\n'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(client.name+<span class=\"string\">'加入了聊天...'</span>)</span><br><span class=\"line\"><span class=\"comment\">//将客户端放到客户端列表中</span></span><br><span class=\"line\">clientList.push(client);</span><br><span class=\"line\"><span class=\"comment\">//监听客户端信信息并给出反馈</span></span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 把数据发送给所有客户端</span></span><br><span class=\"line\">      broadcast(data,client);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听离线事件</span></span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(client.name+<span class=\"string\">'quit...'</span>)</span><br><span class=\"line\">    clientList.splice(clientList.indexOf(client),<span class=\"number\">1</span>);</span><br><span class=\"line\">    client.write(<span class=\"string\">'用户:'</span>+client.name+<span class=\"string\">'退出了当前服务\\n'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"comment\">//监听错误事件</span></span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  广播消息</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcast</span>(<span class=\"params\">message,client</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> cleanUp=[];</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;clientList.length;i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(clientList[i]!==client[i])&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(clientList[i].writable)&#123;</span><br><span class=\"line\">             clientList[i].write(client.name+<span class=\"string\">'说:'</span>+message);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 cleanUp.push(clientList[i]);</span><br><span class=\"line\">                 clientList[i].destroy();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//在写入循环中删除死节点，消除垃圾索引</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;cleanUp.length;i++)&#123;</span><br><span class=\"line\">         clientList.splice(clientList.indexOf(cleanUp[i],i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>开启服务器<br><code>node server.js</code><br><code>chatServer is running at port 9000...</code><br>此时服务己经成功开启</p>\n<h2 id=\"二、客户端连接\"><a href=\"#二、客户端连接\" class=\"headerlink\" title=\"二、客户端连接\"></a>二、客户端连接</h2><p>格式： <code>telnet host port</code><br>例如我在本地再开启一个shell窗口<br> <code>telnet localhost 9000</code><br> Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..</p>\n<h2 id=\"三、测试效果\"><a href=\"#三、测试效果\" class=\"headerlink\" title=\"三、测试效果\"></a>三、测试效果</h2><h3 id=\"1-开启服务器\"><a href=\"#1-开启服务器\" class=\"headerlink\" title=\"1. 开启服务器\"></a>1. 开启服务器</h3><h3 id=\"2-客户端连接\"><a href=\"#2-客户端连接\" class=\"headerlink\" title=\"2. 客户端连接\"></a>2. 客户端连接</h3><h3 id=\"3-测试通讯\"><a href=\"#3-测试通讯\" class=\"headerlink\" title=\"3. 测试通讯\"></a>3. 测试通讯</h3><p>下面是gif效果图<br><img src=\"http://static.xiaomo.info/images/tcpServer.gif\" alt=\"tcp在线聊天服务器\"></p>\n","excerpt":"<p>最近在学习node，跟着书上的例子写的一个基于net模块的tcp服务器，感觉挺有意思在此分享一下。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、搭建简易的服务器\"><a href=\"#一、搭建简易的服务器\" class=\"headerlink\" title=\"一、搭建简易的服务器\"></a>一、搭建简易的服务器</h2><p><code>vim server.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入node的net模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>)</span><br><span class=\"line\"><span class=\"comment\">//创建一个服务器</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> chatServer = net.createServer();</span><br><span class=\"line\"><span class=\"comment\">//定义一个客户端列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> clientList = [];</span><br><span class=\"line\"><span class=\"comment\">//监听连接...</span></span><br><span class=\"line\">chatServer.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">client</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//给客户端反馈</span></span><br><span class=\"line\">client.name = client.remoteAddress+<span class=\"string\">':'</span>+client.remotePort;</span><br><span class=\"line\">client.write(<span class=\"string\">'Hi!'</span>+client.name+<span class=\"string\">',您己成功连接服务器，可以正常通讯了..\\n'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(client.name+<span class=\"string\">'加入了聊天...'</span>)</span><br><span class=\"line\"><span class=\"comment\">//将客户端放到客户端列表中</span></span><br><span class=\"line\">clientList.push(client);</span><br><span class=\"line\"><span class=\"comment\">//监听客户端信信息并给出反馈</span></span><br><span class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 把数据发送给所有客户端</span></span><br><span class=\"line\">      broadcast(data,client);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//监听离线事件</span></span><br><span class=\"line\">client.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(client.name+<span class=\"string\">'quit...'</span>)</span><br><span class=\"line\">    clientList.splice(clientList.indexOf(client),<span class=\"number\">1</span>);</span><br><span class=\"line\">    client.write(<span class=\"string\">'用户:'</span>+client.name+<span class=\"string\">'退出了当前服务\\n'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"><span class=\"comment\">//监听错误事件</span></span><br><span class=\"line\">client.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> *  广播消息</span><br><span class=\"line\"> **/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">broadcast</span>(<span class=\"params\">message,client</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> cleanUp=[];</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;clientList.length;i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(clientList[i]!==client[i])&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(clientList[i].writable)&#123;</span><br><span class=\"line\">             clientList[i].write(client.name+<span class=\"string\">'说:'</span>+message);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 cleanUp.push(clientList[i]);</span><br><span class=\"line\">                 clientList[i].destroy();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"comment\">//在写入循环中删除死节点，消除垃圾索引</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;cleanUp.length;i++)&#123;</span><br><span class=\"line\">         clientList.splice(clientList.indexOf(cleanUp[i],i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>开启服务器<br><code>node server.js</code><br><code>chatServer is running at port 9000...</code><br>此时服务己经成功开启</p>\n<h2 id=\"二、客户端连接\"><a href=\"#二、客户端连接\" class=\"headerlink\" title=\"二、客户端连接\"></a>二、客户端连接</h2><p>格式： <code>telnet host port</code><br>例如我在本地再开启一个shell窗口<br> <code>telnet localhost 9000</code><br> Hi!127.0.0.1:43358,您己成功连接服务器，可以正常通讯了..</p>\n<h2 id=\"三、测试效果\"><a href=\"#三、测试效果\" class=\"headerlink\" title=\"三、测试效果\"></a>三、测试效果</h2><h3 id=\"1-开启服务器\"><a href=\"#1-开启服务器\" class=\"headerlink\" title=\"1. 开启服务器\"></a>1. 开启服务器</h3><h3 id=\"2-客户端连接\"><a href=\"#2-客户端连接\" class=\"headerlink\" title=\"2. 客户端连接\"></a>2. 客户端连接</h3><h3 id=\"3-测试通讯\"><a href=\"#3-测试通讯\" class=\"headerlink\" title=\"3. 测试通讯\"></a>3. 测试通讯</h3><p>下面是gif效果图<br><img src=\"http://static.xiaomo.info/images/tcpServer.gif\" alt=\"tcp在线聊天服务器\"></p>"},{"author":"小莫","date":"2016-05-13T16:00:00.000Z","title":"我的个人简历","_content":"\n我的简历\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n[点击下载简历](http://static.xiaomo.info/images/aboutMe.doc)\n","source":"_posts/2016-05-14.aboutme.md","raw":"---\nauthor: 小莫\ndate: 2016-05-14\ntitle: 我的个人简历\ntags:\n- 生活\ncategory: 生活随笔\npermalink: about_me\n---\n\n我的简历\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n[点击下载简历](http://static.xiaomo.info/images/aboutMe.doc)\n","slug":"about_me","published":1,"updated":"2016-06-28T02:51:32.313Z","_id":"cipjfs5u3000s4wmcrf829lyu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我的简历<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a><br><a href=\"http://static.xiaomo.info/images/aboutMe.doc\" target=\"_blank\" rel=\"external\">点击下载简历</a></p>\n","excerpt":"<p>我的简历<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a><br><a href=\"http://static.xiaomo.info/images/aboutMe.doc\">点击下载简历</a></p>"},{"author":"小莫","date":"2016-05-13T16:00:00.000Z","title":"webpack使用之基础篇","_content":"说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、基本简介  \nwebpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比\n### 1. requirejs\n很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，\n不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。\n### 2. browserify\n是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。\n并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。\n### 3. webpack\n支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，\n包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？\n\n## 二、环境搭建   \n### 1. IDE推荐  \n `IDEA`、`webstrom`、`sublime`、`atom`  都是很不错的编辑工具，`idea`大而全，`webstrom`是`idea`的简化版、`sublime`轻量但不失稳重、`atom`新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用`IDEA`、辅助`atom`。因为我是一个`java`党啊，少不了`IDEA`，`atom`的界面是我最喜欢的。\n### 2. 开始建项目写配置  \n a.新建项目 `mkdir webpack-study && cd webpack-study`  \n b.初始化环境 `npm init -y`  \n c.安装工具(如果你没安装taobao源，把cnpm换成npm)  `npm install --save-dev webpack webpack-dev-server`  \n说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server  \nd.新建配置文件  (名字一定不能换) `touch webpack.config.js`  \ne. 配置webpack\n\n```\nmodule.exprots={\n  entry:'./index.js',\n  output:{\n    path:__dirname+'/dist',\n    filename:'bundle.js'\n  }\n}\n```\n\n说明:  \n模块化`module.export`\n入口文件:`entry` 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了  \n输出 `output`,`path`是输出路径,`__dirname`是nodejs的全局变量，表示当前目录, `filename`，打包后的文件名\n\n## 三、 写一个小测试\n### 1. 新建入口文件并写入文件  \n`vim index.js`  \n`document.write('Hello world');`  \n### 2. 新建一个css  \n`touch style.css`  \n```\n  body{\n    background-color:pink;\n  }\n```\n\n### 3.新建一个html  \n`touch index.html`  \n写下以下内容  \n```\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <script src=\"dist/bundle.js\"></script>\n  </head>\n  <body>\n  </body>\n  </html>\n```\n\n说明:  \n模块化`module.export`\n入口文件:`entry` 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了  \n输出 `output`,`path`是输出路径,`__dirname`是nodejs的全局变量，表示当前目录, `filename`，打包后的文件名\n\n## 三、 写一个小测试\n### 1. 新建入口文件并写入文件  \n`vim index.js`  `document.write('Hello world');`  \n### 2. 新建一个css  \n`touch style.css`  \n\n```\n  body{\n    background-color:pink;\n  }\n```\n\n### 3.新建一个html  \n`touch index.html`  \n写下以下内容  \n```\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <script src=\"dist/bundle.js\"></script>\n  </head>\n  <body>\n  </body>\n  </html>\n```\n\n### 4.webpack的重头戏\n\n那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件\na.安装loaders  \n`npm install style-loader css-loader `  \nb.打开`webpack.config.js`  \n添加模块\n```\n  module:{\n    loaders:[\n    {\n      test:/\\.css$/,\n      loaders:['style-loader','css-loader']\n      }\n  ]\n\n  }\n```\n\n说明：  \n模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个  \n一个对象就是一个loader，`test`用正则匹配文件后缀  \nloaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader  \n`css-loader`处理css的一些url，包括相对的绝对的之类的东西  \n`style-loader` 是将css文件采用js动态写入html页面\nc.使用css  \n打开`index.js`  (因为我们这里没有用babel,所以就用es5来写)\n`require('./style.css');`\n\n## 四、查看效果\n我们现在可以使用`webpack-dev-server`这个东西了\n如果你己经全局安装了(`cnpm install -g webpack-dev-server`),直接命令`webpack-dev-server`就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下\n\n```\n{\n\"name\": \"webpack-study\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"start\":\"webpack-dev-server --progcess\",\n\"build\":\"webpack --progress\",\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"keywords\": [],\n\"author\": \"\",\n\"license\": \"ISC\",\n\"devDependencies\": {\n\"css-loader\": \"^0.23.1\",\n\"style-loader\": \"^0.13.1\",\n\"webpack\": \"^1.13.0\",\n\"webpack-dev-server\": \"^1.14.1\"\n  }\n}\n\n```\n\n这里我们就可以使用`npm run build`来编译，使用`npm run start`来开启服务器  \n\n```\n➜  webpack-study git:(master) ✗ npm run build\n\n> webpack-study@1.0.0 build /Users/xiaomo/workspace/webpack-study\n> webpack --progress\nHash: 11ffef2911f2436a3948\nVersion: webpack 1.13.0\nTime: 64ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.42 kB       0  [emitted]  main\n   [0] ./index.js 30 bytes {0} [built]\n   ➜  webpack-study git:(master) ✗ npm run start\n\n   > webpack-study@1.0.0 start /Users/xiaomo/workspace/webpack-study\n   > webpack-dev-server --progcess\n\n   http://localhost:8080/webpack-dev-server/\n   webpack result is served from /\n   content is served from /Users/xiaomo/workspace/webpack-study\n   Hash: 11ffef2911f2436a3948\n   Version: webpack 1.13.0\n   Time: 80ms\n       Asset     Size  Chunks             Chunk Names\n   bundle.js  1.42 kB       0  [emitted]  main\n   chunk    {0} bundle.js (main) 30 bytes [rendered]\n       [0] ./index.js 30 bytes {0} [built]\n   webpack: bundle is now VALID.\n\n```\n\nb.然后访问 http://locahost:8080 就可以看到效果了\n\n## 五、动态效果展示和总结\n### 1. 总共有5个文件\n`webpack.config.ks`、`index.js`、`index.html`、`style.css`、`package.json`，编译好要使用的只有`index.html`和`dist/bundle.js`两个文件\n### 2. gif动画\n会展示一下5个文件的内容\n### 3. 演示一下效果\n![webpack的简单使用](http://static.xiaomo.info/images/webpack.gif)\n如果觉得图小可以点击下面链接查看大图  \n[webpack的简单使用](http://static.xiaomo.info/images/webpack.gif)\n","source":"_posts/2016-05-14.webpack_basic_use.md","raw":"---\nauthor: 小莫\ndate: 2016-05-14\ntitle: webpack使用之基础篇\ntags:\n- webpack\n- 开发工具\ncategory: 开发工具\npermalink: webpack_basic_use\n---\n说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、基本简介  \nwebpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比\n### 1. requirejs\n很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，\n不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。\n### 2. browserify\n是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。\n并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。\n### 3. webpack\n支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，\n包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？\n\n## 二、环境搭建   \n### 1. IDE推荐  \n `IDEA`、`webstrom`、`sublime`、`atom`  都是很不错的编辑工具，`idea`大而全，`webstrom`是`idea`的简化版、`sublime`轻量但不失稳重、`atom`新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用`IDEA`、辅助`atom`。因为我是一个`java`党啊，少不了`IDEA`，`atom`的界面是我最喜欢的。\n### 2. 开始建项目写配置  \n a.新建项目 `mkdir webpack-study && cd webpack-study`  \n b.初始化环境 `npm init -y`  \n c.安装工具(如果你没安装taobao源，把cnpm换成npm)  `npm install --save-dev webpack webpack-dev-server`  \n说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server  \nd.新建配置文件  (名字一定不能换) `touch webpack.config.js`  \ne. 配置webpack\n\n```\nmodule.exprots={\n  entry:'./index.js',\n  output:{\n    path:__dirname+'/dist',\n    filename:'bundle.js'\n  }\n}\n```\n\n说明:  \n模块化`module.export`\n入口文件:`entry` 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了  \n输出 `output`,`path`是输出路径,`__dirname`是nodejs的全局变量，表示当前目录, `filename`，打包后的文件名\n\n## 三、 写一个小测试\n### 1. 新建入口文件并写入文件  \n`vim index.js`  \n`document.write('Hello world');`  \n### 2. 新建一个css  \n`touch style.css`  \n```\n  body{\n    background-color:pink;\n  }\n```\n\n### 3.新建一个html  \n`touch index.html`  \n写下以下内容  \n```\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <script src=\"dist/bundle.js\"></script>\n  </head>\n  <body>\n  </body>\n  </html>\n```\n\n说明:  \n模块化`module.export`\n入口文件:`entry` 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了  \n输出 `output`,`path`是输出路径,`__dirname`是nodejs的全局变量，表示当前目录, `filename`，打包后的文件名\n\n## 三、 写一个小测试\n### 1. 新建入口文件并写入文件  \n`vim index.js`  `document.write('Hello world');`  \n### 2. 新建一个css  \n`touch style.css`  \n\n```\n  body{\n    background-color:pink;\n  }\n```\n\n### 3.新建一个html  \n`touch index.html`  \n写下以下内容  \n```\n  <!doctype html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>hello webpack</title>\n    <script src=\"dist/bundle.js\"></script>\n  </head>\n  <body>\n  </body>\n  </html>\n```\n\n### 4.webpack的重头戏\n\n那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件\na.安装loaders  \n`npm install style-loader css-loader `  \nb.打开`webpack.config.js`  \n添加模块\n```\n  module:{\n    loaders:[\n    {\n      test:/\\.css$/,\n      loaders:['style-loader','css-loader']\n      }\n  ]\n\n  }\n```\n\n说明：  \n模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个  \n一个对象就是一个loader，`test`用正则匹配文件后缀  \nloaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader  \n`css-loader`处理css的一些url，包括相对的绝对的之类的东西  \n`style-loader` 是将css文件采用js动态写入html页面\nc.使用css  \n打开`index.js`  (因为我们这里没有用babel,所以就用es5来写)\n`require('./style.css');`\n\n## 四、查看效果\n我们现在可以使用`webpack-dev-server`这个东西了\n如果你己经全局安装了(`cnpm install -g webpack-dev-server`),直接命令`webpack-dev-server`就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下\n\n```\n{\n\"name\": \"webpack-study\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"start\":\"webpack-dev-server --progcess\",\n\"build\":\"webpack --progress\",\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n},\n\"keywords\": [],\n\"author\": \"\",\n\"license\": \"ISC\",\n\"devDependencies\": {\n\"css-loader\": \"^0.23.1\",\n\"style-loader\": \"^0.13.1\",\n\"webpack\": \"^1.13.0\",\n\"webpack-dev-server\": \"^1.14.1\"\n  }\n}\n\n```\n\n这里我们就可以使用`npm run build`来编译，使用`npm run start`来开启服务器  \n\n```\n➜  webpack-study git:(master) ✗ npm run build\n\n> webpack-study@1.0.0 build /Users/xiaomo/workspace/webpack-study\n> webpack --progress\nHash: 11ffef2911f2436a3948\nVersion: webpack 1.13.0\nTime: 64ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.42 kB       0  [emitted]  main\n   [0] ./index.js 30 bytes {0} [built]\n   ➜  webpack-study git:(master) ✗ npm run start\n\n   > webpack-study@1.0.0 start /Users/xiaomo/workspace/webpack-study\n   > webpack-dev-server --progcess\n\n   http://localhost:8080/webpack-dev-server/\n   webpack result is served from /\n   content is served from /Users/xiaomo/workspace/webpack-study\n   Hash: 11ffef2911f2436a3948\n   Version: webpack 1.13.0\n   Time: 80ms\n       Asset     Size  Chunks             Chunk Names\n   bundle.js  1.42 kB       0  [emitted]  main\n   chunk    {0} bundle.js (main) 30 bytes [rendered]\n       [0] ./index.js 30 bytes {0} [built]\n   webpack: bundle is now VALID.\n\n```\n\nb.然后访问 http://locahost:8080 就可以看到效果了\n\n## 五、动态效果展示和总结\n### 1. 总共有5个文件\n`webpack.config.ks`、`index.js`、`index.html`、`style.css`、`package.json`，编译好要使用的只有`index.html`和`dist/bundle.js`两个文件\n### 2. gif动画\n会展示一下5个文件的内容\n### 3. 演示一下效果\n![webpack的简单使用](http://static.xiaomo.info/images/webpack.gif)\n如果觉得图小可以点击下面链接查看大图  \n[webpack的简单使用](http://static.xiaomo.info/images/webpack.gif)\n","slug":"webpack_basic_use","published":1,"updated":"2016-06-28T02:51:15.032Z","_id":"cipjfs5u7000w4wmcpihdwhow","comments":1,"layout":"post","photos":[],"link":"","content":"<p>说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、基本简介\"><a href=\"#一、基本简介\" class=\"headerlink\" title=\"一、基本简介\"></a>一、基本简介</h2><p>webpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比</p>\n<h3 id=\"1-requirejs\"><a href=\"#1-requirejs\" class=\"headerlink\" title=\"1. requirejs\"></a>1. requirejs</h3><p>很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，<br>不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。</p>\n<h3 id=\"2-browserify\"><a href=\"#2-browserify\" class=\"headerlink\" title=\"2. browserify\"></a>2. browserify</h3><p>是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。<br>并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。</p>\n<h3 id=\"3-webpack\"><a href=\"#3-webpack\" class=\"headerlink\" title=\"3. webpack\"></a>3. webpack</h3><p>支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，<br>包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？</p>\n<h2 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h2><h3 id=\"1-IDE推荐\"><a href=\"#1-IDE推荐\" class=\"headerlink\" title=\"1. IDE推荐\"></a>1. IDE推荐</h3><p> <code>IDEA</code>、<code>webstrom</code>、<code>sublime</code>、<code>atom</code>  都是很不错的编辑工具，<code>idea</code>大而全，<code>webstrom</code>是<code>idea</code>的简化版、<code>sublime</code>轻量但不失稳重、<code>atom</code>新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用<code>IDEA</code>、辅助<code>atom</code>。因为我是一个<code>java</code>党啊，少不了<code>IDEA</code>，<code>atom</code>的界面是我最喜欢的。</p>\n<h3 id=\"2-开始建项目写配置\"><a href=\"#2-开始建项目写配置\" class=\"headerlink\" title=\"2. 开始建项目写配置\"></a>2. 开始建项目写配置</h3><p> a.新建项目 <code>mkdir webpack-study &amp;&amp; cd webpack-study</code><br> b.初始化环境 <code>npm init -y</code><br> c.安装工具(如果你没安装taobao源，把cnpm换成npm)  <code>npm install --save-dev webpack webpack-dev-server</code><br>说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server<br>d.新建配置文件  (名字一定不能换) <code>touch webpack.config.js</code><br>e. 配置webpack</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>.exprots=&#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>\n<h2 id=\"三、-写一个小测试\"><a href=\"#三、-写一个小测试\" class=\"headerlink\" title=\"三、 写一个小测试\"></a>三、 写一个小测试</h2><h3 id=\"1-新建入口文件并写入文件\"><a href=\"#1-新建入口文件并写入文件\" class=\"headerlink\" title=\"1. 新建入口文件并写入文件\"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code><br><code>document.write(&#39;Hello world&#39;);</code>  </p>\n<h3 id=\"2-新建一个css\"><a href=\"#2-新建一个css\" class=\"headerlink\" title=\"2. 新建一个css\"></a>2. 新建一个css</h3><p><code>touch style.css</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-新建一个html\"><a href=\"#3-新建一个html\" class=\"headerlink\" title=\"3.新建一个html\"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>\n<h2 id=\"三、-写一个小测试-1\"><a href=\"#三、-写一个小测试-1\" class=\"headerlink\" title=\"三、 写一个小测试\"></a>三、 写一个小测试</h2><h3 id=\"1-新建入口文件并写入文件-1\"><a href=\"#1-新建入口文件并写入文件-1\" class=\"headerlink\" title=\"1. 新建入口文件并写入文件\"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code>  <code>document.write(&#39;Hello world&#39;);</code>  </p>\n<h3 id=\"2-新建一个css-1\"><a href=\"#2-新建一个css-1\" class=\"headerlink\" title=\"2. 新建一个css\"></a>2. 新建一个css</h3><p><code>touch style.css</code>  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-新建一个html-1\"><a href=\"#3-新建一个html-1\" class=\"headerlink\" title=\"3.新建一个html\"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-webpack的重头戏\"><a href=\"#4-webpack的重头戏\" class=\"headerlink\" title=\"4.webpack的重头戏\"></a>4.webpack的重头戏</h3><p>那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件<br>a.安装loaders<br><code>npm install style-loader css-loader</code><br>b.打开<code>webpack.config.js</code><br>添加模块<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>:&#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>:[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test:/\\.css$/,</span><br><span class=\"line\">    loaders:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br>模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个<br>一个对象就是一个loader，<code>test</code>用正则匹配文件后缀<br>loaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader<br><code>css-loader</code>处理css的一些url，包括相对的绝对的之类的东西<br><code>style-loader</code> 是将css文件采用js动态写入html页面<br>c.使用css<br>打开<code>index.js</code>  (因为我们这里没有用babel,所以就用es5来写)<br><code>require(&#39;./style.css&#39;);</code></p>\n<h2 id=\"四、查看效果\"><a href=\"#四、查看效果\" class=\"headerlink\" title=\"四、查看效果\"></a>四、查看效果</h2><p>我们现在可以使用<code>webpack-dev-server</code>这个东西了<br>如果你己经全局安装了(<code>cnpm install -g webpack-dev-server</code>),直接命令<code>webpack-dev-server</code>就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-study\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">\"start\"</span>:<span class=\"string\">\"webpack-dev-server --progcess\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"build\"</span>:<span class=\"string\">\"webpack --progress\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\"><span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.0\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们就可以使用<code>npm run build</code>来编译，使用<code>npm run start</code>来开启服务器  </p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  webpack-study git:(master) ✗ npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-study@<span class=\"number\">1.0</span><span class=\"number\">.0</span> build /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\">&gt; webpack --progress</span><br><span class=\"line\"><span class=\"symbol\">Hash:</span> <span class=\"number\">11f</span>fef2911f2436a3948</span><br><span class=\"line\"><span class=\"symbol\">Version:</span> webpack <span class=\"number\">1.13</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"symbol\">Time:</span> <span class=\"number\">64</span>ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  <span class=\"number\">1.42</span> kB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./index.js <span class=\"number\">30</span> <span class=\"class\">bytes </span>&#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   ➜  webpack-study git:(master) ✗ npm run start</span><br><span class=\"line\"></span><br><span class=\"line\">   &gt; webpack-study@<span class=\"number\">1.0</span><span class=\"number\">.0</span> start /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\">   &gt; webpack-dev-server --progcess</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">   http:</span><span class=\"comment\">//localhost:8080/webpack-dev-server/</span></span><br><span class=\"line\">   webpack result is served from /</span><br><span class=\"line\">   content is served from /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\"><span class=\"symbol\">   Hash:</span> <span class=\"number\">11f</span>fef2911f2436a3948</span><br><span class=\"line\"><span class=\"symbol\">   Version:</span> webpack <span class=\"number\">1.13</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"symbol\">   Time:</span> <span class=\"number\">80</span>ms</span><br><span class=\"line\">       Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   bundle.js  <span class=\"number\">1.42</span> kB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">   chunk    &#123;<span class=\"number\">0</span>&#125; bundle.js (main) <span class=\"number\">30</span> bytes [rendered]</span><br><span class=\"line\">       [<span class=\"number\">0</span>] ./index.js <span class=\"number\">30</span> <span class=\"class\">bytes </span>&#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\"><span class=\"symbol\">   webpack:</span> bundle is now VALID.</span><br></pre></td></tr></table></figure>\n<p>b.然后访问 <a href=\"http://locahost:8080\" target=\"_blank\" rel=\"external\">http://locahost:8080</a> 就可以看到效果了</p>\n<h2 id=\"五、动态效果展示和总结\"><a href=\"#五、动态效果展示和总结\" class=\"headerlink\" title=\"五、动态效果展示和总结\"></a>五、动态效果展示和总结</h2><h3 id=\"1-总共有5个文件\"><a href=\"#1-总共有5个文件\" class=\"headerlink\" title=\"1. 总共有5个文件\"></a>1. 总共有5个文件</h3><p><code>webpack.config.ks</code>、<code>index.js</code>、<code>index.html</code>、<code>style.css</code>、<code>package.json</code>，编译好要使用的只有<code>index.html</code>和<code>dist/bundle.js</code>两个文件</p>\n<h3 id=\"2-gif动画\"><a href=\"#2-gif动画\" class=\"headerlink\" title=\"2. gif动画\"></a>2. gif动画</h3><p>会展示一下5个文件的内容</p>\n<h3 id=\"3-演示一下效果\"><a href=\"#3-演示一下效果\" class=\"headerlink\" title=\"3. 演示一下效果\"></a>3. 演示一下效果</h3><p><img src=\"http://static.xiaomo.info/images/webpack.gif\" alt=\"webpack的简单使用\"><br>如果觉得图小可以点击下面链接查看大图<br><a href=\"http://static.xiaomo.info/images/webpack.gif\" target=\"_blank\" rel=\"external\">webpack的简单使用</a></p>\n","excerpt":"<p>说到自动化构建，你想到了什么？基于AMD的requirejs？还是基于commoJS的browserify？他们都在各自的领域或者说时代发挥了很重要的作用。但是时代的变迁，webpack成了现在的佼佼者，我们不知道什么时候wepback也会被取代，但是现在我们必须要掌握。我不担心我学完webpack新东西来了就没用了，相反的我很期待也很高兴有新的东西来取代webpack，因为如果能取代，必然是更好的东西。如果是更好的，那又为什么要拒绝呢？活在当下，认真学习。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、基本简介\"><a href=\"#一、基本简介\" class=\"headerlink\" title=\"一、基本简介\"></a>一、基本简介</h2><p>webpack和requirejs browserify一样，都是一款打包工具，那为什么要选这个？我们进行一个对比</p>\n<h3 id=\"1-requirejs\"><a href=\"#1-requirejs\" class=\"headerlink\" title=\"1. requirejs\"></a>1. requirejs</h3><p>很老的产物了，它兴起的时候web模块化的标准都还没有完善。那个时候出了一款基于AMD的打包工具，<br>不得不说对前端的发展起到了至关重要的作用，如果它可以功成身退了。</p>\n<h3 id=\"2-browserify\"><a href=\"#2-browserify\" class=\"headerlink\" title=\"2. browserify\"></a>2. browserify</h3><p>是一个和webpack差不多同时代的产物，但是它只支持基于commonJS，对于AMD来说只能兴叹了。<br>并且它只支持打包js,如果你对这两个缺点不那么在意，那么就是它了。</p>\n<h3 id=\"3-webpack\"><a href=\"#3-webpack\" class=\"headerlink\" title=\"3. webpack\"></a>3. webpack</h3><p>支持AMD和commonJS,以模块化为起点,我们不仅可以用它打包js，也可以打包css，<br>包括图片。webpack把任何一个文件都看成一个模块，因此你准备好要迎接模块化的挑战了吗？</p>\n<h2 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h2><h3 id=\"1-IDE推荐\"><a href=\"#1-IDE推荐\" class=\"headerlink\" title=\"1. IDE推荐\"></a>1. IDE推荐</h3><p> <code>IDEA</code>、<code>webstrom</code>、<code>sublime</code>、<code>atom</code>  都是很不错的编辑工具，<code>idea</code>大而全，<code>webstrom</code>是<code>idea</code>的简化版、<code>sublime</code>轻量但不失稳重、<code>atom</code>新兴但不失典雅，东西不分上下，重在自己喜欢。找一个自己顺手的就好，顺便一提，我现在主要使用<code>IDEA</code>、辅助<code>atom</code>。因为我是一个<code>java</code>党啊，少不了<code>IDEA</code>，<code>atom</code>的界面是我最喜欢的。</p>\n<h3 id=\"2-开始建项目写配置\"><a href=\"#2-开始建项目写配置\" class=\"headerlink\" title=\"2. 开始建项目写配置\"></a>2. 开始建项目写配置</h3><p> a.新建项目 <code>mkdir webpack-study &amp;&amp; cd webpack-study</code><br> b.初始化环境 <code>npm init -y</code><br> c.安装工具(如果你没安装taobao源，把cnpm换成npm)  <code>npm install --save-dev webpack webpack-dev-server</code><br>说明:webpack是核心文件、wepback-dev-server是类http-server的web启动工具，建议安装一下这个server<br>d.新建配置文件  (名字一定不能换) <code>touch webpack.config.js</code><br>e. 配置webpack</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span>.exprots=&#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>\n<h2 id=\"三、-写一个小测试\"><a href=\"#三、-写一个小测试\" class=\"headerlink\" title=\"三、 写一个小测试\"></a>三、 写一个小测试</h2><h3 id=\"1-新建入口文件并写入文件\"><a href=\"#1-新建入口文件并写入文件\" class=\"headerlink\" title=\"1. 新建入口文件并写入文件\"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code><br><code>document.write(&#39;Hello world&#39;);</code>  </p>\n<h3 id=\"2-新建一个css\"><a href=\"#2-新建一个css\" class=\"headerlink\" title=\"2. 新建一个css\"></a>2. 新建一个css</h3><p><code>touch style.css</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-新建一个html\"><a href=\"#3-新建一个html\" class=\"headerlink\" title=\"3.新建一个html\"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>说明:<br>模块化<code>module.export</code><br>入口文件:<code>entry</code> 有几个页面就有几个entry 如果是单页面（spa)，一个entry就够了<br>输出 <code>output</code>,<code>path</code>是输出路径,<code>__dirname</code>是nodejs的全局变量，表示当前目录, <code>filename</code>，打包后的文件名</p>\n<h2 id=\"三、-写一个小测试-1\"><a href=\"#三、-写一个小测试-1\" class=\"headerlink\" title=\"三、 写一个小测试\"></a>三、 写一个小测试</h2><h3 id=\"1-新建入口文件并写入文件-1\"><a href=\"#1-新建入口文件并写入文件-1\" class=\"headerlink\" title=\"1. 新建入口文件并写入文件\"></a>1. 新建入口文件并写入文件</h3><p><code>vim index.js</code>  <code>document.write(&#39;Hello world&#39;);</code>  </p>\n<h3 id=\"2-新建一个css-1\"><a href=\"#2-新建一个css-1\" class=\"headerlink\" title=\"2. 新建一个css\"></a>2. 新建一个css</h3><p><code>touch style.css</code>  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>:pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-新建一个html-1\"><a href=\"#3-新建一个html-1\" class=\"headerlink\" title=\"3.新建一个html\"></a>3.新建一个html</h3><p><code>touch index.html</code><br>写下以下内容<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-webpack的重头戏\"><a href=\"#4-webpack的重头戏\" class=\"headerlink\" title=\"4.webpack的重头戏\"></a>4.webpack的重头戏</h3><p>那就是loaders，wepback的一大特色就是可以将一些浏览器不能原生支持的文件通过loaders编译成浏览器可以支持的文件<br>a.安装loaders<br><code>npm install style-loader css-loader</code><br>b.打开<code>webpack.config.js</code><br>添加模块<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>:&#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>:[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    test:/\\.css$/,</span><br><span class=\"line\">    loaders:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>说明：<br>模块下定义大的loaders去loader需要的东西，它是一个数组，意味着它可以定义多个<br>一个对象就是一个loader，<code>test</code>用正则匹配文件后缀<br>loaders指定采用哪个loader,注意它是从右往左执行，所以这里先执行css-loader<br><code>css-loader</code>处理css的一些url，包括相对的绝对的之类的东西<br><code>style-loader</code> 是将css文件采用js动态写入html页面<br>c.使用css<br>打开<code>index.js</code>  (因为我们这里没有用babel,所以就用es5来写)<br><code>require(&#39;./style.css&#39;);</code></p>\n<h2 id=\"四、查看效果\"><a href=\"#四、查看效果\" class=\"headerlink\" title=\"四、查看效果\"></a>四、查看效果</h2><p>我们现在可以使用<code>webpack-dev-server</code>这个东西了<br>如果你己经全局安装了(<code>cnpm install -g webpack-dev-server</code>),直接命令<code>webpack-dev-server</code>就可以开起来了，当然你也可以在package.json文件里面添加script，文件如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"name\"</span>: <span class=\"string\">\"webpack-study\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">\"start\"</span>:<span class=\"string\">\"webpack-dev-server --progcess\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"build\"</span>:<span class=\"string\">\"webpack --progress\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">\"keywords\"</span>: [],</span><br><span class=\"line\"><span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\"><span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.23.1\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.13.1\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.13.0\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^1.14.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们就可以使用<code>npm run build</code>来编译，使用<code>npm run start</code>来开启服务器  </p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  webpack-study git:(master) ✗ npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-study@<span class=\"number\">1.0</span><span class=\"number\">.0</span> build /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\">&gt; webpack --progress</span><br><span class=\"line\"><span class=\"symbol\">Hash:</span> <span class=\"number\">11f</span>fef2911f2436a3948</span><br><span class=\"line\"><span class=\"symbol\">Version:</span> webpack <span class=\"number\">1.13</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"symbol\">Time:</span> <span class=\"number\">64</span>ms</span><br><span class=\"line\">    Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">bundle.js  <span class=\"number\">1.42</span> kB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">   [<span class=\"number\">0</span>] ./index.js <span class=\"number\">30</span> <span class=\"class\">bytes </span>&#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\">   ➜  webpack-study git:(master) ✗ npm run start</span><br><span class=\"line\"></span><br><span class=\"line\">   &gt; webpack-study@<span class=\"number\">1.0</span><span class=\"number\">.0</span> start /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\">   &gt; webpack-dev-server --progcess</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">   http:</span><span class=\"comment\">//localhost:8080/webpack-dev-server/</span></span><br><span class=\"line\">   webpack result is served from /</span><br><span class=\"line\">   content is served from /Users<span class=\"meta-keyword\">/xiaomo/</span>workspace/webpack-study</span><br><span class=\"line\"><span class=\"symbol\">   Hash:</span> <span class=\"number\">11f</span>fef2911f2436a3948</span><br><span class=\"line\"><span class=\"symbol\">   Version:</span> webpack <span class=\"number\">1.13</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"symbol\">   Time:</span> <span class=\"number\">80</span>ms</span><br><span class=\"line\">       Asset     Size  Chunks             Chunk Names</span><br><span class=\"line\">   bundle.js  <span class=\"number\">1.42</span> kB       <span class=\"number\">0</span>  [emitted]  main</span><br><span class=\"line\">   chunk    &#123;<span class=\"number\">0</span>&#125; bundle.js (main) <span class=\"number\">30</span> bytes [rendered]</span><br><span class=\"line\">       [<span class=\"number\">0</span>] ./index.js <span class=\"number\">30</span> <span class=\"class\">bytes </span>&#123;<span class=\"number\">0</span>&#125; [built]</span><br><span class=\"line\"><span class=\"symbol\">   webpack:</span> bundle is now VALID.</span><br></pre></td></tr></table></figure>\n<p>b.然后访问 <a href=\"http://locahost:8080\">http://locahost:8080</a> 就可以看到效果了</p>\n<h2 id=\"五、动态效果展示和总结\"><a href=\"#五、动态效果展示和总结\" class=\"headerlink\" title=\"五、动态效果展示和总结\"></a>五、动态效果展示和总结</h2><h3 id=\"1-总共有5个文件\"><a href=\"#1-总共有5个文件\" class=\"headerlink\" title=\"1. 总共有5个文件\"></a>1. 总共有5个文件</h3><p><code>webpack.config.ks</code>、<code>index.js</code>、<code>index.html</code>、<code>style.css</code>、<code>package.json</code>，编译好要使用的只有<code>index.html</code>和<code>dist/bundle.js</code>两个文件</p>\n<h3 id=\"2-gif动画\"><a href=\"#2-gif动画\" class=\"headerlink\" title=\"2. gif动画\"></a>2. gif动画</h3><p>会展示一下5个文件的内容</p>\n<h3 id=\"3-演示一下效果\"><a href=\"#3-演示一下效果\" class=\"headerlink\" title=\"3. 演示一下效果\"></a>3. 演示一下效果</h3><p><img src=\"http://static.xiaomo.info/images/webpack.gif\" alt=\"webpack的简单使用\"><br>如果觉得图小可以点击下面链接查看大图<br><a href=\"http://static.xiaomo.info/images/webpack.gif\">webpack的简单使用</a></p>"},{"title":"用 Excel 生成和管理 Markdown 表格","date":"2016-05-16T10:18:33.000Z","toc":null,"author":null,"comments":1,"original":null,"_content":"\n<h2 id=\"intro\">前言</h2>Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 填写表格\n在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 **`:-:`**，要右对齐的填**`-:`**，其它全部填上**`-`**。\n\n-|左对齐|居中对齐|右对齐\n:-:|-|:-:|-:\n**:-:**|**-**|**:-:**|**-**:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n- 如图左上角，表头也不要留空，填上`-`提高兼容性。\n\n\n## 生成表格\n选中表格，复制，然后粘贴到 Markdown 编辑器中\n\n```\n-\t左对齐\t居中对齐\t右对齐\n:-:\t:-\t:-:\t-:\n1\tLeft\tCenter\tRight\n2\tLeft\tCenter\tRight\n3\tLeft\tCenter\tRight\n```\n\n复制出来的 Excel 默认以`tab`作为单元格分隔符，而 Markdown 则以`|`为分隔符。顺理成章，当我们使用 `|` 对原`tab`分隔符进行替换后，即可生成 Markdown 化的表格。\n\n```\n-|默认左对齐|居中对齐|内容右对齐\n:-:|-|:-:|-:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n```\n\n表格效果大致如下：\n\n-|左对齐|居中对齐|右对齐\n:-:|-|:-:|-:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n\n\n## 处理表格\n在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。\n\n- 可以对表格进行快速拖拽排序；\n- 可以用公式 `=row()` 给表格添加自动序号；\n- 当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等；\n\n\n## 其他说明\n\n- Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中；\n- 这种写法的表格，目前已知在 GitHub 上不能正确解析；\n- [自用 Windows 和 Mac 软件推荐](/2015/09/20/windows-mac-software/)，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。\n- 顺便推荐一个在线表格生成网站，[Tables Generator.com](http://www.tablesgenerator.com/markdown_tables)，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。\n","source":"_posts/2016-05-16.excel_markdown_table.md","raw":"---\ntitle: 用 Excel 生成和管理 Markdown 表格\ndate: 2016-05-16 18:18:33\ncategories:\n- 触类旁通\ntags:\n- markdown\ntoc:\nauthor:\ncomments:\noriginal:\npermalink: excel_markdown_table\n---\n\n<h2 id=\"intro\">前言</h2>Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 填写表格\n在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 **`:-:`**，要右对齐的填**`-:`**，其它全部填上**`-`**。\n\n-|左对齐|居中对齐|右对齐\n:-:|-|:-:|-:\n**:-:**|**-**|**:-:**|**-**:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n- 如图左上角，表头也不要留空，填上`-`提高兼容性。\n\n\n## 生成表格\n选中表格，复制，然后粘贴到 Markdown 编辑器中\n\n```\n-\t左对齐\t居中对齐\t右对齐\n:-:\t:-\t:-:\t-:\n1\tLeft\tCenter\tRight\n2\tLeft\tCenter\tRight\n3\tLeft\tCenter\tRight\n```\n\n复制出来的 Excel 默认以`tab`作为单元格分隔符，而 Markdown 则以`|`为分隔符。顺理成章，当我们使用 `|` 对原`tab`分隔符进行替换后，即可生成 Markdown 化的表格。\n\n```\n-|默认左对齐|居中对齐|内容右对齐\n:-:|-|:-:|-:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n```\n\n表格效果大致如下：\n\n-|左对齐|居中对齐|右对齐\n:-:|-|:-:|-:\n1|Left|Center|Right\n2|Left|Center|Right\n3|Left|Center|Right\n\n\n## 处理表格\n在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。\n\n- 可以对表格进行快速拖拽排序；\n- 可以用公式 `=row()` 给表格添加自动序号；\n- 当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等；\n\n\n## 其他说明\n\n- Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中；\n- 这种写法的表格，目前已知在 GitHub 上不能正确解析；\n- [自用 Windows 和 Mac 软件推荐](/2015/09/20/windows-mac-software/)，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。\n- 顺便推荐一个在线表格生成网站，[Tables Generator.com](http://www.tablesgenerator.com/markdown_tables)，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。\n","slug":"excel_markdown_table","published":1,"updated":"2016-06-28T02:51:11.628Z","_id":"cipjfs5uc000z4wmcopnv2nfk","layout":"post","photos":[],"link":"","content":"<p></p><h2 id=\"intro\">前言</h2>Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。<p></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"填写表格\"><a href=\"#填写表格\" class=\"headerlink\" title=\"填写表格\"></a>填写表格</h2><p>在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 <strong><code>:-:</code></strong>，要右对齐的填<strong><code>-:</code></strong>，其它全部填上<strong><code>-</code></strong>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>:-:</strong></td>\n<td><strong>-</strong></td>\n<td style=\"text-align:center\"><strong>:-:</strong></td>\n<td style=\"text-align:right\"><strong>-</strong>:</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如图左上角，表头也不要留空，填上<code>-</code>提高兼容性。</li>\n</ul>\n<h2 id=\"生成表格\"><a href=\"#生成表格\" class=\"headerlink\" title=\"生成表格\"></a>生成表格</h2><p>选中表格，复制，然后粘贴到 Markdown 编辑器中</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-\t</span>左对齐\t居中对齐\t右对齐</span><br><span class=\"line\"><span class=\"meta\">:-:</span>\t:-\t:-:\t-:</span><br><span class=\"line\">1\tLeft\tCenter\tRight</span><br><span class=\"line\">2\tLeft\tCenter\tRight</span><br><span class=\"line\">3\tLeft\tCenter\tRight</span><br></pre></td></tr></table></figure>\n<p>复制出来的 Excel 默认以<code>tab</code>作为单元格分隔符，而 Markdown 则以<code>|</code>为分隔符。顺理成章，当我们使用 <code>|</code> 对原<code>tab</code>分隔符进行替换后，即可生成 Markdown 化的表格。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-|<span class=\"string\">默认左对齐</span>|<span class=\"string\">居中对齐</span>|<span class=\"string\">内容右对齐</span><br><span class=\"line\">:-:</span>|<span class=\"string\">-</span>|<span class=\"string\">:-:</span>|<span class=\"string\">-:</span><br><span class=\"line\">1</span>|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br><span class=\"line\">2|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br><span class=\"line\">3|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br></pre></td></tr></table></figure>\n<p>表格效果大致如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"处理表格\"><a href=\"#处理表格\" class=\"headerlink\" title=\"处理表格\"></a>处理表格</h2><p>在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。</p>\n<ul>\n<li>可以对表格进行快速拖拽排序；</li>\n<li>可以用公式 <code>=row()</code> 给表格添加自动序号；</li>\n<li>当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等；</li>\n</ul>\n<h2 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h2><ul>\n<li>Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中；</li>\n<li>这种写法的表格，目前已知在 GitHub 上不能正确解析；</li>\n<li><a href=\"/2015/09/20/windows-mac-software/\">自用 Windows 和 Mac 软件推荐</a>，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。</li>\n<li>顺便推荐一个在线表格生成网站，<a href=\"http://www.tablesgenerator.com/markdown_tables\" target=\"_blank\" rel=\"external\">Tables Generator.com</a>，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。</li>\n</ul>\n","excerpt":"<p><h2 id=\"intro\">前言</h2>Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"填写表格\"><a href=\"#填写表格\" class=\"headerlink\" title=\"填写表格\"></a>填写表格</h2><p>在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 <strong><code>:-:</code></strong>，要右对齐的填<strong><code>-:</code></strong>，其它全部填上<strong><code>-</code></strong>。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>:-:</strong></td>\n<td><strong>-</strong></td>\n<td style=\"text-align:center\"><strong>:-:</strong></td>\n<td style=\"text-align:right\"><strong>-</strong>:</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>如图左上角，表头也不要留空，填上<code>-</code>提高兼容性。</li>\n</ul>\n<h2 id=\"生成表格\"><a href=\"#生成表格\" class=\"headerlink\" title=\"生成表格\"></a>生成表格</h2><p>选中表格，复制，然后粘贴到 Markdown 编辑器中</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-\t</span>左对齐\t居中对齐\t右对齐</span><br><span class=\"line\"><span class=\"meta\">:-:</span>\t:-\t:-:\t-:</span><br><span class=\"line\">1\tLeft\tCenter\tRight</span><br><span class=\"line\">2\tLeft\tCenter\tRight</span><br><span class=\"line\">3\tLeft\tCenter\tRight</span><br></pre></td></tr></table></figure>\n<p>复制出来的 Excel 默认以<code>tab</code>作为单元格分隔符，而 Markdown 则以<code>|</code>为分隔符。顺理成章，当我们使用 <code>|</code> 对原<code>tab</code>分隔符进行替换后，即可生成 Markdown 化的表格。</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-|<span class=\"string\">默认左对齐</span>|<span class=\"string\">居中对齐</span>|<span class=\"string\">内容右对齐</span><br><span class=\"line\">:-:</span>|<span class=\"string\">-</span>|<span class=\"string\">:-:</span>|<span class=\"string\">-:</span><br><span class=\"line\">1</span>|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br><span class=\"line\">2|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br><span class=\"line\">3|<span class=\"string\">Left</span>|<span class=\"string\">Center</span>|Right</span><br></pre></td></tr></table></figure>\n<p>表格效果大致如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>左对齐</th>\n<th style=\"text-align:center\">居中对齐</th>\n<th style=\"text-align:right\">右对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>Left</td>\n<td style=\"text-align:center\">Center</td>\n<td style=\"text-align:right\">Right</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"处理表格\"><a href=\"#处理表格\" class=\"headerlink\" title=\"处理表格\"></a>处理表格</h2><p>在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。</p>\n<ul>\n<li>可以对表格进行快速拖拽排序；</li>\n<li>可以用公式 <code>=row()</code> 给表格添加自动序号；</li>\n<li>当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等；</li>\n</ul>\n<h2 id=\"其他说明\"><a href=\"#其他说明\" class=\"headerlink\" title=\"其他说明\"></a>其他说明</h2><ul>\n<li>Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中；</li>\n<li>这种写法的表格，目前已知在 GitHub 上不能正确解析；</li>\n<li><a href=\"/2015/09/20/windows-mac-software/\">自用 Windows 和 Mac 软件推荐</a>，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。</li>\n<li>顺便推荐一个在线表格生成网站，<a href=\"http://www.tablesgenerator.com/markdown_tables\">Tables Generator.com</a>，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。</li>\n</ul>"},{"author":"小莫","date":"2016-05-16T16:00:00.000Z","title":"webpack进阶之loader篇","_content":"webpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、loaders之 预处理\n* css-loader 处理css中路径引用等问题\n* style-loader 动态把样式写入css\n* sass-loader scss编译器\n* less-loader less编译器\n* postcss-loader scss再处理\n\n`npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader`  \n\n栗子:\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.css$/, loader: \"style!css?sourceMap!postcss\"},\n    {test: /\\.less$/, loader: \"style!css!less|postcss\"},\n    {test: /\\.scss$/, loader: \"style!css!sass|postcss\"}\n  ]\n}\n```\n\n## 二、loaders之 js处理\n* babel-loader\n* jsx-loader\n\n`npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader`\n\n栗子  \n\n新建一个名字为`.babelrc`的文件\n\n```\n{\n  \"presets\": [\"es2015\",\"react\"],\n  \"plugins\":[\"antd\"]\n}\n```\n\n新建一个名字为`webpack.config.js`文件\n\n```\nmodule.exports ={\n entry: './entry.js',\n output: { path: __dirname,\n filename: 'bundle.js'\n },\n module: {\nloaders: [\n  {test: /\\.js$/, loader: \"babel\", exclude: /node_modules/},\n  {test: /\\.jsx$/, loader: \"jsx-loader\"}\n  {test: /.css$/, loader: 'style!css'} ]\n  }\n};\n```\n\n## 三、loaders之 图片处理\n* url-loader\n\n`npm install --save-dev url-loadr`\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"},\n  ]\n}\n```\n\n## 四、loaders之 文件处理\n* file-loader\n\n`npm install --save-dev file-loader`\n\n```\nmodule: {\n  loaders: [\n    {\n      test: /\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\n      loader: 'file'\n      },\n  ]\n}\n\n```\n\n## 五、loaders之 json处理\n* json-loader\n\n`npm install --save-dev json-loader`\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.json$/,loader: 'json'},\n  ]\n}\n```\n\n## 六、loaders之 html处理\n* raw-loader\n\n`npm install --save-dev raw-loader`\n\n```\nmodule: {\n  loaders: [\n    { test: /\\.html$/,loader: 'raw'},\n  ]\n}\n```\n","source":"_posts/2016-05-17.webpack_loader.md","raw":"---\nauthor: 小莫\ndate: 2016-05-17\ntitle: webpack进阶之loader篇\ntags:\n- webpack\n- javascript\n- node\n- 开发工具\ncategory: webpack处理器\npermalink: webpack_link\n---\nwebpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、loaders之 预处理\n* css-loader 处理css中路径引用等问题\n* style-loader 动态把样式写入css\n* sass-loader scss编译器\n* less-loader less编译器\n* postcss-loader scss再处理\n\n`npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader`  \n\n栗子:\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.css$/, loader: \"style!css?sourceMap!postcss\"},\n    {test: /\\.less$/, loader: \"style!css!less|postcss\"},\n    {test: /\\.scss$/, loader: \"style!css!sass|postcss\"}\n  ]\n}\n```\n\n## 二、loaders之 js处理\n* babel-loader\n* jsx-loader\n\n`npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader`\n\n栗子  \n\n新建一个名字为`.babelrc`的文件\n\n```\n{\n  \"presets\": [\"es2015\",\"react\"],\n  \"plugins\":[\"antd\"]\n}\n```\n\n新建一个名字为`webpack.config.js`文件\n\n```\nmodule.exports ={\n entry: './entry.js',\n output: { path: __dirname,\n filename: 'bundle.js'\n },\n module: {\nloaders: [\n  {test: /\\.js$/, loader: \"babel\", exclude: /node_modules/},\n  {test: /\\.jsx$/, loader: \"jsx-loader\"}\n  {test: /.css$/, loader: 'style!css'} ]\n  }\n};\n```\n\n## 三、loaders之 图片处理\n* url-loader\n\n`npm install --save-dev url-loadr`\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.(jpg|png)$/, loader: \"url?limit=8192\"},\n  ]\n}\n```\n\n## 四、loaders之 文件处理\n* file-loader\n\n`npm install --save-dev file-loader`\n\n```\nmodule: {\n  loaders: [\n    {\n      test: /\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\n      loader: 'file'\n      },\n  ]\n}\n\n```\n\n## 五、loaders之 json处理\n* json-loader\n\n`npm install --save-dev json-loader`\n\n```\nmodule: {\n  loaders: [\n    {test: /\\.json$/,loader: 'json'},\n  ]\n}\n```\n\n## 六、loaders之 html处理\n* raw-loader\n\n`npm install --save-dev raw-loader`\n\n```\nmodule: {\n  loaders: [\n    { test: /\\.html$/,loader: 'raw'},\n  ]\n}\n```\n","slug":"webpack_link","published":1,"updated":"2016-06-28T02:50:55.960Z","_id":"cipjfs5ue00134wmch0wjwj3t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>webpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、loaders之-预处理\"><a href=\"#一、loaders之-预处理\" class=\"headerlink\" title=\"一、loaders之 预处理\"></a>一、loaders之 预处理</h2><ul>\n<li>css-loader 处理css中路径引用等问题</li>\n<li>style-loader 动态把样式写入css</li>\n<li>sass-loader scss编译器</li>\n<li>less-loader less编译器</li>\n<li>postcss-loader scss再处理</li>\n</ul>\n<p><code>npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader</code>  </p>\n<p>栗子:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.css$/, loader: <span class=\"string\">\"style!css?sourceMap!postcss\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attribute\">test</span>: /\\.less$/, loader: <span class=\"string\">\"style!css!less|postcss\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attribute\">test</span>: /\\.scss$/, loader: <span class=\"string\">\"style!css!sass|postcss\"</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、loaders之-js处理\"><a href=\"#二、loaders之-js处理\" class=\"headerlink\" title=\"二、loaders之 js处理\"></a>二、loaders之 js处理</h2><ul>\n<li>babel-loader</li>\n<li>jsx-loader</li>\n</ul>\n<p><code>npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader</code></p>\n<p>栗子  </p>\n<p>新建一个名字为<code>.babelrc</code>的文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>,<span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>:[<span class=\"string\">\"antd\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个名字为<code>webpack.config.js</code>文件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports =&#123;</span><br><span class=\"line\"><span class=\"symbol\"> entry:</span> <span class=\"string\">'./entry.js'</span>,</span><br><span class=\"line\"><span class=\"symbol\"> output:</span> &#123; <span class=\"string\">path:</span> __dirname,</span><br><span class=\"line\"><span class=\"symbol\"> filename:</span> <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"><span class=\"symbol\"> module:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">loaders:</span> [</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/\\.js$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"babel\"</span>, <span class=\"string\">exclude:</span> <span class=\"regexp\">/node_modules/</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/\\.jsx$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"jsx-loader\"</span>&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/.css$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'style!css'</span>&#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、loaders之-图片处理\"><a href=\"#三、loaders之-图片处理\" class=\"headerlink\" title=\"三、loaders之 图片处理\"></a>三、loaders之 图片处理</h2><ul>\n<li>url-loader</li>\n</ul>\n<p><code>npm install --save-dev url-loadr</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.(jpg|png)$/, loader: <span class=\"string\">\"url?limit=8192\"</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、loaders之-文件处理\"><a href=\"#四、loaders之-文件处理\" class=\"headerlink\" title=\"四、loaders之 文件处理\"></a>四、loaders之 文件处理</h2><ul>\n<li>file-loader</li>\n</ul>\n<p><code>npm install --save-dev file-loader</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span>: &#123;</span></span><br><span class=\"line\">  <span class=\"symbol\">loaders:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"symbol\">test:</span> /\\.(png<span class=\"params\">|jpg|</span>jpeg<span class=\"params\">|gif|</span>svg<span class=\"params\">|woff|</span>woff2<span class=\"params\">|ttf|</span>eot)$/,</span><br><span class=\"line\">      <span class=\"symbol\">loader:</span> <span class=\"string\">'file'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、loaders之-json处理\"><a href=\"#五、loaders之-json处理\" class=\"headerlink\" title=\"五、loaders之 json处理\"></a>五、loaders之 json处理</h2><ul>\n<li>json-loader</li>\n</ul>\n<p><code>npm install --save-dev json-loader</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.json$/,loader: <span class=\"string\">'json'</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、loaders之-html处理\"><a href=\"#六、loaders之-html处理\" class=\"headerlink\" title=\"六、loaders之 html处理\"></a>六、loaders之 html处理</h2><ul>\n<li>raw-loader</li>\n</ul>\n<p><code>npm install --save-dev raw-loader</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123; test: /\\.html$/,loader: <span class=\"string\">'raw'</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>webpack的loaders是一大特色，也是很重要的一部分。这遍博客我将分类讲解一些常用的laoder<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、loaders之-预处理\"><a href=\"#一、loaders之-预处理\" class=\"headerlink\" title=\"一、loaders之 预处理\"></a>一、loaders之 预处理</h2><ul>\n<li>css-loader 处理css中路径引用等问题</li>\n<li>style-loader 动态把样式写入css</li>\n<li>sass-loader scss编译器</li>\n<li>less-loader less编译器</li>\n<li>postcss-loader scss再处理</li>\n</ul>\n<p><code>npm install --save -dev css-loader style-loader sass-loader less-loader postcss-loader</code>  </p>\n<p>栗子:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.css$/, loader: <span class=\"string\">\"style!css?sourceMap!postcss\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attribute\">test</span>: /\\.less$/, loader: <span class=\"string\">\"style!css!less|postcss\"</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attribute\">test</span>: /\\.scss$/, loader: <span class=\"string\">\"style!css!sass|postcss\"</span>&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、loaders之-js处理\"><a href=\"#二、loaders之-js处理\" class=\"headerlink\" title=\"二、loaders之 js处理\"></a>二、loaders之 js处理</h2><ul>\n<li>babel-loader</li>\n<li>jsx-loader</li>\n</ul>\n<p><code>npm install --save-dev babel-core babel-preset-es2015  babel-loader jsx-loader</code></p>\n<p>栗子  </p>\n<p>新建一个名字为<code>.babelrc</code>的文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>,<span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>:[<span class=\"string\">\"antd\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个名字为<code>webpack.config.js</code>文件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports =&#123;</span><br><span class=\"line\"><span class=\"symbol\"> entry:</span> <span class=\"string\">'./entry.js'</span>,</span><br><span class=\"line\"><span class=\"symbol\"> output:</span> &#123; <span class=\"string\">path:</span> __dirname,</span><br><span class=\"line\"><span class=\"symbol\"> filename:</span> <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"><span class=\"symbol\"> module:</span> &#123;</span><br><span class=\"line\"><span class=\"string\">loaders:</span> [</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/\\.js$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"babel\"</span>, <span class=\"string\">exclude:</span> <span class=\"regexp\">/node_modules/</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/\\.jsx$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">\"jsx-loader\"</span>&#125;</span><br><span class=\"line\">  &#123;<span class=\"string\">test:</span> <span class=\"regexp\">/.css$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'style!css'</span>&#125; ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、loaders之-图片处理\"><a href=\"#三、loaders之-图片处理\" class=\"headerlink\" title=\"三、loaders之 图片处理\"></a>三、loaders之 图片处理</h2><ul>\n<li>url-loader</li>\n</ul>\n<p><code>npm install --save-dev url-loadr</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.(jpg|png)$/, loader: <span class=\"string\">\"url?limit=8192\"</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、loaders之-文件处理\"><a href=\"#四、loaders之-文件处理\" class=\"headerlink\" title=\"四、loaders之 文件处理\"></a>四、loaders之 文件处理</h2><ul>\n<li>file-loader</li>\n</ul>\n<p><code>npm install --save-dev file-loader</code></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span>: &#123;</span></span><br><span class=\"line\">  <span class=\"symbol\">loaders:</span> [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"symbol\">test:</span> /\\.(png<span class=\"params\">|jpg|</span>jpeg<span class=\"params\">|gif|</span>svg<span class=\"params\">|woff|</span>woff2<span class=\"params\">|ttf|</span>eot)$/,</span><br><span class=\"line\">      <span class=\"symbol\">loader:</span> <span class=\"string\">'file'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、loaders之-json处理\"><a href=\"#五、loaders之-json处理\" class=\"headerlink\" title=\"五、loaders之 json处理\"></a>五、loaders之 json处理</h2><ul>\n<li>json-loader</li>\n</ul>\n<p><code>npm install --save-dev json-loader</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123;test: /\\.json$/,loader: <span class=\"string\">'json'</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、loaders之-html处理\"><a href=\"#六、loaders之-html处理\" class=\"headerlink\" title=\"六、loaders之 html处理\"></a>六、loaders之 html处理</h2><ul>\n<li>raw-loader</li>\n</ul>\n<p><code>npm install --save-dev raw-loader</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">module</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">loaders</span>: [</span><br><span class=\"line\">    &#123; test: /\\.html$/,loader: <span class=\"string\">'raw'</span>&#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-05-15T16:00:00.000Z","title":"nodejs的process模块","_content":"我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、process属性。\n* process.pid：当前进程的进程号。\n* process.version：Node的版本，比如v0.10.18。\n* process.platform：当前系统平台，比如Linux。\n* process.title：默认值为“node”，可以自定义该值。\n* process.argv：当前进程的命令行参数数组。\n* process.env：指向当前shell的环境变量，比如process.env.HOME。\n* process.execPath：运行当前进程的可执行文件的绝对路径。\n* process.stdout：指向标准输出。\n* process.stdin：指向标准输入。\n* process.stderr：指向标准错误。\n\n\n下面是主要属性的介绍。\n\n### 1. stdout\n\nprocess.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n\n```\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n```\n\n### 2. argv\n\nprocess.argv返回命令行脚本的各个参数组成的数组。\n\n先新建一个脚本文件argv.js。\n\n```\n// argv.js\nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n```\n\n在命令行下调用这个脚本，会得到以下结果。\n```\nnode argv.js a b c\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n```\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n\n```\n// argv.js\nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n```\n\n### 3.方法\n* process对象提供以下方法：\n* process.cwd()：返回运行当前脚本的工作目录的路径。_\n* process.chdir()：改变工作目录。\n* process.exit()：退出当前进程。\n* process.nextTick()：将一个回调函数放在下次事件循环的顶部。\n\nprocess.chdir()改变工作目录的例子。  \n\n```\nprocess.cwd()\n# '/home/aaa'\n\nprocess.chdir('/home/bbb')\n\nprocess.cwd()\n# '/home/bbb'\n```\n\nprocess.nextTick()的例子，指定下次事件循环首先运行的任务。\n\n```\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n```\n\n上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。\n\n```\nsetTimeout(function () {\n   console.log('Next event loop!');\n}, 0)\n```\n\n### 4. 事件\n（1）exit事件   \n当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.\n\n```\nprocess.on('exit', function () {\n  fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n```\n\n（2）uncaughtException事件   \n当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  \n\n```\nprocess.on('uncaughtException', function (err) {\n  console.error('An uncaught error occurred!');\n  console.error(err.stack);\n});\n```\n\n>摘自阮老师博客   [Node.js 概述](http://javascript.ruanyifeng.com/nodejs/basic.html#toc22)\n","source":"_posts/2016-05-16.nodejs_process.md","raw":"---\nauthor: 小莫\ndate: 2016-05-16\ntitle: nodejs的process模块\ntags:\n- node\n- es6\n- javascript\ncategory: nodejs之process\npermalink: node_process\n---\n我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、process属性。\n* process.pid：当前进程的进程号。\n* process.version：Node的版本，比如v0.10.18。\n* process.platform：当前系统平台，比如Linux。\n* process.title：默认值为“node”，可以自定义该值。\n* process.argv：当前进程的命令行参数数组。\n* process.env：指向当前shell的环境变量，比如process.env.HOME。\n* process.execPath：运行当前进程的可执行文件的绝对路径。\n* process.stdout：指向标准输出。\n* process.stdin：指向标准输入。\n* process.stderr：指向标准错误。\n\n\n下面是主要属性的介绍。\n\n### 1. stdout\n\nprocess.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。\n\n```\nexports.log = function() {\n    process.stdout.write(format.apply(this, arguments) + '\\n');\n};\n```\n\n### 2. argv\n\nprocess.argv返回命令行脚本的各个参数组成的数组。\n\n先新建一个脚本文件argv.js。\n\n```\n// argv.js\nconsole.log(\"argv: \",process.argv);\nconsole.log(\"argc: \",process.argc);\n```\n\n在命令行下调用这个脚本，会得到以下结果。\n```\nnode argv.js a b c\n# [ 'node', '/path/to/argv.js', 'a', 'b', 'c' ]\n```\n\n上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。\n\n```\n// argv.js\nvar myArgs = process.argv.slice(2);\nconsole.log(myArgs);\n```\n\n### 3.方法\n* process对象提供以下方法：\n* process.cwd()：返回运行当前脚本的工作目录的路径。_\n* process.chdir()：改变工作目录。\n* process.exit()：退出当前进程。\n* process.nextTick()：将一个回调函数放在下次事件循环的顶部。\n\nprocess.chdir()改变工作目录的例子。  \n\n```\nprocess.cwd()\n# '/home/aaa'\n\nprocess.chdir('/home/bbb')\n\nprocess.cwd()\n# '/home/bbb'\n```\n\nprocess.nextTick()的例子，指定下次事件循环首先运行的任务。\n\n```\nprocess.nextTick(function () {\n    console.log('Next event loop!');\n});\n```\n\n上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。\n\n```\nsetTimeout(function () {\n   console.log('Next event loop!');\n}, 0)\n```\n\n### 4. 事件\n（1）exit事件   \n当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.\n\n```\nprocess.on('exit', function () {\n  fs.writeFileSync('/tmp/myfile', 'This MUST be saved on exit.');\n});\n```\n\n（2）uncaughtException事件   \n当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  \n\n```\nprocess.on('uncaughtException', function (err) {\n  console.error('An uncaught error occurred!');\n  console.error(err.stack);\n});\n```\n\n>摘自阮老师博客   [Node.js 概述](http://javascript.ruanyifeng.com/nodejs/basic.html#toc22)\n","slug":"node_process","published":1,"updated":"2016-06-28T02:51:03.670Z","_id":"cipjfs5ug00164wmca99h19om","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、process属性。\"><a href=\"#一、process属性。\" class=\"headerlink\" title=\"一、process属性。\"></a>一、process属性。</h2><ul>\n<li>process.pid：当前进程的进程号。</li>\n<li>process.version：Node的版本，比如v0.10.18。</li>\n<li>process.platform：当前系统平台，比如Linux。</li>\n<li>process.title：默认值为“node”，可以自定义该值。</li>\n<li>process.argv：当前进程的命令行参数数组。</li>\n<li>process.env：指向当前shell的环境变量，比如process.env.HOME。</li>\n<li>process.execPath：运行当前进程的可执行文件的绝对路径。</li>\n<li>process.stdout：指向标准输出。</li>\n<li>process.stdin：指向标准输入。</li>\n<li>process.stderr：指向标准错误。</li>\n</ul>\n<p>下面是主要属性的介绍。</p>\n<h3 id=\"1-stdout\"><a href=\"#1-stdout\" class=\"headerlink\" title=\"1. stdout\"></a>1. stdout</h3><p>process.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.<span class=\"built_in\">log</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    process.stdout.<span class=\"built_in\">write</span>(<span class=\"keyword\">format</span>.apply(this, arguments) + <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-argv\"><a href=\"#2-argv\" class=\"headerlink\" title=\"2. argv\"></a>2. argv</h3><p>process.argv返回命令行脚本的各个参数组成的数组。</p>\n<p>先新建一个脚本文件argv.js。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// argv.js</span></span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"argv: \"</span>,process.argv);</span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"argc: \"</span>,process.argc);</span><br></pre></td></tr></table></figure>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node argv.js a b c</span><br><span class=\"line\"><span class=\"meta\"># [ <span class=\"string\">'node'</span>, <span class=\"string\">'/path/to/argv.js'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span> ]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// argv.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myArgs = process.argv.slice(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myArgs);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h3><ul>\n<li>process对象提供以下方法：</li>\n<li>process.cwd()：返回运行当前脚本的工作目录的路径。_</li>\n<li>process.chdir()：改变工作目录。</li>\n<li>process.exit()：退出当前进程。</li>\n<li>process.nextTick()：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p>process.chdir()改变工作目录的例子。  </p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">process</span>.cwd()</span><br><span class=\"line\"># <span class=\"string\">'/home/aaa'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">process</span>.chdir(<span class=\"string\">'/home/bbb'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">process</span>.cwd()</span><br><span class=\"line\"># <span class=\"string\">'/home/bbb'</span></span><br></pre></td></tr></table></figure>\n<p>process.nextTick()的例子，指定下次事件循环首先运行的任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Next event loop!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Next event loop!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-事件\"><a href=\"#4-事件\" class=\"headerlink\" title=\"4. 事件\"></a>4. 事件</h3><p>（1）exit事件<br>当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">process</span><span class=\"selector-class\">.on</span>(<span class=\"string\">'exit'</span>, function () &#123;</span><br><span class=\"line\">  fs<span class=\"selector-class\">.writeFileSync</span>(<span class=\"string\">'/tmp/myfile'</span>, <span class=\"string\">'This MUST be saved on exit.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（2）uncaughtException事件<br>当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">process</span><span class=\"selector-class\">.on</span>(<span class=\"string\">'uncaughtException'</span>, function (err) &#123;</span><br><span class=\"line\">  console<span class=\"selector-class\">.error</span>(<span class=\"string\">'An uncaught error occurred!'</span>);</span><br><span class=\"line\">  console<span class=\"selector-class\">.error</span>(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>摘自阮老师博客   <a href=\"http://javascript.ruanyifeng.com/nodejs/basic.html#toc22\" target=\"_blank\" rel=\"external\">Node.js 概述</a></p>\n</blockquote>\n","excerpt":"<p>我们在使用webpack的时候经常会有两套配置，一套生产环境和一套测试环境。因此我们会用到一些系统变量，我们就需要用到process。process模块用来与当前进程互动，可以通过全局变量process访问，不必使用require命令加载。它是一个EventEmitter对象的实例。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、process属性。\"><a href=\"#一、process属性。\" class=\"headerlink\" title=\"一、process属性。\"></a>一、process属性。</h2><ul>\n<li>process.pid：当前进程的进程号。</li>\n<li>process.version：Node的版本，比如v0.10.18。</li>\n<li>process.platform：当前系统平台，比如Linux。</li>\n<li>process.title：默认值为“node”，可以自定义该值。</li>\n<li>process.argv：当前进程的命令行参数数组。</li>\n<li>process.env：指向当前shell的环境变量，比如process.env.HOME。</li>\n<li>process.execPath：运行当前进程的可执行文件的绝对路径。</li>\n<li>process.stdout：指向标准输出。</li>\n<li>process.stdin：指向标准输入。</li>\n<li>process.stderr：指向标准错误。</li>\n</ul>\n<p>下面是主要属性的介绍。</p>\n<h3 id=\"1-stdout\"><a href=\"#1-stdout\" class=\"headerlink\" title=\"1. stdout\"></a>1. stdout</h3><p>process.stdout用来控制标准输出，也就是在命令行窗口向用户显示内容。它的write方法等同于console.log。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.<span class=\"built_in\">log</span> = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    process.stdout.<span class=\"built_in\">write</span>(<span class=\"keyword\">format</span>.apply(this, arguments) + <span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-argv\"><a href=\"#2-argv\" class=\"headerlink\" title=\"2. argv\"></a>2. argv</h3><p>process.argv返回命令行脚本的各个参数组成的数组。</p>\n<p>先新建一个脚本文件argv.js。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// argv.js</span></span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"argv: \"</span>,process.argv);</span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"argc: \"</span>,process.argc);</span><br></pre></td></tr></table></figure>\n<p>在命令行下调用这个脚本，会得到以下结果。<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node argv.js a b c</span><br><span class=\"line\"><span class=\"meta\"># [ <span class=\"string\">'node'</span>, <span class=\"string\">'/path/to/argv.js'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span> ]</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码表示，argv返回数组的成员依次是命令行的各个部分。要得到真正的参数部分，可以把argv.js改写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// argv.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myArgs = process.argv.slice(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myArgs);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h3><ul>\n<li>process对象提供以下方法：</li>\n<li>process.cwd()：返回运行当前脚本的工作目录的路径。_</li>\n<li>process.chdir()：改变工作目录。</li>\n<li>process.exit()：退出当前进程。</li>\n<li>process.nextTick()：将一个回调函数放在下次事件循环的顶部。</li>\n</ul>\n<p>process.chdir()改变工作目录的例子。  </p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">process</span>.cwd()</span><br><span class=\"line\"># <span class=\"string\">'/home/aaa'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">process</span>.chdir(<span class=\"string\">'/home/bbb'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">process</span>.cwd()</span><br><span class=\"line\"># <span class=\"string\">'/home/bbb'</span></span><br></pre></td></tr></table></figure>\n<p>process.nextTick()的例子，指定下次事件循环首先运行的任务。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Next event loop!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码可以用setTimeout改写，但是nextTick的效果更高、描述更准确。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Next event loop!'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-事件\"><a href=\"#4-事件\" class=\"headerlink\" title=\"4. 事件\"></a>4. 事件</h3><p>（1）exit事件<br>当前进程退出时，会触发exit事件，可以对该事件指定回调函数。这一个用来定时检查模块的状态的好钩子(hook)(例如单元测试),当主事件循环在执行完’exit’的回调函数后将不再执行,所以在exit事件中定义的定时器可能不会被加入事件列表.</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">process</span><span class=\"selector-class\">.on</span>(<span class=\"string\">'exit'</span>, function () &#123;</span><br><span class=\"line\">  fs<span class=\"selector-class\">.writeFileSync</span>(<span class=\"string\">'/tmp/myfile'</span>, <span class=\"string\">'This MUST be saved on exit.'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>（2）uncaughtException事件<br>当前进程抛出一个没有被捕捉的意外时，会触发uncaughtException事件。  </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">process</span><span class=\"selector-class\">.on</span>(<span class=\"string\">'uncaughtException'</span>, function (err) &#123;</span><br><span class=\"line\">  console<span class=\"selector-class\">.error</span>(<span class=\"string\">'An uncaught error occurred!'</span>);</span><br><span class=\"line\">  console<span class=\"selector-class\">.error</span>(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>摘自阮老师博客   <a href=\"http://javascript.ruanyifeng.com/nodejs/basic.html#toc22\">Node.js 概述</a></p>\n</blockquote>"},{"author":"小莫","date":"2016-05-16T16:00:00.000Z","title":"webpack进阶之插件篇","_content":"上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、插件篇\n### 1. 自动补全css3前缀\n\n autoprefixer  \n\n>官方是这样说的：`Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website`\n，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  \n\n举个栗子：最新的弹性盒模型flux\n实际代码：\n```\n:fullscreen a {\n    display: flex\n}\n```\n\n插件自动补充后\n```\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\n效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。\n\n使用方法:\n\n`cnpm install --save-dev autoprefixer postcss-loader`\n\n```\nvar autoprefixer = require('autoprefixer');\nmodule.exports={\n  //其他配置这里就不写了\n\n  module:{\n    loaders:[\n    {\n      test:/\\.css$/,\n      //在原有基础上加上一个postcss的loader就可以了\n      loaders:['style-loader','css-loader','postcss-loader']\n      }\n      ]\n  },\n  postcss:[autoprefixer({browsers:['last 2 versions']})]\n\n}\n```\n\n### 2. 自动生成html插件\n\nhtml-webpack-plugin\n\n`cnpm install html-webpack-plugin --save-dev`\n\n```\n  //webpack.config.js\n  var HtmlWebpackPlugin = require('html-webpack-plugin');\n  module.exports={\n    entry:'./index.js',\n    output:{\n      path:__dirname+'/dist',\n      filename:'bundle.js'\n    }\n    plugins:[\n      new HtmlWebpackPlugin()\n    ]\n  }\n```\n\n>作用:它会在dist目录下自动生成一个index.html\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Webpack App</title>\n  </head>\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n其他配置参数:\n\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      filename: 'admin.html',\n      template:'header.html',\n      inject: 'body',\n      favicon:'./images/favico.ico',\n      minify:true,\n      hash:true,\n      cache:false,\n      showErrors:false,\n      \"chunks\": {\n      \"head\": {\n        \"entry\": \"assets/head_bundle.js\",\n        \"css\": [ \"main.css\" ]\n      },\n      xhtml:false\n    })\n  ]\n}\n```\n\n```\n--- header.html ---\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n作用：   \n\n```\n  title: 设置title的名字   \n  filename: 设置这个html的文件名   \n  template:要使用的模块的路径  \n  inject: 把模板注入到哪个标签后 'body',   \n  favicon: 给html添加一个favicon  './images/favico.ico',   \n  minify:是否压缩  true false   \n  hash:是否hash化 true false ,     \n  cache:是否缓存,   \n  showErrors:是否显示错误,  \n  chunks:目前没太明白  \n  xhtml:是否自动毕业标签 默认false  \n```\n\n### 3. 提取样式插件\n\nextract-text-webpack-plugin  \n\n>官网是这么解释的`Extract text from bundle into a file.`,把额外的数据加到编译好的文件中\n\n```\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n    module: {\n        loaders: [\n            { test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n                template: './src/public/index.html',\n                inject: 'body'\n            }),\n        new ExtractTextPlugin(\"[name].[hash].css\")\n    ]\n}\n```\n\n说明：将css放到index.html的body上面\n\n### 4. 拷贝资源插件\n\n copy-webpack-plugin   \n\n>官方这样解释 `Copy files and directories in webpack`,在webpack中拷贝文件和文件夹\n\n```\ncnpm install --save-dev copy-webpack-plugin\n\nnew CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n}]),\n```\n\n>作用：把public 里面的内容全部拷贝到编译目录\n\n| 参数        | 作用           | 其他说明  |\n| :-----------: |:--------:  | :---:|\n| from      | 定义要拷贝的源目录 | from: __dirname + '/src/public' |\n| to      | 定义要烤盘膛的目标目录      |   from: __dirname + '/dist' |\n| toType | `file` 或者 `dir`     |    可选，默认是文件 |\n| force |强制覆盖先前的插件      |    可选 默认false |\n| context | 不知道作用      | 可选 默认 base context 可用  specific context |\n| flatten | 只拷贝文件不管文件夹      |    默认是false |\n| ignore | 忽略拷贝指定的文件  |    可以用模糊匹配 |\n\n\n### 5. 全局挂载插件\n\nwebpack.ProvidePlugin [webpack内置插件 ]    \n\n```\nnew webpack.ProvidePlugin({\n    $: \"jquery\",\n    jQuery: \"jquery\",\n    \"window.jQuery\": \"jquery\"\n}))\nnew webpack.NoErrorsPlugin(),\nnew webpack.optimize.DedupePlugin(),\nnew webpack.optimize.UglifyJsPlugin(),\nnew webpack.optimize.CommonsChunkPlugin('common.js')\n```\n\n作用: 和上面5个一一对应  \n\n```\n  把一些需要的东西绑定到window上，暴露出来 成为全局变量\n  不显示错误插件\n  具体不是太清楚，先记录着\n  丑化js 混淆代码而用\n  提取公共代码的插件\n```\n\n## 二、一个完整的栗子\n```\n'use strict';\n\n// Modules\nvar webpack = require('webpack');\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\n\n/**\n * Env\n * Get npm lifecycle event to identify the environment\n */\nvar ENV = process.env.npm_lifecycle_event;\nvar isTest = ENV === 'test' || ENV === 'test-watch';\nvar isProd = ENV === 'build';\n\nmodule.exports = function makeWebpackConfig() {\n    var config = {};\n\n    config.entry = isTest ? {} : {\n        app: './src/app/app.js'\n    };\n\n    config.output = isTest ? {} : {\n        // Absolute output directory\n        path: __dirname + '/dist',\n\n        publicPath: isProd ? '/' : 'http://localhost:8080/',\n\n        filename: isProd ? '[name].[hash].js' : '[name].bundle.js',\n\n        chunkFilename: isProd ? '[name].[hash].js' : '[name].bundle.js'\n    };\n\n    if (isTest) {\n        config.devtool = 'inline-source-map';\n    } else if (isProd) {\n        config.devtool = 'source-map';\n    } else {\n        config.devtool = 'eval-source-map';\n    }\n\n    config.module = {\n        preLoaders: [],\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel',\n            exclude: /node_modules/\n        }, {\n            test: /\\.css/,\n            loader: isTest ? 'null' : ExtractTextPlugin.extract('style', 'css?sourceMap!postcss')\n        }, {\n            test: /\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\n            loader: 'file'\n        }, {\n            test: /\\.json$/,\n            loader: 'json'\n        }, {\n            test: /\\.scss/,\n            loader: 'style!css!sass'\n        }, {\n            test: /\\.html$/,\n            loader: 'raw'\n        }]\n    };\n    if (isTest) {\n        config.module.preLoaders.push({\n            test: /\\.js$/,\n            exclude: [\n                /node_modules/,\n                /\\.spec\\.js$/\n            ],\n            loader: 'isparta-instrumenter'\n        })\n    }\n\n    config.postcss = [\n        autoprefixer({\n            browsers: ['last 2 version']\n        })\n    ];\n\n    config.plugins = [];\n    if (!isTest) {\n        config.plugins.push(\n            new HtmlWebpackPlugin({\n                template: './src/public/index.html',\n                inject: 'body'\n            }),\n\n            new ExtractTextPlugin('[name].[hash].css', {disable: !isProd})\n        )\n    }\n\n    if (isProd) {\n        config.plugins.push(\n            new webpack.NoErrorsPlugin(),\n\n            new webpack.optimize.DedupePlugin(),\n\n            new webpack.optimize.UglifyJsPlugin(),\n\n            new CopyWebpackPlugin([{\n                from: __dirname + '/src/public'\n            }]),\n            new webpack.ProvidePlugin({\n                $: \"jquery\",\n                jQuery: \"jquery\",\n                \"window.jQuery\": \"jquery\"\n            }))\n    }\n\n    config.devServer = {\n        contentBase: './src/public',\n        stats: 'minimal'\n    };\n\n    return config;\n}();\n\n```\n\n## 三、调试技巧\n\n```\nif (isTest) {\n    config.devtool = 'inline-source-map';\n} else if (isProd) {\n    config.devtool = 'source-map';\n} else {\n    config.devtool = 'eval-source-map';\n}\n```\n\n>作用: 使用source-map可以在debug的时候看到源代码，方便 查错\n","source":"_posts/2016-05-17.webpack_plugins.md","raw":"---\nauthor: 小莫\ndate: 2016-05-17\ntitle: webpack进阶之插件篇\ntags:\n- webpack\n- node\n- javascript\n- 开发工具\ncategory: webpack插件\npermalink: webpack_plugins\n---\n上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、插件篇\n### 1. 自动补全css3前缀\n\n autoprefixer  \n\n>官方是这样说的：`Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website`\n，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  \n\n举个栗子：最新的弹性盒模型flux\n实际代码：\n```\n:fullscreen a {\n    display: flex\n}\n```\n\n插件自动补充后\n```\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\n效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。\n\n使用方法:\n\n`cnpm install --save-dev autoprefixer postcss-loader`\n\n```\nvar autoprefixer = require('autoprefixer');\nmodule.exports={\n  //其他配置这里就不写了\n\n  module:{\n    loaders:[\n    {\n      test:/\\.css$/,\n      //在原有基础上加上一个postcss的loader就可以了\n      loaders:['style-loader','css-loader','postcss-loader']\n      }\n      ]\n  },\n  postcss:[autoprefixer({browsers:['last 2 versions']})]\n\n}\n```\n\n### 2. 自动生成html插件\n\nhtml-webpack-plugin\n\n`cnpm install html-webpack-plugin --save-dev`\n\n```\n  //webpack.config.js\n  var HtmlWebpackPlugin = require('html-webpack-plugin');\n  module.exports={\n    entry:'./index.js',\n    output:{\n      path:__dirname+'/dist',\n      filename:'bundle.js'\n    }\n    plugins:[\n      new HtmlWebpackPlugin()\n    ]\n  }\n```\n\n>作用:它会在dist目录下自动生成一个index.html\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Webpack App</title>\n  </head>\n  <body>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n```\n\n其他配置参数:\n\n```\n{\n  entry: 'index.js',\n  output: {\n    path: 'dist',\n    filename: 'bundle.js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      filename: 'admin.html',\n      template:'header.html',\n      inject: 'body',\n      favicon:'./images/favico.ico',\n      minify:true,\n      hash:true,\n      cache:false,\n      showErrors:false,\n      \"chunks\": {\n      \"head\": {\n        \"entry\": \"assets/head_bundle.js\",\n        \"css\": [ \"main.css\" ]\n      },\n      xhtml:false\n    })\n  ]\n}\n```\n\n```\n--- header.html ---\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n  </body>\n</html>\n```\n\n作用：   \n\n```\n  title: 设置title的名字   \n  filename: 设置这个html的文件名   \n  template:要使用的模块的路径  \n  inject: 把模板注入到哪个标签后 'body',   \n  favicon: 给html添加一个favicon  './images/favico.ico',   \n  minify:是否压缩  true false   \n  hash:是否hash化 true false ,     \n  cache:是否缓存,   \n  showErrors:是否显示错误,  \n  chunks:目前没太明白  \n  xhtml:是否自动毕业标签 默认false  \n```\n\n### 3. 提取样式插件\n\nextract-text-webpack-plugin  \n\n>官网是这么解释的`Extract text from bundle into a file.`,把额外的数据加到编译好的文件中\n\n```\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nmodule.exports = {\n    module: {\n        loaders: [\n            { test: /\\.css$/, loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") }\n        ]\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n                template: './src/public/index.html',\n                inject: 'body'\n            }),\n        new ExtractTextPlugin(\"[name].[hash].css\")\n    ]\n}\n```\n\n说明：将css放到index.html的body上面\n\n### 4. 拷贝资源插件\n\n copy-webpack-plugin   \n\n>官方这样解释 `Copy files and directories in webpack`,在webpack中拷贝文件和文件夹\n\n```\ncnpm install --save-dev copy-webpack-plugin\n\nnew CopyWebpackPlugin([{\n    from: __dirname + '/src/public'\n}]),\n```\n\n>作用：把public 里面的内容全部拷贝到编译目录\n\n| 参数        | 作用           | 其他说明  |\n| :-----------: |:--------:  | :---:|\n| from      | 定义要拷贝的源目录 | from: __dirname + '/src/public' |\n| to      | 定义要烤盘膛的目标目录      |   from: __dirname + '/dist' |\n| toType | `file` 或者 `dir`     |    可选，默认是文件 |\n| force |强制覆盖先前的插件      |    可选 默认false |\n| context | 不知道作用      | 可选 默认 base context 可用  specific context |\n| flatten | 只拷贝文件不管文件夹      |    默认是false |\n| ignore | 忽略拷贝指定的文件  |    可以用模糊匹配 |\n\n\n### 5. 全局挂载插件\n\nwebpack.ProvidePlugin [webpack内置插件 ]    \n\n```\nnew webpack.ProvidePlugin({\n    $: \"jquery\",\n    jQuery: \"jquery\",\n    \"window.jQuery\": \"jquery\"\n}))\nnew webpack.NoErrorsPlugin(),\nnew webpack.optimize.DedupePlugin(),\nnew webpack.optimize.UglifyJsPlugin(),\nnew webpack.optimize.CommonsChunkPlugin('common.js')\n```\n\n作用: 和上面5个一一对应  \n\n```\n  把一些需要的东西绑定到window上，暴露出来 成为全局变量\n  不显示错误插件\n  具体不是太清楚，先记录着\n  丑化js 混淆代码而用\n  提取公共代码的插件\n```\n\n## 二、一个完整的栗子\n```\n'use strict';\n\n// Modules\nvar webpack = require('webpack');\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\n\n/**\n * Env\n * Get npm lifecycle event to identify the environment\n */\nvar ENV = process.env.npm_lifecycle_event;\nvar isTest = ENV === 'test' || ENV === 'test-watch';\nvar isProd = ENV === 'build';\n\nmodule.exports = function makeWebpackConfig() {\n    var config = {};\n\n    config.entry = isTest ? {} : {\n        app: './src/app/app.js'\n    };\n\n    config.output = isTest ? {} : {\n        // Absolute output directory\n        path: __dirname + '/dist',\n\n        publicPath: isProd ? '/' : 'http://localhost:8080/',\n\n        filename: isProd ? '[name].[hash].js' : '[name].bundle.js',\n\n        chunkFilename: isProd ? '[name].[hash].js' : '[name].bundle.js'\n    };\n\n    if (isTest) {\n        config.devtool = 'inline-source-map';\n    } else if (isProd) {\n        config.devtool = 'source-map';\n    } else {\n        config.devtool = 'eval-source-map';\n    }\n\n    config.module = {\n        preLoaders: [],\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel',\n            exclude: /node_modules/\n        }, {\n            test: /\\.css/,\n            loader: isTest ? 'null' : ExtractTextPlugin.extract('style', 'css?sourceMap!postcss')\n        }, {\n            test: /\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\n            loader: 'file'\n        }, {\n            test: /\\.json$/,\n            loader: 'json'\n        }, {\n            test: /\\.scss/,\n            loader: 'style!css!sass'\n        }, {\n            test: /\\.html$/,\n            loader: 'raw'\n        }]\n    };\n    if (isTest) {\n        config.module.preLoaders.push({\n            test: /\\.js$/,\n            exclude: [\n                /node_modules/,\n                /\\.spec\\.js$/\n            ],\n            loader: 'isparta-instrumenter'\n        })\n    }\n\n    config.postcss = [\n        autoprefixer({\n            browsers: ['last 2 version']\n        })\n    ];\n\n    config.plugins = [];\n    if (!isTest) {\n        config.plugins.push(\n            new HtmlWebpackPlugin({\n                template: './src/public/index.html',\n                inject: 'body'\n            }),\n\n            new ExtractTextPlugin('[name].[hash].css', {disable: !isProd})\n        )\n    }\n\n    if (isProd) {\n        config.plugins.push(\n            new webpack.NoErrorsPlugin(),\n\n            new webpack.optimize.DedupePlugin(),\n\n            new webpack.optimize.UglifyJsPlugin(),\n\n            new CopyWebpackPlugin([{\n                from: __dirname + '/src/public'\n            }]),\n            new webpack.ProvidePlugin({\n                $: \"jquery\",\n                jQuery: \"jquery\",\n                \"window.jQuery\": \"jquery\"\n            }))\n    }\n\n    config.devServer = {\n        contentBase: './src/public',\n        stats: 'minimal'\n    };\n\n    return config;\n}();\n\n```\n\n## 三、调试技巧\n\n```\nif (isTest) {\n    config.devtool = 'inline-source-map';\n} else if (isProd) {\n    config.devtool = 'source-map';\n} else {\n    config.devtool = 'eval-source-map';\n}\n```\n\n>作用: 使用source-map可以在debug的时候看到源代码，方便 查错\n","slug":"webpack_plugins","published":1,"updated":"2016-06-28T02:50:48.240Z","_id":"cipjfs5ui001a4wmc6wttlsq7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、插件篇\"><a href=\"#一、插件篇\" class=\"headerlink\" title=\"一、插件篇\"></a>一、插件篇</h2><h3 id=\"1-自动补全css3前缀\"><a href=\"#1-自动补全css3前缀\" class=\"headerlink\" title=\"1. 自动补全css3前缀\"></a>1. 自动补全css3前缀</h3><p> autoprefixer  </p>\n<blockquote>\n<p>官方是这样说的：<code>Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website</code><br>，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  </p>\n</blockquote>\n<p>举个栗子：最新的弹性盒模型flux<br>实际代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>插件自动补充后<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。</p>\n<p>使用方法:</p>\n<p><code>cnpm install --save-dev autoprefixer postcss-loader</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports=&#123;</span><br><span class=\"line\">  <span class=\"comment\">//其他配置这里就不写了</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">//在原有基础上加上一个postcss的loader就可以了</span></span><br><span class=\"line\">      loaders:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'postcss-loader'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  postcss:[autoprefixer(&#123;browsers:[<span class=\"string\">'last 2 versions'</span>]&#125;)]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动生成html插件\"><a href=\"#2-自动生成html插件\" class=\"headerlink\" title=\"2. 自动生成html插件\"></a>2. 自动生成html插件</h3><p>html-webpack-plugin</p>\n<p><code>cnpm install html-webpack-plugin --save-dev</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports=&#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用:它会在dist目录下自动生成一个index.html</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其他配置参数:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</span><br><span class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attribute\">plugins</span>: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      <span class=\"attribute\">title</span>: <span class=\"string\">'My App'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'admin.html'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">template</span>:<span class=\"string\">'header.html'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">inject</span>: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">favicon</span>:<span class=\"string\">'./images/favico.ico'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">minify</span>:true,</span><br><span class=\"line\">      <span class=\"attribute\">hash</span>:true,</span><br><span class=\"line\">      <span class=\"attribute\">cache</span>:false,</span><br><span class=\"line\">      <span class=\"attribute\">showErrors</span>:false,</span><br><span class=\"line\">      <span class=\"string\">\"chunks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"head\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/head_bundle.js\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attribute\">xhtml</span>:false</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">--- header.html ---</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\"> htmlWebpackPlugin.options.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>作用：   </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">title:</span> 设置title的名字   </span><br><span class=\"line\"><span class=\"string\">filename:</span> 设置这个html的文件名   </span><br><span class=\"line\"><span class=\"string\">template:</span>要使用的模块的路径  </span><br><span class=\"line\"><span class=\"string\">inject:</span> 把模板注入到哪个标签后 <span class=\"string\">'body'</span>,   </span><br><span class=\"line\"><span class=\"string\">favicon:</span> 给html添加一个favicon  <span class=\"string\">'./images/favico.ico'</span>,   </span><br><span class=\"line\"><span class=\"string\">minify:</span>是否压缩  <span class=\"literal\">true</span> <span class=\"literal\">false</span>   </span><br><span class=\"line\"><span class=\"string\">hash:</span>是否hash化 <span class=\"literal\">true</span> <span class=\"literal\">false</span> ,     </span><br><span class=\"line\"><span class=\"string\">cache:</span>是否缓存,   </span><br><span class=\"line\"><span class=\"string\">showErrors:</span>是否显示错误,  </span><br><span class=\"line\"><span class=\"string\">chunks:</span>目前没太明白  </span><br><span class=\"line\"><span class=\"string\">xhtml:</span>是否自动毕业标签 默认<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-提取样式插件\"><a href=\"#3-提取样式插件\" class=\"headerlink\" title=\"3. 提取样式插件\"></a>3. 提取样式插件</h3><p>extract-text-webpack-plugin  </p>\n<blockquote>\n<p>官网是这么解释的<code>Extract text from bundle into a file.</code>,把额外的数据加到编译好的文件中</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>) &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: <span class=\"string\">'./src/public/index.html'</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name].[hash].css\"</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：将css放到index.html的body上面</p>\n<h3 id=\"4-拷贝资源插件\"><a href=\"#4-拷贝资源插件\" class=\"headerlink\" title=\"4. 拷贝资源插件\"></a>4. 拷贝资源插件</h3><p> copy-webpack-plugin   </p>\n<blockquote>\n<p>官方这样解释 <code>Copy files and directories in webpack</code>,在webpack中拷贝文件和文件夹</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev copy-webpack-plugin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">&#125;]),</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用：把public 里面的内容全部拷贝到编译目录</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">其他说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">定义要拷贝的源目录</td>\n<td style=\"text-align:center\">from: __dirname + ‘/src/public’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">to</td>\n<td style=\"text-align:center\">定义要烤盘膛的目标目录</td>\n<td style=\"text-align:center\">from: __dirname + ‘/dist’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toType</td>\n<td style=\"text-align:center\"><code>file</code> 或者 <code>dir</code></td>\n<td style=\"text-align:center\">可选，默认是文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">force</td>\n<td style=\"text-align:center\">强制覆盖先前的插件</td>\n<td style=\"text-align:center\">可选 默认false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">context</td>\n<td style=\"text-align:center\">不知道作用</td>\n<td style=\"text-align:center\">可选 默认 base context 可用  specific context</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">flatten</td>\n<td style=\"text-align:center\">只拷贝文件不管文件夹</td>\n<td style=\"text-align:center\">默认是false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ignore</td>\n<td style=\"text-align:center\">忽略拷贝指定的文件</td>\n<td style=\"text-align:center\">可以用模糊匹配</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5-全局挂载插件\"><a href=\"#5-全局挂载插件\" class=\"headerlink\" title=\"5. 全局挂载插件\"></a>5. 全局挂载插件</h3><p>webpack.ProvidePlugin [webpack内置插件 ]    </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    $: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">    jQuery: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"window.jQuery\"</span>: <span class=\"string\">\"jquery\"</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">new webpack.NoErrorsPlugin(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.DedupePlugin</span>(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.UglifyJsPlugin</span>(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.CommonsChunkPlugin</span>(<span class=\"string\">'common.js'</span>)</span><br></pre></td></tr></table></figure>\n<p>作用: 和上面5个一一对应  </p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把一些需要的东西绑定到<span class=\"built_in\">window</span>上，暴露出来 成为全局变量</span><br><span class=\"line\">不显示错误插件</span><br><span class=\"line\">具体不是太清楚，先记录着</span><br><span class=\"line\">丑化js 混淆代码而用</span><br><span class=\"line\">提取公共代码的插件</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、一个完整的栗子\"><a href=\"#二、一个完整的栗子\" class=\"headerlink\" title=\"二、一个完整的栗子\"></a>二、一个完整的栗子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Modules</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Env</span><br><span class=\"line\"> * Get npm lifecycle event to identify the environment</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ENV = process.env.npm_lifecycle_event;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isTest = ENV === <span class=\"string\">'test'</span> || ENV === <span class=\"string\">'test-watch'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isProd = ENV === <span class=\"string\">'build'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeWebpackConfig</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.entry = isTest ? &#123;&#125; : &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app/app.js'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.output = isTest ? &#123;&#125; : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Absolute output directory</span></span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/dist'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        publicPath: isProd ? <span class=\"string\">'/'</span> : <span class=\"string\">'http://localhost:8080/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        filename: isProd ? <span class=\"string\">'[name].[hash].js'</span> : <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        chunkFilename: isProd ? <span class=\"string\">'[name].[hash].js'</span> : <span class=\"string\">'[name].bundle.js'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTest) &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'inline-source-map'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'source-map'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'eval-source-map'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.module = &#123;</span><br><span class=\"line\">        preLoaders: [],</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">            loader: isTest ? <span class=\"string\">'null'</span> : ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?sourceMap!postcss'</span>)</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'file'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.json$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'json'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.scss/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'style!css!sass'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'raw'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTest) &#123;</span><br><span class=\"line\">        config.module.preLoaders.push(&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: [</span><br><span class=\"line\">                <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                <span class=\"regexp\">/\\.spec\\.js$/</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            loader: <span class=\"string\">'isparta-instrumenter'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.postcss = [</span><br><span class=\"line\">        autoprefixer(&#123;</span><br><span class=\"line\">            browsers: [<span class=\"string\">'last 2 version'</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    config.plugins = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isTest) &#123;</span><br><span class=\"line\">        config.plugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: <span class=\"string\">'./src/public/index.html'</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'[name].[hash].css'</span>, &#123;disable: !isProd&#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">        config.plugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.NoErrorsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.optimize.DedupePlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">                <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">            &#125;]),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">                $: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">                jQuery: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"window.jQuery\"</span>: <span class=\"string\">\"jquery\"</span></span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.devServer = &#123;</span><br><span class=\"line\">        contentBase: <span class=\"string\">'./src/public'</span>,</span><br><span class=\"line\">        stats: <span class=\"string\">'minimal'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、调试技巧\"><a href=\"#三、调试技巧\" class=\"headerlink\" title=\"三、调试技巧\"></a>三、调试技巧</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">if</span> (isTest) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'inline-source-map'</span>;</span><br><span class=\"line\">&#125; <span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (isProd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'source-map'</span>;</span><br><span class=\"line\">&#125; <span class=\"built_in\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'eval-source-map'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用: 使用source-map可以在debug的时候看到源代码，方便 查错</p>\n</blockquote>\n","excerpt":"<p>上一篇博客讲解了webpack环境的基本，这一篇讲解一些更深入的内容和开发技巧。基本环境搭建就不展开讲了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、插件篇\"><a href=\"#一、插件篇\" class=\"headerlink\" title=\"一、插件篇\"></a>一、插件篇</h2><h3 id=\"1-自动补全css3前缀\"><a href=\"#1-自动补全css3前缀\" class=\"headerlink\" title=\"1. 自动补全css3前缀\"></a>1. 自动补全css3前缀</h3><p> autoprefixer  </p>\n<blockquote>\n<p>官方是这样说的：<code>Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website</code><br>，也就是说它是一个自动检测兼容性给各个浏览器加个内核前缀的插件。  </p>\n</blockquote>\n<p>举个栗子：最新的弹性盒模型flux<br>实际代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:fullscreen</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>插件自动补充后<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-flex;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>效果显而易见，我们可以更专注于css布局和美化，而不需要花过多的精力都写相同的外码而加上不同的前缀，也减少了冗余代码。</p>\n<p>使用方法:</p>\n<p><code>cnpm install --save-dev autoprefixer postcss-loader</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports=&#123;</span><br><span class=\"line\">  <span class=\"comment\">//其他配置这里就不写了</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">module</span>:&#123;</span><br><span class=\"line\">    loaders:[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test:<span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      <span class=\"comment\">//在原有基础上加上一个postcss的loader就可以了</span></span><br><span class=\"line\">      loaders:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'postcss-loader'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  postcss:[autoprefixer(&#123;browsers:[<span class=\"string\">'last 2 versions'</span>]&#125;)]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-自动生成html插件\"><a href=\"#2-自动生成html插件\" class=\"headerlink\" title=\"2. 自动生成html插件\"></a>2. 自动生成html插件</h3><p>html-webpack-plugin</p>\n<p><code>cnpm install html-webpack-plugin --save-dev</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports=&#123;</span><br><span class=\"line\">  entry:<span class=\"string\">'./index.js'</span>,</span><br><span class=\"line\">  output:&#123;</span><br><span class=\"line\">    path:__dirname+<span class=\"string\">'/dist'</span>,</span><br><span class=\"line\">    filename:<span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  plugins:[</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用:它会在dist目录下自动生成一个index.html</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack App<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其他配置参数:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">entry</span>: <span class=\"string\">'index.js'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">path</span>: <span class=\"string\">'dist'</span>,</span><br><span class=\"line\">    <span class=\"attribute\">filename</span>: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attribute\">plugins</span>: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      <span class=\"attribute\">title</span>: <span class=\"string\">'My App'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">filename</span>: <span class=\"string\">'admin.html'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">template</span>:<span class=\"string\">'header.html'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">inject</span>: <span class=\"string\">'body'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">favicon</span>:<span class=\"string\">'./images/favico.ico'</span>,</span><br><span class=\"line\">      <span class=\"attribute\">minify</span>:true,</span><br><span class=\"line\">      <span class=\"attribute\">hash</span>:true,</span><br><span class=\"line\">      <span class=\"attribute\">cache</span>:false,</span><br><span class=\"line\">      <span class=\"attribute\">showErrors</span>:false,</span><br><span class=\"line\">      <span class=\"string\">\"chunks\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"head\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"entry\"</span>: <span class=\"string\">\"assets/head_bundle.js\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"css\"</span>: [ <span class=\"string\">\"main.css\"</span> ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attribute\">xhtml</span>:false</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight erb\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">--- header.html ---</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span></span></span><span class=\"ruby\"> htmlWebpackPlugin.options.title </span><span class=\"xml\"><span class=\"tag\">%&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>作用：   </p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">title:</span> 设置title的名字   </span><br><span class=\"line\"><span class=\"string\">filename:</span> 设置这个html的文件名   </span><br><span class=\"line\"><span class=\"string\">template:</span>要使用的模块的路径  </span><br><span class=\"line\"><span class=\"string\">inject:</span> 把模板注入到哪个标签后 <span class=\"string\">'body'</span>,   </span><br><span class=\"line\"><span class=\"string\">favicon:</span> 给html添加一个favicon  <span class=\"string\">'./images/favico.ico'</span>,   </span><br><span class=\"line\"><span class=\"string\">minify:</span>是否压缩  <span class=\"literal\">true</span> <span class=\"literal\">false</span>   </span><br><span class=\"line\"><span class=\"string\">hash:</span>是否hash化 <span class=\"literal\">true</span> <span class=\"literal\">false</span> ,     </span><br><span class=\"line\"><span class=\"string\">cache:</span>是否缓存,   </span><br><span class=\"line\"><span class=\"string\">showErrors:</span>是否显示错误,  </span><br><span class=\"line\"><span class=\"string\">chunks:</span>目前没太明白  </span><br><span class=\"line\"><span class=\"string\">xhtml:</span>是否自动毕业标签 默认<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-提取样式插件\"><a href=\"#3-提取样式插件\" class=\"headerlink\" title=\"3. 提取样式插件\"></a>3. 提取样式插件</h3><p>extract-text-webpack-plugin  </p>\n<blockquote>\n<p>官网是这么解释的<code>Extract text from bundle into a file.</code>,把额外的数据加到编译好的文件中</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123; test: <span class=\"regexp\">/\\.css$/</span>, loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>) &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: <span class=\"string\">'./src/public/index.html'</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"[name].[hash].css\"</span>)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：将css放到index.html的body上面</p>\n<h3 id=\"4-拷贝资源插件\"><a href=\"#4-拷贝资源插件\" class=\"headerlink\" title=\"4. 拷贝资源插件\"></a>4. 拷贝资源插件</h3><p> copy-webpack-plugin   </p>\n<blockquote>\n<p>官方这样解释 <code>Copy files and directories in webpack</code>,在webpack中拷贝文件和文件夹</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev copy-webpack-plugin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">&#125;]),</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用：把public 里面的内容全部拷贝到编译目录</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">其他说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">定义要拷贝的源目录</td>\n<td style=\"text-align:center\">from: __dirname + ‘/src/public’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">to</td>\n<td style=\"text-align:center\">定义要烤盘膛的目标目录</td>\n<td style=\"text-align:center\">from: __dirname + ‘/dist’</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">toType</td>\n<td style=\"text-align:center\"><code>file</code> 或者 <code>dir</code></td>\n<td style=\"text-align:center\">可选，默认是文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">force</td>\n<td style=\"text-align:center\">强制覆盖先前的插件</td>\n<td style=\"text-align:center\">可选 默认false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">context</td>\n<td style=\"text-align:center\">不知道作用</td>\n<td style=\"text-align:center\">可选 默认 base context 可用  specific context</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">flatten</td>\n<td style=\"text-align:center\">只拷贝文件不管文件夹</td>\n<td style=\"text-align:center\">默认是false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ignore</td>\n<td style=\"text-align:center\">忽略拷贝指定的文件</td>\n<td style=\"text-align:center\">可以用模糊匹配</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5-全局挂载插件\"><a href=\"#5-全局挂载插件\" class=\"headerlink\" title=\"5. 全局挂载插件\"></a>5. 全局挂载插件</h3><p>webpack.ProvidePlugin [webpack内置插件 ]    </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    $: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">    jQuery: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"window.jQuery\"</span>: <span class=\"string\">\"jquery\"</span></span><br><span class=\"line\">&#125;))</span><br><span class=\"line\">new webpack.NoErrorsPlugin(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.DedupePlugin</span>(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.UglifyJsPlugin</span>(),</span><br><span class=\"line\">new webpack<span class=\"selector-class\">.optimize</span><span class=\"selector-class\">.CommonsChunkPlugin</span>(<span class=\"string\">'common.js'</span>)</span><br></pre></td></tr></table></figure>\n<p>作用: 和上面5个一一对应  </p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">把一些需要的东西绑定到<span class=\"built_in\">window</span>上，暴露出来 成为全局变量</span><br><span class=\"line\">不显示错误插件</span><br><span class=\"line\">具体不是太清楚，先记录着</span><br><span class=\"line\">丑化js 混淆代码而用</span><br><span class=\"line\">提取公共代码的插件</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、一个完整的栗子\"><a href=\"#二、一个完整的栗子\" class=\"headerlink\" title=\"二、一个完整的栗子\"></a>二、一个完整的栗子</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Modules</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> CopyWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'copy-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Env</span><br><span class=\"line\"> * Get npm lifecycle event to identify the environment</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ENV = process.env.npm_lifecycle_event;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isTest = ENV === <span class=\"string\">'test'</span> || ENV === <span class=\"string\">'test-watch'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> isProd = ENV === <span class=\"string\">'build'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeWebpackConfig</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.entry = isTest ? &#123;&#125; : &#123;</span><br><span class=\"line\">        app: <span class=\"string\">'./src/app/app.js'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.output = isTest ? &#123;&#125; : &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Absolute output directory</span></span><br><span class=\"line\">        path: __dirname + <span class=\"string\">'/dist'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        publicPath: isProd ? <span class=\"string\">'/'</span> : <span class=\"string\">'http://localhost:8080/'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        filename: isProd ? <span class=\"string\">'[name].[hash].js'</span> : <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        chunkFilename: isProd ? <span class=\"string\">'[name].[hash].js'</span> : <span class=\"string\">'[name].bundle.js'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTest) &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'inline-source-map'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'source-map'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        config.devtool = <span class=\"string\">'eval-source-map'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.module = &#123;</span><br><span class=\"line\">        preLoaders: [],</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css/</span>,</span><br><span class=\"line\">            loader: isTest ? <span class=\"string\">'null'</span> : ExtractTextPlugin.extract(<span class=\"string\">'style'</span>, <span class=\"string\">'css?sourceMap!postcss'</span>)</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'file'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.json$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'json'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.scss/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'style!css!sass'</span></span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">            loader: <span class=\"string\">'raw'</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTest) &#123;</span><br><span class=\"line\">        config.module.preLoaders.push(&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            exclude: [</span><br><span class=\"line\">                <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">                <span class=\"regexp\">/\\.spec\\.js$/</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            loader: <span class=\"string\">'isparta-instrumenter'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.postcss = [</span><br><span class=\"line\">        autoprefixer(&#123;</span><br><span class=\"line\">            browsers: [<span class=\"string\">'last 2 version'</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    config.plugins = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isTest) &#123;</span><br><span class=\"line\">        config.plugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">                template: <span class=\"string\">'./src/public/index.html'</span>,</span><br><span class=\"line\">                inject: <span class=\"string\">'body'</span></span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'[name].[hash].css'</span>, &#123;disable: !isProd&#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isProd) &#123;</span><br><span class=\"line\">        config.plugins.push(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.NoErrorsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.optimize.DedupePlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">new</span> CopyWebpackPlugin([&#123;</span><br><span class=\"line\">                <span class=\"keyword\">from</span>: __dirname + <span class=\"string\">'/src/public'</span></span><br><span class=\"line\">            &#125;]),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">                $: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">                jQuery: <span class=\"string\">\"jquery\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"window.jQuery\"</span>: <span class=\"string\">\"jquery\"</span></span><br><span class=\"line\">            &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    config.devServer = &#123;</span><br><span class=\"line\">        contentBase: <span class=\"string\">'./src/public'</span>,</span><br><span class=\"line\">        stats: <span class=\"string\">'minimal'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、调试技巧\"><a href=\"#三、调试技巧\" class=\"headerlink\" title=\"三、调试技巧\"></a>三、调试技巧</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">if</span> (isTest) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'inline-source-map'</span>;</span><br><span class=\"line\">&#125; <span class=\"built_in\">else</span> <span class=\"built_in\">if</span> (isProd) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'source-map'</span>;</span><br><span class=\"line\">&#125; <span class=\"built_in\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">config</span>.devtool = <span class=\"string\">'eval-source-map'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作用: 使用source-map可以在debug的时候看到源代码，方便 查错</p>\n</blockquote>"},{"author":"小莫","date":"2016-05-16T16:00:00.000Z","title":"webpack相关命令参数","_content":"使用webpack的同学，你真的熟练应用webpack么？其实直接`webpack --help`就可以看到，但是有很多人还是在网上到处搜相关参数\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、webpack相关参数\n```\n  webpack --config webpack.config.dev.js   //使用另一份配置文件（比如webpack.config2.js）来打包\n  webpack --watch   //监听变动并自动打包\n  webpack //执行一次开发时的编译\n  webpack -p //执行一次生成环境的编译（压缩）\n  webpack --watch //在开发时持续监控增量编译（很快）\n  webpack -d //让他生成SourceMaps\n  webpack --progress //显示编译进度\n  webpack --colors //显示静态资源的颜色\n  webpack --sort-modules-by, --sort-chunks-by, --sort-assets-by //将modules/chunks/assets进行列表排序\n  webpack --display-chunks //展示编译后的分块\n  webpack --display-reasons //显示更多引用模块原因\n  webapck --display-error-details //显示更多报错信息\n```\n","source":"_posts/2016-05-18.webpack_params.md","raw":"---\nauthor: 小莫\ndate: 2016-05-17\ntitle: webpack相关命令参数\ntags: webpack\ncategory:\n- webpack\n- javascript\n- node\n- 开发工具\npermalink: webpack_params\n---\n使用webpack的同学，你真的熟练应用webpack么？其实直接`webpack --help`就可以看到，但是有很多人还是在网上到处搜相关参数\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/webpack.png)](https://github.com/qq83387856)\n## 一、webpack相关参数\n```\n  webpack --config webpack.config.dev.js   //使用另一份配置文件（比如webpack.config2.js）来打包\n  webpack --watch   //监听变动并自动打包\n  webpack //执行一次开发时的编译\n  webpack -p //执行一次生成环境的编译（压缩）\n  webpack --watch //在开发时持续监控增量编译（很快）\n  webpack -d //让他生成SourceMaps\n  webpack --progress //显示编译进度\n  webpack --colors //显示静态资源的颜色\n  webpack --sort-modules-by, --sort-chunks-by, --sort-assets-by //将modules/chunks/assets进行列表排序\n  webpack --display-chunks //展示编译后的分块\n  webpack --display-reasons //显示更多引用模块原因\n  webapck --display-error-details //显示更多报错信息\n```\n","slug":"webpack_params","published":1,"updated":"2016-06-28T02:50:39.768Z","_id":"cipjfs5uk001d4wmc39wpdyah","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用webpack的同学，你真的熟练应用webpack么？其实直接<code>webpack --help</code>就可以看到，但是有很多人还是在网上到处搜相关参数<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、webpack相关参数\"><a href=\"#一、webpack相关参数\" class=\"headerlink\" title=\"一、webpack相关参数\"></a>一、webpack相关参数</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --config webpack.config.dev.js   <span class=\"comment\">//使用另一份配置文件（比如webpack.config2.js）来打包</span></span><br><span class=\"line\">webpack --watch   <span class=\"comment\">//监听变动并自动打包</span></span><br><span class=\"line\">webpack <span class=\"comment\">//执行一次开发时的编译</span></span><br><span class=\"line\">webpack -p <span class=\"comment\">//执行一次生成环境的编译（压缩）</span></span><br><span class=\"line\">webpack --watch <span class=\"comment\">//在开发时持续监控增量编译（很快）</span></span><br><span class=\"line\">webpack -<span class=\"keyword\">d</span> <span class=\"comment\">//让他生成SourceMaps</span></span><br><span class=\"line\">webpack --progress <span class=\"comment\">//显示编译进度</span></span><br><span class=\"line\">webpack --colors <span class=\"comment\">//显示静态资源的颜色</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">sort</span>-modules-<span class=\"keyword\">by</span>, --<span class=\"keyword\">sort</span>-chunks-<span class=\"keyword\">by</span>, --<span class=\"keyword\">sort</span>-assets-<span class=\"keyword\">by</span> <span class=\"comment\">//将modules/chunks/assets进行列表排序</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">display</span>-chunks <span class=\"comment\">//展示编译后的分块</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">display</span>-reasons <span class=\"comment\">//显示更多引用模块原因</span></span><br><span class=\"line\">webapck --<span class=\"keyword\">display</span>-<span class=\"keyword\">error</span>-details <span class=\"comment\">//显示更多报错信息</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>使用webpack的同学，你真的熟练应用webpack么？其实直接<code>webpack --help</code>就可以看到，但是有很多人还是在网上到处搜相关参数<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/webpack.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、webpack相关参数\"><a href=\"#一、webpack相关参数\" class=\"headerlink\" title=\"一、webpack相关参数\"></a>一、webpack相关参数</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --config webpack.config.dev.js   <span class=\"comment\">//使用另一份配置文件（比如webpack.config2.js）来打包</span></span><br><span class=\"line\">webpack --watch   <span class=\"comment\">//监听变动并自动打包</span></span><br><span class=\"line\">webpack <span class=\"comment\">//执行一次开发时的编译</span></span><br><span class=\"line\">webpack -p <span class=\"comment\">//执行一次生成环境的编译（压缩）</span></span><br><span class=\"line\">webpack --watch <span class=\"comment\">//在开发时持续监控增量编译（很快）</span></span><br><span class=\"line\">webpack -<span class=\"keyword\">d</span> <span class=\"comment\">//让他生成SourceMaps</span></span><br><span class=\"line\">webpack --progress <span class=\"comment\">//显示编译进度</span></span><br><span class=\"line\">webpack --colors <span class=\"comment\">//显示静态资源的颜色</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">sort</span>-modules-<span class=\"keyword\">by</span>, --<span class=\"keyword\">sort</span>-chunks-<span class=\"keyword\">by</span>, --<span class=\"keyword\">sort</span>-assets-<span class=\"keyword\">by</span> <span class=\"comment\">//将modules/chunks/assets进行列表排序</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">display</span>-chunks <span class=\"comment\">//展示编译后的分块</span></span><br><span class=\"line\">webpack --<span class=\"keyword\">display</span>-reasons <span class=\"comment\">//显示更多引用模块原因</span></span><br><span class=\"line\">webapck --<span class=\"keyword\">display</span>-<span class=\"keyword\">error</span>-details <span class=\"comment\">//显示更多报错信息</span></span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-05-18T16:00:00.000Z","title":"es6语法快速上手","_content":"随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/es6.png)](https://github.com/qq83387856)\n## 一、相关背景介绍\n我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。\n## 二、babel 一个es6的解析器\n在我们正式讲解ES6语法之前，我们得先了解下[Babel。](https://babeljs.io/)\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：\n\n## 三、语法\n最常用的ES6特性\n\n`let`, `const`, `class`, `extends`, `super`, `arrow functions`, `template string`, `destructuring`, `default`, `rest arguments`\n这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。\n\n### 1. `let, const`\n这两个的用途与`var`类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。\n首先来看下面这个例子：\n\n```\nvar name = 'zach'\n\nwhile (true) {\n    var name = 'obama'\n    console.log(name)  //obama\n    break\n}\n\nconsole.log(name)  //obama\n```\n\n使用`var` 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而`let`则实际上为`JavaScript`新增了块级作用域。用它所声明的变量，只在`let`命令所在的代码块内有效。\n\n另外一个`var`带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：\n\n```\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n```\n\n上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。\n\n```\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n```\n\n再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。\n\n```\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = function(){\n        console.log(i)\n    }\n}\n```\n\n我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。\n\n```\nfunction iteratorFactory(i){\n    var onclick = function(e){\n        console.log(i)\n    }\n    return onclick;\n}\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = iteratorFactory(i)\n}\n```\n\n`const`也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。\n\n```\nconst PI = Math.PI\n\nPI = 23 //Module build failed: SyntaxError: /es6/app.js: \"PI\" is read-only\n```\n\n当我们尝试去改变用const声明的常量时，浏览器就会报错。\nconst有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：\n\n```\nconst monent = require('moment')\n```\n\n### 2. `class`, `extends`, `super`\n这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承...你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？\n\n有了ES6我们不再烦恼！\n\nES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        console.log(this.type + ' says ' + say)\n    }\n}\n\nlet animal = new Animal()\nanimal.says('hello') //animal says hello\n\nclass Cat extends Animal {\n    constructor(){\n        super()\n        this.type = 'cat'\n    }\n}\n\nlet cat = new Cat()\ncat.says('hello') //cat says hello\n```\n\n上面代码首先用`class`定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。\n\n`Class`之间可以通过`extends`关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。\n\n`super`关键字，它指代父类的实例（即父类的this对象）。子类必须在`constructor`方法中调用`super`方法，否则新建实例时会报错。这是因为子类没有自己的`this`对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n\n`ES6`的继承机制，实质是先创造父类的实例对象`this`（所以必须先调用s`uper`方法），然后再用子类的构造函数修改`this`。\n\nP.S 如果你写react的话，就会发现以上三个东西在最新版`React`中出现得很多。创建的每个component都是一个继承`React.Component`的类。[详见react文档](https://facebook.github.io/react/docs/reusable-components.html)\n\n### 3. `arrow function`\n\n这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:\n\n```\nfunction(i){ return i + 1; } //ES5\n(i) => i + 1 //ES6\n```\n\n简直是简单的不像话对吧...\n如果方程比较复杂，则需要用`{}`把代码包起来：\n\n```\nfunction(x, y) {\n    x++;\n    y--;\n    return x + y;\n}\n(x, y) => {x++; y--; return x+y}\n```\n\n除了看上去更简洁以外，`arrow function`还有一项超级无敌的功能！\n长期以来，`JavaScript`语言的`this`对象一直是一个令人头痛的问题，在对象方法中使用`this`，必须非常小心。例如：\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout(function(){\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n\n var animal = new Animal()\n animal.says('hi')  //undefined says hi\n```\n\n运行上面的代码会报错，这是因为`setTimeout`中的`this`指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：\n\n1. 第一种是将this传给self,再用self来指代this\n\n```\nsays(say){\n      var self = this;\n      setTimeout(function(){\n          console.log(self.type + ' says ' + say)\n      }, 1000)\n   ```\n\n2. 第二种方法是用bind(this),即\n\n```\n  says(say){\n      setTimeout(function(){\n          console.log(this.type + ' says ' + say)\n      }.bind(this), 1000)\n      ```\n\n但现在我们有了箭头函数，就不需要这么麻烦了：\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout( () => {\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n var animal = new Animal()\n animal.says('hi')  //animal says hi\n```\n\n当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。\n\n### 4. `template string`\n\n这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。\n\n大家可以先看下面一段代码：\n\n```\n$(\"#result\").append(\n  \"There are <b>\" + basket.count + \"</b> \" +\n  \"items in your basket, \" +\n  \"<em>\" + basket.onSale +\n  \"</em> are on sale!\"\n);\n```\n\n我们要用一堆的'+'号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：\n\n```\n$(\"#result\").append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n```\n\n用反引号（\\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！\n\n  [React Router](https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js)从第1.0.3版开始也使用ES6语法了，比如这个例子：\n\n\n`<Link to={'/taco/${taco.name}'}>{taco.name}</Link>`\n\n\n### 5. `destructuring`\n\n  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n看下面的例子：\n\n```\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat: cat, dog: dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n\n用ES6完全可以像下面这么写：\n\n```\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat, dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n\n反过来可以这么写：\n\n```\nlet dog = {type: 'animal', many: 2}\nlet { type, many} = dog\nconsole.log(type, many)   //animal 2\n```\n\n### 6. `default`, `rest`\n\ndefault很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || 'cat' 来指定默认值。\n\n\n```\nfunction animal(type){\n    type = type || 'cat'  \n    console.log(type)\n}\nanimal()\n```\n\n如果用ES6我们而已直接这么写：\n\n```\nfunction animal(type = 'cat'){\n    console.log(type)\n}\nanimal()\n```\n\n\n最后一个rest语法也很简单，直接看例子：\n\n```\nfunction animals(...types){\n    console.log(types)\n}\nanimals('cat', 'dog', 'fish') //[\"cat\", \"dog\", \"fish\"]\n```\n\n而如果不用ES6的话，我们则得使用ES5的`arguments`。\n\n\n### 7. `import export`\n\n这两个家伙对应的就是`es6`自己的`module`功能。\n\n我们之前写的`Javascript`一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。\n\n这有可能导致两个问题：\n\n1. 一方面js代码变得很臃肿，难以维护;\n2. 另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;\n在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。\n\n如果想了解更多AMD，尤其是require.js，可以参看这个教程\n[why modules on the web are useful and the mechanisms that can be used on the web today to enable them](http://requirejs.org/docs/why.html)\n\n而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。\n\n>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。\n\n上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码...\n\n 传统的写法\n首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？\n\n首先定义:\n\n```\n//content.js\ndefine('content.js', function(){\n    return 'A cat';\n})\n```\n\n然后require:\n\n```\n//index.js\nrequire(['./content.js'], function(animal){\n    console.log(animal);   //A cat\n})\n```\n\n那CommonJS是怎么写的呢？\n\n```\n//index.js\nvar animal = require('./content.js')\n\n//content.js\nmodule.exports = 'A cat'\n```\n\n ES6的写法\n\n```\n//index.js\nimport animal from './content'\n\n//content.js\nexport default 'A cat'\n```\n\n以上我把三者都列出来了，妈妈再也不用担心我写混淆了...\n\n\n### 8. ES6 module的其他高级用法\n\n输出\\输入多个变量\n\n```\n//content.js\n\nexport default 'A cat'    \nexport function say(){\n    return 'Hello!'\n}    \nexport const type = 'dog'\n```\n\n上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）\n\n\n```\n//index.js\n\nimport { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says}`)  //The dog says Hello\n```\n\n这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。\n\n如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。\n\n\n```\n//index.js\n\nimport animal, { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n```\n\n\n### 9. 修改变量名\n\n此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。\n\n//index.js\n```\nimport animal, { say, type as animalType } from './content'  \nlet says = say()\nconsole.log(`The ${animalType} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n```\n\n### 10. 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n```\n  //index.js\n\n  import animal, * as content from './content'  \n  let says = content.say()\n  console.log(`The ${content.type} says ${says} to ${animal}`)  \n  //The dog says Hello to A cat\n```\n\n通常星号*结合as一起使用比较合适。\n\n11. 终极秘籍\n\n考虑下面的场景：\n上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：\n\n`import { type } from './content'`\n\n由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。\n\nES6帮我们实现了！\n\n不过，目前无论是webpack还是browserify都还不支持这一功能...\n\n如果你现在就想实现这一功能的话，可以尝试使用rollup.js\n\n他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。\n\n看看他们官方的解释吧：\n\n>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It's a revolution in how we use libraries in JavaScript, and it's happening right now.\n\n\n希望更全面了解es6伙伴们可以去看阮一峰所著的电子书[ECMAScript 6入门](http://es6.ruanyifeng.com/)\n","source":"_posts/2016-05-19.es6_syntax.md","raw":"---\nauthor: 小莫\ndate: 2016-05-19\ntitle: es6语法快速上手\ntags:\n- es6\n- javascript\ncategory: es6\npermalink: es6_syntax\n---\n随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/es6.png)](https://github.com/qq83387856)\n## 一、相关背景介绍\n我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。\n## 二、babel 一个es6的解析器\n在我们正式讲解ES6语法之前，我们得先了解下[Babel。](https://babeljs.io/)\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：\n\n## 三、语法\n最常用的ES6特性\n\n`let`, `const`, `class`, `extends`, `super`, `arrow functions`, `template string`, `destructuring`, `default`, `rest arguments`\n这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。\n\n### 1. `let, const`\n这两个的用途与`var`类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。\n首先来看下面这个例子：\n\n```\nvar name = 'zach'\n\nwhile (true) {\n    var name = 'obama'\n    console.log(name)  //obama\n    break\n}\n\nconsole.log(name)  //obama\n```\n\n使用`var` 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而`let`则实际上为`JavaScript`新增了块级作用域。用它所声明的变量，只在`let`命令所在的代码块内有效。\n\n另外一个`var`带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：\n\n```\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n```\n\n上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。\n\n```\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n```\n\n再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。\n\n```\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = function(){\n        console.log(i)\n    }\n}\n```\n\n我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。\n\n```\nfunction iteratorFactory(i){\n    var onclick = function(e){\n        console.log(i)\n    }\n    return onclick;\n}\nvar clickBoxs = document.querySelectorAll('.clickBox')\nfor (var i = 0; i < clickBoxs.length; i++){\n    clickBoxs[i].onclick = iteratorFactory(i)\n}\n```\n\n`const`也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。\n\n```\nconst PI = Math.PI\n\nPI = 23 //Module build failed: SyntaxError: /es6/app.js: \"PI\" is read-only\n```\n\n当我们尝试去改变用const声明的常量时，浏览器就会报错。\nconst有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：\n\n```\nconst monent = require('moment')\n```\n\n### 2. `class`, `extends`, `super`\n这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承...你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？\n\n有了ES6我们不再烦恼！\n\nES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        console.log(this.type + ' says ' + say)\n    }\n}\n\nlet animal = new Animal()\nanimal.says('hello') //animal says hello\n\nclass Cat extends Animal {\n    constructor(){\n        super()\n        this.type = 'cat'\n    }\n}\n\nlet cat = new Cat()\ncat.says('hello') //cat says hello\n```\n\n上面代码首先用`class`定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。\n\n`Class`之间可以通过`extends`关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。\n\n`super`关键字，它指代父类的实例（即父类的this对象）。子类必须在`constructor`方法中调用`super`方法，否则新建实例时会报错。这是因为子类没有自己的`this`对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。\n\n`ES6`的继承机制，实质是先创造父类的实例对象`this`（所以必须先调用s`uper`方法），然后再用子类的构造函数修改`this`。\n\nP.S 如果你写react的话，就会发现以上三个东西在最新版`React`中出现得很多。创建的每个component都是一个继承`React.Component`的类。[详见react文档](https://facebook.github.io/react/docs/reusable-components.html)\n\n### 3. `arrow function`\n\n这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:\n\n```\nfunction(i){ return i + 1; } //ES5\n(i) => i + 1 //ES6\n```\n\n简直是简单的不像话对吧...\n如果方程比较复杂，则需要用`{}`把代码包起来：\n\n```\nfunction(x, y) {\n    x++;\n    y--;\n    return x + y;\n}\n(x, y) => {x++; y--; return x+y}\n```\n\n除了看上去更简洁以外，`arrow function`还有一项超级无敌的功能！\n长期以来，`JavaScript`语言的`this`对象一直是一个令人头痛的问题，在对象方法中使用`this`，必须非常小心。例如：\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout(function(){\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n\n var animal = new Animal()\n animal.says('hi')  //undefined says hi\n```\n\n运行上面的代码会报错，这是因为`setTimeout`中的`this`指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：\n\n1. 第一种是将this传给self,再用self来指代this\n\n```\nsays(say){\n      var self = this;\n      setTimeout(function(){\n          console.log(self.type + ' says ' + say)\n      }, 1000)\n   ```\n\n2. 第二种方法是用bind(this),即\n\n```\n  says(say){\n      setTimeout(function(){\n          console.log(this.type + ' says ' + say)\n      }.bind(this), 1000)\n      ```\n\n但现在我们有了箭头函数，就不需要这么麻烦了：\n\n```\nclass Animal {\n    constructor(){\n        this.type = 'animal'\n    }\n    says(say){\n        setTimeout( () => {\n            console.log(this.type + ' says ' + say)\n        }, 1000)\n    }\n}\n var animal = new Animal()\n animal.says('hi')  //animal says hi\n```\n\n当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。\n\n### 4. `template string`\n\n这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。\n\n大家可以先看下面一段代码：\n\n```\n$(\"#result\").append(\n  \"There are <b>\" + basket.count + \"</b> \" +\n  \"items in your basket, \" +\n  \"<em>\" + basket.onSale +\n  \"</em> are on sale!\"\n);\n```\n\n我们要用一堆的'+'号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：\n\n```\n$(\"#result\").append(`\n  There are <b>${basket.count}</b> items\n   in your basket, <em>${basket.onSale}</em>\n  are on sale!\n`);\n```\n\n用反引号（\\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！\n\n  [React Router](https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js)从第1.0.3版开始也使用ES6语法了，比如这个例子：\n\n\n`<Link to={'/taco/${taco.name}'}>{taco.name}</Link>`\n\n\n### 5. `destructuring`\n\n  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n看下面的例子：\n\n```\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat: cat, dog: dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n\n用ES6完全可以像下面这么写：\n\n```\nlet cat = 'ken'\nlet dog = 'lili'\nlet zoo = {cat, dog}\nconsole.log(zoo)  //Object {cat: \"ken\", dog: \"lili\"}\n```\n\n反过来可以这么写：\n\n```\nlet dog = {type: 'animal', many: 2}\nlet { type, many} = dog\nconsole.log(type, many)   //animal 2\n```\n\n### 6. `default`, `rest`\n\ndefault很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || 'cat' 来指定默认值。\n\n\n```\nfunction animal(type){\n    type = type || 'cat'  \n    console.log(type)\n}\nanimal()\n```\n\n如果用ES6我们而已直接这么写：\n\n```\nfunction animal(type = 'cat'){\n    console.log(type)\n}\nanimal()\n```\n\n\n最后一个rest语法也很简单，直接看例子：\n\n```\nfunction animals(...types){\n    console.log(types)\n}\nanimals('cat', 'dog', 'fish') //[\"cat\", \"dog\", \"fish\"]\n```\n\n而如果不用ES6的话，我们则得使用ES5的`arguments`。\n\n\n### 7. `import export`\n\n这两个家伙对应的就是`es6`自己的`module`功能。\n\n我们之前写的`Javascript`一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。\n\n这有可能导致两个问题：\n\n1. 一方面js代码变得很臃肿，难以维护;\n2. 另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;\n在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。\n\n如果想了解更多AMD，尤其是require.js，可以参看这个教程\n[why modules on the web are useful and the mechanisms that can be used on the web today to enable them](http://requirejs.org/docs/why.html)\n\n而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。\n\n>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。\n\n上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码...\n\n 传统的写法\n首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？\n\n首先定义:\n\n```\n//content.js\ndefine('content.js', function(){\n    return 'A cat';\n})\n```\n\n然后require:\n\n```\n//index.js\nrequire(['./content.js'], function(animal){\n    console.log(animal);   //A cat\n})\n```\n\n那CommonJS是怎么写的呢？\n\n```\n//index.js\nvar animal = require('./content.js')\n\n//content.js\nmodule.exports = 'A cat'\n```\n\n ES6的写法\n\n```\n//index.js\nimport animal from './content'\n\n//content.js\nexport default 'A cat'\n```\n\n以上我把三者都列出来了，妈妈再也不用担心我写混淆了...\n\n\n### 8. ES6 module的其他高级用法\n\n输出\\输入多个变量\n\n```\n//content.js\n\nexport default 'A cat'    \nexport function say(){\n    return 'Hello!'\n}    \nexport const type = 'dog'\n```\n\n上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）\n\n\n```\n//index.js\n\nimport { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says}`)  //The dog says Hello\n```\n\n这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。\n\n如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。\n\n\n```\n//index.js\n\nimport animal, { say, type } from './content'  \nlet says = say()\nconsole.log(`The ${type} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n```\n\n\n### 9. 修改变量名\n\n此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。\n\n//index.js\n```\nimport animal, { say, type as animalType } from './content'  \nlet says = say()\nconsole.log(`The ${animalType} says ${says} to ${animal}`)  \n//The dog says Hello to A cat\n```\n\n### 10. 模块的整体加载\n\n除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。\n\n```\n  //index.js\n\n  import animal, * as content from './content'  \n  let says = content.say()\n  console.log(`The ${content.type} says ${says} to ${animal}`)  \n  //The dog says Hello to A cat\n```\n\n通常星号*结合as一起使用比较合适。\n\n11. 终极秘籍\n\n考虑下面的场景：\n上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：\n\n`import { type } from './content'`\n\n由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。\n\nES6帮我们实现了！\n\n不过，目前无论是webpack还是browserify都还不支持这一功能...\n\n如果你现在就想实现这一功能的话，可以尝试使用rollup.js\n\n他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。\n\n看看他们官方的解释吧：\n\n>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It's a revolution in how we use libraries in JavaScript, and it's happening right now.\n\n\n希望更全面了解es6伙伴们可以去看阮一峰所著的电子书[ECMAScript 6入门](http://es6.ruanyifeng.com/)\n","slug":"es6_syntax","published":1,"updated":"2016-06-28T02:50:33.918Z","_id":"cipjfs5un001h4wmcj3jwhryo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/es6.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、相关背景介绍\"><a href=\"#一、相关背景介绍\" class=\"headerlink\" title=\"一、相关背景介绍\"></a>一、相关背景介绍</h2><p>我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。</p>\n<h2 id=\"二、babel-一个es6的解析器\"><a href=\"#二、babel-一个es6的解析器\" class=\"headerlink\" title=\"二、babel 一个es6的解析器\"></a>二、babel 一个es6的解析器</h2><p>在我们正式讲解ES6语法之前，我们得先了解下<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel。</a></p>\n<p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：</p>\n<h2 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h2><p>最常用的ES6特性</p>\n<p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code><br>这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。</p>\n<h3 id=\"1-let-const\"><a href=\"#1-let-const\" class=\"headerlink\" title=\"1. let, const\"></a>1. <code>let, const</code></h3><p>这两个的用途与<code>var</code>类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">name</span> = <span class=\"string\">'zach'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    var <span class=\"keyword\">name</span> = <span class=\"string\">'obama'</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">name</span>)  <span class=\"comment\">//obama</span></span><br><span class=\"line\">    break</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">name</span>)  <span class=\"comment\">//obama</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>var</code> 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而<code>let</code>则实际上为<code>JavaScript</code>新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>\n<p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clickBoxs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; clickBoxs.length; i++)&#123;</span><br><span class=\"line\">    clickBoxs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iteratorFactory</span><span class=\"params\">(i)</span>&#123;</span></span><br><span class=\"line\">    var onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span>&#123;</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">i</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onclick;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var clickBoxs = document.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (var <span class=\"built_in\">i</span> = <span class=\"number\">0</span>; <span class=\"built_in\">i</span> &lt; clickBoxs.<span class=\"built_in\">length</span>; <span class=\"built_in\">i</span>++)&#123;</span><br><span class=\"line\">    clickBoxs[i].onclick = iteratorFactory(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>const</code>也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">PI</span> = Math.<span class=\"built_in\">PI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">PI</span> = <span class=\"number\">23</span> //<span class=\"keyword\">Module</span> build failed: SyntaxError: /es6/app.js: <span class=\"string\">\"PI\"</span> is read-only</span><br></pre></td></tr></table></figure>\n<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> monent = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-class-extends-super\"><a href=\"#2-class-extends-super\" class=\"headerlink\" title=\"2. class, extends, super\"></a>2. <code>class</code>, <code>extends</code>, <code>super</code></h3><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p>\n<p>有了ES6我们不再烦恼！</p>\n<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> = <span class=\"symbol\">'anima</span>l'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        console.log(<span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> + ' says ' + say)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let animal = <span class=\"keyword\">new</span> <span class=\"type\">Animal</span>()</span><br><span class=\"line\">animal.says(<span class=\"symbol\">'hell</span>o') <span class=\"comment\">//animal says hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> = <span class=\"symbol\">'ca</span>t'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let cat = <span class=\"keyword\">new</span> <span class=\"type\">Cat</span>()</span><br><span class=\"line\">cat.says(<span class=\"symbol\">'hell</span>o') <span class=\"comment\">//cat says hello</span></span><br></pre></td></tr></table></figure>\n<p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p>\n<p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p>\n<p><code>super</code>关键字，它指代父类的实例（即父类的this对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n<p><code>ES6</code>的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用s<code>uper</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>\n<p>P.S 如果你写react的话，就会发现以上三个东西在最新版<code>React</code>中出现得很多。创建的每个component都是一个继承<code>React.Component</code>的类。<a href=\"https://facebook.github.io/react/docs/reusable-components.html\" target=\"_blank\" rel=\"external\">详见react文档</a></p>\n<h3 id=\"3-arrow-function\"><a href=\"#3-arrow-function\" class=\"headerlink\" title=\"3. arrow function\"></a>3. <code>arrow function</code></h3><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span>&#123; <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>; &#125; <span class=\"comment\">//ES5</span></span><br><span class=\"line\">(i) =&gt; i + <span class=\"number\">1</span> <span class=\"comment\">//ES6</span></span><br></pre></td></tr></table></figure>\n<p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用<code>{}</code>把代码包起来：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(<span class=\"keyword\">x</span>, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">x</span>++<span class=\"comment\">;</span></span><br><span class=\"line\">    y--<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">x</span> + y<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"keyword\">x</span>, y) =&gt; &#123;<span class=\"keyword\">x</span>++<span class=\"comment\">; y--; return x+y&#125;</span></span><br></pre></td></tr></table></figure>\n<p>除了看上去更简洁以外，<code>arrow function</code>还有一项超级无敌的功能！<br>长期以来，<code>JavaScript</code>语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'animal'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"> animal.says(<span class=\"string\">'hi'</span>)  <span class=\"comment\">//undefined says hi</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的代码会报错，这是因为<code>setTimeout</code>中的<code>this</code>指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>\n<ol>\n<li>第一种是将this传给self,再用self来指代this</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(self.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第二种方法是用bind(this),即</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'animal'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout( () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"> animal.says(<span class=\"string\">'hi'</span>)  <span class=\"comment\">//animal says hi</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>\n<h3 id=\"4-template-string\"><a href=\"#4-template-string\" class=\"headerlink\" title=\"4. template string\"></a>4. <code>template string</code></h3><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p>\n<p>大家可以先看下面一段代码：</p>\n<figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$(</span><span class=\"comment\">\"#result\"</span>).append(</span><br><span class=\"line\">  <span class=\"comment\">\"There are &lt;b&gt;\"</span> + basket.count + <span class=\"comment\">\"&lt;/b&gt; \"</span> +</span><br><span class=\"line\">  <span class=\"comment\">\"items in your basket, \"</span> +</span><br><span class=\"line\">  <span class=\"comment\">\"&lt;em&gt;\"</span> + basket.onSale +</span><br><span class=\"line\">  <span class=\"comment\">\"&lt;/em&gt; are on sale!\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).<span class=\"keyword\">append</span>(`</span><br><span class=\"line\">  There are &lt;b&gt;<span class=\"variable\">$&#123;basket</span>.<span class=\"keyword\">count</span>&#125;&lt;/b&gt; items</span><br><span class=\"line\">   <span class=\"keyword\">in</span> your basket, &lt;em&gt;<span class=\"variable\">$&#123;basket</span>.onSale&#125;&lt;/em&gt;</span><br><span class=\"line\">  are <span class=\"keyword\">on</span> sale!</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>用反引号（\\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p>\n<p>  <a href=\"https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js\" target=\"_blank\" rel=\"external\">React Router</a>从第1.0.3版开始也使用ES6语法了，比如这个例子：</p>\n<p><code>&lt;Link to={&#39;/taco/${taco.name}&#39;}&gt;{taco.name}&lt;/Link&gt;</code></p>\n<h3 id=\"5-destructuring\"><a href=\"#5-destructuring\" class=\"headerlink\" title=\"5. destructuring\"></a>5. <code>destructuring</code></h3><p>  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">cat</span> = <span class=\"string\">'ken'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"keyword\">cat</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> dog&#125;</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(zoo)  //Object &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"string\">\"ken\"</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> <span class=\"string\">\"lili\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>用ES6完全可以像下面这么写：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">cat</span> = <span class=\"string\">'ken'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;<span class=\"keyword\">cat</span>, dog&#125;</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(zoo)  //Object &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"string\">\"ken\"</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> <span class=\"string\">\"lili\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>反过来可以这么写：</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;<span class=\"class\"><span class=\"keyword\">type</span>: '<span class=\"title\">animal</span>', <span class=\"title\">many</span>: 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">many</span>&#125; </span>= dog</span><br><span class=\"line\">console.log(<span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">many</span>)   //<span class=\"title\">animal</span> 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-default-rest\"><a href=\"#6-default-rest\" class=\"headerlink\" title=\"6. default, rest\"></a>6. <code>default</code>, <code>rest</code></h3><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’ 来指定默认值。</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> animal(<span class=\"class\"><span class=\"keyword\">type</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> </span>= <span class=\"class\"><span class=\"keyword\">type</span> || '<span class=\"title\">cat</span>'  </span></span><br><span class=\"line\">    console.log(<span class=\"class\"><span class=\"keyword\">type</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal()</span><br></pre></td></tr></table></figure>\n<p>如果用ES6我们而已直接这么写：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span><span class=\"params\">(<span class=\"keyword\">type</span> = <span class=\"string\">'cat'</span>)</span><span class=\"comment\">&#123;</span><br><span class=\"line\">    console.log(type)</span><br><span class=\"line\">&#125;</span></span><br><span class=\"line\"><span class=\"title\">animal</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>最后一个rest语法也很简单，直接看例子：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animals</span><span class=\"params\">(<span class=\"rest_arg\">...types</span>)</span></span>&#123;</span><br><span class=\"line\">    console.log(types)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animals(<span class=\"string\">'cat'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'fish'</span>) <span class=\"comment\">//[\"cat\", \"dog\", \"fish\"]</span></span><br></pre></td></tr></table></figure>\n<p>而如果不用ES6的话，我们则得使用ES5的<code>arguments</code>。</p>\n<h3 id=\"7-import-export\"><a href=\"#7-import-export\" class=\"headerlink\" title=\"7. import export\"></a>7. <code>import export</code></h3><p>这两个家伙对应的就是<code>es6</code>自己的<code>module</code>功能。</p>\n<p>我们之前写的<code>Javascript</code>一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p>\n<p>这有可能导致两个问题：</p>\n<ol>\n<li>一方面js代码变得很臃肿，难以维护;</li>\n<li>另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;<br>在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</li>\n</ol>\n<p>如果想了解更多AMD，尤其是require.js，可以参看这个教程<br><a href=\"http://requirejs.org/docs/why.html\" target=\"_blank\" rel=\"external\">why modules on the web are useful and the mechanisms that can be used on the web today to enable them</a></p>\n<p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</p>\n<blockquote>\n<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>\n</blockquote>\n<p>上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码…</p>\n<p> 传统的写法<br>首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p>\n<p>首先定义:</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\">define(<span class=\"string\">'content.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'A cat'</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后require:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./content.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(animal);   <span class=\"comment\">//A cat</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那CommonJS是怎么写的呢？</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> animal = require(<span class=\"string\">'./content.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\">module<span class=\"selector-class\">.exports</span> = <span class=\"string\">'A cat'</span></span><br></pre></td></tr></table></figure>\n<p> ES6的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'A cat'</span></span><br></pre></td></tr></table></figure>\n<p>以上我把三者都列出来了，妈妈再也不用担心我写混淆了…</p>\n<h3 id=\"8-ES6-module的其他高级用法\"><a href=\"#8-ES6-module的其他高级用法\" class=\"headerlink\" title=\"8. ES6 module的其他高级用法\"></a>8. ES6 module的其他高级用法</h3><p>输出\\输入多个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'A cat'</span>    </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello!'</span></span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> type = <span class=\"string\">'dog'</span></span><br></pre></td></tr></table></figure>\n<p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; say, type &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span>`</span>)  <span class=\"comment\">//The dog says Hello</span></span><br></pre></td></tr></table></figure>\n<p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。</p>\n<p>如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal, &#123; say, type &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-修改变量名\"><a href=\"#9-修改变量名\" class=\"headerlink\" title=\"9. 修改变量名\"></a>9. 修改变量名</h3><p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p>\n<p>//index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> animal, &#123; say, type <span class=\"keyword\">as</span> animalType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;animalType&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-模块的整体加载\"><a href=\"#10-模块的整体加载\" class=\"headerlink\" title=\"10. 模块的整体加载\"></a>10. 模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal, * <span class=\"keyword\">as</span> content <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = content.say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;content.type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>\n<p>通常星号*结合as一起使用比较合适。</p>\n<ol>\n<li>终极秘籍</li>\n</ol>\n<p>考虑下面的场景：<br>上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：</p>\n<p><code>import { type } from &#39;./content&#39;</code></p>\n<p>由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。</p>\n<p>ES6帮我们实现了！</p>\n<p>不过，目前无论是webpack还是browserify都还不支持这一功能…</p>\n<p>如果你现在就想实现这一功能的话，可以尝试使用rollup.js</p>\n<p>他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。</p>\n<p>看看他们官方的解释吧：</p>\n<blockquote>\n<p>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It’s a revolution in how we use libraries in JavaScript, and it’s happening right now.</p>\n</blockquote>\n<p>希望更全面了解es6伙伴们可以去看阮一峰所著的电子书<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6入门</a></p>\n","excerpt":"<p>随着google和firfox以及node6.0对es6的支持，es6语法的定稿使它越来越受到关注，尤其是react项目基本上都是用es6来写的。是时候从es5到es6转变了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/es6.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、相关背景介绍\"><a href=\"#一、相关背景介绍\" class=\"headerlink\" title=\"一、相关背景介绍\"></a>一、相关背景介绍</h2><p>我们现在大多数人用的语法javascript 其实版本是ecmscript5,也是就es5。这个版本己经很多年了，且完美被各大浏览器所支持。所以很多学js的朋友可以一直分不清楚es5和javascript的关系。javascript是一门编程语言，那么它就会有版本，es5还是es6 就就是它的版本号。最新版es7己经在紧锣密布的进行中，它最新的语法会让我们写代码更新的行云流水。</p>\n<h2 id=\"二、babel-一个es6的解析器\"><a href=\"#二、babel-一个es6的解析器\" class=\"headerlink\" title=\"二、babel 一个es6的解析器\"></a>二、babel 一个es6的解析器</h2><p>在我们正式讲解ES6语法之前，我们得先了解下<a href=\"https://babeljs.io/\">Babel。</a></p>\n<p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack。具体过程可直接在Babel官网查看：</p>\n<h2 id=\"三、语法\"><a href=\"#三、语法\" class=\"headerlink\" title=\"三、语法\"></a>三、语法</h2><p>最常用的ES6特性</p>\n<p><code>let</code>, <code>const</code>, <code>class</code>, <code>extends</code>, <code>super</code>, <code>arrow functions</code>, <code>template string</code>, <code>destructuring</code>, <code>default</code>, <code>rest arguments</code><br>这些是ES6最常用的几个语法，基本上学会它们，我们就可以走遍天下都不怕啦！我会用最通俗易懂的语言和例子来讲解它们，保证一看就懂，一学就会。</p>\n<h3 id=\"1-let-const\"><a href=\"#1-let-const\" class=\"headerlink\" title=\"1. let, const\"></a>1. <code>let, const</code></h3><p>这两个的用途与<code>var</code>类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">name</span> = <span class=\"string\">'zach'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    var <span class=\"keyword\">name</span> = <span class=\"string\">'obama'</span></span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">name</span>)  <span class=\"comment\">//obama</span></span><br><span class=\"line\">    break</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">name</span>)  <span class=\"comment\">//obama</span></span><br></pre></td></tr></table></figure>\n<p>使用<code>var</code> 两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而<code>let</code>则实际上为<code>JavaScript</code>新增了块级作用域。用它所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p>\n<p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clickBoxs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; clickBoxs.length; i++)&#123;</span><br><span class=\"line\">    clickBoxs[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">iteratorFactory</span><span class=\"params\">(i)</span>&#123;</span></span><br><span class=\"line\">    var onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span>&#123;</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">i</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> onclick;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var clickBoxs = document.querySelectorAll(<span class=\"string\">'.clickBox'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> (var <span class=\"built_in\">i</span> = <span class=\"number\">0</span>; <span class=\"built_in\">i</span> &lt; clickBoxs.<span class=\"built_in\">length</span>; <span class=\"built_in\">i</span>++)&#123;</span><br><span class=\"line\">    clickBoxs[i].onclick = iteratorFactory(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>const</code>也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">PI</span> = Math.<span class=\"built_in\">PI</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">PI</span> = <span class=\"number\">23</span> //<span class=\"keyword\">Module</span> build failed: SyntaxError: /es6/app.js: <span class=\"string\">\"PI\"</span> is read-only</span><br></pre></td></tr></table></figure>\n<p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> monent = <span class=\"built_in\">require</span>(<span class=\"string\">'moment'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-class-extends-super\"><a href=\"#2-class-extends-super\" class=\"headerlink\" title=\"2. class, extends, super\"></a>2. <code>class</code>, <code>extends</code>, <code>super</code></h3><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p>\n<p>有了ES6我们不再烦恼！</p>\n<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> = <span class=\"symbol\">'anima</span>l'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        console.log(<span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> + ' says ' + say)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let animal = <span class=\"keyword\">new</span> <span class=\"type\">Animal</span>()</span><br><span class=\"line\">animal.says(<span class=\"symbol\">'hell</span>o') <span class=\"comment\">//animal says hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    constructor()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">type</span> = <span class=\"symbol\">'ca</span>t'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let cat = <span class=\"keyword\">new</span> <span class=\"type\">Cat</span>()</span><br><span class=\"line\">cat.says(<span class=\"symbol\">'hell</span>o') <span class=\"comment\">//cat says hello</span></span><br></pre></td></tr></table></figure>\n<p>上面代码首先用<code>class</code>定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。</p>\n<p><code>Class</code>之间可以通过<code>extends</code>关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p>\n<p><code>super</code>关键字，它指代父类的实例（即父类的this对象）。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p>\n<p><code>ES6</code>的继承机制，实质是先创造父类的实例对象<code>this</code>（所以必须先调用s<code>uper</code>方法），然后再用子类的构造函数修改<code>this</code>。</p>\n<p>P.S 如果你写react的话，就会发现以上三个东西在最新版<code>React</code>中出现得很多。创建的每个component都是一个继承<code>React.Component</code>的类。<a href=\"https://facebook.github.io/react/docs/reusable-components.html\">详见react文档</a></p>\n<h3 id=\"3-arrow-function\"><a href=\"#3-arrow-function\" class=\"headerlink\" title=\"3. arrow function\"></a>3. <code>arrow function</code></h3><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i)</span></span>&#123; <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>; &#125; <span class=\"comment\">//ES5</span></span><br><span class=\"line\">(i) =&gt; i + <span class=\"number\">1</span> <span class=\"comment\">//ES6</span></span><br></pre></td></tr></table></figure>\n<p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用<code>{}</code>把代码包起来：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(<span class=\"keyword\">x</span>, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">x</span>++<span class=\"comment\">;</span></span><br><span class=\"line\">    y--<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">x</span> + y<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"keyword\">x</span>, y) =&gt; &#123;<span class=\"keyword\">x</span>++<span class=\"comment\">; y--; return x+y&#125;</span></span><br></pre></td></tr></table></figure>\n<p>除了看上去更简洁以外，<code>arrow function</code>还有一项超级无敌的功能！<br>长期以来，<code>JavaScript</code>语言的<code>this</code>对象一直是一个令人头痛的问题，在对象方法中使用<code>this</code>，必须非常小心。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'animal'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"> animal.says(<span class=\"string\">'hi'</span>)  <span class=\"comment\">//undefined says hi</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的代码会报错，这是因为<code>setTimeout</code>中的<code>this</code>指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>\n<ol>\n<li>第一种是将this传给self,再用self来指代this</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(self.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">      &#125;, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>第二种方法是用bind(this),即</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">says(say)&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">    &#125;.bind(<span class=\"keyword\">this</span>), <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = <span class=\"string\">'animal'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    says(say)&#123;</span><br><span class=\"line\">        setTimeout( () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type + <span class=\"string\">' says '</span> + say)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal()</span><br><span class=\"line\"> animal.says(<span class=\"string\">'hi'</span>)  <span class=\"comment\">//animal says hi</span></span><br></pre></td></tr></table></figure>\n<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p>\n<h3 id=\"4-template-string\"><a href=\"#4-template-string\" class=\"headerlink\" title=\"4. template string\"></a>4. <code>template string</code></h3><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p>\n<p>大家可以先看下面一段代码：</p>\n<figure class=\"highlight smalltalk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$(</span><span class=\"comment\">\"#result\"</span>).append(</span><br><span class=\"line\">  <span class=\"comment\">\"There are &lt;b&gt;\"</span> + basket.count + <span class=\"comment\">\"&lt;/b&gt; \"</span> +</span><br><span class=\"line\">  <span class=\"comment\">\"items in your basket, \"</span> +</span><br><span class=\"line\">  <span class=\"comment\">\"&lt;em&gt;\"</span> + basket.onSale +</span><br><span class=\"line\">  <span class=\"comment\">\"&lt;/em&gt; are on sale!\"</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#result\"</span>).<span class=\"keyword\">append</span>(`</span><br><span class=\"line\">  There are &lt;b&gt;<span class=\"variable\">$&#123;basket</span>.<span class=\"keyword\">count</span>&#125;&lt;/b&gt; items</span><br><span class=\"line\">   <span class=\"keyword\">in</span> your basket, &lt;em&gt;<span class=\"variable\">$&#123;basket</span>.onSale&#125;&lt;/em&gt;</span><br><span class=\"line\">  are <span class=\"keyword\">on</span> sale!</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>用反引号（\\）来标识起始，用${}`来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p>\n<p>  <a href=\"https://github.com/reactjs/react-router/blob/latest/examples/passing-props-to-children/app.js\">React Router</a>从第1.0.3版开始也使用ES6语法了，比如这个例子：</p>\n<p><code>&lt;Link to={&#39;/taco/${taco.name}&#39;}&gt;{taco.name}&lt;/Link&gt;</code></p>\n<h3 id=\"5-destructuring\"><a href=\"#5-destructuring\" class=\"headerlink\" title=\"5. destructuring\"></a>5. <code>destructuring</code></h3><p>  ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">cat</span> = <span class=\"string\">'ken'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"keyword\">cat</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> dog&#125;</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(zoo)  //Object &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"string\">\"ken\"</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> <span class=\"string\">\"lili\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>用ES6完全可以像下面这么写：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">cat</span> = <span class=\"string\">'ken'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"string\">'lili'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> zoo = &#123;<span class=\"keyword\">cat</span>, dog&#125;</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(zoo)  //Object &#123;<span class=\"keyword\">ca</span><span class=\"variable\">t:</span> <span class=\"string\">\"ken\"</span>, <span class=\"keyword\">do</span><span class=\"variable\">g:</span> <span class=\"string\">\"lili\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>反过来可以这么写：</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dog = &#123;<span class=\"class\"><span class=\"keyword\">type</span>: '<span class=\"title\">animal</span>', <span class=\"title\">many</span>: 2&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">many</span>&#125; </span>= dog</span><br><span class=\"line\">console.log(<span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"title\">many</span>)   //<span class=\"title\">animal</span> 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-default-rest\"><a href=\"#6-default-rest\" class=\"headerlink\" title=\"6. default, rest\"></a>6. <code>default</code>, <code>rest</code></h3><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’ 来指定默认值。</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> animal(<span class=\"class\"><span class=\"keyword\">type</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">type</span> </span>= <span class=\"class\"><span class=\"keyword\">type</span> || '<span class=\"title\">cat</span>'  </span></span><br><span class=\"line\">    console.log(<span class=\"class\"><span class=\"keyword\">type</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animal()</span><br></pre></td></tr></table></figure>\n<p>如果用ES6我们而已直接这么写：</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animal</span><span class=\"params\">(<span class=\"keyword\">type</span> = <span class=\"string\">'cat'</span>)</span><span class=\"comment\">&#123;</span><br><span class=\"line\">    console.log(type)</span><br><span class=\"line\">&#125;</span></span><br><span class=\"line\"><span class=\"title\">animal</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>最后一个rest语法也很简单，直接看例子：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animals</span><span class=\"params\">(<span class=\"rest_arg\">...types</span>)</span></span>&#123;</span><br><span class=\"line\">    console.log(types)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">animals(<span class=\"string\">'cat'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'fish'</span>) <span class=\"comment\">//[\"cat\", \"dog\", \"fish\"]</span></span><br></pre></td></tr></table></figure>\n<p>而如果不用ES6的话，我们则得使用ES5的<code>arguments</code>。</p>\n<h3 id=\"7-import-export\"><a href=\"#7-import-export\" class=\"headerlink\" title=\"7. import export\"></a>7. <code>import export</code></h3><p>这两个家伙对应的就是<code>es6</code>自己的<code>module</code>功能。</p>\n<p>我们之前写的<code>Javascript</code>一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p>\n<p>这有可能导致两个问题：</p>\n<ol>\n<li>一方面js代码变得很臃肿，难以维护;</li>\n<li>另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;<br>在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</li>\n</ol>\n<p>如果想了解更多AMD，尤其是require.js，可以参看这个教程<br><a href=\"http://requirejs.org/docs/why.html\">why modules on the web are useful and the mechanisms that can be used on the web today to enable them</a></p>\n<p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</p>\n<blockquote>\n<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>\n</blockquote>\n<p>上面的设计思想看不懂也没关系，咱先学会怎么用，等以后用多了、熟练了再去研究它背后的设计思想也不迟！好，那我们就上代码…</p>\n<p> 传统的写法<br>首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p>\n<p>首先定义:</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\">define(<span class=\"string\">'content.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'A cat'</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后require:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'./content.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">animal</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(animal);   <span class=\"comment\">//A cat</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那CommonJS是怎么写的呢？</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> animal = require(<span class=\"string\">'./content.js'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\">module<span class=\"selector-class\">.exports</span> = <span class=\"string\">'A cat'</span></span><br></pre></td></tr></table></figure>\n<p> ES6的写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'A cat'</span></span><br></pre></td></tr></table></figure>\n<p>以上我把三者都列出来了，妈妈再也不用担心我写混淆了…</p>\n<h3 id=\"8-ES6-module的其他高级用法\"><a href=\"#8-ES6-module的其他高级用法\" class=\"headerlink\" title=\"8. ES6 module的其他高级用法\"></a>8. ES6 module的其他高级用法</h3><p>输出\\输入多个变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//content.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"string\">'A cat'</span>    </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello!'</span></span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> type = <span class=\"string\">'dog'</span></span><br></pre></td></tr></table></figure>\n<p>上面可以看出，export命令除了输出变量，还可以输出函数，甚至是类（react的模块基本都是输出类）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; say, type &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span>`</span>)  <span class=\"comment\">//The dog says Hello</span></span><br></pre></td></tr></table></figure>\n<p>这里输入的时候要注意：大括号里面的变量名，必须与被导入模块（content.js）对外接口的名称相同。</p>\n<p>如果还希望输入content.js中输出的默认值(default), 可以写在大括号外面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal, &#123; say, type &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-修改变量名\"><a href=\"#9-修改变量名\" class=\"headerlink\" title=\"9. 修改变量名\"></a>9. 修改变量名</h3><p>此时我们不喜欢type这个变量名，因为它有可能重名，所以我们需要修改一下它的变量名。在es6中可以用as实现一键换名。</p>\n<p>//index.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> animal, &#123; say, type <span class=\"keyword\">as</span> animalType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;animalType&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"10-模块的整体加载\"><a href=\"#10-模块的整体加载\" class=\"headerlink\" title=\"10. 模块的整体加载\"></a>10. 模块的整体加载</h3><p>除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> animal, * <span class=\"keyword\">as</span> content <span class=\"keyword\">from</span> <span class=\"string\">'./content'</span>  </span><br><span class=\"line\"><span class=\"keyword\">let</span> says = content.say()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The <span class=\"subst\">$&#123;content.type&#125;</span> says <span class=\"subst\">$&#123;says&#125;</span> to <span class=\"subst\">$&#123;animal&#125;</span>`</span>)  </span><br><span class=\"line\"><span class=\"comment\">//The dog says Hello to A cat</span></span><br></pre></td></tr></table></figure>\n<p>通常星号*结合as一起使用比较合适。</p>\n<ol>\n<li>终极秘籍</li>\n</ol>\n<p>考虑下面的场景：<br>上面的content.js一共输出了三个变量（default, say, type）,假如我们的实际项目当中只需要用到type这一个变量，其余两个我们暂时不需要。我们可以只输入一个变量：</p>\n<p><code>import { type } from &#39;./content&#39;</code></p>\n<p>由于其他两个变量没有被使用，我们希望代码打包的时候也忽略它们，抛弃它们，这样在大项目中可以显著减少文件的体积。</p>\n<p>ES6帮我们实现了！</p>\n<p>不过，目前无论是webpack还是browserify都还不支持这一功能…</p>\n<p>如果你现在就想实现这一功能的话，可以尝试使用rollup.js</p>\n<p>他们把这个功能叫做Tree-shaking，哈哈哈，意思就是打包前让整个文档树抖一抖，把那些并未被依赖或使用的东西统统抖落下去。。。</p>\n<p>看看他们官方的解释吧：</p>\n<blockquote>\n<p>Normally if you require a module, you import the whole thing. ES2015 lets you just import the bits you need, without mucking around with custom builds. It’s a revolution in how we use libraries in JavaScript, and it’s happening right now.</p>\n</blockquote>\n<p>希望更全面了解es6伙伴们可以去看阮一峰所著的电子书<a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6入门</a></p>"},{"author":"小莫","date":"2016-05-19T16:00:00.000Z","title":"javascript学习笔记","_content":"一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/javascript.png)](https://github.com/qq83387856)\n## 一、一些不同\n### 1. javscript没有块级作用域\n于是es6中有了let和var    \n模拟js的块级作用域    \n\n```\n  function outputNumbers(count){\n    (function(){\n      for(var i=0;i<count;i++){\n        console.log(i);\n      }\n      })();\n  }\n  console.log(i) //会报错\n```\n\n### 2. javascipt中this用法不同\n它指向调用它的那个对象\n### 3. 闭包是指有权访问另一个函数作用域中的变量的函数。\n\n```\n  function createAFunction(){\n    return function(){\n      return '这是一个闭包';\n    }\n  }\n```\n\n## 二、基本数据类型  \n`undefined`、`null`、`boolean`、`string`、`number` 、`object`、`function`  \n它们有对应的方法\n`Boolean()`、`String()`、`Number()` 、`Object()`  \n\n### 1. `undefined`   \n没有被定义就会返回`undefined`,是`null`衍生出来的,因些`undefined==null` 返回true\n\n### 2. `null`   \n由于历史原因 `typeof null`返回`object`\n\n### 3. `boolean`  \n`Boolean()`   \n非0返回true  \n0、null、undefined返回false\n\n### 4. `string`   \n`String()`        \n不管传入什么都会原样返回,但如果是`function`,会执行该方法并返回`undefined`    \n`toString(参数,进制)`   \n`toUpperCase()`  \n`toLowerCase()`   \n`substring(parm1,parm2)`     \n`substr()`   \n`charAt(1)`    \n`charCodeAt(2)`    \n`concat()`  \n`slice()`  \n`indexof()`  \n`lastIndexOf`  \n`trim()`  \n`search(pattern)`  //返回索引   \n`replcae('原','新')` //第一个参数支持正则    第二个参数也可以是一个function     \n`splice(',')`    //支持正则，支持指定长度    \n它只有length属性   \n\n### 5. `number`   \n`Number()`          true=>1 false=>0   null=>0 undefined=>NaN   \n`Number.MAX_VALUE`  最大值    \n`Number.MIN_VALUE`  最小值    \n`NaN`  它是一个特例，不与任何值相等包括自己    \n`parseInt()` //可以查找字符串中的数字并转换   \n`parseFloat()` //可以查找字符串中的数字并转换   \n`inFinite()` //是否在最大值和最小值之间   \n`toFixed(小数点位数)`\n说明：它能够识别科学计数法 比如 2.15e5 => 215000   \n\n### 6. `object`  \n`constructor`  构造函数   \n`obj.hasOwnProperty()` 是否具有自己的方法  \n`obj.isProtoTypeOf(object)`  检查传入的对象是否是另一个对象的原型   \n`ob.propertyIsEnumerable(propetyName)`  检查给定的属性能否使用for-in\n`obj.toLocaleString()` 返回执行地区对应的对象的字符串 =>['Object']  \n`obj.toString()`    返回执行对象的字符串 =>['Object']    \n`obj.valueOf()`   返回对象序列化之后的结果\n\n\n## 三、运算符\n### 1. 大于和小于  \n`'23'<'3' `  //true,字符串的比较跟数字的比较不同   \n`'a'<3`   //false a会被转成NaN   \n`特别注意`:NaN和任何数比都是false\n`NaN>3` //false   \n`NaN<3` //false  \n`'23'<3` //false  '23'会被转成23再与3比较\n\n### 2. 全等和不全等  \n`'55'==55` //true 不全等只判断值不判断类型  \n`'55'===55` //false  全等不仅判断值还判断类型  \n\n## 四、条件控制语句\n```\n  for(proertyName in global){\n    console.log(proertyName)\n  }\n```\n\n## 五、方法  \n注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。\n\n## 六、检测类型\n\n`typeof xxx`\n// 返回数据类型\n\n## 七、引用类型\n\n### 1. `object`  \n声明对象的方法  \n`var obj = new Object();`   \n`var obj = {};`\n\n赋值   \n`obj.name='xiaomo';`   \n\n使用对象的属性\n`obj.name`  \n`obj['name']`  \n\n### 2. `Array`   \n可以存任何类型    \n\n声明\n`var arr = new Array();`   \n`var arr = new Array(3);`   \n`var arr = [];`  \n\n添加对象   \n`arr.push('a',b',1,3,4,true)`   \n操作对象(删除、插入、替换)     \n\n`删除`：起始位置，要删除的个数       \n`arr.splice(起始位置,删除的个数)`     \n例子：`arr.splice(2,1)` //返回[1] 返回删除的那个数   \n\n`插入`：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组    \n`arr.splice(起始位置,删除的个数,参数1,参数2,参数n)`   \n例子:`arr.splice(1,0,'插入的值1','插入的值2','插入的值n')`  \n\n`替换`：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值  \n`arr.splice(起始位置,删除的个数,参数1,参数2,参数n)`  \n例子:`arr.splice(0,2,'test1','test2') `   \n\n\n其他数组操作\n`arr.push('test')` 插入到数组的最后面   \n`arr.unshift('xiaomo')` 插入到数组的最前面   \n`arr.pop()`   //删除数组的最后一个值   \n`arr.shift()` //删除数组第一个值\n\n使用对象   \n`arr[1]`   \n\n数组自带的方法\n`arr.reverse();`   反转数组\n`arr.sort()`   默认升序排列\n`arr.sort((a,b)=>{reutrn b-a})`  传入排序方法会按照自定义排序   \n`arr.concat(另一个数组或者单个参数)`  如果传入数组也会被展开拿出来,不会影响原数组   \n`arr.slice(0,3)`  会把选定的部分截取出来生成一个新的数组，不会影响原数组     \n`arr.indexOf(4)`   返回该值存在的下标,不存在返回-1   \n`arr.lastIndexOf(4)` 从倒数开始查找,返回该值存在的下标,不存在返回-1\n`arr.every(fn)`   对每个参数进行处理，全部符合返回true   \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.some(fn)`   对每个参数进行处理，有一个符合就返回true  \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.filter(fn)` 对每个参数进行处理，返回过滤后的数组   \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.map(fn)`    对每个参数进行处理，返回处理后的数组  \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item*2\n}\n```\n`arr.forEach(fn)`  对每个参数进行处理，没有返回值\n`arr.reduce(fn)`    对每个参数进行处理，迭代返回最终结果    \n```\nfn=(prev,cur,index,array){//前一个值、当前值、索引、数组\n  return prev+cur\n}\n```\n`arr.reduceRight(fn)`  从右边对每个参数进行处理，迭代返回最终结果   \n```\nfn=(prev,cur,index,array){//前一个值、当前值、索引、数组\n  return prev+cur\n}\n```\n\n### 3. Date类型    \n声明:   \n`var date = new Date();`  创建当前时间 也可以接收参数     \n`Date.parse(pattern)`    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳   \n`new Date(Date.parse(pattern))`   //   将时间戳格式化为正常的时间    \n`new Date(2016,5,19,20,49,15)`  //也可以用逗号 2016-05-19 20:49:15\n`Date.now()`  //当前时间的时间戳    \n`toDateString()` //返回时间的字符串 星期、日、月、年   \n`toTimeString()` //时、分、秒、时区  \n`toLocaleDateString()`   特定时区的星期、日、月、年\n`toLocaleTimeString()`   特定时区的时、分、秒、时间    \n\n时间格式   \n```\nvar date = new Date();\nvar time = date.getTime() //当前时间的时间戳\nvar fullYear = date.getFullYear(); //2016\nvar year = date.getYear();   //116  \nvar month = date.getMonth(); //04 从0开始\nvar d = date.getDate(); //日  19\nvar day = date.getDay();  //4 返回星期几\nvar min = date.getMinitues(); //0\nvar sec = date.getSeconds() //秒\nvar mill = date.getMilliSeconds() //毫秒\n```\n\n### 4. 正则 RegExp类型   \n\n```\nvar re = new RegExp('pattern');\nre.test(parm);\n\n// exec 返回匹配的结果\nvar test = 'abcdef.js';\nvar pattern = /\\.js$/\nvar matches = parrten.exec(test);\nconsole.log(matches); // '.js' ,index:6 input:'abcdef.js'\n\n//test 返回true/false\nvar text = 'abcdef.js';\nvar pattern = /\\.js$/\npattern.test(text); // true\n```\n\n### 5. 方法　function     \n方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法  \n每个方法都包含两个属性:`length`(参数个数)和`protoType`(原型链)   \n```\n  function test(a,b){\n    return a+b;\n  }\n  function test(a){\n    return a;\n  }\n  test(1)    //1\n  test(1,2)  //1\n```\n你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前    \n```\ntest();\nfunction test(){\n  console.log('这是一个方法');\n}\n```\n\n但如果是立即执行的函数则不行\n\n```\n(\n  function test(){\n\n  }()\n  )\n```\n\n方法有两个特殊的内部属性和两个非继承来的方法 `call()`、`apply()`,以及其他方法 `toString()、valueOf()`    \n`arguments`和`this`   \n`arguments`是类数组,保存着参数。它有`arguments.callee()`方法   \n```\n  function factorial(num){\n      if(num<=1){\n        return 1;\n      } else {\n        return num * arguments.callee(num-1);\n      }\n  }\n\n  factorial(5); // 5! 1*2*3*4*5\n\n```\n\n`this`在javascript中用法比较特殊,它指向它的调用者\n\n```\nvar color='green';\nfunction sayColor(){\n    console.log(this.color);\n  }\nvar o = {\n  color='pink';\n}\no.sayColor(); //pink\nsayColor(); //green\n```\n\n`protoType` 原型链    \n\n```\n  function sum (num1,num2){\n    return num1+num2;\n  }\n  // call 参数1:运行函数的作用域 参数2 agruments或者Array\n  function callSum1(num1,num2){\n    return sum.apply(this,arguments);\n  }\n  function callSum2(num1,num2){\n    return sum.apply(this,[num1,num2])\n  }\n  // apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开\n  function callSum2(num1,num2){\n    return sum.apply(this,num1,num2)\n  }\n```\n\n`encodeURIComponent()` //encode字符串          \n`decodeURICopmonent()` //decode字符串   \n`eval(express)` //解析字符串表达式   \n`eval(\"console.log('我是被解析的表达式')\")`   \n\n### 6. `Math`    \n`Math.E` //e   \n`Math.LN10` //10的自然对数  \n`Math.LOG10E` //以10为底e的对数   \n`Math.PI`  //PI  \n`Math.SQRT2` //2的平方根   \n`Math.SQRT1_2`  // 1/2的平方根   \n\n方法：\n`Math.min(Array)`    \n`Math.max(Array)`    \n`Math.ceil(parm)` //向上取整  \n`Math.floor(parm)` //向下取整   \n`Math.round(parm)` //标准的四舍五入   \n`Math.random()`  // 0-1之间的数   \n`Math.abs(parm)` //绝对值\n\n## 八、面向对象的编程方法     \n\n```\n  var person = {\n    name:'xiaomo',\n    age:25，\n    sayHello:function(){\n      console.log(this.name);\n    }\n  }\n```\n\n工厂模式\n\n```\n  function createPerson(name,age,job){\n      var o = new Object();\n      o.name = name;\n      o.age= age;\n      o.job =job;\n      o.sayName=function(){\n        console.log(this.name);\n      }\n      return o;\n  }\n  var person1 = createPerson('xiaomo',25,'programer');\n  var person2 = createPerson('xiaoming',20,'it');\n```\n\n构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)\n\n```\n  function Person(name,age,job){\n    this.name = name;\n    this.age = age,\n    this.job = job;\n    this.sayName = function(){\n      console.log(this.name);\n    }\n  }\n\nvar person1 = new Person('xiaomo',25,'programer');\nvar person2 = new Person('xiaoming',20,'it');\n```\n\n判断类型 `instanceof`  \n\n```\n  person1 instanceof Object //true\n  person1 instanceof Person //true\n```\n\n原型模式    \n\n```\n  function Person(){}\n  //实际上隐式的创建一个构造函数constructor\n  Person.prototype.name='xiaomo';\n  Person.prototype.age=25;\n  Person.prototype.job='programmer';\n  Person.prototype.sayName=function(){\n    console.log(this.name);\n  }\n\n  //当前也可以这样\n  Person.prototype={\n    name='xiaomo';\n    age=25;\n    job='programmer';\n    sayName=function(){\n      console.log(this.name);\n    }\n  }\n\n  var person1 = new Person();\n  Person.prototype.isPrototypeOf(person1); //true\n  Object.getPrototypeOf(person1.name); //xiaomo\n  person1.hasOwnProperty('name') //false 存在于protoType中，不存在于实例中\n  'name' in person1 //true  虽然实例中没有,但是它的原型链有,所以返回true\n  Object.keys(person1) //会枚举出实例中所有的属性\n```\n\n## 九、定时器和延迟执行\n\n```\n//延迟一秒执行fn函数，只执行一次\n  let timeout = 1000;\n  var fn = function(){\n    console.log('hello');\n  }\n  var timeoutId = setTimeout(fn,timeout)\n  //清除间歇执行函数\n  clearTimeout(timeoutId);\n\n\n  //定时器，每秒执行fn函数，直到清除定时器\n  var timeout = 1000;\n  var fn = function(){\n    console.log('定时器')\n  }\n  var intervalId = setInterval(fn,timout)\n  //清除定时器\n  clearInterval(itervalId);\n```\n\n## 十、BOM(浏览器相关)   \n\n### 1. 系统对话框\n\n```\n  alert(); //弹出框\n\n  confirm();//确认框\n  if(confirm('are you sure?')){\n    console.log('sure');\n  } else{\n    console.log('I am not sure!');\n  }\n\n  prompt();//交互框\n  var result = promot(\"what's up?\"，'默认值');\n  if(result!=null){\n    alert(result);\n  }\n\n```\n\n### 2. location对象  \n\n参数\n\n```\nlocation.hash //#contents url的hash值\nlocation.host // ip\nlocation.hostname //域名\nlocation.href //http域名\nlocation.pathname //url的目录\nlocation.port //8080\nlocation.protocool //协议\nlocation.search //?q=search\nlocation.reload() //可能从缓存加载\nlocation.reload(true) //重新加载\n```\n\n### 3. navigator对象\n 检测浏览器属性    \n\n```\nnavigator.appCodeName //浏览器的名字\nnavigator.appName //完整的浏览器名称\nnavigator.appVersion //浏览器的版本\nnavigator.cookieEnabled //cookie是否启用\nnavigator.javaEnabled() //java是否启用\nnavigator.language //主语言 zh-CH\nnavigator.languages //支持的语言\nnavigator.onLine //浏览器是否连接到了internet\nnavigator.platofrm //浏览器的平台 \"Win32\"\nnavigator.plugins //返回浏览器安装的插件的数组\nfunction hasPlugin(name){\n  name  = name.toLowerCase();\n  for(var i = 0 ; i<navigator.plugins.length;i++){\n    // >-1表示找到了\n    var isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)>-1;\n    if(isTrue){\n      return true;\n    }\n  }\n  return false ;\n}\n```\n\n### 4. history对象   \n\n```\n  history.go(-1);//后退一页\n  history.back();\n\n  history.go(1);//前进一页\n  history.forward();\n\n  history.go('xiaomo.info')//跳转到最近访问过的该页面\n  history.length==0 //表示这是用户打开浏览器的第一个页面\n```\n\n## 十一、表单\n\n### 1. 表单属性\n\n```\n  acceptCharset 服务器能够处理的字符集\n  action 接受请求的url\n  elements 表单所有控件的集合\n  enctype 请求的编码类型\n  length 表单中控件的数量\n  method get/post\n  name 表单的名字\n  reset() 重置\n  submit() 提交\n  target\n```\n\n`document.forms` 可以取到表单的所有控件    \n\n\n### 2. 控件\n\n```\n  disabled 当前字段是否禁用\n  form 指向当前字段所属表单的指针:只读\n  name 当前字段的名字\n  readOnly 当前字段只读\n  tabIndex tab切换的序号\n  type 当前字段的类型\n  value 当前字段提交给服务器的值\n```\n\n修改控件的值\n\n```\n  var input = document.getElementById('name');\n  name.value='xiaomo'\n  name.focus(); //把焦点设置到当前字段\n  //在控件中加入 autofocus=\"focus\" 是一样的效果\n```\n\n选择文本   \n`element.select()`     \n\n取得选中的文本\n```\n    function alertText(username){\n      var username = document.getElementById('username');\n      alert(getSelectText(username));\n      }\n    function getSelectText(textbox){\n      return textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);\n    }\n\n    // html\n  <input type=\"input\" id=\"username\" value=\"我是测试文本，看一下能不能被选中\">\n  <input type=\"button\" value=\"确定\" onclick=\"alertText()\">\n```\n\n### 3. 剪贴板事件\n\n```\n  beforecopy\n  copy\n  cut\n  beforepaste\n  paste\n\n  //写一个公用方\n  var EventUtil = {\n\n    getClipboardText:function(event){\n      var clipboardData  = (event.clipboardData || window.clipboardData);\n      return clipboardData.getData('text');\n    }\n\n    setClipboardText:function(event,value){\n      if(event.clipboardData){\n        return event.clipboardData.setData(\"text/plain\",value);\n      } else if (window.clipboardData){\n        return window.clipboardData.setData(\"txt\",value);\n      }\n    }\n\n  }\n\n  EventUtil.addHander(txtbox,\"paste\",function(event)){\n    event  = EventUtil.getEvent(event);\n    var text = EventUtil.getClipboardText(event);\n    if(!/^\\d*$/.test(text)){\n      EventUtil.preventDefault(event);\n    }\n  }\n\n```\n\n[EventUtil](http://www.cnblogs.com/hykun/p/EventUtil.html)\n\n自动切换焦点\n\n```\n  (function(){\n    function tabForward(event){\n      event = EventUtil.getEvent(event);\n      var target = EventUtil.getTarget(event);\n      if(target.value.length = target.maxLength){\n        var form = target.form;\n        for( var i =0; len = form.elements.length;i<len;i++){\n          if(form.elements[i]==target){\n            if(form.elements[i+1]){\n              form.elements[i+1].focus();\n            }\n            return;\n          }\n        }\n      }\n    }\n    var text1 = document.getElementById('text1');\n    var text2 = document.getElementById('text2');\n    var text3 = document.getElementById('text3');\n    EventUtil.addHander(text1,'keyup',tabForward);\n    EventUtil.addHander(text2,'keyup',tabForward\n    EventUtil.addHander(text3,'keyup',tabForward\n    })()\n```\n\n\n### 4. 下拉框 select   \n\n```\n  add(newOption,relOption) 插入一个option\n  //最佳做法(在列表最后插入一个option)\n  var newOption = new Option(\"text\",\"value\");\n  selectBox.add(newOption,undefined);\n\n  multiple 是否允许多选\n  options 控件中所有options的HTMLCollection\n  remove(index) 移除指定位置的选项\n  //移除指定的选项(这里移除的是第一项)\n  var index = 0\n  selectBox.remove(selectBox.options[index])\n  selectedIndex 基于0的选中项的索引,没有选中项-1\n  size 选择框中可见的行数\n  text 选中项的文本内容\n  value 选项的值\n  //移动一个选项到特定位置(将第2个选项移动到最后一个选项)\n  var optionToMove = selectBox.options[1];\n  selectBox.insertBefore(optionToMove,selectBox.options[optionToMove.index-1])\n  /添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)\n  selectBox.appendChind(selectBox.options[0]);\n```\n\n### 5. 表单序列化    \n\n原则：   \n对表单字段的名字和值进行url编码,使用&分割    \n不发送禁用的表单字段    \n只发送勾选的单选按钮和复选框   \n不发送type为reset和button的按钮   \n多选框中的每选中的值单独一个条目    \nsubmit的时候,本按钮也会被提交   \nselect发送的时候如果有value就发value的值 没有就发text内容  \n\n`form.serialize()`  \n\n### 6. 富文本编辑器  \n只要加上`contenteditable`就可以让div可以编辑   \n`<div id=\"richedit\" contenteditable></div>`\n也可以用js控制\n\n```\n  var richedit = document.getElementById('richedit');\n  richedit.contenteditable=\"true\";\n  // true false inherit\n  document.exexCommand(命令,false,值);\n  //document.exexCommand('bold',false,null);\n```\n\n\n## 十二、canvas   \n\n```\n  //定义一个canvas   \n  <canvas id=\"drawing\" width=\"200\" height=\"200\">\n      您的浏览器不支持canvas\n  </canvas>\n  //获取canvas\n  document.getElementById('drawing');\n  if(drawing.getContext){\n    var context = drawing.getContext('2d');\n    context.fillReact(30,30,30,30); //画了一个正方形\n    context.fillStyle='#fff'; //填充\n    context.strokeStyle='red'; //描边\n    // todo\n  }\n```\n\n\n## 十三、html5脚本编程  \n\n```\n  //跨文档消息传送\n  EventUtil.addHander(window,\"message\",function(event){\n      if(event.origin=\"http://www.wrox.com\"){//发送消息的文档所在的域\n        //接受参数\n        processMessage(event.data);\n        //可选:向窗口来源发送回执\n        event.source.postMessage(\"Receiived\",\"http://xiaomo.info\")\n      }\n\n\n    })\n```\n\n\n## 十四、本地存储\n\n### 1. cookie  \n\n```\nvar CookieUtil = {\n//根据key读取cookie\n    get: function (name){\n         //注意对键编码\n        var cookieName = encodeURIComponent(name) + \"=\",\n            cookieStart = document.cookie.indexOf(cookieName),\n            cookieValue = null,\n            cookieEnd;\n        //找到cookie键\n        if (cookieStart > -1){\n             //键后面第一个分号位置\n            cookieEnd = document.cookie.indexOf(\";\", cookieStart);\n            if (cookieEnd == -1){\n                cookieEnd = document.cookie.length;\n            }\n            //cookie值解码\n            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));\n        }\n        return cookieValue;\n    },\n    //设置cookie\n    set: function (name, value, expires, path, domain, secure) {\n        var cookieText = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n        //失效时间，GMT时间格式\n        if (expires instanceof Date) {\n            cookieText += \"; expires=\" + expires.toGMTString();\n        }\n        if (path) {\n            cookieText += \"; path=\" + path;\n        }\n        if (domain) {\n            cookieText += \"; domain=\" + domain;\n        }\n        if (secure) {\n            cookieText += \"; secure\";\n        }\n        document.cookie = cookieText;\n    },\n    //删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可\n    unset: function (name, path, domain, secure){\n        this.set(name, \"\", new Date(0), path, domain, secure);\n    }\n};\n```\n\n使用util方法   \n\n```\n  CookieUtil.set('name','xiaomo');\n  CookieUtil.set('age',26);\n\n  console.log(CookieUtil.get('name'));\n  console.log(CookieUtil.get('age'));\n\n  CookieUtil.unset('name');\n  CookieUtil.unset('age');\n```\n\n\n\n### 2. localStorage  \n\n```\nWindow.localStorage.setItem(key,value);//存储数据\nWindow.localStorage.getItem(key);//读取数据\nWindow.localStorage.removeItem(key);//删除数据项\nWindow.localStorage.clear();//删除所有数据\n```\n","source":"_posts/2016-05-19.javasciprt_syntax.md","raw":"---\nauthor: 小莫\ndate: 2016-05-20\ntitle: javascript学习笔记\ntags:\n- javascript\n- es5\ncategory: javascript\npermalink: javascript_syntax\n---\n一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/javascript.png)](https://github.com/qq83387856)\n## 一、一些不同\n### 1. javscript没有块级作用域\n于是es6中有了let和var    \n模拟js的块级作用域    \n\n```\n  function outputNumbers(count){\n    (function(){\n      for(var i=0;i<count;i++){\n        console.log(i);\n      }\n      })();\n  }\n  console.log(i) //会报错\n```\n\n### 2. javascipt中this用法不同\n它指向调用它的那个对象\n### 3. 闭包是指有权访问另一个函数作用域中的变量的函数。\n\n```\n  function createAFunction(){\n    return function(){\n      return '这是一个闭包';\n    }\n  }\n```\n\n## 二、基本数据类型  \n`undefined`、`null`、`boolean`、`string`、`number` 、`object`、`function`  \n它们有对应的方法\n`Boolean()`、`String()`、`Number()` 、`Object()`  \n\n### 1. `undefined`   \n没有被定义就会返回`undefined`,是`null`衍生出来的,因些`undefined==null` 返回true\n\n### 2. `null`   \n由于历史原因 `typeof null`返回`object`\n\n### 3. `boolean`  \n`Boolean()`   \n非0返回true  \n0、null、undefined返回false\n\n### 4. `string`   \n`String()`        \n不管传入什么都会原样返回,但如果是`function`,会执行该方法并返回`undefined`    \n`toString(参数,进制)`   \n`toUpperCase()`  \n`toLowerCase()`   \n`substring(parm1,parm2)`     \n`substr()`   \n`charAt(1)`    \n`charCodeAt(2)`    \n`concat()`  \n`slice()`  \n`indexof()`  \n`lastIndexOf`  \n`trim()`  \n`search(pattern)`  //返回索引   \n`replcae('原','新')` //第一个参数支持正则    第二个参数也可以是一个function     \n`splice(',')`    //支持正则，支持指定长度    \n它只有length属性   \n\n### 5. `number`   \n`Number()`          true=>1 false=>0   null=>0 undefined=>NaN   \n`Number.MAX_VALUE`  最大值    \n`Number.MIN_VALUE`  最小值    \n`NaN`  它是一个特例，不与任何值相等包括自己    \n`parseInt()` //可以查找字符串中的数字并转换   \n`parseFloat()` //可以查找字符串中的数字并转换   \n`inFinite()` //是否在最大值和最小值之间   \n`toFixed(小数点位数)`\n说明：它能够识别科学计数法 比如 2.15e5 => 215000   \n\n### 6. `object`  \n`constructor`  构造函数   \n`obj.hasOwnProperty()` 是否具有自己的方法  \n`obj.isProtoTypeOf(object)`  检查传入的对象是否是另一个对象的原型   \n`ob.propertyIsEnumerable(propetyName)`  检查给定的属性能否使用for-in\n`obj.toLocaleString()` 返回执行地区对应的对象的字符串 =>['Object']  \n`obj.toString()`    返回执行对象的字符串 =>['Object']    \n`obj.valueOf()`   返回对象序列化之后的结果\n\n\n## 三、运算符\n### 1. 大于和小于  \n`'23'<'3' `  //true,字符串的比较跟数字的比较不同   \n`'a'<3`   //false a会被转成NaN   \n`特别注意`:NaN和任何数比都是false\n`NaN>3` //false   \n`NaN<3` //false  \n`'23'<3` //false  '23'会被转成23再与3比较\n\n### 2. 全等和不全等  \n`'55'==55` //true 不全等只判断值不判断类型  \n`'55'===55` //false  全等不仅判断值还判断类型  \n\n## 四、条件控制语句\n```\n  for(proertyName in global){\n    console.log(proertyName)\n  }\n```\n\n## 五、方法  \n注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。\n\n## 六、检测类型\n\n`typeof xxx`\n// 返回数据类型\n\n## 七、引用类型\n\n### 1. `object`  \n声明对象的方法  \n`var obj = new Object();`   \n`var obj = {};`\n\n赋值   \n`obj.name='xiaomo';`   \n\n使用对象的属性\n`obj.name`  \n`obj['name']`  \n\n### 2. `Array`   \n可以存任何类型    \n\n声明\n`var arr = new Array();`   \n`var arr = new Array(3);`   \n`var arr = [];`  \n\n添加对象   \n`arr.push('a',b',1,3,4,true)`   \n操作对象(删除、插入、替换)     \n\n`删除`：起始位置，要删除的个数       \n`arr.splice(起始位置,删除的个数)`     \n例子：`arr.splice(2,1)` //返回[1] 返回删除的那个数   \n\n`插入`：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组    \n`arr.splice(起始位置,删除的个数,参数1,参数2,参数n)`   \n例子:`arr.splice(1,0,'插入的值1','插入的值2','插入的值n')`  \n\n`替换`：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值  \n`arr.splice(起始位置,删除的个数,参数1,参数2,参数n)`  \n例子:`arr.splice(0,2,'test1','test2') `   \n\n\n其他数组操作\n`arr.push('test')` 插入到数组的最后面   \n`arr.unshift('xiaomo')` 插入到数组的最前面   \n`arr.pop()`   //删除数组的最后一个值   \n`arr.shift()` //删除数组第一个值\n\n使用对象   \n`arr[1]`   \n\n数组自带的方法\n`arr.reverse();`   反转数组\n`arr.sort()`   默认升序排列\n`arr.sort((a,b)=>{reutrn b-a})`  传入排序方法会按照自定义排序   \n`arr.concat(另一个数组或者单个参数)`  如果传入数组也会被展开拿出来,不会影响原数组   \n`arr.slice(0,3)`  会把选定的部分截取出来生成一个新的数组，不会影响原数组     \n`arr.indexOf(4)`   返回该值存在的下标,不存在返回-1   \n`arr.lastIndexOf(4)` 从倒数开始查找,返回该值存在的下标,不存在返回-1\n`arr.every(fn)`   对每个参数进行处理，全部符合返回true   \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.some(fn)`   对每个参数进行处理，有一个符合就返回true  \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.filter(fn)` 对每个参数进行处理，返回过滤后的数组   \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item>2\n}\n```\n`arr.map(fn)`    对每个参数进行处理，返回处理后的数组  \n```\nfn=(item,index,array){//当前值、索引、该数组\n  return item*2\n}\n```\n`arr.forEach(fn)`  对每个参数进行处理，没有返回值\n`arr.reduce(fn)`    对每个参数进行处理，迭代返回最终结果    \n```\nfn=(prev,cur,index,array){//前一个值、当前值、索引、数组\n  return prev+cur\n}\n```\n`arr.reduceRight(fn)`  从右边对每个参数进行处理，迭代返回最终结果   \n```\nfn=(prev,cur,index,array){//前一个值、当前值、索引、数组\n  return prev+cur\n}\n```\n\n### 3. Date类型    \n声明:   \n`var date = new Date();`  创建当前时间 也可以接收参数     \n`Date.parse(pattern)`    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳   \n`new Date(Date.parse(pattern))`   //   将时间戳格式化为正常的时间    \n`new Date(2016,5,19,20,49,15)`  //也可以用逗号 2016-05-19 20:49:15\n`Date.now()`  //当前时间的时间戳    \n`toDateString()` //返回时间的字符串 星期、日、月、年   \n`toTimeString()` //时、分、秒、时区  \n`toLocaleDateString()`   特定时区的星期、日、月、年\n`toLocaleTimeString()`   特定时区的时、分、秒、时间    \n\n时间格式   \n```\nvar date = new Date();\nvar time = date.getTime() //当前时间的时间戳\nvar fullYear = date.getFullYear(); //2016\nvar year = date.getYear();   //116  \nvar month = date.getMonth(); //04 从0开始\nvar d = date.getDate(); //日  19\nvar day = date.getDay();  //4 返回星期几\nvar min = date.getMinitues(); //0\nvar sec = date.getSeconds() //秒\nvar mill = date.getMilliSeconds() //毫秒\n```\n\n### 4. 正则 RegExp类型   \n\n```\nvar re = new RegExp('pattern');\nre.test(parm);\n\n// exec 返回匹配的结果\nvar test = 'abcdef.js';\nvar pattern = /\\.js$/\nvar matches = parrten.exec(test);\nconsole.log(matches); // '.js' ,index:6 input:'abcdef.js'\n\n//test 返回true/false\nvar text = 'abcdef.js';\nvar pattern = /\\.js$/\npattern.test(text); // true\n```\n\n### 5. 方法　function     \n方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法  \n每个方法都包含两个属性:`length`(参数个数)和`protoType`(原型链)   \n```\n  function test(a,b){\n    return a+b;\n  }\n  function test(a){\n    return a;\n  }\n  test(1)    //1\n  test(1,2)  //1\n```\n你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前    \n```\ntest();\nfunction test(){\n  console.log('这是一个方法');\n}\n```\n\n但如果是立即执行的函数则不行\n\n```\n(\n  function test(){\n\n  }()\n  )\n```\n\n方法有两个特殊的内部属性和两个非继承来的方法 `call()`、`apply()`,以及其他方法 `toString()、valueOf()`    \n`arguments`和`this`   \n`arguments`是类数组,保存着参数。它有`arguments.callee()`方法   \n```\n  function factorial(num){\n      if(num<=1){\n        return 1;\n      } else {\n        return num * arguments.callee(num-1);\n      }\n  }\n\n  factorial(5); // 5! 1*2*3*4*5\n\n```\n\n`this`在javascript中用法比较特殊,它指向它的调用者\n\n```\nvar color='green';\nfunction sayColor(){\n    console.log(this.color);\n  }\nvar o = {\n  color='pink';\n}\no.sayColor(); //pink\nsayColor(); //green\n```\n\n`protoType` 原型链    \n\n```\n  function sum (num1,num2){\n    return num1+num2;\n  }\n  // call 参数1:运行函数的作用域 参数2 agruments或者Array\n  function callSum1(num1,num2){\n    return sum.apply(this,arguments);\n  }\n  function callSum2(num1,num2){\n    return sum.apply(this,[num1,num2])\n  }\n  // apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开\n  function callSum2(num1,num2){\n    return sum.apply(this,num1,num2)\n  }\n```\n\n`encodeURIComponent()` //encode字符串          \n`decodeURICopmonent()` //decode字符串   \n`eval(express)` //解析字符串表达式   \n`eval(\"console.log('我是被解析的表达式')\")`   \n\n### 6. `Math`    \n`Math.E` //e   \n`Math.LN10` //10的自然对数  \n`Math.LOG10E` //以10为底e的对数   \n`Math.PI`  //PI  \n`Math.SQRT2` //2的平方根   \n`Math.SQRT1_2`  // 1/2的平方根   \n\n方法：\n`Math.min(Array)`    \n`Math.max(Array)`    \n`Math.ceil(parm)` //向上取整  \n`Math.floor(parm)` //向下取整   \n`Math.round(parm)` //标准的四舍五入   \n`Math.random()`  // 0-1之间的数   \n`Math.abs(parm)` //绝对值\n\n## 八、面向对象的编程方法     \n\n```\n  var person = {\n    name:'xiaomo',\n    age:25，\n    sayHello:function(){\n      console.log(this.name);\n    }\n  }\n```\n\n工厂模式\n\n```\n  function createPerson(name,age,job){\n      var o = new Object();\n      o.name = name;\n      o.age= age;\n      o.job =job;\n      o.sayName=function(){\n        console.log(this.name);\n      }\n      return o;\n  }\n  var person1 = createPerson('xiaomo',25,'programer');\n  var person2 = createPerson('xiaoming',20,'it');\n```\n\n构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)\n\n```\n  function Person(name,age,job){\n    this.name = name;\n    this.age = age,\n    this.job = job;\n    this.sayName = function(){\n      console.log(this.name);\n    }\n  }\n\nvar person1 = new Person('xiaomo',25,'programer');\nvar person2 = new Person('xiaoming',20,'it');\n```\n\n判断类型 `instanceof`  \n\n```\n  person1 instanceof Object //true\n  person1 instanceof Person //true\n```\n\n原型模式    \n\n```\n  function Person(){}\n  //实际上隐式的创建一个构造函数constructor\n  Person.prototype.name='xiaomo';\n  Person.prototype.age=25;\n  Person.prototype.job='programmer';\n  Person.prototype.sayName=function(){\n    console.log(this.name);\n  }\n\n  //当前也可以这样\n  Person.prototype={\n    name='xiaomo';\n    age=25;\n    job='programmer';\n    sayName=function(){\n      console.log(this.name);\n    }\n  }\n\n  var person1 = new Person();\n  Person.prototype.isPrototypeOf(person1); //true\n  Object.getPrototypeOf(person1.name); //xiaomo\n  person1.hasOwnProperty('name') //false 存在于protoType中，不存在于实例中\n  'name' in person1 //true  虽然实例中没有,但是它的原型链有,所以返回true\n  Object.keys(person1) //会枚举出实例中所有的属性\n```\n\n## 九、定时器和延迟执行\n\n```\n//延迟一秒执行fn函数，只执行一次\n  let timeout = 1000;\n  var fn = function(){\n    console.log('hello');\n  }\n  var timeoutId = setTimeout(fn,timeout)\n  //清除间歇执行函数\n  clearTimeout(timeoutId);\n\n\n  //定时器，每秒执行fn函数，直到清除定时器\n  var timeout = 1000;\n  var fn = function(){\n    console.log('定时器')\n  }\n  var intervalId = setInterval(fn,timout)\n  //清除定时器\n  clearInterval(itervalId);\n```\n\n## 十、BOM(浏览器相关)   \n\n### 1. 系统对话框\n\n```\n  alert(); //弹出框\n\n  confirm();//确认框\n  if(confirm('are you sure?')){\n    console.log('sure');\n  } else{\n    console.log('I am not sure!');\n  }\n\n  prompt();//交互框\n  var result = promot(\"what's up?\"，'默认值');\n  if(result!=null){\n    alert(result);\n  }\n\n```\n\n### 2. location对象  \n\n参数\n\n```\nlocation.hash //#contents url的hash值\nlocation.host // ip\nlocation.hostname //域名\nlocation.href //http域名\nlocation.pathname //url的目录\nlocation.port //8080\nlocation.protocool //协议\nlocation.search //?q=search\nlocation.reload() //可能从缓存加载\nlocation.reload(true) //重新加载\n```\n\n### 3. navigator对象\n 检测浏览器属性    \n\n```\nnavigator.appCodeName //浏览器的名字\nnavigator.appName //完整的浏览器名称\nnavigator.appVersion //浏览器的版本\nnavigator.cookieEnabled //cookie是否启用\nnavigator.javaEnabled() //java是否启用\nnavigator.language //主语言 zh-CH\nnavigator.languages //支持的语言\nnavigator.onLine //浏览器是否连接到了internet\nnavigator.platofrm //浏览器的平台 \"Win32\"\nnavigator.plugins //返回浏览器安装的插件的数组\nfunction hasPlugin(name){\n  name  = name.toLowerCase();\n  for(var i = 0 ; i<navigator.plugins.length;i++){\n    // >-1表示找到了\n    var isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)>-1;\n    if(isTrue){\n      return true;\n    }\n  }\n  return false ;\n}\n```\n\n### 4. history对象   \n\n```\n  history.go(-1);//后退一页\n  history.back();\n\n  history.go(1);//前进一页\n  history.forward();\n\n  history.go('xiaomo.info')//跳转到最近访问过的该页面\n  history.length==0 //表示这是用户打开浏览器的第一个页面\n```\n\n## 十一、表单\n\n### 1. 表单属性\n\n```\n  acceptCharset 服务器能够处理的字符集\n  action 接受请求的url\n  elements 表单所有控件的集合\n  enctype 请求的编码类型\n  length 表单中控件的数量\n  method get/post\n  name 表单的名字\n  reset() 重置\n  submit() 提交\n  target\n```\n\n`document.forms` 可以取到表单的所有控件    \n\n\n### 2. 控件\n\n```\n  disabled 当前字段是否禁用\n  form 指向当前字段所属表单的指针:只读\n  name 当前字段的名字\n  readOnly 当前字段只读\n  tabIndex tab切换的序号\n  type 当前字段的类型\n  value 当前字段提交给服务器的值\n```\n\n修改控件的值\n\n```\n  var input = document.getElementById('name');\n  name.value='xiaomo'\n  name.focus(); //把焦点设置到当前字段\n  //在控件中加入 autofocus=\"focus\" 是一样的效果\n```\n\n选择文本   \n`element.select()`     \n\n取得选中的文本\n```\n    function alertText(username){\n      var username = document.getElementById('username');\n      alert(getSelectText(username));\n      }\n    function getSelectText(textbox){\n      return textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);\n    }\n\n    // html\n  <input type=\"input\" id=\"username\" value=\"我是测试文本，看一下能不能被选中\">\n  <input type=\"button\" value=\"确定\" onclick=\"alertText()\">\n```\n\n### 3. 剪贴板事件\n\n```\n  beforecopy\n  copy\n  cut\n  beforepaste\n  paste\n\n  //写一个公用方\n  var EventUtil = {\n\n    getClipboardText:function(event){\n      var clipboardData  = (event.clipboardData || window.clipboardData);\n      return clipboardData.getData('text');\n    }\n\n    setClipboardText:function(event,value){\n      if(event.clipboardData){\n        return event.clipboardData.setData(\"text/plain\",value);\n      } else if (window.clipboardData){\n        return window.clipboardData.setData(\"txt\",value);\n      }\n    }\n\n  }\n\n  EventUtil.addHander(txtbox,\"paste\",function(event)){\n    event  = EventUtil.getEvent(event);\n    var text = EventUtil.getClipboardText(event);\n    if(!/^\\d*$/.test(text)){\n      EventUtil.preventDefault(event);\n    }\n  }\n\n```\n\n[EventUtil](http://www.cnblogs.com/hykun/p/EventUtil.html)\n\n自动切换焦点\n\n```\n  (function(){\n    function tabForward(event){\n      event = EventUtil.getEvent(event);\n      var target = EventUtil.getTarget(event);\n      if(target.value.length = target.maxLength){\n        var form = target.form;\n        for( var i =0; len = form.elements.length;i<len;i++){\n          if(form.elements[i]==target){\n            if(form.elements[i+1]){\n              form.elements[i+1].focus();\n            }\n            return;\n          }\n        }\n      }\n    }\n    var text1 = document.getElementById('text1');\n    var text2 = document.getElementById('text2');\n    var text3 = document.getElementById('text3');\n    EventUtil.addHander(text1,'keyup',tabForward);\n    EventUtil.addHander(text2,'keyup',tabForward\n    EventUtil.addHander(text3,'keyup',tabForward\n    })()\n```\n\n\n### 4. 下拉框 select   \n\n```\n  add(newOption,relOption) 插入一个option\n  //最佳做法(在列表最后插入一个option)\n  var newOption = new Option(\"text\",\"value\");\n  selectBox.add(newOption,undefined);\n\n  multiple 是否允许多选\n  options 控件中所有options的HTMLCollection\n  remove(index) 移除指定位置的选项\n  //移除指定的选项(这里移除的是第一项)\n  var index = 0\n  selectBox.remove(selectBox.options[index])\n  selectedIndex 基于0的选中项的索引,没有选中项-1\n  size 选择框中可见的行数\n  text 选中项的文本内容\n  value 选项的值\n  //移动一个选项到特定位置(将第2个选项移动到最后一个选项)\n  var optionToMove = selectBox.options[1];\n  selectBox.insertBefore(optionToMove,selectBox.options[optionToMove.index-1])\n  /添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)\n  selectBox.appendChind(selectBox.options[0]);\n```\n\n### 5. 表单序列化    \n\n原则：   \n对表单字段的名字和值进行url编码,使用&分割    \n不发送禁用的表单字段    \n只发送勾选的单选按钮和复选框   \n不发送type为reset和button的按钮   \n多选框中的每选中的值单独一个条目    \nsubmit的时候,本按钮也会被提交   \nselect发送的时候如果有value就发value的值 没有就发text内容  \n\n`form.serialize()`  \n\n### 6. 富文本编辑器  \n只要加上`contenteditable`就可以让div可以编辑   \n`<div id=\"richedit\" contenteditable></div>`\n也可以用js控制\n\n```\n  var richedit = document.getElementById('richedit');\n  richedit.contenteditable=\"true\";\n  // true false inherit\n  document.exexCommand(命令,false,值);\n  //document.exexCommand('bold',false,null);\n```\n\n\n## 十二、canvas   \n\n```\n  //定义一个canvas   \n  <canvas id=\"drawing\" width=\"200\" height=\"200\">\n      您的浏览器不支持canvas\n  </canvas>\n  //获取canvas\n  document.getElementById('drawing');\n  if(drawing.getContext){\n    var context = drawing.getContext('2d');\n    context.fillReact(30,30,30,30); //画了一个正方形\n    context.fillStyle='#fff'; //填充\n    context.strokeStyle='red'; //描边\n    // todo\n  }\n```\n\n\n## 十三、html5脚本编程  \n\n```\n  //跨文档消息传送\n  EventUtil.addHander(window,\"message\",function(event){\n      if(event.origin=\"http://www.wrox.com\"){//发送消息的文档所在的域\n        //接受参数\n        processMessage(event.data);\n        //可选:向窗口来源发送回执\n        event.source.postMessage(\"Receiived\",\"http://xiaomo.info\")\n      }\n\n\n    })\n```\n\n\n## 十四、本地存储\n\n### 1. cookie  \n\n```\nvar CookieUtil = {\n//根据key读取cookie\n    get: function (name){\n         //注意对键编码\n        var cookieName = encodeURIComponent(name) + \"=\",\n            cookieStart = document.cookie.indexOf(cookieName),\n            cookieValue = null,\n            cookieEnd;\n        //找到cookie键\n        if (cookieStart > -1){\n             //键后面第一个分号位置\n            cookieEnd = document.cookie.indexOf(\";\", cookieStart);\n            if (cookieEnd == -1){\n                cookieEnd = document.cookie.length;\n            }\n            //cookie值解码\n            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));\n        }\n        return cookieValue;\n    },\n    //设置cookie\n    set: function (name, value, expires, path, domain, secure) {\n        var cookieText = encodeURIComponent(name) + \"=\" + encodeURIComponent(value);\n        //失效时间，GMT时间格式\n        if (expires instanceof Date) {\n            cookieText += \"; expires=\" + expires.toGMTString();\n        }\n        if (path) {\n            cookieText += \"; path=\" + path;\n        }\n        if (domain) {\n            cookieText += \"; domain=\" + domain;\n        }\n        if (secure) {\n            cookieText += \"; secure\";\n        }\n        document.cookie = cookieText;\n    },\n    //删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可\n    unset: function (name, path, domain, secure){\n        this.set(name, \"\", new Date(0), path, domain, secure);\n    }\n};\n```\n\n使用util方法   \n\n```\n  CookieUtil.set('name','xiaomo');\n  CookieUtil.set('age',26);\n\n  console.log(CookieUtil.get('name'));\n  console.log(CookieUtil.get('age'));\n\n  CookieUtil.unset('name');\n  CookieUtil.unset('age');\n```\n\n\n\n### 2. localStorage  \n\n```\nWindow.localStorage.setItem(key,value);//存储数据\nWindow.localStorage.getItem(key);//读取数据\nWindow.localStorage.removeItem(key);//删除数据项\nWindow.localStorage.clear();//删除所有数据\n```\n","slug":"javascript_syntax","published":1,"updated":"2016-06-28T02:50:27.723Z","_id":"cipjfs5ur001k4wmcc2evmhjg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/javascript.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、一些不同\"><a href=\"#一、一些不同\" class=\"headerlink\" title=\"一、一些不同\"></a>一、一些不同</h2><h3 id=\"1-javscript没有块级作用域\"><a href=\"#1-javscript没有块级作用域\" class=\"headerlink\" title=\"1. javscript没有块级作用域\"></a>1. javscript没有块级作用域</h3><p>于是es6中有了let和var<br>模拟js的块级作用域    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i) <span class=\"comment\">//会报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-javascipt中this用法不同\"><a href=\"#2-javascipt中this用法不同\" class=\"headerlink\" title=\"2. javascipt中this用法不同\"></a>2. javascipt中this用法不同</h3><p>它指向调用它的那个对象</p>\n<h3 id=\"3-闭包是指有权访问另一个函数作用域中的变量的函数。\"><a href=\"#3-闭包是指有权访问另一个函数作用域中的变量的函数。\" class=\"headerlink\" title=\"3. 闭包是指有权访问另一个函数作用域中的变量的函数。\"></a>3. 闭包是指有权访问另一个函数作用域中的变量的函数。</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'这是一个闭包'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、基本数据类型\"><a href=\"#二、基本数据类型\" class=\"headerlink\" title=\"二、基本数据类型\"></a>二、基本数据类型</h2><p><code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code> 、<code>object</code>、<code>function</code><br>它们有对应的方法<br><code>Boolean()</code>、<code>String()</code>、<code>Number()</code> 、<code>Object()</code>  </p>\n<h3 id=\"1-undefined\"><a href=\"#1-undefined\" class=\"headerlink\" title=\"1. undefined\"></a>1. <code>undefined</code></h3><p>没有被定义就会返回<code>undefined</code>,是<code>null</code>衍生出来的,因些<code>undefined==null</code> 返回true</p>\n<h3 id=\"2-null\"><a href=\"#2-null\" class=\"headerlink\" title=\"2. null\"></a>2. <code>null</code></h3><p>由于历史原因 <code>typeof null</code>返回<code>object</code></p>\n<h3 id=\"3-boolean\"><a href=\"#3-boolean\" class=\"headerlink\" title=\"3. boolean\"></a>3. <code>boolean</code></h3><p><code>Boolean()</code><br>非0返回true<br>0、null、undefined返回false</p>\n<h3 id=\"4-string\"><a href=\"#4-string\" class=\"headerlink\" title=\"4. string\"></a>4. <code>string</code></h3><p><code>String()</code><br>不管传入什么都会原样返回,但如果是<code>function</code>,会执行该方法并返回<code>undefined</code><br><code>toString(参数,进制)</code><br><code>toUpperCase()</code><br><code>toLowerCase()</code><br><code>substring(parm1,parm2)</code><br><code>substr()</code><br><code>charAt(1)</code><br><code>charCodeAt(2)</code><br><code>concat()</code><br><code>slice()</code><br><code>indexof()</code><br><code>lastIndexOf</code><br><code>trim()</code><br><code>search(pattern)</code>  //返回索引<br><code>replcae(&#39;原&#39;,&#39;新&#39;)</code> //第一个参数支持正则    第二个参数也可以是一个function<br><code>splice(&#39;,&#39;)</code>    //支持正则，支持指定长度<br>它只有length属性   </p>\n<h3 id=\"5-number\"><a href=\"#5-number\" class=\"headerlink\" title=\"5. number\"></a>5. <code>number</code></h3><p><code>Number()</code>          true=&gt;1 false=&gt;0   null=&gt;0 undefined=&gt;NaN<br><code>Number.MAX_VALUE</code>  最大值<br><code>Number.MIN_VALUE</code>  最小值<br><code>NaN</code>  它是一个特例，不与任何值相等包括自己<br><code>parseInt()</code> //可以查找字符串中的数字并转换<br><code>parseFloat()</code> //可以查找字符串中的数字并转换<br><code>inFinite()</code> //是否在最大值和最小值之间<br><code>toFixed(小数点位数)</code><br>说明：它能够识别科学计数法 比如 2.15e5 =&gt; 215000   </p>\n<h3 id=\"6-object\"><a href=\"#6-object\" class=\"headerlink\" title=\"6. object\"></a>6. <code>object</code></h3><p><code>constructor</code>  构造函数<br><code>obj.hasOwnProperty()</code> 是否具有自己的方法<br><code>obj.isProtoTypeOf(object)</code>  检查传入的对象是否是另一个对象的原型<br><code>ob.propertyIsEnumerable(propetyName)</code>  检查给定的属性能否使用for-in<br><code>obj.toLocaleString()</code> 返回执行地区对应的对象的字符串 =&gt;[‘Object’]<br><code>obj.toString()</code>    返回执行对象的字符串 =&gt;[‘Object’]<br><code>obj.valueOf()</code>   返回对象序列化之后的结果</p>\n<h2 id=\"三、运算符\"><a href=\"#三、运算符\" class=\"headerlink\" title=\"三、运算符\"></a>三、运算符</h2><h3 id=\"1-大于和小于\"><a href=\"#1-大于和小于\" class=\"headerlink\" title=\"1. 大于和小于\"></a>1. 大于和小于</h3><p><code>&#39;23&#39;&lt;&#39;3&#39;</code>  //true,字符串的比较跟数字的比较不同<br><code>&#39;a&#39;&lt;3</code>   //false a会被转成NaN<br><code>特别注意</code>:NaN和任何数比都是false<br><code>NaN&gt;3</code> //false<br><code>NaN&lt;3</code> //false<br><code>&#39;23&#39;&lt;3</code> //false  ‘23’会被转成23再与3比较</p>\n<h3 id=\"2-全等和不全等\"><a href=\"#2-全等和不全等\" class=\"headerlink\" title=\"2. 全等和不全等\"></a>2. 全等和不全等</h3><p><code>&#39;55&#39;==55</code> //true 不全等只判断值不判断类型<br><code>&#39;55&#39;===55</code> //false  全等不仅判断值还判断类型  </p>\n<h2 id=\"四、条件控制语句\"><a href=\"#四、条件控制语句\" class=\"headerlink\" title=\"四、条件控制语句\"></a>四、条件控制语句</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(proertyName <span class=\"keyword\">in</span> <span class=\"keyword\">global</span>)&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(proertyName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、方法\"><a href=\"#五、方法\" class=\"headerlink\" title=\"五、方法\"></a>五、方法</h2><p>注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。</p>\n<h2 id=\"六、检测类型\"><a href=\"#六、检测类型\" class=\"headerlink\" title=\"六、检测类型\"></a>六、检测类型</h2><p><code>typeof xxx</code><br>// 返回数据类型</p>\n<h2 id=\"七、引用类型\"><a href=\"#七、引用类型\" class=\"headerlink\" title=\"七、引用类型\"></a>七、引用类型</h2><h3 id=\"1-object\"><a href=\"#1-object\" class=\"headerlink\" title=\"1. object\"></a>1. <code>object</code></h3><p>声明对象的方法<br><code>var obj = new Object();</code><br><code>var obj = {};</code></p>\n<p>赋值<br><code>obj.name=&#39;xiaomo&#39;;</code>   </p>\n<p>使用对象的属性<br><code>obj.name</code><br><code>obj[&#39;name&#39;]</code>  </p>\n<h3 id=\"2-Array\"><a href=\"#2-Array\" class=\"headerlink\" title=\"2. Array\"></a>2. <code>Array</code></h3><p>可以存任何类型    </p>\n<p>声明<br><code>var arr = new Array();</code><br><code>var arr = new Array(3);</code><br><code>var arr = [];</code>  </p>\n<p>添加对象<br><code>arr.push(&#39;a&#39;,b&#39;,1,3,4,true)</code><br>操作对象(删除、插入、替换)     </p>\n<p><code>删除</code>：起始位置，要删除的个数<br><code>arr.splice(起始位置,删除的个数)</code><br>例子：<code>arr.splice(2,1)</code> //返回[1] 返回删除的那个数   </p>\n<p><code>插入</code>：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(1,0,&#39;插入的值1&#39;,&#39;插入的值2&#39;,&#39;插入的值n&#39;)</code>  </p>\n<p><code>替换</code>：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(0,2,&#39;test1&#39;,&#39;test2&#39;)</code>   </p>\n<p>其他数组操作<br><code>arr.push(&#39;test&#39;)</code> 插入到数组的最后面<br><code>arr.unshift(&#39;xiaomo&#39;)</code> 插入到数组的最前面<br><code>arr.pop()</code>   //删除数组的最后一个值<br><code>arr.shift()</code> //删除数组第一个值</p>\n<p>使用对象<br><code>arr[1]</code>   </p>\n<p>数组自带的方法<br><code>arr.reverse();</code>   反转数组<br><code>arr.sort()</code>   默认升序排列<br><code>arr.sort((a,b)=&gt;{reutrn b-a})</code>  传入排序方法会按照自定义排序<br><code>arr.concat(另一个数组或者单个参数)</code>  如果传入数组也会被展开拿出来,不会影响原数组<br><code>arr.slice(0,3)</code>  会把选定的部分截取出来生成一个新的数组，不会影响原数组<br><code>arr.indexOf(4)</code>   返回该值存在的下标,不存在返回-1<br><code>arr.lastIndexOf(4)</code> 从倒数开始查找,返回该值存在的下标,不存在返回-1<br><code>arr.every(fn)</code>   对每个参数进行处理，全部符合返回true<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.some(fn)</code>   对每个参数进行处理，有一个符合就返回true<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.filter(fn)</code> 对每个参数进行处理，返回过滤后的数组<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.map(fn)</code>    对每个参数进行处理，返回处理后的数组<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.forEach(fn)</code>  对每个参数进行处理，没有返回值<br><code>arr.reduce(fn)</code>    对每个参数进行处理，迭代返回最终结果<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span>=</span>(prev,cur,index,array)&#123;<span class=\"comment\">//前一个值、当前值、索引、数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev+cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.reduceRight(fn)</code>  从右边对每个参数进行处理，迭代返回最终结果<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span>=</span>(prev,cur,index,array)&#123;<span class=\"comment\">//前一个值、当前值、索引、数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev+cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Date类型\"><a href=\"#3-Date类型\" class=\"headerlink\" title=\"3. Date类型\"></a>3. Date类型</h3><p>声明:<br><code>var date = new Date();</code>  创建当前时间 也可以接收参数<br><code>Date.parse(pattern)</code>    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳<br><code>new Date(Date.parse(pattern))</code>   //   将时间戳格式化为正常的时间<br><code>new Date(2016,5,19,20,49,15)</code>  //也可以用逗号 2016-05-19 20:49:15<br><code>Date.now()</code>  //当前时间的时间戳<br><code>toDateString()</code> //返回时间的字符串 星期、日、月、年<br><code>toTimeString()</code> //时、分、秒、时区<br><code>toLocaleDateString()</code>   特定时区的星期、日、月、年<br><code>toLocaleTimeString()</code>   特定时区的时、分、秒、时间    </p>\n<p>时间格式<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">date</span> = <span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">var</span> time = <span class=\"built_in\">date</span>.getTime() <span class=\"comment\">//当前时间的时间戳</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> fullYear = <span class=\"built_in\">date</span>.getFullYear(); <span class=\"comment\">//2016</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> year = <span class=\"built_in\">date</span>.getYear();   <span class=\"comment\">//116  </span></span><br><span class=\"line\"><span class=\"built_in\">var</span> month = <span class=\"built_in\">date</span>.getMonth(); <span class=\"comment\">//04 从0开始</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> d = <span class=\"built_in\">date</span>.getDate(); <span class=\"comment\">//日  19</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> day = <span class=\"built_in\">date</span>.getDay();  <span class=\"comment\">//4 返回星期几</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"keyword\">min</span> = <span class=\"built_in\">date</span>.getMinitues(); <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> sec = <span class=\"built_in\">date</span>.getSeconds() <span class=\"comment\">//秒</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> mill = <span class=\"built_in\">date</span>.getMilliSeconds() <span class=\"comment\">//毫秒</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-正则-RegExp类型\"><a href=\"#4-正则-RegExp类型\" class=\"headerlink\" title=\"4. 正则 RegExp类型\"></a>4. 正则 RegExp类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'pattern'</span>);</span><br><span class=\"line\">re.test(parm);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// exec 返回匹配的结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">'abcdef.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\.js$/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = parrten.exec(test);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches); <span class=\"comment\">// '.js' ,index:6 input:'abcdef.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test 返回true/false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'abcdef.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\.js$/</span></span><br><span class=\"line\">pattern.test(text); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-方法-function\"><a href=\"#5-方法-function\" class=\"headerlink\" title=\"5. 方法　function\"></a>5. 方法　function</h3><p>方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法<br>每个方法都包含两个属性:<code>length</code>(参数个数)和<code>protoType</code>(原型链)<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(a,b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(a)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>)    <span class=\"comment\">//1</span></span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure></p>\n<p>你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是一个方法'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但如果是立即执行的函数则不行</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">  function test()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>方法有两个特殊的内部属性和两个非继承来的方法 <code>call()</code>、<code>apply()</code>,以及其他方法 <code>toString()、valueOf()</code><br><code>arguments</code>和<code>this</code><br><code>arguments</code>是类数组,保存着参数。它有<code>arguments.callee()</code>方法<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">factorial</span>(<span class=\"built_in\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">num</span>&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"built_in\">num</span> * arguments.callee(<span class=\"built_in\">num</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">factorial</span>(<span class=\"number\">5</span>); // <span class=\"number\">5</span>! <span class=\"number\">1</span>*<span class=\"number\">2</span>*<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p><code>this</code>在javascript中用法比较特殊,它指向它的调用者</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">color</span>=<span class=\"string\">'green'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"built_in\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">color</span>=<span class=\"string\">'pink'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.sayColor(); <span class=\"comment\">//pink</span></span><br><span class=\"line\">sayColor(); <span class=\"comment\">//green</span></span><br></pre></td></tr></table></figure>\n<p><code>protoType</code> 原型链    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call 参数1:运行函数的作用域 参数2 agruments或者Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,[num1,num2])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,num1,num2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>encodeURIComponent()</code> //encode字符串<br><code>decodeURICopmonent()</code> //decode字符串<br><code>eval(express)</code> //解析字符串表达式<br><code>eval(&quot;console.log(&#39;我是被解析的表达式&#39;)&quot;)</code>   </p>\n<h3 id=\"6-Math\"><a href=\"#6-Math\" class=\"headerlink\" title=\"6. Math\"></a>6. <code>Math</code></h3><p><code>Math.E</code> //e<br><code>Math.LN10</code> //10的自然对数<br><code>Math.LOG10E</code> //以10为底e的对数<br><code>Math.PI</code>  //PI<br><code>Math.SQRT2</code> //2的平方根<br><code>Math.SQRT1_2</code>  // 1/2的平方根   </p>\n<p>方法：<br><code>Math.min(Array)</code><br><code>Math.max(Array)</code><br><code>Math.ceil(parm)</code> //向上取整<br><code>Math.floor(parm)</code> //向下取整<br><code>Math.round(parm)</code> //标准的四舍五入<br><code>Math.random()</code>  // 0-1之间的数<br><code>Math.abs(parm)</code> //绝对值</p>\n<h2 id=\"八、面向对象的编程方法\"><a href=\"#八、面向对象的编程方法\" class=\"headerlink\" title=\"八、面向对象的编程方法\"></a>八、面向对象的编程方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'xiaomo'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span>，</span><br><span class=\"line\">  sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age= age;</span><br><span class=\"line\">    o.job =job;</span><br><span class=\"line\">    o.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'xiaomo'</span>,<span class=\"number\">25</span>,<span class=\"string\">'programer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'xiaoming'</span>,<span class=\"number\">20</span>,<span class=\"string\">'it'</span>);</span><br></pre></td></tr></table></figure>\n<p>构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaomo'</span>,<span class=\"number\">25</span>,<span class=\"string\">'programer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaoming'</span>,<span class=\"number\">20</span>,<span class=\"string\">'it'</span>);</span><br></pre></td></tr></table></figure>\n<p>判断类型 <code>instanceof</code>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> Person <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>原型模式    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//实际上隐式的创建一个构造函数constructor</span></span><br><span class=\"line\">Person.prototype.name=<span class=\"string\">'xiaomo'</span>;</span><br><span class=\"line\">Person.prototype.age=<span class=\"number\">25</span>;</span><br><span class=\"line\">Person.prototype.job=<span class=\"string\">'programmer'</span>;</span><br><span class=\"line\">Person.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前也可以这样</span></span><br><span class=\"line\">Person.prototype=&#123;</span><br><span class=\"line\">  name=<span class=\"string\">'xiaomo'</span>;</span><br><span class=\"line\">  age=<span class=\"number\">25</span>;</span><br><span class=\"line\">  job=<span class=\"string\">'programmer'</span>;</span><br><span class=\"line\">  sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person1); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(person1.name); <span class=\"comment\">//xiaomo</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">'name'</span>) <span class=\"comment\">//false 存在于protoType中，不存在于实例中</span></span><br><span class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> person1 <span class=\"comment\">//true  虽然实例中没有,但是它的原型链有,所以返回true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person1) <span class=\"comment\">//会枚举出实例中所有的属性</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、定时器和延迟执行\"><a href=\"#九、定时器和延迟执行\" class=\"headerlink\" title=\"九、定时器和延迟执行\"></a>九、定时器和延迟执行</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//延迟一秒执行fn函数，只执行一次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeoutId = setTimeout(fn,timeout)</span><br><span class=\"line\">  <span class=\"comment\">//清除间歇执行函数</span></span><br><span class=\"line\">  clearTimeout(timeoutId);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//定时器，每秒执行fn函数，直到清除定时器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'定时器'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> intervalId = setInterval(fn,timout)</span><br><span class=\"line\">  <span class=\"comment\">//清除定时器</span></span><br><span class=\"line\">  clearInterval(itervalId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、BOM-浏览器相关\"><a href=\"#十、BOM-浏览器相关\" class=\"headerlink\" title=\"十、BOM(浏览器相关)\"></a>十、BOM(浏览器相关)</h2><h3 id=\"1-系统对话框\"><a href=\"#1-系统对话框\" class=\"headerlink\" title=\"1. 系统对话框\"></a>1. 系统对话框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(); <span class=\"comment\">//弹出框</span></span><br><span class=\"line\"></span><br><span class=\"line\">confirm();<span class=\"comment\">//确认框</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(confirm(<span class=\"string\">'are you sure?'</span>))&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'sure'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am not sure!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">prompt();<span class=\"comment\">//交互框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = promot(<span class=\"string\">\"what's up?\"</span>，<span class=\"string\">'默认值'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(result!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">  alert(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-location对象\"><a href=\"#2-location对象\" class=\"headerlink\" title=\"2. location对象\"></a>2. location对象</h3><p>参数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location<span class=\"selector-class\">.hash</span> <span class=\"comment\">//#contents url的hash值</span></span><br><span class=\"line\">location<span class=\"selector-class\">.host</span> <span class=\"comment\">// ip</span></span><br><span class=\"line\">location<span class=\"selector-class\">.hostname</span> <span class=\"comment\">//域名</span></span><br><span class=\"line\">location<span class=\"selector-class\">.href</span> <span class=\"comment\">//http域名</span></span><br><span class=\"line\">location<span class=\"selector-class\">.pathname</span> <span class=\"comment\">//url的目录</span></span><br><span class=\"line\">location<span class=\"selector-class\">.port</span> <span class=\"comment\">//8080</span></span><br><span class=\"line\">location<span class=\"selector-class\">.protocool</span> <span class=\"comment\">//协议</span></span><br><span class=\"line\">location<span class=\"selector-class\">.search</span> <span class=\"comment\">//?q=search</span></span><br><span class=\"line\">location.reload() <span class=\"comment\">//可能从缓存加载</span></span><br><span class=\"line\">location.reload(true) <span class=\"comment\">//重新加载</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-navigator对象\"><a href=\"#3-navigator对象\" class=\"headerlink\" title=\"3. navigator对象\"></a>3. navigator对象</h3><p> 检测浏览器属性    </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.appCodeName <span class=\"comment\">//浏览器的名字</span></span><br><span class=\"line\">navigator.appName <span class=\"comment\">//完整的浏览器名称</span></span><br><span class=\"line\">navigator.appVersion <span class=\"comment\">//浏览器的版本</span></span><br><span class=\"line\">navigator.cookieEnabled <span class=\"comment\">//cookie是否启用</span></span><br><span class=\"line\">navigator.javaEnabled() <span class=\"comment\">//java是否启用</span></span><br><span class=\"line\">navigator.language <span class=\"comment\">//主语言 zh-CH</span></span><br><span class=\"line\">navigator.languages <span class=\"comment\">//支持的语言</span></span><br><span class=\"line\">navigator.onLine <span class=\"comment\">//浏览器是否连接到了internet</span></span><br><span class=\"line\">navigator.platofrm <span class=\"comment\">//浏览器的平台 \"Win32\"</span></span><br><span class=\"line\">navigator.plugins <span class=\"comment\">//返回浏览器安装的插件的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span><span class=\"params\">(name)</span></span>&#123;</span><br><span class=\"line\">  name  = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i&lt;navigator.plugins.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &gt;-1表示找到了</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)&gt;<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isTrue)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-history对象\"><a href=\"#4-history对象\" class=\"headerlink\" title=\"4. history对象\"></a>4. history对象</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"number\">-1</span>);<span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"></span><br><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"number\">1</span>);<span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.forward();</span><br><span class=\"line\"></span><br><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"string\">'xiaomo.info'</span>)<span class=\"comment\">//跳转到最近访问过的该页面</span></span><br><span class=\"line\">history.length==<span class=\"number\">0</span> <span class=\"comment\">//表示这是用户打开浏览器的第一个页面</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、表单\"><a href=\"#十一、表单\" class=\"headerlink\" title=\"十一、表单\"></a>十一、表单</h2><h3 id=\"1-表单属性\"><a href=\"#1-表单属性\" class=\"headerlink\" title=\"1. 表单属性\"></a>1. 表单属性</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acceptCharset 服务器能够处理的字符集</span><br><span class=\"line\">action 接受请求的url</span><br><span class=\"line\">elements 表单所有控件的集合</span><br><span class=\"line\">enctype 请求的编码类型</span><br><span class=\"line\">length 表单中控件的数量</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">get</span>/<span class=\"title\">post</span></span><br><span class=\"line\"><span class=\"title\">name</span> 表单的名字</span><br><span class=\"line\"><span class=\"title\">reset</span><span class=\"params\">()</span> 重置</span><br><span class=\"line\"><span class=\"title\">submit</span><span class=\"params\">()</span> 提交</span><br><span class=\"line\"><span class=\"title\">target</span></span></span><br></pre></td></tr></table></figure>\n<p><code>document.forms</code> 可以取到表单的所有控件    </p>\n<h3 id=\"2-控件\"><a href=\"#2-控件\" class=\"headerlink\" title=\"2. 控件\"></a>2. 控件</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disabled 当前字段是否禁用</span><br><span class=\"line\"><span class=\"keyword\">form</span> 指向当前字段所属表单的指针:只读</span><br><span class=\"line\"><span class=\"keyword\">name</span> 当前字段的名字</span><br><span class=\"line\">readOnly 当前字段只读</span><br><span class=\"line\">tabIndex tab切换的序号</span><br><span class=\"line\"><span class=\"keyword\">type</span> 当前字段的类型</span><br><span class=\"line\"><span class=\"keyword\">value</span> 当前字段提交给服务器的值</span><br></pre></td></tr></table></figure>\n<p>修改控件的值</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = document.getElementById(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">name.<span class=\"keyword\">value</span>=<span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">name.focus(); <span class=\"comment\">//把焦点设置到当前字段</span></span><br><span class=\"line\"><span class=\"comment\">//在控件中加入 autofocus=\"focus\" 是一样的效果</span></span><br></pre></td></tr></table></figure>\n<p>选择文本<br><code>element.select()</code>     </p>\n<p>取得选中的文本<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertText</span>(<span class=\"params\">username</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'username'</span>);</span><br><span class=\"line\">    alert(getSelectText(username));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSelectText</span>(<span class=\"params\">textbox</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"input\"</span> id=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"我是测试文本，看一下能不能被选中\"</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"确定\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alertText()\"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-剪贴板事件\"><a href=\"#3-剪贴板事件\" class=\"headerlink\" title=\"3. 剪贴板事件\"></a>3. 剪贴板事件</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforecopy</span><br><span class=\"line\">copy</span><br><span class=\"line\">cut</span><br><span class=\"line\">beforepaste</span><br><span class=\"line\">paste</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写一个公用方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  getClipboardText:function(<span class=\"keyword\">event</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clipboardData  = (<span class=\"keyword\">event</span>.clipboardData || window.clipboardData);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clipboardData.getData(<span class=\"string\">'text'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setClipboardText:function(<span class=\"keyword\">event</span>,<span class=\"keyword\">value</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">event</span>.clipboardData)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">event</span>.clipboardData.setData(<span class=\"string\">\"text/plain\"</span>,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> (<span class=\"params\">window.clipboardData</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> window.clipboardData.setData(<span class=\"string\">\"txt\"</span>,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EventUtil.addHander(txtbox,<span class=\"string\">\"paste\"</span>,function(<span class=\"keyword\">event</span>))&#123;</span><br><span class=\"line\">  <span class=\"keyword\">event</span>  = EventUtil.getEvent(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = EventUtil.getClipboardText(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!/^\\d*$/.test(text))&#123;</span><br><span class=\"line\">    EventUtil.preventDefault(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/hykun/p/EventUtil.html\" target=\"_blank\" rel=\"external\">EventUtil</a></p>\n<p>自动切换焦点</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span>()&#123;</span><br><span class=\"line\">  function tabForward(<span class=\"name\">event</span>)&#123;</span><br><span class=\"line\">    event = EventUtil.getEvent(<span class=\"name\">event</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    var target = EventUtil.getTarget(<span class=\"name\">event</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if(<span class=\"name\">target.value.length</span> = target.maxLength)&#123;</span><br><span class=\"line\">      var form = target.form<span class=\"comment\">;</span></span><br><span class=\"line\">      for( var i =0<span class=\"comment\">; len = form.elements.length;i&lt;len;i++)&#123;</span></span><br><span class=\"line\">        if(<span class=\"name\">form.elements</span>[<span class=\"name\">i</span>]==target)&#123;</span><br><span class=\"line\">          if(<span class=\"name\">form.elements</span>[<span class=\"name\">i+1</span>])&#123;</span><br><span class=\"line\">            form.elements[<span class=\"name\">i+1</span>].focus()<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var text1 = document.getElementById(<span class=\"symbol\">'text1</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  var text2 = document.getElementById(<span class=\"symbol\">'text2</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  var text3 = document.getElementById(<span class=\"symbol\">'text3</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text1</span>,<span class=\"symbol\">'keyup</span>',tabForward)<span class=\"comment\">;</span></span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text2</span>,<span class=\"symbol\">'keyup</span>',tabForward</span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text3</span>,<span class=\"symbol\">'keyup</span>',tabForward</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-下拉框-select\"><a href=\"#4-下拉框-select\" class=\"headerlink\" title=\"4. 下拉框 select\"></a>4. 下拉框 select</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(newOption,relOption) 插入一个<span class=\"keyword\">option</span></span><br><span class=\"line\"><span class=\"comment\">//最佳做法(在列表最后插入一个option)</span></span><br><span class=\"line\">var newOption = new <span class=\"keyword\">Option</span>(<span class=\"string\">\"text\"</span>,<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">selectBox.add(newOption,undefined);</span><br><span class=\"line\"></span><br><span class=\"line\">multiple 是否允许多选</span><br><span class=\"line\"><span class=\"keyword\">options</span> 控件中所有<span class=\"keyword\">options</span>的HTMLCollection</span><br><span class=\"line\">remove(index) 移除指定位置的选项</span><br><span class=\"line\"><span class=\"comment\">//移除指定的选项(这里移除的是第一项)</span></span><br><span class=\"line\">var index = <span class=\"number\">0</span></span><br><span class=\"line\">selectBox.remove(selectBox.<span class=\"keyword\">options</span>[index])</span><br><span class=\"line\">selectedIndex 基于<span class=\"number\">0</span>的选中项的索引,没有选中项<span class=\"number\">-1</span></span><br><span class=\"line\">size 选择框中可见的行数</span><br><span class=\"line\">text 选中项的文本内容</span><br><span class=\"line\">value 选项的值</span><br><span class=\"line\"><span class=\"comment\">//移动一个选项到特定位置(将第2个选项移动到最后一个选项)</span></span><br><span class=\"line\">var optionToMove = selectBox.<span class=\"keyword\">options</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">selectBox.insertBefore(optionToMove,selectBox.<span class=\"keyword\">options</span>[optionToMove.index<span class=\"number\">-1</span>])</span><br><span class=\"line\">/添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)</span><br><span class=\"line\">selectBox.appendChind(selectBox.<span class=\"keyword\">options</span>[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-表单序列化\"><a href=\"#5-表单序列化\" class=\"headerlink\" title=\"5. 表单序列化\"></a>5. 表单序列化</h3><p>原则：<br>对表单字段的名字和值进行url编码,使用&amp;分割<br>不发送禁用的表单字段<br>只发送勾选的单选按钮和复选框<br>不发送type为reset和button的按钮<br>多选框中的每选中的值单独一个条目<br>submit的时候,本按钮也会被提交<br>select发送的时候如果有value就发value的值 没有就发text内容  </p>\n<p><code>form.serialize()</code>  </p>\n<h3 id=\"6-富文本编辑器\"><a href=\"#6-富文本编辑器\" class=\"headerlink\" title=\"6. 富文本编辑器\"></a>6. 富文本编辑器</h3><p>只要加上<code>contenteditable</code>就可以让div可以编辑<br><code>&lt;div id=&quot;richedit&quot; contenteditable&gt;&lt;/div&gt;</code><br>也可以用js控制</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var richedit = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'richedit'</span>);</span><br><span class=\"line\">richedit.contenteditable=<span class=\"string\">\"true\"</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"literal\">true</span> <span class=\"literal\">false</span> inherit</span><br><span class=\"line\"><span class=\"built_in\">document</span>.exexCommand(命令,<span class=\"literal\">false</span>,值);</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"built_in\">document</span>.exexCommand(<span class=\"string\">'bold'</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、canvas\"><a href=\"#十二、canvas\" class=\"headerlink\" title=\"十二、canvas\"></a>十二、canvas</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个canvas   </span></span><br><span class=\"line\">&lt;canvas id=<span class=\"string\">\"drawing\"</span> <span class=\"built_in\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"built_in\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span><br><span class=\"line\">    您的浏览器不支持canvas</span><br><span class=\"line\">&lt;/canvas&gt;</span><br><span class=\"line\"><span class=\"comment\">//获取canvas</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">'drawing'</span>);</span><br><span class=\"line\"><span class=\"built_in\">if</span>(drawing.getContext)&#123;</span><br><span class=\"line\">  var context = drawing.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">  context.fillReact(<span class=\"number\">30</span>,<span class=\"number\">30</span>,<span class=\"number\">30</span>,<span class=\"number\">30</span>); <span class=\"comment\">//画了一个正方形</span></span><br><span class=\"line\">  context.fillStyle=<span class=\"string\">'#fff'</span>; <span class=\"comment\">//填充</span></span><br><span class=\"line\">  context.strokeStyle=<span class=\"string\">'red'</span>; <span class=\"comment\">//描边</span></span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、html5脚本编程\"><a href=\"#十三、html5脚本编程\" class=\"headerlink\" title=\"十三、html5脚本编程\"></a>十三、html5脚本编程</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跨文档消息传送</span></span><br><span class=\"line\"><span class=\"selector-tag\">EventUtil</span><span class=\"selector-class\">.addHander</span>(window,<span class=\"string\">\"message\"</span>,function(event)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">if</span>(event.origin=<span class=\"string\">\"http://www.wrox.com\"</span>)&#123;<span class=\"comment\">//发送消息的文档所在的域</span></span><br><span class=\"line\">      <span class=\"comment\">//接受参数</span></span><br><span class=\"line\">      processMessage(event<span class=\"selector-class\">.data</span>);</span><br><span class=\"line\">      <span class=\"comment\">//可选:向窗口来源发送回执</span></span><br><span class=\"line\">      event<span class=\"selector-class\">.source</span><span class=\"selector-class\">.postMessage</span>(<span class=\"string\">\"Receiived\"</span>,<span class=\"string\">\"http://xiaomo.info\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、本地存储\"><a href=\"#十四、本地存储\" class=\"headerlink\" title=\"十四、本地存储\"></a>十四、本地存储</h2><h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CookieUtil = &#123;</span><br><span class=\"line\"><span class=\"comment\">//根据key读取cookie</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//注意对键编码</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cookieName = <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">\"=\"</span>,</span><br><span class=\"line\">            cookieStart = <span class=\"built_in\">document</span>.cookie.indexOf(cookieName),</span><br><span class=\"line\">            cookieValue = <span class=\"literal\">null</span>,</span><br><span class=\"line\">            cookieEnd;</span><br><span class=\"line\">        <span class=\"comment\">//找到cookie键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookieStart &gt; <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">             <span class=\"comment\">//键后面第一个分号位置</span></span><br><span class=\"line\">            cookieEnd = <span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">\";\"</span>, cookieStart);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cookieEnd == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                cookieEnd = <span class=\"built_in\">document</span>.cookie.length;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//cookie值解码</span></span><br><span class=\"line\">            cookieValue = <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//设置cookie</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cookieText = <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(value);</span><br><span class=\"line\">        <span class=\"comment\">//失效时间，GMT时间格式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expires <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; expires=\"</span> + expires.toGMTString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; path=\"</span> + path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (domain) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; domain=\"</span> + domain;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (secure) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; secure\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = cookieText;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可</span></span><br><span class=\"line\">    unset: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, path, domain, secure</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.set(name, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">0</span>), path, domain, secure);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用util方法   </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CookieUtil<span class=\"selector-class\">.set</span>(<span class=\"string\">'name'</span>,<span class=\"string\">'xiaomo'</span>);</span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.set</span>(<span class=\"string\">'age'</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(CookieUtil.get(<span class=\"string\">'name'</span>));</span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(CookieUtil.get(<span class=\"string\">'age'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.unset</span>(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.unset</span>(<span class=\"string\">'age'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-localStorage\"><a href=\"#2-localStorage\" class=\"headerlink\" title=\"2. localStorage\"></a>2. localStorage</h3><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.setItem(<span class=\"built_in\">key</span>,value);<span class=\"comment\">//存储数据</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.getItem(<span class=\"built_in\">key</span>);<span class=\"comment\">//读取数据</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.removeItem(<span class=\"built_in\">key</span>);<span class=\"comment\">//删除数据项</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.<span class=\"keyword\">clear</span>();<span class=\"comment\">//删除所有数据</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>一直对javscript抱有敬畏的态度，也没有一直深入学习。当学到各种js框架的时候才发现力不从心，感觉到了javascript基础的重要性，重新认真的系统的学习一下。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/javascript.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、一些不同\"><a href=\"#一、一些不同\" class=\"headerlink\" title=\"一、一些不同\"></a>一、一些不同</h2><h3 id=\"1-javscript没有块级作用域\"><a href=\"#1-javscript没有块级作用域\" class=\"headerlink\" title=\"1. javscript没有块级作用域\"></a>1. javscript没有块级作用域</h3><p>于是es6中有了let和var<br>模拟js的块级作用域    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outputNumbers</span>(<span class=\"params\">count</span>)</span>&#123;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i) <span class=\"comment\">//会报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-javascipt中this用法不同\"><a href=\"#2-javascipt中this用法不同\" class=\"headerlink\" title=\"2. javascipt中this用法不同\"></a>2. javascipt中this用法不同</h3><p>它指向调用它的那个对象</p>\n<h3 id=\"3-闭包是指有权访问另一个函数作用域中的变量的函数。\"><a href=\"#3-闭包是指有权访问另一个函数作用域中的变量的函数。\" class=\"headerlink\" title=\"3. 闭包是指有权访问另一个函数作用域中的变量的函数。\"></a>3. 闭包是指有权访问另一个函数作用域中的变量的函数。</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createAFunction</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'这是一个闭包'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、基本数据类型\"><a href=\"#二、基本数据类型\" class=\"headerlink\" title=\"二、基本数据类型\"></a>二、基本数据类型</h2><p><code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>string</code>、<code>number</code> 、<code>object</code>、<code>function</code><br>它们有对应的方法<br><code>Boolean()</code>、<code>String()</code>、<code>Number()</code> 、<code>Object()</code>  </p>\n<h3 id=\"1-undefined\"><a href=\"#1-undefined\" class=\"headerlink\" title=\"1. undefined\"></a>1. <code>undefined</code></h3><p>没有被定义就会返回<code>undefined</code>,是<code>null</code>衍生出来的,因些<code>undefined==null</code> 返回true</p>\n<h3 id=\"2-null\"><a href=\"#2-null\" class=\"headerlink\" title=\"2. null\"></a>2. <code>null</code></h3><p>由于历史原因 <code>typeof null</code>返回<code>object</code></p>\n<h3 id=\"3-boolean\"><a href=\"#3-boolean\" class=\"headerlink\" title=\"3. boolean\"></a>3. <code>boolean</code></h3><p><code>Boolean()</code><br>非0返回true<br>0、null、undefined返回false</p>\n<h3 id=\"4-string\"><a href=\"#4-string\" class=\"headerlink\" title=\"4. string\"></a>4. <code>string</code></h3><p><code>String()</code><br>不管传入什么都会原样返回,但如果是<code>function</code>,会执行该方法并返回<code>undefined</code><br><code>toString(参数,进制)</code><br><code>toUpperCase()</code><br><code>toLowerCase()</code><br><code>substring(parm1,parm2)</code><br><code>substr()</code><br><code>charAt(1)</code><br><code>charCodeAt(2)</code><br><code>concat()</code><br><code>slice()</code><br><code>indexof()</code><br><code>lastIndexOf</code><br><code>trim()</code><br><code>search(pattern)</code>  //返回索引<br><code>replcae(&#39;原&#39;,&#39;新&#39;)</code> //第一个参数支持正则    第二个参数也可以是一个function<br><code>splice(&#39;,&#39;)</code>    //支持正则，支持指定长度<br>它只有length属性   </p>\n<h3 id=\"5-number\"><a href=\"#5-number\" class=\"headerlink\" title=\"5. number\"></a>5. <code>number</code></h3><p><code>Number()</code>          true=&gt;1 false=&gt;0   null=&gt;0 undefined=&gt;NaN<br><code>Number.MAX_VALUE</code>  最大值<br><code>Number.MIN_VALUE</code>  最小值<br><code>NaN</code>  它是一个特例，不与任何值相等包括自己<br><code>parseInt()</code> //可以查找字符串中的数字并转换<br><code>parseFloat()</code> //可以查找字符串中的数字并转换<br><code>inFinite()</code> //是否在最大值和最小值之间<br><code>toFixed(小数点位数)</code><br>说明：它能够识别科学计数法 比如 2.15e5 =&gt; 215000   </p>\n<h3 id=\"6-object\"><a href=\"#6-object\" class=\"headerlink\" title=\"6. object\"></a>6. <code>object</code></h3><p><code>constructor</code>  构造函数<br><code>obj.hasOwnProperty()</code> 是否具有自己的方法<br><code>obj.isProtoTypeOf(object)</code>  检查传入的对象是否是另一个对象的原型<br><code>ob.propertyIsEnumerable(propetyName)</code>  检查给定的属性能否使用for-in<br><code>obj.toLocaleString()</code> 返回执行地区对应的对象的字符串 =&gt;[‘Object’]<br><code>obj.toString()</code>    返回执行对象的字符串 =&gt;[‘Object’]<br><code>obj.valueOf()</code>   返回对象序列化之后的结果</p>\n<h2 id=\"三、运算符\"><a href=\"#三、运算符\" class=\"headerlink\" title=\"三、运算符\"></a>三、运算符</h2><h3 id=\"1-大于和小于\"><a href=\"#1-大于和小于\" class=\"headerlink\" title=\"1. 大于和小于\"></a>1. 大于和小于</h3><p><code>&#39;23&#39;&lt;&#39;3&#39;</code>  //true,字符串的比较跟数字的比较不同<br><code>&#39;a&#39;&lt;3</code>   //false a会被转成NaN<br><code>特别注意</code>:NaN和任何数比都是false<br><code>NaN&gt;3</code> //false<br><code>NaN&lt;3</code> //false<br><code>&#39;23&#39;&lt;3</code> //false  ‘23’会被转成23再与3比较</p>\n<h3 id=\"2-全等和不全等\"><a href=\"#2-全等和不全等\" class=\"headerlink\" title=\"2. 全等和不全等\"></a>2. 全等和不全等</h3><p><code>&#39;55&#39;==55</code> //true 不全等只判断值不判断类型<br><code>&#39;55&#39;===55</code> //false  全等不仅判断值还判断类型  </p>\n<h2 id=\"四、条件控制语句\"><a href=\"#四、条件控制语句\" class=\"headerlink\" title=\"四、条件控制语句\"></a>四、条件控制语句</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(proertyName <span class=\"keyword\">in</span> <span class=\"keyword\">global</span>)&#123;</span><br><span class=\"line\">  console.<span class=\"built_in\">log</span>(proertyName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、方法\"><a href=\"#五、方法\" class=\"headerlink\" title=\"五、方法\"></a>五、方法</h2><p>注意：javascript和java不同，它没有重载,定义两个方法名相同的方法后面一个会覆盖前面一个。</p>\n<h2 id=\"六、检测类型\"><a href=\"#六、检测类型\" class=\"headerlink\" title=\"六、检测类型\"></a>六、检测类型</h2><p><code>typeof xxx</code><br>// 返回数据类型</p>\n<h2 id=\"七、引用类型\"><a href=\"#七、引用类型\" class=\"headerlink\" title=\"七、引用类型\"></a>七、引用类型</h2><h3 id=\"1-object\"><a href=\"#1-object\" class=\"headerlink\" title=\"1. object\"></a>1. <code>object</code></h3><p>声明对象的方法<br><code>var obj = new Object();</code><br><code>var obj = {};</code></p>\n<p>赋值<br><code>obj.name=&#39;xiaomo&#39;;</code>   </p>\n<p>使用对象的属性<br><code>obj.name</code><br><code>obj[&#39;name&#39;]</code>  </p>\n<h3 id=\"2-Array\"><a href=\"#2-Array\" class=\"headerlink\" title=\"2. Array\"></a>2. <code>Array</code></h3><p>可以存任何类型    </p>\n<p>声明<br><code>var arr = new Array();</code><br><code>var arr = new Array(3);</code><br><code>var arr = [];</code>  </p>\n<p>添加对象<br><code>arr.push(&#39;a&#39;,b&#39;,1,3,4,true)</code><br>操作对象(删除、插入、替换)     </p>\n<p><code>删除</code>：起始位置，要删除的个数<br><code>arr.splice(起始位置,删除的个数)</code><br>例子：<code>arr.splice(2,1)</code> //返回[1] 返回删除的那个数   </p>\n<p><code>插入</code>：起始位置、要删除的个数(0)、要插入的数,可以是多个,返回空数组<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(1,0,&#39;插入的值1&#39;,&#39;插入的值2&#39;,&#39;插入的值n&#39;)</code>  </p>\n<p><code>替换</code>：起始位置、要删除的项目、要插入的任意项，可以是多个,返回被替换的值<br><code>arr.splice(起始位置,删除的个数,参数1,参数2,参数n)</code><br>例子:<code>arr.splice(0,2,&#39;test1&#39;,&#39;test2&#39;)</code>   </p>\n<p>其他数组操作<br><code>arr.push(&#39;test&#39;)</code> 插入到数组的最后面<br><code>arr.unshift(&#39;xiaomo&#39;)</code> 插入到数组的最前面<br><code>arr.pop()</code>   //删除数组的最后一个值<br><code>arr.shift()</code> //删除数组第一个值</p>\n<p>使用对象<br><code>arr[1]</code>   </p>\n<p>数组自带的方法<br><code>arr.reverse();</code>   反转数组<br><code>arr.sort()</code>   默认升序排列<br><code>arr.sort((a,b)=&gt;{reutrn b-a})</code>  传入排序方法会按照自定义排序<br><code>arr.concat(另一个数组或者单个参数)</code>  如果传入数组也会被展开拿出来,不会影响原数组<br><code>arr.slice(0,3)</code>  会把选定的部分截取出来生成一个新的数组，不会影响原数组<br><code>arr.indexOf(4)</code>   返回该值存在的下标,不存在返回-1<br><code>arr.lastIndexOf(4)</code> 从倒数开始查找,返回该值存在的下标,不存在返回-1<br><code>arr.every(fn)</code>   对每个参数进行处理，全部符合返回true<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.some(fn)</code>   对每个参数进行处理，有一个符合就返回true<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.filter(fn)</code> 对每个参数进行处理，返回过滤后的数组<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>&gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.map(fn)</code>    对每个参数进行处理，返回处理后的数组<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn=(<span class=\"keyword\">item</span>,index,array)<span class=\"comment\">&#123;//当前值、索引、该数组</span></span><br><span class=\"line\">  <span class=\"literal\">return</span> <span class=\"keyword\">item</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.forEach(fn)</code>  对每个参数进行处理，没有返回值<br><code>arr.reduce(fn)</code>    对每个参数进行处理，迭代返回最终结果<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span>=</span>(prev,cur,index,array)&#123;<span class=\"comment\">//前一个值、当前值、索引、数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev+cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>arr.reduceRight(fn)</code>  从右边对每个参数进行处理，迭代返回最终结果<br><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span>=</span>(prev,cur,index,array)&#123;<span class=\"comment\">//前一个值、当前值、索引、数组</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev+cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Date类型\"><a href=\"#3-Date类型\" class=\"headerlink\" title=\"3. Date类型\"></a>3. Date类型</h3><p>声明:<br><code>var date = new Date();</code>  创建当前时间 也可以接收参数<br><code>Date.parse(pattern)</code>    //   6/13/2016  May 25,2016  或者 yyyy-MM-dd hh:mm:ss格式的  返回时间戳<br><code>new Date(Date.parse(pattern))</code>   //   将时间戳格式化为正常的时间<br><code>new Date(2016,5,19,20,49,15)</code>  //也可以用逗号 2016-05-19 20:49:15<br><code>Date.now()</code>  //当前时间的时间戳<br><code>toDateString()</code> //返回时间的字符串 星期、日、月、年<br><code>toTimeString()</code> //时、分、秒、时区<br><code>toLocaleDateString()</code>   特定时区的星期、日、月、年<br><code>toLocaleTimeString()</code>   特定时区的时、分、秒、时间    </p>\n<p>时间格式<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">date</span> = <span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">var</span> time = <span class=\"built_in\">date</span>.getTime() <span class=\"comment\">//当前时间的时间戳</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> fullYear = <span class=\"built_in\">date</span>.getFullYear(); <span class=\"comment\">//2016</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> year = <span class=\"built_in\">date</span>.getYear();   <span class=\"comment\">//116  </span></span><br><span class=\"line\"><span class=\"built_in\">var</span> month = <span class=\"built_in\">date</span>.getMonth(); <span class=\"comment\">//04 从0开始</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> d = <span class=\"built_in\">date</span>.getDate(); <span class=\"comment\">//日  19</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> day = <span class=\"built_in\">date</span>.getDay();  <span class=\"comment\">//4 返回星期几</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"keyword\">min</span> = <span class=\"built_in\">date</span>.getMinitues(); <span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> sec = <span class=\"built_in\">date</span>.getSeconds() <span class=\"comment\">//秒</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> mill = <span class=\"built_in\">date</span>.getMilliSeconds() <span class=\"comment\">//毫秒</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-正则-RegExp类型\"><a href=\"#4-正则-RegExp类型\" class=\"headerlink\" title=\"4. 正则 RegExp类型\"></a>4. 正则 RegExp类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'pattern'</span>);</span><br><span class=\"line\">re.test(parm);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// exec 返回匹配的结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">'abcdef.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\.js$/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = parrten.exec(test);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches); <span class=\"comment\">// '.js' ,index:6 input:'abcdef.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//test 返回true/false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'abcdef.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/\\.js$/</span></span><br><span class=\"line\">pattern.test(text); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-方法-function\"><a href=\"#5-方法-function\" class=\"headerlink\" title=\"5. 方法　function\"></a>5. 方法　function</h3><p>方法没有重载,如果是同名,不管参数个数是不是相同,后面定义的方法都会覆盖前面的方法<br>每个方法都包含两个属性:<code>length</code>(参数个数)和<code>protoType</code>(原型链)<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(a,b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span><span class=\"params\">(a)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>)    <span class=\"comment\">//1</span></span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>)  <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure></p>\n<p>你可以不按正常顺序执行方法,因为在执行的时候 function都会被提前<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'这是一个方法'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但如果是立即执行的函数则不行</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">  function test()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n<p>方法有两个特殊的内部属性和两个非继承来的方法 <code>call()</code>、<code>apply()</code>,以及其他方法 <code>toString()、valueOf()</code><br><code>arguments</code>和<code>this</code><br><code>arguments</code>是类数组,保存着参数。它有<code>arguments.callee()</code>方法<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"built_in\">factorial</span>(<span class=\"built_in\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">num</span>&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">return</span> <span class=\"built_in\">num</span> * arguments.callee(<span class=\"built_in\">num</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">factorial</span>(<span class=\"number\">5</span>); // <span class=\"number\">5</span>! <span class=\"number\">1</span>*<span class=\"number\">2</span>*<span class=\"number\">3</span>*<span class=\"number\">4</span>*<span class=\"number\">5</span></span><br></pre></td></tr></table></figure></p>\n<p><code>this</code>在javascript中用法比较特殊,它指向它的调用者</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">color</span>=<span class=\"string\">'green'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"built_in\">var</span> o = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">color</span>=<span class=\"string\">'pink'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o.sayColor(); <span class=\"comment\">//pink</span></span><br><span class=\"line\">sayColor(); <span class=\"comment\">//green</span></span><br></pre></td></tr></table></figure>\n<p><code>protoType</code> 原型链    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call 参数1:运行函数的作用域 参数2 agruments或者Array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,[num1,num2])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// apply 参数1：运行函数的作用域 其他参数:就是把apply中的数组拆开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>,num1,num2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>encodeURIComponent()</code> //encode字符串<br><code>decodeURICopmonent()</code> //decode字符串<br><code>eval(express)</code> //解析字符串表达式<br><code>eval(&quot;console.log(&#39;我是被解析的表达式&#39;)&quot;)</code>   </p>\n<h3 id=\"6-Math\"><a href=\"#6-Math\" class=\"headerlink\" title=\"6. Math\"></a>6. <code>Math</code></h3><p><code>Math.E</code> //e<br><code>Math.LN10</code> //10的自然对数<br><code>Math.LOG10E</code> //以10为底e的对数<br><code>Math.PI</code>  //PI<br><code>Math.SQRT2</code> //2的平方根<br><code>Math.SQRT1_2</code>  // 1/2的平方根   </p>\n<p>方法：<br><code>Math.min(Array)</code><br><code>Math.max(Array)</code><br><code>Math.ceil(parm)</code> //向上取整<br><code>Math.floor(parm)</code> //向下取整<br><code>Math.round(parm)</code> //标准的四舍五入<br><code>Math.random()</code>  // 0-1之间的数<br><code>Math.abs(parm)</code> //绝对值</p>\n<h2 id=\"八、面向对象的编程方法\"><a href=\"#八、面向对象的编程方法\" class=\"headerlink\" title=\"八、面向对象的编程方法\"></a>八、面向对象的编程方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name:<span class=\"string\">'xiaomo'</span>,</span><br><span class=\"line\">  age:<span class=\"number\">25</span>，</span><br><span class=\"line\">  sayHello:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工厂模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    o.name = name;</span><br><span class=\"line\">    o.age= age;</span><br><span class=\"line\">    o.job =job;</span><br><span class=\"line\">    o.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = createPerson(<span class=\"string\">'xiaomo'</span>,<span class=\"number\">25</span>,<span class=\"string\">'programer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = createPerson(<span class=\"string\">'xiaoming'</span>,<span class=\"number\">20</span>,<span class=\"string\">'it'</span>);</span><br></pre></td></tr></table></figure>\n<p>构造函数(不用显式的创建对象，不用返回值，直接把属性赋给this)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name,age,job</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.job = job;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaomo'</span>,<span class=\"number\">25</span>,<span class=\"string\">'programer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">'xiaoming'</span>,<span class=\"number\">20</span>,<span class=\"string\">'it'</span>);</span><br></pre></td></tr></table></figure>\n<p>判断类型 <code>instanceof</code>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">person1 <span class=\"keyword\">instanceof</span> Person <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>原型模式    </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//实际上隐式的创建一个构造函数constructor</span></span><br><span class=\"line\">Person.prototype.name=<span class=\"string\">'xiaomo'</span>;</span><br><span class=\"line\">Person.prototype.age=<span class=\"number\">25</span>;</span><br><span class=\"line\">Person.prototype.job=<span class=\"string\">'programmer'</span>;</span><br><span class=\"line\">Person.prototype.sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当前也可以这样</span></span><br><span class=\"line\">Person.prototype=&#123;</span><br><span class=\"line\">  name=<span class=\"string\">'xiaomo'</span>;</span><br><span class=\"line\">  age=<span class=\"number\">25</span>;</span><br><span class=\"line\">  job=<span class=\"string\">'programmer'</span>;</span><br><span class=\"line\">  sayName=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person.prototype.isPrototypeOf(person1); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(person1.name); <span class=\"comment\">//xiaomo</span></span><br><span class=\"line\">person1.hasOwnProperty(<span class=\"string\">'name'</span>) <span class=\"comment\">//false 存在于protoType中，不存在于实例中</span></span><br><span class=\"line\"><span class=\"string\">'name'</span> <span class=\"keyword\">in</span> person1 <span class=\"comment\">//true  虽然实例中没有,但是它的原型链有,所以返回true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person1) <span class=\"comment\">//会枚举出实例中所有的属性</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、定时器和延迟执行\"><a href=\"#九、定时器和延迟执行\" class=\"headerlink\" title=\"九、定时器和延迟执行\"></a>九、定时器和延迟执行</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//延迟一秒执行fn函数，只执行一次</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeoutId = setTimeout(fn,timeout)</span><br><span class=\"line\">  <span class=\"comment\">//清除间歇执行函数</span></span><br><span class=\"line\">  clearTimeout(timeoutId);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//定时器，每秒执行fn函数，直到清除定时器</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timeout = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'定时器'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> intervalId = setInterval(fn,timout)</span><br><span class=\"line\">  <span class=\"comment\">//清除定时器</span></span><br><span class=\"line\">  clearInterval(itervalId);</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、BOM-浏览器相关\"><a href=\"#十、BOM-浏览器相关\" class=\"headerlink\" title=\"十、BOM(浏览器相关)\"></a>十、BOM(浏览器相关)</h2><h3 id=\"1-系统对话框\"><a href=\"#1-系统对话框\" class=\"headerlink\" title=\"1. 系统对话框\"></a>1. 系统对话框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(); <span class=\"comment\">//弹出框</span></span><br><span class=\"line\"></span><br><span class=\"line\">confirm();<span class=\"comment\">//确认框</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(confirm(<span class=\"string\">'are you sure?'</span>))&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'sure'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am not sure!'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">prompt();<span class=\"comment\">//交互框</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = promot(<span class=\"string\">\"what's up?\"</span>，<span class=\"string\">'默认值'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(result!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">  alert(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-location对象\"><a href=\"#2-location对象\" class=\"headerlink\" title=\"2. location对象\"></a>2. location对象</h3><p>参数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location<span class=\"selector-class\">.hash</span> <span class=\"comment\">//#contents url的hash值</span></span><br><span class=\"line\">location<span class=\"selector-class\">.host</span> <span class=\"comment\">// ip</span></span><br><span class=\"line\">location<span class=\"selector-class\">.hostname</span> <span class=\"comment\">//域名</span></span><br><span class=\"line\">location<span class=\"selector-class\">.href</span> <span class=\"comment\">//http域名</span></span><br><span class=\"line\">location<span class=\"selector-class\">.pathname</span> <span class=\"comment\">//url的目录</span></span><br><span class=\"line\">location<span class=\"selector-class\">.port</span> <span class=\"comment\">//8080</span></span><br><span class=\"line\">location<span class=\"selector-class\">.protocool</span> <span class=\"comment\">//协议</span></span><br><span class=\"line\">location<span class=\"selector-class\">.search</span> <span class=\"comment\">//?q=search</span></span><br><span class=\"line\">location.reload() <span class=\"comment\">//可能从缓存加载</span></span><br><span class=\"line\">location.reload(true) <span class=\"comment\">//重新加载</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-navigator对象\"><a href=\"#3-navigator对象\" class=\"headerlink\" title=\"3. navigator对象\"></a>3. navigator对象</h3><p> 检测浏览器属性    </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.appCodeName <span class=\"comment\">//浏览器的名字</span></span><br><span class=\"line\">navigator.appName <span class=\"comment\">//完整的浏览器名称</span></span><br><span class=\"line\">navigator.appVersion <span class=\"comment\">//浏览器的版本</span></span><br><span class=\"line\">navigator.cookieEnabled <span class=\"comment\">//cookie是否启用</span></span><br><span class=\"line\">navigator.javaEnabled() <span class=\"comment\">//java是否启用</span></span><br><span class=\"line\">navigator.language <span class=\"comment\">//主语言 zh-CH</span></span><br><span class=\"line\">navigator.languages <span class=\"comment\">//支持的语言</span></span><br><span class=\"line\">navigator.onLine <span class=\"comment\">//浏览器是否连接到了internet</span></span><br><span class=\"line\">navigator.platofrm <span class=\"comment\">//浏览器的平台 \"Win32\"</span></span><br><span class=\"line\">navigator.plugins <span class=\"comment\">//返回浏览器安装的插件的数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span><span class=\"params\">(name)</span></span>&#123;</span><br><span class=\"line\">  name  = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i&lt;navigator.plugins.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &gt;-1表示找到了</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isTrue = navigator.plugins[i].name.toLowerCase().indexOf(name)&gt;<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isTrue)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-history对象\"><a href=\"#4-history对象\" class=\"headerlink\" title=\"4. history对象\"></a>4. history对象</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"number\">-1</span>);<span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"></span><br><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"number\">1</span>);<span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.forward();</span><br><span class=\"line\"></span><br><span class=\"line\">history.<span class=\"keyword\">go</span>(<span class=\"string\">'xiaomo.info'</span>)<span class=\"comment\">//跳转到最近访问过的该页面</span></span><br><span class=\"line\">history.length==<span class=\"number\">0</span> <span class=\"comment\">//表示这是用户打开浏览器的第一个页面</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、表单\"><a href=\"#十一、表单\" class=\"headerlink\" title=\"十一、表单\"></a>十一、表单</h2><h3 id=\"1-表单属性\"><a href=\"#1-表单属性\" class=\"headerlink\" title=\"1. 表单属性\"></a>1. 表单属性</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acceptCharset 服务器能够处理的字符集</span><br><span class=\"line\">action 接受请求的url</span><br><span class=\"line\">elements 表单所有控件的集合</span><br><span class=\"line\">enctype 请求的编码类型</span><br><span class=\"line\">length 表单中控件的数量</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">method</span> <span class=\"title\">get</span>/<span class=\"title\">post</span></span><br><span class=\"line\"><span class=\"title\">name</span> 表单的名字</span><br><span class=\"line\"><span class=\"title\">reset</span><span class=\"params\">()</span> 重置</span><br><span class=\"line\"><span class=\"title\">submit</span><span class=\"params\">()</span> 提交</span><br><span class=\"line\"><span class=\"title\">target</span></span></span><br></pre></td></tr></table></figure>\n<p><code>document.forms</code> 可以取到表单的所有控件    </p>\n<h3 id=\"2-控件\"><a href=\"#2-控件\" class=\"headerlink\" title=\"2. 控件\"></a>2. 控件</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disabled 当前字段是否禁用</span><br><span class=\"line\"><span class=\"keyword\">form</span> 指向当前字段所属表单的指针:只读</span><br><span class=\"line\"><span class=\"keyword\">name</span> 当前字段的名字</span><br><span class=\"line\">readOnly 当前字段只读</span><br><span class=\"line\">tabIndex tab切换的序号</span><br><span class=\"line\"><span class=\"keyword\">type</span> 当前字段的类型</span><br><span class=\"line\"><span class=\"keyword\">value</span> 当前字段提交给服务器的值</span><br></pre></td></tr></table></figure>\n<p>修改控件的值</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> input = document.getElementById(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">name.<span class=\"keyword\">value</span>=<span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">name.focus(); <span class=\"comment\">//把焦点设置到当前字段</span></span><br><span class=\"line\"><span class=\"comment\">//在控件中加入 autofocus=\"focus\" 是一样的效果</span></span><br></pre></td></tr></table></figure>\n<p>选择文本<br><code>element.select()</code>     </p>\n<p>取得选中的文本<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alertText</span>(<span class=\"params\">username</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> username = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'username'</span>);</span><br><span class=\"line\">    alert(getSelectText(username));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSelectText</span>(<span class=\"params\">textbox</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> textbox.value.substring(textbox.selectionStart,textbox.selectionEnd);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"input\"</span> id=<span class=\"string\">\"username\"</span> value=<span class=\"string\">\"我是测试文本，看一下能不能被选中\"</span>&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"确定\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"alertText()\"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-剪贴板事件\"><a href=\"#3-剪贴板事件\" class=\"headerlink\" title=\"3. 剪贴板事件\"></a>3. 剪贴板事件</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforecopy</span><br><span class=\"line\">copy</span><br><span class=\"line\">cut</span><br><span class=\"line\">beforepaste</span><br><span class=\"line\">paste</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//写一个公用方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  getClipboardText:function(<span class=\"keyword\">event</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> clipboardData  = (<span class=\"keyword\">event</span>.clipboardData || window.clipboardData);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clipboardData.getData(<span class=\"string\">'text'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setClipboardText:function(<span class=\"keyword\">event</span>,<span class=\"keyword\">value</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">event</span>.clipboardData)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">event</span>.clipboardData.setData(<span class=\"string\">\"text/plain\"</span>,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125; <span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> (<span class=\"params\">window.clipboardData</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> window.clipboardData.setData(<span class=\"string\">\"txt\"</span>,<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EventUtil.addHander(txtbox,<span class=\"string\">\"paste\"</span>,function(<span class=\"keyword\">event</span>))&#123;</span><br><span class=\"line\">  <span class=\"keyword\">event</span>  = EventUtil.getEvent(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> text = EventUtil.getClipboardText(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!/^\\d*$/.test(text))&#123;</span><br><span class=\"line\">    EventUtil.preventDefault(<span class=\"keyword\">event</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.cnblogs.com/hykun/p/EventUtil.html\">EventUtil</a></p>\n<p>自动切换焦点</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"name\">function</span>()&#123;</span><br><span class=\"line\">  function tabForward(<span class=\"name\">event</span>)&#123;</span><br><span class=\"line\">    event = EventUtil.getEvent(<span class=\"name\">event</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    var target = EventUtil.getTarget(<span class=\"name\">event</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    if(<span class=\"name\">target.value.length</span> = target.maxLength)&#123;</span><br><span class=\"line\">      var form = target.form<span class=\"comment\">;</span></span><br><span class=\"line\">      for( var i =0<span class=\"comment\">; len = form.elements.length;i&lt;len;i++)&#123;</span></span><br><span class=\"line\">        if(<span class=\"name\">form.elements</span>[<span class=\"name\">i</span>]==target)&#123;</span><br><span class=\"line\">          if(<span class=\"name\">form.elements</span>[<span class=\"name\">i+1</span>])&#123;</span><br><span class=\"line\">            form.elements[<span class=\"name\">i+1</span>].focus()<span class=\"comment\">;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          return<span class=\"comment\">;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var text1 = document.getElementById(<span class=\"symbol\">'text1</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  var text2 = document.getElementById(<span class=\"symbol\">'text2</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  var text3 = document.getElementById(<span class=\"symbol\">'text3</span>')<span class=\"comment\">;</span></span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text1</span>,<span class=\"symbol\">'keyup</span>',tabForward)<span class=\"comment\">;</span></span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text2</span>,<span class=\"symbol\">'keyup</span>',tabForward</span><br><span class=\"line\">  EventUtil.addHander(<span class=\"name\">text3</span>,<span class=\"symbol\">'keyup</span>',tabForward</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-下拉框-select\"><a href=\"#4-下拉框-select\" class=\"headerlink\" title=\"4. 下拉框 select\"></a>4. 下拉框 select</h3><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(newOption,relOption) 插入一个<span class=\"keyword\">option</span></span><br><span class=\"line\"><span class=\"comment\">//最佳做法(在列表最后插入一个option)</span></span><br><span class=\"line\">var newOption = new <span class=\"keyword\">Option</span>(<span class=\"string\">\"text\"</span>,<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">selectBox.add(newOption,undefined);</span><br><span class=\"line\"></span><br><span class=\"line\">multiple 是否允许多选</span><br><span class=\"line\"><span class=\"keyword\">options</span> 控件中所有<span class=\"keyword\">options</span>的HTMLCollection</span><br><span class=\"line\">remove(index) 移除指定位置的选项</span><br><span class=\"line\"><span class=\"comment\">//移除指定的选项(这里移除的是第一项)</span></span><br><span class=\"line\">var index = <span class=\"number\">0</span></span><br><span class=\"line\">selectBox.remove(selectBox.<span class=\"keyword\">options</span>[index])</span><br><span class=\"line\">selectedIndex 基于<span class=\"number\">0</span>的选中项的索引,没有选中项<span class=\"number\">-1</span></span><br><span class=\"line\">size 选择框中可见的行数</span><br><span class=\"line\">text 选中项的文本内容</span><br><span class=\"line\">value 选项的值</span><br><span class=\"line\"><span class=\"comment\">//移动一个选项到特定位置(将第2个选项移动到最后一个选项)</span></span><br><span class=\"line\">var optionToMove = selectBox.<span class=\"keyword\">options</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">selectBox.insertBefore(optionToMove,selectBox.<span class=\"keyword\">options</span>[optionToMove.index<span class=\"number\">-1</span>])</span><br><span class=\"line\">/添加一个选项(把当前列表中的第一个选项添加到当前列表的最后)</span><br><span class=\"line\">selectBox.appendChind(selectBox.<span class=\"keyword\">options</span>[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-表单序列化\"><a href=\"#5-表单序列化\" class=\"headerlink\" title=\"5. 表单序列化\"></a>5. 表单序列化</h3><p>原则：<br>对表单字段的名字和值进行url编码,使用&amp;分割<br>不发送禁用的表单字段<br>只发送勾选的单选按钮和复选框<br>不发送type为reset和button的按钮<br>多选框中的每选中的值单独一个条目<br>submit的时候,本按钮也会被提交<br>select发送的时候如果有value就发value的值 没有就发text内容  </p>\n<p><code>form.serialize()</code>  </p>\n<h3 id=\"6-富文本编辑器\"><a href=\"#6-富文本编辑器\" class=\"headerlink\" title=\"6. 富文本编辑器\"></a>6. 富文本编辑器</h3><p>只要加上<code>contenteditable</code>就可以让div可以编辑<br><code>&lt;div id=&quot;richedit&quot; contenteditable&gt;&lt;/div&gt;</code><br>也可以用js控制</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var richedit = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'richedit'</span>);</span><br><span class=\"line\">richedit.contenteditable=<span class=\"string\">\"true\"</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span> <span class=\"literal\">true</span> <span class=\"literal\">false</span> inherit</span><br><span class=\"line\"><span class=\"built_in\">document</span>.exexCommand(命令,<span class=\"literal\">false</span>,值);</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"built_in\">document</span>.exexCommand(<span class=\"string\">'bold'</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、canvas\"><a href=\"#十二、canvas\" class=\"headerlink\" title=\"十二、canvas\"></a>十二、canvas</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个canvas   </span></span><br><span class=\"line\">&lt;canvas id=<span class=\"string\">\"drawing\"</span> <span class=\"built_in\">width</span>=<span class=\"string\">\"200\"</span> <span class=\"built_in\">height</span>=<span class=\"string\">\"200\"</span>&gt;</span><br><span class=\"line\">    您的浏览器不支持canvas</span><br><span class=\"line\">&lt;/canvas&gt;</span><br><span class=\"line\"><span class=\"comment\">//获取canvas</span></span><br><span class=\"line\">document.getElementById(<span class=\"string\">'drawing'</span>);</span><br><span class=\"line\"><span class=\"built_in\">if</span>(drawing.getContext)&#123;</span><br><span class=\"line\">  var context = drawing.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">  context.fillReact(<span class=\"number\">30</span>,<span class=\"number\">30</span>,<span class=\"number\">30</span>,<span class=\"number\">30</span>); <span class=\"comment\">//画了一个正方形</span></span><br><span class=\"line\">  context.fillStyle=<span class=\"string\">'#fff'</span>; <span class=\"comment\">//填充</span></span><br><span class=\"line\">  context.strokeStyle=<span class=\"string\">'red'</span>; <span class=\"comment\">//描边</span></span><br><span class=\"line\">  <span class=\"comment\">// todo</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、html5脚本编程\"><a href=\"#十三、html5脚本编程\" class=\"headerlink\" title=\"十三、html5脚本编程\"></a>十三、html5脚本编程</h2><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跨文档消息传送</span></span><br><span class=\"line\"><span class=\"selector-tag\">EventUtil</span><span class=\"selector-class\">.addHander</span>(window,<span class=\"string\">\"message\"</span>,function(event)&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">if</span>(event.origin=<span class=\"string\">\"http://www.wrox.com\"</span>)&#123;<span class=\"comment\">//发送消息的文档所在的域</span></span><br><span class=\"line\">      <span class=\"comment\">//接受参数</span></span><br><span class=\"line\">      processMessage(event<span class=\"selector-class\">.data</span>);</span><br><span class=\"line\">      <span class=\"comment\">//可选:向窗口来源发送回执</span></span><br><span class=\"line\">      event<span class=\"selector-class\">.source</span><span class=\"selector-class\">.postMessage</span>(<span class=\"string\">\"Receiived\"</span>,<span class=\"string\">\"http://xiaomo.info\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、本地存储\"><a href=\"#十四、本地存储\" class=\"headerlink\" title=\"十四、本地存储\"></a>十四、本地存储</h2><h3 id=\"1-cookie\"><a href=\"#1-cookie\" class=\"headerlink\" title=\"1. cookie\"></a>1. cookie</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CookieUtil = &#123;</span><br><span class=\"line\"><span class=\"comment\">//根据key读取cookie</span></span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">//注意对键编码</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> cookieName = <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">\"=\"</span>,</span><br><span class=\"line\">            cookieStart = <span class=\"built_in\">document</span>.cookie.indexOf(cookieName),</span><br><span class=\"line\">            cookieValue = <span class=\"literal\">null</span>,</span><br><span class=\"line\">            cookieEnd;</span><br><span class=\"line\">        <span class=\"comment\">//找到cookie键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookieStart &gt; <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">             <span class=\"comment\">//键后面第一个分号位置</span></span><br><span class=\"line\">            cookieEnd = <span class=\"built_in\">document</span>.cookie.indexOf(<span class=\"string\">\";\"</span>, cookieStart);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cookieEnd == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                cookieEnd = <span class=\"built_in\">document</span>.cookie.length;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//cookie值解码</span></span><br><span class=\"line\">            cookieValue = <span class=\"built_in\">decodeURIComponent</span>(<span class=\"built_in\">document</span>.cookie.substring(cookieStart + cookieName.length, cookieEnd));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cookieValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//设置cookie</span></span><br><span class=\"line\">    set: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, value, expires, path, domain, secure</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cookieText = <span class=\"built_in\">encodeURIComponent</span>(name) + <span class=\"string\">\"=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(value);</span><br><span class=\"line\">        <span class=\"comment\">//失效时间，GMT时间格式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (expires <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; expires=\"</span> + expires.toGMTString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; path=\"</span> + path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (domain) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; domain=\"</span> + domain;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (secure) &#123;</span><br><span class=\"line\">            cookieText += <span class=\"string\">\"; secure\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.cookie = cookieText;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//删除cookie，保持相同的键、域、路径、安全选项，然后设置失效时间即可</span></span><br><span class=\"line\">    unset: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, path, domain, secure</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.set(name, <span class=\"string\">\"\"</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">0</span>), path, domain, secure);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用util方法   </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CookieUtil<span class=\"selector-class\">.set</span>(<span class=\"string\">'name'</span>,<span class=\"string\">'xiaomo'</span>);</span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.set</span>(<span class=\"string\">'age'</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(CookieUtil.get(<span class=\"string\">'name'</span>));</span><br><span class=\"line\">console<span class=\"selector-class\">.log</span>(CookieUtil.get(<span class=\"string\">'age'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.unset</span>(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">CookieUtil<span class=\"selector-class\">.unset</span>(<span class=\"string\">'age'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-localStorage\"><a href=\"#2-localStorage\" class=\"headerlink\" title=\"2. localStorage\"></a>2. localStorage</h3><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.setItem(<span class=\"built_in\">key</span>,value);<span class=\"comment\">//存储数据</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.getItem(<span class=\"built_in\">key</span>);<span class=\"comment\">//读取数据</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.removeItem(<span class=\"built_in\">key</span>);<span class=\"comment\">//删除数据项</span></span><br><span class=\"line\"><span class=\"built_in\">Window</span>.localStorage.<span class=\"keyword\">clear</span>();<span class=\"comment\">//删除所有数据</span></span><br></pre></td></tr></table></figure>"},{"title":"制作透明背景 PNG 图片和 GIF 动图的几种方法","date":"2015-11-16T14:28:00.000Z","_content":"\n　　偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## PowerPoint → PNG\n\n> 微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。\n\n1. 打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。\n\n1. 依次点击`格式`选项卡 - `颜色`菜单 - `设置透明色` - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。\n\n- `删除背景`功能类似，不过感觉没上面的方式快捷。\n\n![PPT-PNG](http://moxfive.xyz/resources/PPT-PNG.jpg)\n\n## PhotoShop → PNG\n\n> 如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。\n\n1. 用 PS 打开待处理的静态图片，双击图层框右侧`小锁`标志解锁图层;\n\n1. 选用`魔棒工具`，调整`容差`为10左右(容差越大，选取的相似颜色越多)，勾选`消除锯齿`;\n\n1. 点选背景，按键盘`del`键删除之(按住`shitf`键可以多选)，之后将图片另存为 PNG 格式即可。\n\n![PS-PNG](http://moxfive.xyz/resources/PS-PNG.jpg)\n\n## PhotoShop → GIF\n\n> PhotoShop 用来透明化 GIF 动图背景也是很方便的。\n\n1. 用 PS 打开待处理的 GIF 动图，并确保`时间轴`窗口已显示(`窗口`菜单 - 勾选`时间轴`)；\n\n1. 全选`时间轴`中的图片(可利用`shift`键全选)，右键图片，勾选`自动`(跳过此步生产的动图会有重影)；\n\n1. 点击`文件`菜单 - `存储为 Web 所用格式...`；\n\n1. 在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击`存储...`保存 GIF 到目标位置即可。\n\n![PS-GIF-1](http://moxfive.xyz/resources/PS-GIF-1.jpg)\n![PS-GIF-2](http://moxfive.xyz/resources/PS-GIF-2.jpg)\n\n## 一些成品\n展示一些已经透明化背景的图片。\n\n![Mihawk](http://moxfive.xyz/resources/Mihawk.gif)![food-boy](http://moxfive.xyz/resources/food-boy.gif)![bilibili](http://moxfive.xyz/resources/bilibili.gif)\n\n## 拓展阅读\n1. ***移动端图片格式调研*** by **ibireme** on <code>2015/11/2</code>: <http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/>\n1. ***解决GIF动画图去背景后出现的重影*** by **有烟飘过** on <code>2010/5/10</code>: <http://tieba.baidu.com/p/2106457600>\n","source":"_posts/2016-05-21.png_gif_transparency.md","raw":"---\ntitle: 制作透明背景 PNG 图片和 GIF 动图的几种方法\ndate: 2015-11-16 22:28:00\ncategories:\n- 触类旁通\ntags:\n- PhotoShop\npermalink: png_gif_transparency\n---\n\n　　偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## PowerPoint → PNG\n\n> 微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。\n\n1. 打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。\n\n1. 依次点击`格式`选项卡 - `颜色`菜单 - `设置透明色` - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。\n\n- `删除背景`功能类似，不过感觉没上面的方式快捷。\n\n![PPT-PNG](http://moxfive.xyz/resources/PPT-PNG.jpg)\n\n## PhotoShop → PNG\n\n> 如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。\n\n1. 用 PS 打开待处理的静态图片，双击图层框右侧`小锁`标志解锁图层;\n\n1. 选用`魔棒工具`，调整`容差`为10左右(容差越大，选取的相似颜色越多)，勾选`消除锯齿`;\n\n1. 点选背景，按键盘`del`键删除之(按住`shitf`键可以多选)，之后将图片另存为 PNG 格式即可。\n\n![PS-PNG](http://moxfive.xyz/resources/PS-PNG.jpg)\n\n## PhotoShop → GIF\n\n> PhotoShop 用来透明化 GIF 动图背景也是很方便的。\n\n1. 用 PS 打开待处理的 GIF 动图，并确保`时间轴`窗口已显示(`窗口`菜单 - 勾选`时间轴`)；\n\n1. 全选`时间轴`中的图片(可利用`shift`键全选)，右键图片，勾选`自动`(跳过此步生产的动图会有重影)；\n\n1. 点击`文件`菜单 - `存储为 Web 所用格式...`；\n\n1. 在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击`存储...`保存 GIF 到目标位置即可。\n\n![PS-GIF-1](http://moxfive.xyz/resources/PS-GIF-1.jpg)\n![PS-GIF-2](http://moxfive.xyz/resources/PS-GIF-2.jpg)\n\n## 一些成品\n展示一些已经透明化背景的图片。\n\n![Mihawk](http://moxfive.xyz/resources/Mihawk.gif)![food-boy](http://moxfive.xyz/resources/food-boy.gif)![bilibili](http://moxfive.xyz/resources/bilibili.gif)\n\n## 拓展阅读\n1. ***移动端图片格式调研*** by **ibireme** on <code>2015/11/2</code>: <http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/>\n1. ***解决GIF动画图去背景后出现的重影*** by **有烟飘过** on <code>2010/5/10</code>: <http://tieba.baidu.com/p/2106457600>\n","slug":"png_gif_transparency","published":1,"updated":"2016-06-28T02:50:18.551Z","_id":"cipjfs5uu001o4wmcxpyslymr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"PowerPoint-→-PNG\"><a href=\"#PowerPoint-→-PNG\" class=\"headerlink\" title=\"PowerPoint → PNG\"></a>PowerPoint → PNG</h2><blockquote>\n<p>微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。</p>\n</blockquote>\n<ol>\n<li><p>打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。</p>\n</li>\n<li><p>依次点击<code>格式</code>选项卡 - <code>颜色</code>菜单 - <code>设置透明色</code> - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。</p>\n</li>\n</ol>\n<ul>\n<li><code>删除背景</code>功能类似，不过感觉没上面的方式快捷。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/PPT-PNG.jpg\" alt=\"PPT-PNG\"></p>\n<h2 id=\"PhotoShop-→-PNG\"><a href=\"#PhotoShop-→-PNG\" class=\"headerlink\" title=\"PhotoShop → PNG\"></a>PhotoShop → PNG</h2><blockquote>\n<p>如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。</p>\n</blockquote>\n<ol>\n<li><p>用 PS 打开待处理的静态图片，双击图层框右侧<code>小锁</code>标志解锁图层;</p>\n</li>\n<li><p>选用<code>魔棒工具</code>，调整<code>容差</code>为10左右(容差越大，选取的相似颜色越多)，勾选<code>消除锯齿</code>;</p>\n</li>\n<li><p>点选背景，按键盘<code>del</code>键删除之(按住<code>shitf</code>键可以多选)，之后将图片另存为 PNG 格式即可。</p>\n</li>\n</ol>\n<p><img src=\"http://moxfive.xyz/resources/PS-PNG.jpg\" alt=\"PS-PNG\"></p>\n<h2 id=\"PhotoShop-→-GIF\"><a href=\"#PhotoShop-→-GIF\" class=\"headerlink\" title=\"PhotoShop → GIF\"></a>PhotoShop → GIF</h2><blockquote>\n<p>PhotoShop 用来透明化 GIF 动图背景也是很方便的。</p>\n</blockquote>\n<ol>\n<li><p>用 PS 打开待处理的 GIF 动图，并确保<code>时间轴</code>窗口已显示(<code>窗口</code>菜单 - 勾选<code>时间轴</code>)；</p>\n</li>\n<li><p>全选<code>时间轴</code>中的图片(可利用<code>shift</code>键全选)，右键图片，勾选<code>自动</code>(跳过此步生产的动图会有重影)；</p>\n</li>\n<li><p>点击<code>文件</code>菜单 - <code>存储为 Web 所用格式...</code>；</p>\n</li>\n<li><p>在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击<code>存储...</code>保存 GIF 到目标位置即可。</p>\n</li>\n</ol>\n<p><img src=\"http://moxfive.xyz/resources/PS-GIF-1.jpg\" alt=\"PS-GIF-1\"><br><img src=\"http://moxfive.xyz/resources/PS-GIF-2.jpg\" alt=\"PS-GIF-2\"></p>\n<h2 id=\"一些成品\"><a href=\"#一些成品\" class=\"headerlink\" title=\"一些成品\"></a>一些成品</h2><p>展示一些已经透明化背景的图片。</p>\n<p><img src=\"http://moxfive.xyz/resources/Mihawk.gif\" alt=\"Mihawk\"><img src=\"http://moxfive.xyz/resources/food-boy.gif\" alt=\"food-boy\"><img src=\"http://moxfive.xyz/resources/bilibili.gif\" alt=\"bilibili\"></p>\n<h2 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h2><ol>\n<li><strong><em>移动端图片格式调研</em></strong> by <strong>ibireme</strong> on <code>2015/11/2</code>: <a href=\"http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/\" target=\"_blank\" rel=\"external\">http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/</a></li>\n<li><strong><em>解决GIF动画图去背景后出现的重影</em></strong> by <strong>有烟飘过</strong> on <code>2010/5/10</code>: <a href=\"http://tieba.baidu.com/p/2106457600\" target=\"_blank\" rel=\"external\">http://tieba.baidu.com/p/2106457600</a></li>\n</ol>\n","excerpt":"<p>　　偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"PowerPoint-→-PNG\"><a href=\"#PowerPoint-→-PNG\" class=\"headerlink\" title=\"PowerPoint → PNG\"></a>PowerPoint → PNG</h2><blockquote>\n<p>微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。</p>\n</blockquote>\n<ol>\n<li><p>打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。</p>\n</li>\n<li><p>依次点击<code>格式</code>选项卡 - <code>颜色</code>菜单 - <code>设置透明色</code> - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。</p>\n</li>\n</ol>\n<ul>\n<li><code>删除背景</code>功能类似，不过感觉没上面的方式快捷。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/PPT-PNG.jpg\" alt=\"PPT-PNG\"></p>\n<h2 id=\"PhotoShop-→-PNG\"><a href=\"#PhotoShop-→-PNG\" class=\"headerlink\" title=\"PhotoShop → PNG\"></a>PhotoShop → PNG</h2><blockquote>\n<p>如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。</p>\n</blockquote>\n<ol>\n<li><p>用 PS 打开待处理的静态图片，双击图层框右侧<code>小锁</code>标志解锁图层;</p>\n</li>\n<li><p>选用<code>魔棒工具</code>，调整<code>容差</code>为10左右(容差越大，选取的相似颜色越多)，勾选<code>消除锯齿</code>;</p>\n</li>\n<li><p>点选背景，按键盘<code>del</code>键删除之(按住<code>shitf</code>键可以多选)，之后将图片另存为 PNG 格式即可。</p>\n</li>\n</ol>\n<p><img src=\"http://moxfive.xyz/resources/PS-PNG.jpg\" alt=\"PS-PNG\"></p>\n<h2 id=\"PhotoShop-→-GIF\"><a href=\"#PhotoShop-→-GIF\" class=\"headerlink\" title=\"PhotoShop → GIF\"></a>PhotoShop → GIF</h2><blockquote>\n<p>PhotoShop 用来透明化 GIF 动图背景也是很方便的。</p>\n</blockquote>\n<ol>\n<li><p>用 PS 打开待处理的 GIF 动图，并确保<code>时间轴</code>窗口已显示(<code>窗口</code>菜单 - 勾选<code>时间轴</code>)；</p>\n</li>\n<li><p>全选<code>时间轴</code>中的图片(可利用<code>shift</code>键全选)，右键图片，勾选<code>自动</code>(跳过此步生产的动图会有重影)；</p>\n</li>\n<li><p>点击<code>文件</code>菜单 - <code>存储为 Web 所用格式...</code>；</p>\n</li>\n<li><p>在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击<code>存储...</code>保存 GIF 到目标位置即可。</p>\n</li>\n</ol>\n<p><img src=\"http://moxfive.xyz/resources/PS-GIF-1.jpg\" alt=\"PS-GIF-1\"><br><img src=\"http://moxfive.xyz/resources/PS-GIF-2.jpg\" alt=\"PS-GIF-2\"></p>\n<h2 id=\"一些成品\"><a href=\"#一些成品\" class=\"headerlink\" title=\"一些成品\"></a>一些成品</h2><p>展示一些已经透明化背景的图片。</p>\n<p><img src=\"http://moxfive.xyz/resources/Mihawk.gif\" alt=\"Mihawk\"><img src=\"http://moxfive.xyz/resources/food-boy.gif\" alt=\"food-boy\"><img src=\"http://moxfive.xyz/resources/bilibili.gif\" alt=\"bilibili\"></p>\n<h2 id=\"拓展阅读\"><a href=\"#拓展阅读\" class=\"headerlink\" title=\"拓展阅读\"></a>拓展阅读</h2><ol>\n<li><strong><em>移动端图片格式调研</em></strong> by <strong>ibireme</strong> on <code>2015/11/2</code>: <a href=\"http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/\">http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/</a></li>\n<li><strong><em>解决GIF动画图去背景后出现的重影</em></strong> by <strong>有烟飘过</strong> on <code>2010/5/10</code>: <a href=\"http://tieba.baidu.com/p/2106457600\">http://tieba.baidu.com/p/2106457600</a></li>\n</ol>"},{"title":"Anki 自用卡片模板分享","date":"2015-11-23T12:34:38.000Z","_content":"\n<h2 id=\"intro\">前言</h2>[Anki](http://ankisrs.net/) 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 基础模板\n标题居中，用不同背景色区分答案类型，设置圆角等样式。\n![Anki-a1](http://moxfive.xyz//resources/Anki-a1.png)\n\n### 模板使用区域\n- 主要需要填写如图所示4个区域。\n![Anki-a2](http://moxfive.xyz//resources/Anki-a2.png)\n\n### 正面模板\n``` html\n<img src=\"{{logo}}\" class=\"logo\"/>\n<div style=\"font-size:2em\">{{Front}}</div>\n```\n\n### 样式\n``` css\n.card {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1em;\n\ttext-align:center;\n}\n.logo {\n\twidth: 9em;\n\tpadding: 2em 0 1em;\n}\n.English {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #ffe4f4;\n\tborder-radius: .3em;\n\tpadding: 1em;\n}\n.Chinese {\n\t font-family: 方正中雅宋_GBK;\n\t font-size: 1.5em;\n\t text-align: justify;\n\t background-color: #edffc4;\n\t border-radius: 1.2em .3em;\n\t padding: 1em;\n}\n```\n\n### 背面模板\n``` html\n{{FrontSide}}\n\n<hr id=answer>\n<div class= Chinese>{{Chinese}}</div>\n<p>\n<div class= English>{{English}}</div>\n```\n\n## 带页脚模板\n加了页脚，左下显示标签分类信息，右下链接到设定的网址。\n\n![Anki-b1](http://moxfive.xyz//resources/Anki-b1.png)\n\n### 模板使用区域\n- 主要需要填写如图所示5个区域。\n\n![Anki-b2](http://moxfive.xyz//resources/Anki-b2.png)\n\n### 正面模板\n``` html\n<div class= item_eng>{{Item_ENG}}</div>\n<p class= front>{{Front}}</p>\n<p class= title>{{Tags}}</p>\n<p class= author>M.ZH</p>\n```\n\n### 样式\n``` css\n.card {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1em;\n\ttext-align: center;\n}\n.Chinese {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #edffc4;\n\tborder-radius: 1.2em 0.3em;\n\tpadding : 0.5em;\n}\n.English {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #ffe4f4;\n\tborder-radius: .3em;\n\tpadding: .5em;\n}\n.front {\n\tfont-size: 1.8em;\n}\n.item_eng {\n\tpadding-top : 5%;\n\tcolor: orange;\n\tfont-size: 2em;\n }\n.tag {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1.1em;\n}\na {\n\tcolor: grey;\n}\n.title {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1em;\n}\n.author {\n\tdisplay: block;\n\tposition: fixed;\n\tright: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1em;\n}\n.link {\n\tdisplay: block;\n\tposition: fixed;\n\tright: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1.1em;\n\tfont-style: italic;\n}\n```\n\n### 背面模板\n``` html\n<div class= item_eng>{{Item_ENG}}</div>\n<p>\n<p class= front>{{Front}}</p>\n<hr id= answer>\n<div>{{image}}</div>\n<p class= Chinese>{{Chinese}}</p>\n<p>\n<p class= English>{{English}}</p>\n<a href=\"{{Link}}\"><p class=link>Reference Site</p></a>\n<p class= tag>{{Tags}}</p>\n```\n\n## 字体下载\n\n测试了不少字体，感觉 [方正中雅宋_GBK](http://www.daimg.com/download.php?open=2&id=12741&uhash=1eb7c629071a1341f83bc53b) 和这个软件最匹配。当然，大家可以自行修改`font-family`，换用喜欢的字体。\n","source":"_posts/2016-05-23.anki_templates.md","raw":"---\ntitle: Anki 自用卡片模板分享\ndate: 2015-11-23 20:34:38\ncategories:\n- 触类旁通\ntags:\n- html\n- css\npermalink: anki_templates\n---\n\n<h2 id=\"intro\">前言</h2>[Anki](http://ankisrs.net/) 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 基础模板\n标题居中，用不同背景色区分答案类型，设置圆角等样式。\n![Anki-a1](http://moxfive.xyz//resources/Anki-a1.png)\n\n### 模板使用区域\n- 主要需要填写如图所示4个区域。\n![Anki-a2](http://moxfive.xyz//resources/Anki-a2.png)\n\n### 正面模板\n``` html\n<img src=\"{{logo}}\" class=\"logo\"/>\n<div style=\"font-size:2em\">{{Front}}</div>\n```\n\n### 样式\n``` css\n.card {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1em;\n\ttext-align:center;\n}\n.logo {\n\twidth: 9em;\n\tpadding: 2em 0 1em;\n}\n.English {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #ffe4f4;\n\tborder-radius: .3em;\n\tpadding: 1em;\n}\n.Chinese {\n\t font-family: 方正中雅宋_GBK;\n\t font-size: 1.5em;\n\t text-align: justify;\n\t background-color: #edffc4;\n\t border-radius: 1.2em .3em;\n\t padding: 1em;\n}\n```\n\n### 背面模板\n``` html\n{{FrontSide}}\n\n<hr id=answer>\n<div class= Chinese>{{Chinese}}</div>\n<p>\n<div class= English>{{English}}</div>\n```\n\n## 带页脚模板\n加了页脚，左下显示标签分类信息，右下链接到设定的网址。\n\n![Anki-b1](http://moxfive.xyz//resources/Anki-b1.png)\n\n### 模板使用区域\n- 主要需要填写如图所示5个区域。\n\n![Anki-b2](http://moxfive.xyz//resources/Anki-b2.png)\n\n### 正面模板\n``` html\n<div class= item_eng>{{Item_ENG}}</div>\n<p class= front>{{Front}}</p>\n<p class= title>{{Tags}}</p>\n<p class= author>M.ZH</p>\n```\n\n### 样式\n``` css\n.card {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1em;\n\ttext-align: center;\n}\n.Chinese {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #edffc4;\n\tborder-radius: 1.2em 0.3em;\n\tpadding : 0.5em;\n}\n.English {\n\tfont-family: 方正中雅宋_GBK;\n\tfont-size: 1.5em;\n\ttext-align: justify;\n\tbackground-color: #ffe4f4;\n\tborder-radius: .3em;\n\tpadding: .5em;\n}\n.front {\n\tfont-size: 1.8em;\n}\n.item_eng {\n\tpadding-top : 5%;\n\tcolor: orange;\n\tfont-size: 2em;\n }\n.tag {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1.1em;\n}\na {\n\tcolor: grey;\n}\n.title {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1em;\n}\n.author {\n\tdisplay: block;\n\tposition: fixed;\n\tright: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1em;\n}\n.link {\n\tdisplay: block;\n\tposition: fixed;\n\tright: 3%;\n\tbottom: 0;\n\tcolor: gray;\n\tfont-size: 1.1em;\n\tfont-style: italic;\n}\n```\n\n### 背面模板\n``` html\n<div class= item_eng>{{Item_ENG}}</div>\n<p>\n<p class= front>{{Front}}</p>\n<hr id= answer>\n<div>{{image}}</div>\n<p class= Chinese>{{Chinese}}</p>\n<p>\n<p class= English>{{English}}</p>\n<a href=\"{{Link}}\"><p class=link>Reference Site</p></a>\n<p class= tag>{{Tags}}</p>\n```\n\n## 字体下载\n\n测试了不少字体，感觉 [方正中雅宋_GBK](http://www.daimg.com/download.php?open=2&id=12741&uhash=1eb7c629071a1341f83bc53b) 和这个软件最匹配。当然，大家可以自行修改`font-family`，换用喜欢的字体。\n","slug":"anki_templates","published":1,"updated":"2016-06-28T02:50:12.630Z","_id":"cipjfs5uy001s4wmctb008uzm","comments":1,"layout":"post","photos":[],"link":"","content":"<p></p><h2 id=\"intro\">前言</h2><a href=\"http://ankisrs.net/\" target=\"_blank\" rel=\"external\">Anki</a> 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。<p></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"基础模板\"><a href=\"#基础模板\" class=\"headerlink\" title=\"基础模板\"></a>基础模板</h2><p>标题居中，用不同背景色区分答案类型，设置圆角等样式。<br><img src=\"http://moxfive.xyz//resources/Anki-a1.png\" alt=\"Anki-a1\"></p>\n<h3 id=\"模板使用区域\"><a href=\"#模板使用区域\" class=\"headerlink\" title=\"模板使用区域\"></a>模板使用区域</h3><ul>\n<li>主要需要填写如图所示4个区域。<br><img src=\"http://moxfive.xyz//resources/Anki-a2.png\" alt=\"Anki-a2\"></li>\n</ul>\n<h3 id=\"正面模板\"><a href=\"#正面模板\" class=\"headerlink\" title=\"正面模板\"></a>正面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;logo&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:2em\"</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2em</span> <span class=\"number\">0</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.English</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffe4f4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.Chinese</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">     <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: <span class=\"number\">#edffc4</span>;</span><br><span class=\"line\">     <span class=\"attribute\">border-radius</span>: <span class=\"number\">1.2em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\">     <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"背面模板\"><a href=\"#背面模板\" class=\"headerlink\" title=\"背面模板\"></a>背面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;FrontSide&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">id</span>=<span class=\"string\">answer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"带页脚模板\"><a href=\"#带页脚模板\" class=\"headerlink\" title=\"带页脚模板\"></a>带页脚模板</h2><p>加了页脚，左下显示标签分类信息，右下链接到设定的网址。</p>\n<p><img src=\"http://moxfive.xyz//resources/Anki-b1.png\" alt=\"Anki-b1\"></p>\n<h3 id=\"模板使用区域-1\"><a href=\"#模板使用区域-1\" class=\"headerlink\" title=\"模板使用区域\"></a>模板使用区域</h3><ul>\n<li>主要需要填写如图所示5个区域。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz//resources/Anki-b2.png\" alt=\"Anki-b2\"></p>\n<h3 id=\"正面模板-1\"><a href=\"#正面模板-1\" class=\"headerlink\" title=\"正面模板\"></a>正面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">title</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">author</span>&gt;</span>M.ZH<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"样式-1\"><a href=\"#样式-1\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.Chinese</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#edffc4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1.2em</span> <span class=\"number\">0.3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding </span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.English</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffe4f4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.front</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.8em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item_eng</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top </span>: <span class=\"number\">5%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"背面模板-1\"><a href=\"#背面模板-1\" class=\"headerlink\" title=\"背面模板\"></a>背面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">id</span>= <span class=\"string\">answer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;image&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;Link&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">link</span>&gt;</span>Reference Site<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">tag</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字体下载\"><a href=\"#字体下载\" class=\"headerlink\" title=\"字体下载\"></a>字体下载</h2><p>测试了不少字体，感觉 <a href=\"http://www.daimg.com/download.php?open=2&amp;id=12741&amp;uhash=1eb7c629071a1341f83bc53b\" target=\"_blank\" rel=\"external\">方正中雅宋_GBK</a> 和这个软件最匹配。当然，大家可以自行修改<code>font-family</code>，换用喜欢的字体。</p>\n","excerpt":"<p><h2 id=\"intro\">前言</h2><a href=\"http://ankisrs.net/\">Anki</a> 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"基础模板\"><a href=\"#基础模板\" class=\"headerlink\" title=\"基础模板\"></a>基础模板</h2><p>标题居中，用不同背景色区分答案类型，设置圆角等样式。<br><img src=\"http://moxfive.xyz//resources/Anki-a1.png\" alt=\"Anki-a1\"></p>\n<h3 id=\"模板使用区域\"><a href=\"#模板使用区域\" class=\"headerlink\" title=\"模板使用区域\"></a>模板使用区域</h3><ul>\n<li>主要需要填写如图所示4个区域。<br><img src=\"http://moxfive.xyz//resources/Anki-a2.png\" alt=\"Anki-a2\"></li>\n</ul>\n<h3 id=\"正面模板\"><a href=\"#正面模板\" class=\"headerlink\" title=\"正面模板\"></a>正面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;logo&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"logo\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"font-size:2em\"</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2em</span> <span class=\"number\">0</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.English</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffe4f4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.Chinese</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">     <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">     <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">     <span class=\"attribute\">background-color</span>: <span class=\"number\">#edffc4</span>;</span><br><span class=\"line\">     <span class=\"attribute\">border-radius</span>: <span class=\"number\">1.2em</span> .<span class=\"number\">3em</span>;</span><br><span class=\"line\">     <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"背面模板\"><a href=\"#背面模板\" class=\"headerlink\" title=\"背面模板\"></a>背面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;FrontSide&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">id</span>=<span class=\"string\">answer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"带页脚模板\"><a href=\"#带页脚模板\" class=\"headerlink\" title=\"带页脚模板\"></a>带页脚模板</h2><p>加了页脚，左下显示标签分类信息，右下链接到设定的网址。</p>\n<p><img src=\"http://moxfive.xyz//resources/Anki-b1.png\" alt=\"Anki-b1\"></p>\n<h3 id=\"模板使用区域-1\"><a href=\"#模板使用区域-1\" class=\"headerlink\" title=\"模板使用区域\"></a>模板使用区域</h3><ul>\n<li>主要需要填写如图所示5个区域。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz//resources/Anki-b2.png\" alt=\"Anki-b2\"></p>\n<h3 id=\"正面模板-1\"><a href=\"#正面模板-1\" class=\"headerlink\" title=\"正面模板\"></a>正面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">title</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">author</span>&gt;</span>M.ZH<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"样式-1\"><a href=\"#样式-1\" class=\"headerlink\" title=\"样式\"></a>样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.Chinese</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#edffc4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">1.2em</span> <span class=\"number\">0.3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding </span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.English</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: 方正中雅宋_GBK;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: justify;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffe4f4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: .<span class=\"number\">3em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.front</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.8em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item_eng</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top </span>: <span class=\"number\">5%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.author</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.link</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">3%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: gray;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.1em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: italic;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"背面模板-1\"><a href=\"#背面模板-1\" class=\"headerlink\" title=\"背面模板\"></a>背面模板</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">item_eng</span>&gt;</span>&#123;&#123;Item_ENG&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">front</span>&gt;</span>&#123;&#123;Front&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> <span class=\"attr\">id</span>= <span class=\"string\">answer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;image&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">Chinese</span>&gt;</span>&#123;&#123;Chinese&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">English</span>&gt;</span>&#123;&#123;English&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123;Link&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">link</span>&gt;</span>Reference Site<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>= <span class=\"string\">tag</span>&gt;</span>&#123;&#123;Tags&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"字体下载\"><a href=\"#字体下载\" class=\"headerlink\" title=\"字体下载\"></a>字体下载</h2><p>测试了不少字体，感觉 <a href=\"http://www.daimg.com/download.php?open=2&amp;id=12741&amp;uhash=1eb7c629071a1341f83bc53b\">方正中雅宋_GBK</a> 和这个软件最匹配。当然，大家可以自行修改<code>font-family</code>，换用喜欢的字体。</p>"},{"author":"小莫","date":"2016-05-23T16:00:00.000Z","title":"nodejs框架koa学习","_content":"Koa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、国际惯例 hello world##    \n### 1. 当前版本1.2    \n`npm install --save koa`   \n\n### 2. 代码撸起来   \n\n```\n  let koa = require('koa');\n  let app = koa();\n  app.use(function*(){\n      this.body = \"hello xiaomo\";\n    });\n  app.listen(8080);\n```\n\n如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo   \n你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  \n\n另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。\n\n```\n  function* inc () {\n   let number = 0\n   while (true)\n   yield number++\n  }\n\n  let test = inc()\n\n  console.log(test.next().value) // -> 0\n  console.log(test.next().value) // -> 1\n  console.log(test.next().value) // -> 2\n```\n\n我分解一下这个程序：\n\ninc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1\ninc 函数被指派给了变量 test\ninc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。\n我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。\n\n但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：\n\n```\n  let koa = require('koa')\n\n  let app = koa()\n\n  // normal route\n  app.use(function* (next) {\n  if (this.path !== '/') {\n  return yield next\n  }\n\n  this.body = 'hello world'\n  });\n\n  // /404 route\n  app.use(function* (next) {\n  if (this.path !== '/404') {\n  return yield next;\n  }\n\n  this.body = 'page not found'\n  });\n\n  // /500 route\n  app.use(function* (next) {\n  if (this.path !== '/500') {\n  return yield next;\n  }\n\n  this.body = 'internal server error'\n  });\n\n  app.listen(8080)\n```\n\n你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，[请点这里](http://koajs.com/#context)。\n\n让我们写一个将请求中的内容大写的中间件：\n\n```\n  let koa = require('koa')\n\n  let app = koa()\n\n  app.use(upcaser())\n\n  function upcaser () {\n  return function* (next) {\n  yield next\n  this.body = this.body.toUpperCase()\n  }\n  }\n\n  app.listen(8080)\n```\n\n\n## 我的github地址\n[https://github.com/qq83387856](https://github.com/qq83387856)\n","source":"_posts/2016-05-24.nodejs_koa.md","raw":"---\nauthor: 小莫\ndate: 2016-05-24\ntitle: nodejs框架koa学习\ntags:\n- node\n- koa\n- javascript\n- es6\ncategory: koa\npermalink: node_koa\n---\nKoa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、国际惯例 hello world##    \n### 1. 当前版本1.2    \n`npm install --save koa`   \n\n### 2. 代码撸起来   \n\n```\n  let koa = require('koa');\n  let app = koa();\n  app.use(function*(){\n      this.body = \"hello xiaomo\";\n    });\n  app.listen(8080);\n```\n\n如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo   \n你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  \n\n另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。\n\n```\n  function* inc () {\n   let number = 0\n   while (true)\n   yield number++\n  }\n\n  let test = inc()\n\n  console.log(test.next().value) // -> 0\n  console.log(test.next().value) // -> 1\n  console.log(test.next().value) // -> 2\n```\n\n我分解一下这个程序：\n\ninc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1\ninc 函数被指派给了变量 test\ninc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。\n我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。\n\n但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：\n\n```\n  let koa = require('koa')\n\n  let app = koa()\n\n  // normal route\n  app.use(function* (next) {\n  if (this.path !== '/') {\n  return yield next\n  }\n\n  this.body = 'hello world'\n  });\n\n  // /404 route\n  app.use(function* (next) {\n  if (this.path !== '/404') {\n  return yield next;\n  }\n\n  this.body = 'page not found'\n  });\n\n  // /500 route\n  app.use(function* (next) {\n  if (this.path !== '/500') {\n  return yield next;\n  }\n\n  this.body = 'internal server error'\n  });\n\n  app.listen(8080)\n```\n\n你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，[请点这里](http://koajs.com/#context)。\n\n让我们写一个将请求中的内容大写的中间件：\n\n```\n  let koa = require('koa')\n\n  let app = koa()\n\n  app.use(upcaser())\n\n  function upcaser () {\n  return function* (next) {\n  yield next\n  this.body = this.body.toUpperCase()\n  }\n  }\n\n  app.listen(8080)\n```\n\n\n## 我的github地址\n[https://github.com/qq83387856](https://github.com/qq83387856)\n","slug":"node_koa","published":1,"updated":"2016-06-28T02:50:05.172Z","_id":"cipjfs5v1001v4wmcjjwrt2w9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Koa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、国际惯例-hello-world\"><a href=\"#一、国际惯例-hello-world\" class=\"headerlink\" title=\"一、国际惯例 hello world\"></a>一、国际惯例 hello world</h2><h3 id=\"1-当前版本1-2\"><a href=\"#1-当前版本1-2\" class=\"headerlink\" title=\"1. 当前版本1.2\"></a>1. 当前版本1.2</h3><p><code>npm install --save koa</code>   </p>\n<h3 id=\"2-代码撸起来\"><a href=\"#2-代码撸起来\" class=\"headerlink\" title=\"2. 代码撸起来\"></a>2. 代码撸起来</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa();</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"string\">\"hello xiaomo\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure>\n<p>如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo<br>你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  </p>\n<p>另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inc</span> () &#123;</span></span><br><span class=\"line\"> let <span class=\"built_in\">number</span> = <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\"> yield <span class=\"built_in\">number</span>++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let test = inc()</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 0</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 1</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 2</span></span><br></pre></td></tr></table></figure>\n<p>我分解一下这个程序：</p>\n<p>inc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1<br>inc 函数被指派给了变量 test<br>inc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。<br>我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。</p>\n<p>但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// normal route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'hello world'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /404 route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/404'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'page not found'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /500 route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/500'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'internal server error'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>\n<p>你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，<a href=\"http://koajs.com/#context\" target=\"_blank\" rel=\"external\">请点这里</a>。</p>\n<p>让我们写一个将请求中的内容大写的中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(upcaser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upcaser</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> next</span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.body.toUpperCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"我的github地址\"><a href=\"#我的github地址\" class=\"headerlink\" title=\"我的github地址\"></a>我的github地址</h2><p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856</a></p>\n","excerpt":"<p>Koa 是一个类似于 Express 的Web开发框架，创始人也都是TJ。Koa 的主要特点是，使用了 ES6 的 Generator 函数，进行了架构的重新设计。Koa 的原理和内部结构很像 Express，但是语法和内部结构进行了升级。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、国际惯例-hello-world\"><a href=\"#一、国际惯例-hello-world\" class=\"headerlink\" title=\"一、国际惯例 hello world\"></a>一、国际惯例 hello world</h2><h3 id=\"1-当前版本1-2\"><a href=\"#1-当前版本1-2\" class=\"headerlink\" title=\"1. 当前版本1.2\"></a>1. 当前版本1.2</h3><p><code>npm install --save koa</code>   </p>\n<h3 id=\"2-代码撸起来\"><a href=\"#2-代码撸起来\" class=\"headerlink\" title=\"2. 代码撸起来\"></a>2. 代码撸起来</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa();</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"string\">\"hello xiaomo\"</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure>\n<p>如此这般我们就创建了一个简单的http服务器。这段程序的作用是监听 8080 端口，当收到 GET 请求的时候，答复 hello xiaomo<br>你应该注意到了，我没有只用 var 关键词。我使用了 let 代替。在 ES6 中这基本上就是新的 var。这改变了变量的作用域，但是我不想在这里多说。  </p>\n<p>另一件事情有些奇怪，就是我们使用关键词 function*。这个星号表示这个函数是一个生成器函数。这意味着这个函数可以在运行的时候跳出然后再跳回来。这个概念很难去表述，所以我给你举个栗子。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">inc</span> () &#123;</span></span><br><span class=\"line\"> let <span class=\"built_in\">number</span> = <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\"> yield <span class=\"built_in\">number</span>++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let test = inc()</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 0</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 1</span></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(test.next().<span class=\"built_in\">value</span>)<span class=\"comment\"> // -&gt; 2</span></span><br></pre></td></tr></table></figure>\n<p>我分解一下这个程序：</p>\n<p>inc 函数定义了一个生成器函数，在每一次 while 循环中，产出 number 变量然后 number 变量加 1<br>inc 函数被指派给了变量 test<br>inc 函数被迭代了 3 次，第一次的时候，number 变量在函数中被初始化了。然后，这个函数进入到了一个 while 循环，在之后的迭代中这个循环也不会退出。然后 number 0 被产出，所以这个可以用 .value 方法接收。在后来的迭代中这个变量 number 自增了两次。<br>我希望这可以帮助理解一点生成器的工作原理。这只是非常复杂的 ES6 中的一小部分。</p>\n<p>但是无论如何，让我们回到 koa。koa 非常简单，甚至不包含一个路由。你需要在中间件生成器函数中手动做路由匹配：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// normal route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'hello world'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /404 route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/404'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'page not found'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// /500 route</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.path !== <span class=\"string\">'/500'</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"string\">'internal server error'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>\n<p>你可以看到，我们只要用 if 就可以做路由匹配了。你是不是很疑惑在这个上下文中的 this 是什么，express 中的 req 和 res 去哪里了。其实 this 绑定了大部分的 req 和 res 的函数和属性。如果你想知道更多关于 this 的详情，<a href=\"http://koajs.com/#context\">请点这里</a>。</p>\n<p>让我们写一个将请求中的内容大写的中间件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = koa()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(upcaser())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upcaser</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> next</span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.body.toUpperCase()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8080</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"我的github地址\"><a href=\"#我的github地址\" class=\"headerlink\" title=\"我的github地址\"></a>我的github地址</h2><p><a href=\"https://github.com/qq83387856\">https://github.com/qq83387856</a></p>"},{"title":"Sublime Text 3 使用配置与插件安装","date":"2015-11-30T13:07:38.000Z","note":1,"_content":"\n　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 开始使用\n\n### 软件下载\n- 一直使用的是 Sublime 3，直接转到 3 的 [下载页面](http://www.sublimetext.com/3) 好了。\n\n### 用户设置\n- `Preferences/Settings - User`，设置字体为 [Consolas 雅黑混合体](http://pan.baidu.com/s/1mglgkSK) yx5g，字号11，tab 转空格，显示空格和制表符。\n\n``` actionscript\n\"font_face\": \"Yahei Consolas Hybrid\",\n\"font_size\": 11,\n\"translate_tabs_to_spaces\": true,\n\"draw_white_space\": \"all\",\n\n/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/\n\"default_line_ending\": \"unix\",\n\"default_encoding\": \"UTF-8\",\n```\n\n> 其他设置参考 `Preferences/Settings - Default`。\n\n## 基础插件\n\n### [Package Control](https://packagecontrol.io/)\n- 用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。\n> 插件使用与安装: <https://packagecontrol.io/installation>\n\n### [Convert​To​UTF8](https://packagecontrol.io/packages/ConvertToUTF8)\n- 文本编码自动转换，减少中日韩文乱码问题。\n> 插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8\n\n### [IMESupport](https://packagecontrol.io/packages/IMESupport)\n- 解决输入法选字框不跟随问题。\n\n### [Side​Bar​Enhancements](https://packagecontrol.io/packages/SideBarEnhancements)\n- 自带边栏功能太少，必须安装此插件增强一下。\n\n## 主题配色\n### [Theme - Spacegray](https://packagecontrol.io/packages/Theme%20-%20Spacegray)\n- Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。\n![Base16 Eighties Dark color scheme](http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg)\n\n## 代码规范\n\n### [Sublime​Linter](https://packagecontrol.io/packages/SublimeLinter)\n- 用于管理其他 code linting 代码规范插件。\n> 使用说明: http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc\n\n### [Sublime​Linter-jshint](https://packagecontrol.io/packages/SublimeLinter-jshint)\n- 基于 [JSHint](http://jshint.com/)，用于检查规范 JavaScript 代码。\n> NPM 依赖包: `npm install -g jshint`\n> 使用说明: https://github.com/SublimeLinter/SublimeLinter-jshint\n\n### [Sublime​Linter-csslint](https://packagecontrol.io/packages/SublimeLinter-csslint)\n- 基于 [CSSLint](https://github.com/CSSLint/csslint)，用于检查规范 CSS 代码。\n> NPM 依赖包: `npm install -g csslint`\n> 使用说明: https://github.com/SublimeLinter/SublimeLinter-csslint\n\n### [Sublime​Linter-contrib-htmlhint](https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint)\n- 基于 [HTMLHint](http://htmlhint.com/)，用于检查规范 HTML 代码。\n> NPM 依赖包: `npm install -g htmlhint@latest`\n> 使用说明: https://github.com/mmaday/SublimeLinter-contrib-htmlhint\n\n## 常用插件\n### [HTML-CSS-JS Prettify](https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify)\n- 格式化 HTML, CSS, JavaScript 及 JSON 代码。\n\n### [Color Highlighter](https://packagecontrol.io/packages/Color%20Highlighter)\n- 直接在代码中预览颜色。\n\n### [Stylus](https://packagecontrol.io/packages/Stylus)\n- 使代码高亮支持 Stylus。\n\n### [Stylus Clean Completions](https://packagecontrol.io/packages/Stylus%20Clean%20Completions)\n- Stylus 代码自动补全。\n\n### [AutoFileName](https://packagecontrol.io/packages/AutoFileName)\n- 文件名自动补全。\n![AutoFileName](http://moxfive.xyz/resources/autofilename.png)\n\n### [Can I Use](https://packagecontrol.io/packages/Can%20I%20Use)\n- http://caniuse.com/ 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性\n\n### [BracketHighlighter](https://packagecontrol.io/packages/BracketHighlighter)\n- 调整各类括号匹配的高亮样式\n\n### To be added\n\n## 相关链接\n1. **Package Control**: <https://packagecontrol.io/>\n1. **SublimeLinter**: <http://sublimelinter.readthedocs.org/>\n1. **JSHint**: <http://jshint.com/>\n1. **CSSLint**: <https://github.com/CSSLint/csslint>\n1. **HTMLHint**: <http://htmlhint.com/>\n1. **Stylus**: <http://learnboost.github.io/stylus/>\n","source":"_posts/2016-05-25.sublime_config.md","raw":"---\ntitle: Sublime Text 3 使用配置与插件安装\ndate: 2015-11-30 21:07:38\ncategories:\n- 自用笔记\n- 术业专攻\ntags:\n- 开发工具\nnote: 1\npermalink: sublime_config\n---\n\n　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 开始使用\n\n### 软件下载\n- 一直使用的是 Sublime 3，直接转到 3 的 [下载页面](http://www.sublimetext.com/3) 好了。\n\n### 用户设置\n- `Preferences/Settings - User`，设置字体为 [Consolas 雅黑混合体](http://pan.baidu.com/s/1mglgkSK) yx5g，字号11，tab 转空格，显示空格和制表符。\n\n``` actionscript\n\"font_face\": \"Yahei Consolas Hybrid\",\n\"font_size\": 11,\n\"translate_tabs_to_spaces\": true,\n\"draw_white_space\": \"all\",\n\n/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/\n\"default_line_ending\": \"unix\",\n\"default_encoding\": \"UTF-8\",\n```\n\n> 其他设置参考 `Preferences/Settings - Default`。\n\n## 基础插件\n\n### [Package Control](https://packagecontrol.io/)\n- 用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。\n> 插件使用与安装: <https://packagecontrol.io/installation>\n\n### [Convert​To​UTF8](https://packagecontrol.io/packages/ConvertToUTF8)\n- 文本编码自动转换，减少中日韩文乱码问题。\n> 插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8\n\n### [IMESupport](https://packagecontrol.io/packages/IMESupport)\n- 解决输入法选字框不跟随问题。\n\n### [Side​Bar​Enhancements](https://packagecontrol.io/packages/SideBarEnhancements)\n- 自带边栏功能太少，必须安装此插件增强一下。\n\n## 主题配色\n### [Theme - Spacegray](https://packagecontrol.io/packages/Theme%20-%20Spacegray)\n- Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。\n![Base16 Eighties Dark color scheme](http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg)\n\n## 代码规范\n\n### [Sublime​Linter](https://packagecontrol.io/packages/SublimeLinter)\n- 用于管理其他 code linting 代码规范插件。\n> 使用说明: http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc\n\n### [Sublime​Linter-jshint](https://packagecontrol.io/packages/SublimeLinter-jshint)\n- 基于 [JSHint](http://jshint.com/)，用于检查规范 JavaScript 代码。\n> NPM 依赖包: `npm install -g jshint`\n> 使用说明: https://github.com/SublimeLinter/SublimeLinter-jshint\n\n### [Sublime​Linter-csslint](https://packagecontrol.io/packages/SublimeLinter-csslint)\n- 基于 [CSSLint](https://github.com/CSSLint/csslint)，用于检查规范 CSS 代码。\n> NPM 依赖包: `npm install -g csslint`\n> 使用说明: https://github.com/SublimeLinter/SublimeLinter-csslint\n\n### [Sublime​Linter-contrib-htmlhint](https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint)\n- 基于 [HTMLHint](http://htmlhint.com/)，用于检查规范 HTML 代码。\n> NPM 依赖包: `npm install -g htmlhint@latest`\n> 使用说明: https://github.com/mmaday/SublimeLinter-contrib-htmlhint\n\n## 常用插件\n### [HTML-CSS-JS Prettify](https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify)\n- 格式化 HTML, CSS, JavaScript 及 JSON 代码。\n\n### [Color Highlighter](https://packagecontrol.io/packages/Color%20Highlighter)\n- 直接在代码中预览颜色。\n\n### [Stylus](https://packagecontrol.io/packages/Stylus)\n- 使代码高亮支持 Stylus。\n\n### [Stylus Clean Completions](https://packagecontrol.io/packages/Stylus%20Clean%20Completions)\n- Stylus 代码自动补全。\n\n### [AutoFileName](https://packagecontrol.io/packages/AutoFileName)\n- 文件名自动补全。\n![AutoFileName](http://moxfive.xyz/resources/autofilename.png)\n\n### [Can I Use](https://packagecontrol.io/packages/Can%20I%20Use)\n- http://caniuse.com/ 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性\n\n### [BracketHighlighter](https://packagecontrol.io/packages/BracketHighlighter)\n- 调整各类括号匹配的高亮样式\n\n### To be added\n\n## 相关链接\n1. **Package Control**: <https://packagecontrol.io/>\n1. **SublimeLinter**: <http://sublimelinter.readthedocs.org/>\n1. **JSHint**: <http://jshint.com/>\n1. **CSSLint**: <https://github.com/CSSLint/csslint>\n1. **HTMLHint**: <http://htmlhint.com/>\n1. **Stylus**: <http://learnboost.github.io/stylus/>\n","slug":"sublime_config","published":1,"updated":"2016-06-28T02:49:54.991Z","_id":"cipjfs5v5001z4wmc4fr1ixcd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h3><ul>\n<li>一直使用的是 Sublime 3，直接转到 3 的 <a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">下载页面</a> 好了。</li>\n</ul>\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><ul>\n<li><code>Preferences/Settings - User</code>，设置字体为 <a href=\"http://pan.baidu.com/s/1mglgkSK\" target=\"_blank\" rel=\"external\">Consolas 雅黑混合体</a> yx5g，字号11，tab 转空格，显示空格和制表符。</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"font_face\"</span>: <span class=\"string\">\"Yahei Consolas Hybrid\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"font_size\"</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\"><span class=\"string\">\"translate_tabs_to_spaces\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"draw_white_space\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/</span></span><br><span class=\"line\"><span class=\"string\">\"default_line_ending\"</span>: <span class=\"string\">\"unix\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"default_encoding\"</span>: <span class=\"string\">\"UTF-8\"</span>,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其他设置参考 <code>Preferences/Settings - Default</code>。</p>\n</blockquote>\n<h2 id=\"基础插件\"><a href=\"#基础插件\" class=\"headerlink\" title=\"基础插件\"></a>基础插件</h2><h3 id=\"Package-Control\"><a href=\"#Package-Control\" class=\"headerlink\" title=\"Package Control\"></a><a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">Package Control</a></h3><ul>\n<li>用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。<blockquote>\n<p>插件使用与安装: <a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"external\">https://packagecontrol.io/installation</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Convert​To​UTF8\"><a href=\"#Convert​To​UTF8\" class=\"headerlink\" title=\"Convert​To​UTF8\"></a><a href=\"https://packagecontrol.io/packages/ConvertToUTF8\" target=\"_blank\" rel=\"external\">Convert​To​UTF8</a></h3><ul>\n<li>文本编码自动转换，减少中日韩文乱码问题。<blockquote>\n<p>插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IMESupport\"><a href=\"#IMESupport\" class=\"headerlink\" title=\"IMESupport\"></a><a href=\"https://packagecontrol.io/packages/IMESupport\" target=\"_blank\" rel=\"external\">IMESupport</a></h3><ul>\n<li>解决输入法选字框不跟随问题。</li>\n</ul>\n<h3 id=\"Side​Bar​Enhancements\"><a href=\"#Side​Bar​Enhancements\" class=\"headerlink\" title=\"Side​Bar​Enhancements\"></a><a href=\"https://packagecontrol.io/packages/SideBarEnhancements\" target=\"_blank\" rel=\"external\">Side​Bar​Enhancements</a></h3><ul>\n<li>自带边栏功能太少，必须安装此插件增强一下。</li>\n</ul>\n<h2 id=\"主题配色\"><a href=\"#主题配色\" class=\"headerlink\" title=\"主题配色\"></a>主题配色</h2><h3 id=\"Theme-Spacegray\"><a href=\"#Theme-Spacegray\" class=\"headerlink\" title=\"Theme - Spacegray\"></a><a href=\"https://packagecontrol.io/packages/Theme%20-%20Spacegray\" target=\"_blank\" rel=\"external\">Theme - Spacegray</a></h3><ul>\n<li>Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。<br><img src=\"http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg\" alt=\"Base16 Eighties Dark color scheme\"></li>\n</ul>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"Sublime​Linter\"><a href=\"#Sublime​Linter\" class=\"headerlink\" title=\"Sublime​Linter\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter\" target=\"_blank\" rel=\"external\">Sublime​Linter</a></h3><ul>\n<li>用于管理其他 code linting 代码规范插件。<blockquote>\n<p>使用说明: <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc\" target=\"_blank\" rel=\"external\">http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-jshint\"><a href=\"#Sublime​Linter-jshint\" class=\"headerlink\" title=\"Sublime​Linter-jshint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-jshint\" target=\"_blank\" rel=\"external\">Sublime​Linter-jshint</a></h3><ul>\n<li>基于 <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"external\">JSHint</a>，用于检查规范 JavaScript 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g jshint</code><br>使用说明: <a href=\"https://github.com/SublimeLinter/SublimeLinter-jshint\" target=\"_blank\" rel=\"external\">https://github.com/SublimeLinter/SublimeLinter-jshint</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-csslint\"><a href=\"#Sublime​Linter-csslint\" class=\"headerlink\" title=\"Sublime​Linter-csslint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-csslint\" target=\"_blank\" rel=\"external\">Sublime​Linter-csslint</a></h3><ul>\n<li>基于 <a href=\"https://github.com/CSSLint/csslint\" target=\"_blank\" rel=\"external\">CSSLint</a>，用于检查规范 CSS 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g csslint</code><br>使用说明: <a href=\"https://github.com/SublimeLinter/SublimeLinter-csslint\" target=\"_blank\" rel=\"external\">https://github.com/SublimeLinter/SublimeLinter-csslint</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-contrib-htmlhint\"><a href=\"#Sublime​Linter-contrib-htmlhint\" class=\"headerlink\" title=\"Sublime​Linter-contrib-htmlhint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint\" target=\"_blank\" rel=\"external\">Sublime​Linter-contrib-htmlhint</a></h3><ul>\n<li>基于 <a href=\"http://htmlhint.com/\" target=\"_blank\" rel=\"external\">HTMLHint</a>，用于检查规范 HTML 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g htmlhint@latest</code><br>使用说明: <a href=\"https://github.com/mmaday/SublimeLinter-contrib-htmlhint\" target=\"_blank\" rel=\"external\">https://github.com/mmaday/SublimeLinter-contrib-htmlhint</a></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><h3 id=\"HTML-CSS-JS-Prettify\"><a href=\"#HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"HTML-CSS-JS Prettify\"></a><a href=\"https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify\" target=\"_blank\" rel=\"external\">HTML-CSS-JS Prettify</a></h3><ul>\n<li>格式化 HTML, CSS, JavaScript 及 JSON 代码。</li>\n</ul>\n<h3 id=\"Color-Highlighter\"><a href=\"#Color-Highlighter\" class=\"headerlink\" title=\"Color Highlighter\"></a><a href=\"https://packagecontrol.io/packages/Color%20Highlighter\" target=\"_blank\" rel=\"external\">Color Highlighter</a></h3><ul>\n<li>直接在代码中预览颜色。</li>\n</ul>\n<h3 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a><a href=\"https://packagecontrol.io/packages/Stylus\" target=\"_blank\" rel=\"external\">Stylus</a></h3><ul>\n<li>使代码高亮支持 Stylus。</li>\n</ul>\n<h3 id=\"Stylus-Clean-Completions\"><a href=\"#Stylus-Clean-Completions\" class=\"headerlink\" title=\"Stylus Clean Completions\"></a><a href=\"https://packagecontrol.io/packages/Stylus%20Clean%20Completions\" target=\"_blank\" rel=\"external\">Stylus Clean Completions</a></h3><ul>\n<li>Stylus 代码自动补全。</li>\n</ul>\n<h3 id=\"AutoFileName\"><a href=\"#AutoFileName\" class=\"headerlink\" title=\"AutoFileName\"></a><a href=\"https://packagecontrol.io/packages/AutoFileName\" target=\"_blank\" rel=\"external\">AutoFileName</a></h3><ul>\n<li>文件名自动补全。<br><img src=\"http://moxfive.xyz/resources/autofilename.png\" alt=\"AutoFileName\"></li>\n</ul>\n<h3 id=\"Can-I-Use\"><a href=\"#Can-I-Use\" class=\"headerlink\" title=\"Can I Use\"></a><a href=\"https://packagecontrol.io/packages/Can%20I%20Use\" target=\"_blank\" rel=\"external\">Can I Use</a></h3><ul>\n<li><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">http://caniuse.com/</a> 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性</li>\n</ul>\n<h3 id=\"BracketHighlighter\"><a href=\"#BracketHighlighter\" class=\"headerlink\" title=\"BracketHighlighter\"></a><a href=\"https://packagecontrol.io/packages/BracketHighlighter\" target=\"_blank\" rel=\"external\">BracketHighlighter</a></h3><ul>\n<li>调整各类括号匹配的高亮样式</li>\n</ul>\n<h3 id=\"To-be-added\"><a href=\"#To-be-added\" class=\"headerlink\" title=\"To be added\"></a>To be added</h3><h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li><strong>Package Control</strong>: <a href=\"https://packagecontrol.io/\" target=\"_blank\" rel=\"external\">https://packagecontrol.io/</a></li>\n<li><strong>SublimeLinter</strong>: <a href=\"http://sublimelinter.readthedocs.org/\" target=\"_blank\" rel=\"external\">http://sublimelinter.readthedocs.org/</a></li>\n<li><strong>JSHint</strong>: <a href=\"http://jshint.com/\" target=\"_blank\" rel=\"external\">http://jshint.com/</a></li>\n<li><strong>CSSLint</strong>: <a href=\"https://github.com/CSSLint/csslint\" target=\"_blank\" rel=\"external\">https://github.com/CSSLint/csslint</a></li>\n<li><strong>HTMLHint</strong>: <a href=\"http://htmlhint.com/\" target=\"_blank\" rel=\"external\">http://htmlhint.com/</a></li>\n<li><strong>Stylus</strong>: <a href=\"http://learnboost.github.io/stylus/\" target=\"_blank\" rel=\"external\">http://learnboost.github.io/stylus/</a></li>\n</ol>\n","excerpt":"<p>　　记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"软件下载\"><a href=\"#软件下载\" class=\"headerlink\" title=\"软件下载\"></a>软件下载</h3><ul>\n<li>一直使用的是 Sublime 3，直接转到 3 的 <a href=\"http://www.sublimetext.com/3\">下载页面</a> 好了。</li>\n</ul>\n<h3 id=\"用户设置\"><a href=\"#用户设置\" class=\"headerlink\" title=\"用户设置\"></a>用户设置</h3><ul>\n<li><code>Preferences/Settings - User</code>，设置字体为 <a href=\"http://pan.baidu.com/s/1mglgkSK\">Consolas 雅黑混合体</a> yx5g，字号11，tab 转空格，显示空格和制表符。</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"font_face\"</span>: <span class=\"string\">\"Yahei Consolas Hybrid\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"font_size\"</span>: <span class=\"number\">11</span>,</span><br><span class=\"line\"><span class=\"string\">\"translate_tabs_to_spaces\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"draw_white_space\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/</span></span><br><span class=\"line\"><span class=\"string\">\"default_line_ending\"</span>: <span class=\"string\">\"unix\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"default_encoding\"</span>: <span class=\"string\">\"UTF-8\"</span>,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其他设置参考 <code>Preferences/Settings - Default</code>。</p>\n</blockquote>\n<h2 id=\"基础插件\"><a href=\"#基础插件\" class=\"headerlink\" title=\"基础插件\"></a>基础插件</h2><h3 id=\"Package-Control\"><a href=\"#Package-Control\" class=\"headerlink\" title=\"Package Control\"></a><a href=\"https://packagecontrol.io/\">Package Control</a></h3><ul>\n<li>用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。<blockquote>\n<p>插件使用与安装: <a href=\"https://packagecontrol.io/installation\">https://packagecontrol.io/installation</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Convert​To​UTF8\"><a href=\"#Convert​To​UTF8\" class=\"headerlink\" title=\"Convert​To​UTF8\"></a><a href=\"https://packagecontrol.io/packages/ConvertToUTF8\">Convert​To​UTF8</a></h3><ul>\n<li>文本编码自动转换，减少中日韩文乱码问题。<blockquote>\n<p>插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"IMESupport\"><a href=\"#IMESupport\" class=\"headerlink\" title=\"IMESupport\"></a><a href=\"https://packagecontrol.io/packages/IMESupport\">IMESupport</a></h3><ul>\n<li>解决输入法选字框不跟随问题。</li>\n</ul>\n<h3 id=\"Side​Bar​Enhancements\"><a href=\"#Side​Bar​Enhancements\" class=\"headerlink\" title=\"Side​Bar​Enhancements\"></a><a href=\"https://packagecontrol.io/packages/SideBarEnhancements\">Side​Bar​Enhancements</a></h3><ul>\n<li>自带边栏功能太少，必须安装此插件增强一下。</li>\n</ul>\n<h2 id=\"主题配色\"><a href=\"#主题配色\" class=\"headerlink\" title=\"主题配色\"></a>主题配色</h2><h3 id=\"Theme-Spacegray\"><a href=\"#Theme-Spacegray\" class=\"headerlink\" title=\"Theme - Spacegray\"></a><a href=\"https://packagecontrol.io/packages/Theme%20-%20Spacegray\">Theme - Spacegray</a></h3><ul>\n<li>Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。<br><img src=\"http://moxfive.xyz/resources/Base16-Eighties-Dark.jpg\" alt=\"Base16 Eighties Dark color scheme\"></li>\n</ul>\n<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h3 id=\"Sublime​Linter\"><a href=\"#Sublime​Linter\" class=\"headerlink\" title=\"Sublime​Linter\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter\">Sublime​Linter</a></h3><ul>\n<li>用于管理其他 code linting 代码规范插件。<blockquote>\n<p>使用说明: <a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc\">http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-jshint\"><a href=\"#Sublime​Linter-jshint\" class=\"headerlink\" title=\"Sublime​Linter-jshint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-jshint\">Sublime​Linter-jshint</a></h3><ul>\n<li>基于 <a href=\"http://jshint.com/\">JSHint</a>，用于检查规范 JavaScript 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g jshint</code><br>使用说明: <a href=\"https://github.com/SublimeLinter/SublimeLinter-jshint\">https://github.com/SublimeLinter/SublimeLinter-jshint</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-csslint\"><a href=\"#Sublime​Linter-csslint\" class=\"headerlink\" title=\"Sublime​Linter-csslint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-csslint\">Sublime​Linter-csslint</a></h3><ul>\n<li>基于 <a href=\"https://github.com/CSSLint/csslint\">CSSLint</a>，用于检查规范 CSS 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g csslint</code><br>使用说明: <a href=\"https://github.com/SublimeLinter/SublimeLinter-csslint\">https://github.com/SublimeLinter/SublimeLinter-csslint</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Sublime​Linter-contrib-htmlhint\"><a href=\"#Sublime​Linter-contrib-htmlhint\" class=\"headerlink\" title=\"Sublime​Linter-contrib-htmlhint\"></a><a href=\"https://packagecontrol.io/packages/SublimeLinter-contrib-htmlhint\">Sublime​Linter-contrib-htmlhint</a></h3><ul>\n<li>基于 <a href=\"http://htmlhint.com/\">HTMLHint</a>，用于检查规范 HTML 代码。<blockquote>\n<p>NPM 依赖包: <code>npm install -g htmlhint@latest</code><br>使用说明: <a href=\"https://github.com/mmaday/SublimeLinter-contrib-htmlhint\">https://github.com/mmaday/SublimeLinter-contrib-htmlhint</a></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><h3 id=\"HTML-CSS-JS-Prettify\"><a href=\"#HTML-CSS-JS-Prettify\" class=\"headerlink\" title=\"HTML-CSS-JS Prettify\"></a><a href=\"https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify\">HTML-CSS-JS Prettify</a></h3><ul>\n<li>格式化 HTML, CSS, JavaScript 及 JSON 代码。</li>\n</ul>\n<h3 id=\"Color-Highlighter\"><a href=\"#Color-Highlighter\" class=\"headerlink\" title=\"Color Highlighter\"></a><a href=\"https://packagecontrol.io/packages/Color%20Highlighter\">Color Highlighter</a></h3><ul>\n<li>直接在代码中预览颜色。</li>\n</ul>\n<h3 id=\"Stylus\"><a href=\"#Stylus\" class=\"headerlink\" title=\"Stylus\"></a><a href=\"https://packagecontrol.io/packages/Stylus\">Stylus</a></h3><ul>\n<li>使代码高亮支持 Stylus。</li>\n</ul>\n<h3 id=\"Stylus-Clean-Completions\"><a href=\"#Stylus-Clean-Completions\" class=\"headerlink\" title=\"Stylus Clean Completions\"></a><a href=\"https://packagecontrol.io/packages/Stylus%20Clean%20Completions\">Stylus Clean Completions</a></h3><ul>\n<li>Stylus 代码自动补全。</li>\n</ul>\n<h3 id=\"AutoFileName\"><a href=\"#AutoFileName\" class=\"headerlink\" title=\"AutoFileName\"></a><a href=\"https://packagecontrol.io/packages/AutoFileName\">AutoFileName</a></h3><ul>\n<li>文件名自动补全。<br><img src=\"http://moxfive.xyz/resources/autofilename.png\" alt=\"AutoFileName\"></li>\n</ul>\n<h3 id=\"Can-I-Use\"><a href=\"#Can-I-Use\" class=\"headerlink\" title=\"Can I Use\"></a><a href=\"https://packagecontrol.io/packages/Can%20I%20Use\">Can I Use</a></h3><ul>\n<li><a href=\"http://caniuse.com/\">http://caniuse.com/</a> 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性</li>\n</ul>\n<h3 id=\"BracketHighlighter\"><a href=\"#BracketHighlighter\" class=\"headerlink\" title=\"BracketHighlighter\"></a><a href=\"https://packagecontrol.io/packages/BracketHighlighter\">BracketHighlighter</a></h3><ul>\n<li>调整各类括号匹配的高亮样式</li>\n</ul>\n<h3 id=\"To-be-added\"><a href=\"#To-be-added\" class=\"headerlink\" title=\"To be added\"></a>To be added</h3><h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li><strong>Package Control</strong>: <a href=\"https://packagecontrol.io/\">https://packagecontrol.io/</a></li>\n<li><strong>SublimeLinter</strong>: <a href=\"http://sublimelinter.readthedocs.org/\">http://sublimelinter.readthedocs.org/</a></li>\n<li><strong>JSHint</strong>: <a href=\"http://jshint.com/\">http://jshint.com/</a></li>\n<li><strong>CSSLint</strong>: <a href=\"https://github.com/CSSLint/csslint\">https://github.com/CSSLint/csslint</a></li>\n<li><strong>HTMLHint</strong>: <a href=\"http://htmlhint.com/\">http://htmlhint.com/</a></li>\n<li><strong>Stylus</strong>: <a href=\"http://learnboost.github.io/stylus/\">http://learnboost.github.io/stylus/</a></li>\n</ol>"},{"author":"小莫","date":"2016-05-25T16:00:00.000Z","title":"koa生成器,一键生成koa和koa2项目","_content":"\n最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/koajs.png)](https://github.com/qq83387856)\n## 一、一键生成koa项目特性##\n\n1. Express-style\n2. Support koa 1.x（已支持）\n3. Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）\n\n## 二、使用说明##\n\n### 1. 准备工作   \n 一定要全局安装(koa1.2和koa2都己经支持)\n`npm install koa-generator -g`  \nkoa1.2  生成一个test项目,切到test目录并下载依赖   \n`koa test && cd test && npm install`\nkoa2    生成一个test项目,切到test目录并下载依赖   \n`koa2 test && cd test && npm install`\n\n### 运行  \n`npm start`\n  访问 http://localhost:3000 就可以看到项目效果   \n\n\n## 三、参数##\n当然koa生成器功能没有这么弱啦,可以定制你想要的东西  \n\n\n```\n-h, --help          帮助\n-V, --version       版本号\n-e, --ejs           添加ejs模板引擎支持(默认是jade)\n    --hbs           添加hbs模板引擎支持(默认是hbs)\n-H, --hogan         添加hogan.js支持\n-c, --css <engine>  添加css样式 支持 less sass styus css(默认是css)\n    --git           添加 .gitignore\n-f, --force         force on non-empty directory\n```  \n## 四、项目地址##\n\n[https://github.com/qq83387856/node-koa](https://github.com/qq83387856/node-koa)\n\n## 五、国际惯例-项目演示##\n\n1. 安装koa-generator  \n2. 新建项目   \n3. 运行项目  \n4. 演示结束   \n![koa生成器](http://static.xiaomo.info/images/koa-generator.gif)\n\n查看大图 [koa生成器](http://static.xiaomo.info/images/koa-generator.gif)\n\n\n## 我的github地址\n[https://github.com/qq83387856](https://github.com/qq83387856)\n","source":"_posts/2016-05-26.koa_generator.md","raw":"---\nauthor: 小莫\ndate: 2016-05-26\ntitle: koa生成器,一键生成koa和koa2项目\ntags:\n- node\n- koa\n- javascript\n- es6\ncategory: javascript\npermalink: koa_generator\n---\n\n最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/koajs.png)](https://github.com/qq83387856)\n## 一、一键生成koa项目特性##\n\n1. Express-style\n2. Support koa 1.x（已支持）\n3. Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）\n\n## 二、使用说明##\n\n### 1. 准备工作   \n 一定要全局安装(koa1.2和koa2都己经支持)\n`npm install koa-generator -g`  \nkoa1.2  生成一个test项目,切到test目录并下载依赖   \n`koa test && cd test && npm install`\nkoa2    生成一个test项目,切到test目录并下载依赖   \n`koa2 test && cd test && npm install`\n\n### 运行  \n`npm start`\n  访问 http://localhost:3000 就可以看到项目效果   \n\n\n## 三、参数##\n当然koa生成器功能没有这么弱啦,可以定制你想要的东西  \n\n\n```\n-h, --help          帮助\n-V, --version       版本号\n-e, --ejs           添加ejs模板引擎支持(默认是jade)\n    --hbs           添加hbs模板引擎支持(默认是hbs)\n-H, --hogan         添加hogan.js支持\n-c, --css <engine>  添加css样式 支持 less sass styus css(默认是css)\n    --git           添加 .gitignore\n-f, --force         force on non-empty directory\n```  \n## 四、项目地址##\n\n[https://github.com/qq83387856/node-koa](https://github.com/qq83387856/node-koa)\n\n## 五、国际惯例-项目演示##\n\n1. 安装koa-generator  \n2. 新建项目   \n3. 运行项目  \n4. 演示结束   \n![koa生成器](http://static.xiaomo.info/images/koa-generator.gif)\n\n查看大图 [koa生成器](http://static.xiaomo.info/images/koa-generator.gif)\n\n\n## 我的github地址\n[https://github.com/qq83387856](https://github.com/qq83387856)\n","slug":"koa_generator","published":1,"updated":"2016-06-28T02:49:48.684Z","_id":"cipjfs5v800224wmctbpax26h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/koajs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、一键生成koa项目特性\"><a href=\"#一、一键生成koa项目特性\" class=\"headerlink\" title=\"一、一键生成koa项目特性\"></a>一、一键生成koa项目特性</h2><ol>\n<li>Express-style</li>\n<li>Support koa 1.x（已支持）</li>\n<li>Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）</li>\n</ol>\n<h2 id=\"二、使用说明\"><a href=\"#二、使用说明\" class=\"headerlink\" title=\"二、使用说明\"></a>二、使用说明</h2><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><p> 一定要全局安装(koa1.2和koa2都己经支持)<br><code>npm install koa-generator -g</code><br>koa1.2  生成一个test项目,切到test目录并下载依赖<br><code>koa test &amp;&amp; cd test &amp;&amp; npm install</code><br>koa2    生成一个test项目,切到test目录并下载依赖<br><code>koa2 test &amp;&amp; cd test &amp;&amp; npm install</code></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><code>npm start</code><br>  访问 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> 就可以看到项目效果   </p>\n<h2 id=\"三、参数\"><a href=\"#三、参数\" class=\"headerlink\" title=\"三、参数\"></a>三、参数</h2><p>当然koa生成器功能没有这么弱啦,可以定制你想要的东西  </p>\n<pre><code>-h, --help          帮助\n-V, --version       版本号\n-e, --ejs           添加ejs模板引擎支持(默认是jade)\n    --hbs           添加hbs模板引擎支持(默认是hbs)\n-H, --hogan         添加hogan.js支持\n-c, --css &lt;engine&gt;  添加css样式 支持 less sass styus css(默认是css)\n    --git           添加 .gitignore\n-f, --force         force on non-empty directory\n</code></pre><h2 id=\"四、项目地址\"><a href=\"#四、项目地址\" class=\"headerlink\" title=\"四、项目地址\"></a>四、项目地址</h2><p><a href=\"https://github.com/qq83387856/node-koa\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856/node-koa</a></p>\n<h2 id=\"五、国际惯例-项目演示\"><a href=\"#五、国际惯例-项目演示\" class=\"headerlink\" title=\"五、国际惯例-项目演示\"></a>五、国际惯例-项目演示</h2><ol>\n<li>安装koa-generator  </li>\n<li>新建项目   </li>\n<li>运行项目  </li>\n<li>演示结束<br><img src=\"http://static.xiaomo.info/images/koa-generator.gif\" alt=\"koa生成器\"></li>\n</ol>\n<p>查看大图 <a href=\"http://static.xiaomo.info/images/koa-generator.gif\" target=\"_blank\" rel=\"external\">koa生成器</a></p>\n<h2 id=\"我的github地址\"><a href=\"#我的github地址\" class=\"headerlink\" title=\"我的github地址\"></a>我的github地址</h2><p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856</a></p>\n","excerpt":"<p>最近在学koa,想着exrpess有生成器,那么koa应该也有。不出所料，经过我仔细上网排查,果然也有koa生成器。这对于想学koa，且规范的使用koa的朋友来说是一件多么让人开心的事情。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/koajs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、一键生成koa项目特性\"><a href=\"#一、一键生成koa项目特性\" class=\"headerlink\" title=\"一、一键生成koa项目特性\"></a>一、一键生成koa项目特性</h2><ol>\n<li>Express-style</li>\n<li>Support koa 1.x（已支持）</li>\n<li>Support koa 2.x（已支持所有的koa中间件写法，依赖runkoa，不需要了解babel）</li>\n</ol>\n<h2 id=\"二、使用说明\"><a href=\"#二、使用说明\" class=\"headerlink\" title=\"二、使用说明\"></a>二、使用说明</h2><h3 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h3><p> 一定要全局安装(koa1.2和koa2都己经支持)<br><code>npm install koa-generator -g</code><br>koa1.2  生成一个test项目,切到test目录并下载依赖<br><code>koa test &amp;&amp; cd test &amp;&amp; npm install</code><br>koa2    生成一个test项目,切到test目录并下载依赖<br><code>koa2 test &amp;&amp; cd test &amp;&amp; npm install</code></p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><code>npm start</code><br>  访问 <a href=\"http://localhost:3000\">http://localhost:3000</a> 就可以看到项目效果   </p>\n<h2 id=\"三、参数\"><a href=\"#三、参数\" class=\"headerlink\" title=\"三、参数\"></a>三、参数</h2><p>当然koa生成器功能没有这么弱啦,可以定制你想要的东西  </p>\n<pre><code>-h, --help          帮助\n-V, --version       版本号\n-e, --ejs           添加ejs模板引擎支持(默认是jade)\n    --hbs           添加hbs模板引擎支持(默认是hbs)\n-H, --hogan         添加hogan.js支持\n-c, --css &lt;engine&gt;  添加css样式 支持 less sass styus css(默认是css)\n    --git           添加 .gitignore\n-f, --force         force on non-empty directory\n</code></pre><h2 id=\"四、项目地址\"><a href=\"#四、项目地址\" class=\"headerlink\" title=\"四、项目地址\"></a>四、项目地址</h2><p><a href=\"https://github.com/qq83387856/node-koa\">https://github.com/qq83387856/node-koa</a></p>\n<h2 id=\"五、国际惯例-项目演示\"><a href=\"#五、国际惯例-项目演示\" class=\"headerlink\" title=\"五、国际惯例-项目演示\"></a>五、国际惯例-项目演示</h2><ol>\n<li>安装koa-generator  </li>\n<li>新建项目   </li>\n<li>运行项目  </li>\n<li>演示结束<br><img src=\"http://static.xiaomo.info/images/koa-generator.gif\" alt=\"koa生成器\"></li>\n</ol>\n<p>查看大图 <a href=\"http://static.xiaomo.info/images/koa-generator.gif\">koa生成器</a></p>\n<h2 id=\"我的github地址\"><a href=\"#我的github地址\" class=\"headerlink\" title=\"我的github地址\"></a>我的github地址</h2><p><a href=\"https://github.com/qq83387856\">https://github.com/qq83387856</a></p>"},{"author":"小莫","date":"2016-05-26T16:00:00.000Z","title":"mongodb数据库的使用","_content":"最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/mongodb.png)](https://github.com/qq83387856)\n## 一、mongodb的开启和关闭   \n\n### 1. 查找mongod是否可用    \n`which mongod`\n\n### 2. 启动mongodb     \n 指定path 和log日志   \n`mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log`\n\n### 3. 关闭数据库  \n`mongod --shutdown`\n\n\n## 二、mongodb的操作  \n\n### 1. 连接服务器  \n`mongod 115.29.137.34:27017`  \n\n### 2. 使用数据库\n(不存在的数据库也可以使用,插入数据之后会自动保存)  \n`use mydb`  \n\n### 3. 权限登陆  \n`db.auth('username','password')`\n\n### 4. 展示数据库列表\n`show dbs`\n\n### 5. 插入数据\n(类似于mysql的表)  \n`db.users.insert({'name':'xiaomo'})`  \n`db.users.insert({'name':'xiaoming','age':25})`  \n`db.users.insert({'name':'xiaoming','age':24,'sex':'女'})`\n\n### 6. 查询集合\n(前提是use了一个数据库)  \n有一个System.indexes 是索引\n`show collections`\n\n### 7. 不带条件查询  \n`db.users.find()`  \n\n### 8. 带条件查询\n(参数是一个对象)  \n`db.users.find({'name':'xiaomo'})`  \n\n### 9. 更新数据\n(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)  \n`db.users.update({'name':'xiaomo',{$set:{'name:'xm}})`   修改满足条件的第一条数据  \n`db.users.update({'name':'xiaomo',{$set:{'name:'xm}},{multi:true})`    修改所有满足条件的数据  \n\n### 10. 保存数据\n(只有一个参数，必须要传id，后面是要修改的数据)  \n`db.users.save({'id':'objectId(574710a97a3afd63cde56a49)','age':30})`  \n\n### 11. 删除数据\n(1:条件 2 是否删除所有符合条件的)  \n`db.users.remove({'name':'xiaomoing'},true)`  \n\n### 12. 删除集合  \n`db.users.drop()`  \n\n## 三、使用mongoose操作数据库  \n\n### 1. 模块的介绍  \n连接mongdodb的驱动\n\n### 2. 配置和链接  \n`npm install --save mongoose`  \n\n```\n  var mongoose = require('mongoose');\n  <!-- var uri = 'mongodb://username:password@hostname:port/databasename'; -->\n  var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';\n  mongoose.connect(uri);\n```\n\n### 3. Model 和Shema\n\n```\n // model.js\nvar Schema = mongoose.Schema,\n    ObjectId = Schema.ObjectId;\n\nvar BlogPost = new Schema({\n    author    : ObjectId,\n    title     : String,\n    body      : String,\n    date      : Date\n});\n\n//Model\nmongoose.model('blog',Schema);\n\nvar Comment = new Schema({\n  name: { type: String, default: 'hahaha' },\n  age: { type: Number, min: 18, index: true },\n  bio: { type: String, match: /[a-z]/ },\n  date: { type: Date, default: Date.now }\n});\n\n// a setter\nComment.path('name').set(function (v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre('save', function (next) {\n  notify(this.get('email'));\n  next();\n});\n\n```\n\n### 4. 创建文档  \n\n```\n  //insert.js\n  var mongoose ＝ require('mongoose');\n  require('./model.js'); //执行\n  var Blog = mongoose.model('blog');\n  var blog = new Blog({\n      name:'xiaomo',\n      age:25,\n      bio:'don't know',\n      date:new Date\n    });\n\n  book.save(function(err){\n      console.log('save status:'+err);\n    });\n```\n\n### 5. 删除文档  \n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.findOne({'name':'xiaomo'},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    if(doc){\n    doc.reomove();\n  }\n    })\n```\n\n### 6. 简单查询\n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.find({},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n第一个满足条件的结果\n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.findOne({'name':'xiaomo'},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n### 7. 条件语句  \n\n```\n // condation.js\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  //名字是xiaomo或者xiaoming 可以用$or和$and\n  var condation = {\n    $or  $and:[\n    {'name':'xiaomo'},\n    {'name':'xiaoming'}\n    ]\n  }\n  Blog.find(condation,function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n\n## 三、在项目中使用mongoose  \n\n### 1. 生成项目\n`koa koatest -e koatest`  \n\n### 2. 安装依赖  \n`cd koatest && npm install`\n\n### 3. 安装mongoose  \n`npm install --save mongoose`  \n\n### 4. 创建模型  \n\n```\n  // models/users.server.model.js\n  var mongoose = require('mongoose');\n  var UserSchema = new mongoose.Schema({\n      uid:Number,\n      username:String,\n      createTime:Date,\n      lastLogin:Date\n    })\n  module.exports = mongoose.model('User',UserSchema);\n```\n\n### 5. 创建配置文件  \n\n```\n  // config/config.js\n  module.exports={\n    mongodb:'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'\n  }\n  //config/mongoose.js\n  var mongoose = require('mongoose');\n  var config = require('./config.js');\n\n  module.exports=function(){\n    var db = mongoose.connect(config.mongodb);\n    require('./../models/users.server.model.js');\n    return db;\n  }\n```\n\n### 6. 操作mongdodb 代码   \n\n```\n  //routers/users.js\n  var router = require('koa-router')();\n  var mongoose = require('mongoose');\n  var User = mongoose.model('User');\n  router.get('/', function *(next) {\n      //add\n      var user = new User({\n        uid:\n        })\n      this.body = yield User.find({});\n  });\n  module.exports = router;\n\n\n```\n","source":"_posts/2016-05-27.mongodb_use.md","raw":"---\nauthor: 小莫\ndate: 2016-05-27\ntitle: mongodb数据库的使用\ntags:\n- mongodb\n- koa\n- javascript\n- node\ncategory: mongodb\npermalink: mongodb_use\n---\n最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/mongodb.png)](https://github.com/qq83387856)\n## 一、mongodb的开启和关闭   \n\n### 1. 查找mongod是否可用    \n`which mongod`\n\n### 2. 启动mongodb     \n 指定path 和log日志   \n`mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log`\n\n### 3. 关闭数据库  \n`mongod --shutdown`\n\n\n## 二、mongodb的操作  \n\n### 1. 连接服务器  \n`mongod 115.29.137.34:27017`  \n\n### 2. 使用数据库\n(不存在的数据库也可以使用,插入数据之后会自动保存)  \n`use mydb`  \n\n### 3. 权限登陆  \n`db.auth('username','password')`\n\n### 4. 展示数据库列表\n`show dbs`\n\n### 5. 插入数据\n(类似于mysql的表)  \n`db.users.insert({'name':'xiaomo'})`  \n`db.users.insert({'name':'xiaoming','age':25})`  \n`db.users.insert({'name':'xiaoming','age':24,'sex':'女'})`\n\n### 6. 查询集合\n(前提是use了一个数据库)  \n有一个System.indexes 是索引\n`show collections`\n\n### 7. 不带条件查询  \n`db.users.find()`  \n\n### 8. 带条件查询\n(参数是一个对象)  \n`db.users.find({'name':'xiaomo'})`  \n\n### 9. 更新数据\n(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)  \n`db.users.update({'name':'xiaomo',{$set:{'name:'xm}})`   修改满足条件的第一条数据  \n`db.users.update({'name':'xiaomo',{$set:{'name:'xm}},{multi:true})`    修改所有满足条件的数据  \n\n### 10. 保存数据\n(只有一个参数，必须要传id，后面是要修改的数据)  \n`db.users.save({'id':'objectId(574710a97a3afd63cde56a49)','age':30})`  \n\n### 11. 删除数据\n(1:条件 2 是否删除所有符合条件的)  \n`db.users.remove({'name':'xiaomoing'},true)`  \n\n### 12. 删除集合  \n`db.users.drop()`  \n\n## 三、使用mongoose操作数据库  \n\n### 1. 模块的介绍  \n连接mongdodb的驱动\n\n### 2. 配置和链接  \n`npm install --save mongoose`  \n\n```\n  var mongoose = require('mongoose');\n  <!-- var uri = 'mongodb://username:password@hostname:port/databasename'; -->\n  var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';\n  mongoose.connect(uri);\n```\n\n### 3. Model 和Shema\n\n```\n // model.js\nvar Schema = mongoose.Schema,\n    ObjectId = Schema.ObjectId;\n\nvar BlogPost = new Schema({\n    author    : ObjectId,\n    title     : String,\n    body      : String,\n    date      : Date\n});\n\n//Model\nmongoose.model('blog',Schema);\n\nvar Comment = new Schema({\n  name: { type: String, default: 'hahaha' },\n  age: { type: Number, min: 18, index: true },\n  bio: { type: String, match: /[a-z]/ },\n  date: { type: Date, default: Date.now }\n});\n\n// a setter\nComment.path('name').set(function (v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre('save', function (next) {\n  notify(this.get('email'));\n  next();\n});\n\n```\n\n### 4. 创建文档  \n\n```\n  //insert.js\n  var mongoose ＝ require('mongoose');\n  require('./model.js'); //执行\n  var Blog = mongoose.model('blog');\n  var blog = new Blog({\n      name:'xiaomo',\n      age:25,\n      bio:'don't know',\n      date:new Date\n    });\n\n  book.save(function(err){\n      console.log('save status:'+err);\n    });\n```\n\n### 5. 删除文档  \n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.findOne({'name':'xiaomo'},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    if(doc){\n    doc.reomove();\n  }\n    })\n```\n\n### 6. 简单查询\n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.find({},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n第一个满足条件的结果\n\n```\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  Blog.findOne({'name':'xiaomo'},function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n### 7. 条件语句  \n\n```\n // condation.js\n  var mongoose = require('mongoose');\n  require('./model.js');\n  var Blog = mongoose.model('blog');\n  //名字是xiaomo或者xiaoming 可以用$or和$and\n  var condation = {\n    $or  $and:[\n    {'name':'xiaomo'},\n    {'name':'xiaoming'}\n    ]\n  }\n  Blog.find(condation,function(err,doc){\n    if(err){\n    console.log(err)\n    return;\n    }\n    console.log('result',doc)\n    })\n```\n\n\n## 三、在项目中使用mongoose  \n\n### 1. 生成项目\n`koa koatest -e koatest`  \n\n### 2. 安装依赖  \n`cd koatest && npm install`\n\n### 3. 安装mongoose  \n`npm install --save mongoose`  \n\n### 4. 创建模型  \n\n```\n  // models/users.server.model.js\n  var mongoose = require('mongoose');\n  var UserSchema = new mongoose.Schema({\n      uid:Number,\n      username:String,\n      createTime:Date,\n      lastLogin:Date\n    })\n  module.exports = mongoose.model('User',UserSchema);\n```\n\n### 5. 创建配置文件  \n\n```\n  // config/config.js\n  module.exports={\n    mongodb:'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'\n  }\n  //config/mongoose.js\n  var mongoose = require('mongoose');\n  var config = require('./config.js');\n\n  module.exports=function(){\n    var db = mongoose.connect(config.mongodb);\n    require('./../models/users.server.model.js');\n    return db;\n  }\n```\n\n### 6. 操作mongdodb 代码   \n\n```\n  //routers/users.js\n  var router = require('koa-router')();\n  var mongoose = require('mongoose');\n  var User = mongoose.model('User');\n  router.get('/', function *(next) {\n      //add\n      var user = new User({\n        uid:\n        })\n      this.body = yield User.find({});\n  });\n  module.exports = router;\n\n\n```\n","slug":"mongodb_use","published":1,"updated":"2016-06-28T02:49:39.941Z","_id":"cipjfs5va00264wmciozrmpro","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/mongodb.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、mongodb的开启和关闭\"><a href=\"#一、mongodb的开启和关闭\" class=\"headerlink\" title=\"一、mongodb的开启和关闭\"></a>一、mongodb的开启和关闭</h2><h3 id=\"1-查找mongod是否可用\"><a href=\"#1-查找mongod是否可用\" class=\"headerlink\" title=\"1. 查找mongod是否可用\"></a>1. 查找mongod是否可用</h3><p><code>which mongod</code></p>\n<h3 id=\"2-启动mongodb\"><a href=\"#2-启动mongodb\" class=\"headerlink\" title=\"2. 启动mongodb\"></a>2. 启动mongodb</h3><p> 指定path 和log日志<br><code>mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log</code></p>\n<h3 id=\"3-关闭数据库\"><a href=\"#3-关闭数据库\" class=\"headerlink\" title=\"3. 关闭数据库\"></a>3. 关闭数据库</h3><p><code>mongod --shutdown</code></p>\n<h2 id=\"二、mongodb的操作\"><a href=\"#二、mongodb的操作\" class=\"headerlink\" title=\"二、mongodb的操作\"></a>二、mongodb的操作</h2><h3 id=\"1-连接服务器\"><a href=\"#1-连接服务器\" class=\"headerlink\" title=\"1. 连接服务器\"></a>1. 连接服务器</h3><p><code>mongod 115.29.137.34:27017</code>  </p>\n<h3 id=\"2-使用数据库\"><a href=\"#2-使用数据库\" class=\"headerlink\" title=\"2. 使用数据库\"></a>2. 使用数据库</h3><p>(不存在的数据库也可以使用,插入数据之后会自动保存)<br><code>use mydb</code>  </p>\n<h3 id=\"3-权限登陆\"><a href=\"#3-权限登陆\" class=\"headerlink\" title=\"3. 权限登陆\"></a>3. 权限登陆</h3><p><code>db.auth(&#39;username&#39;,&#39;password&#39;)</code></p>\n<h3 id=\"4-展示数据库列表\"><a href=\"#4-展示数据库列表\" class=\"headerlink\" title=\"4. 展示数据库列表\"></a>4. 展示数据库列表</h3><p><code>show dbs</code></p>\n<h3 id=\"5-插入数据\"><a href=\"#5-插入数据\" class=\"headerlink\" title=\"5. 插入数据\"></a>5. 插入数据</h3><p>(类似于mysql的表)<br><code>db.users.insert({&#39;name&#39;:&#39;xiaomo&#39;})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:25})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:24,&#39;sex&#39;:&#39;女&#39;})</code></p>\n<h3 id=\"6-查询集合\"><a href=\"#6-查询集合\" class=\"headerlink\" title=\"6. 查询集合\"></a>6. 查询集合</h3><p>(前提是use了一个数据库)<br>有一个System.indexes 是索引<br><code>show collections</code></p>\n<h3 id=\"7-不带条件查询\"><a href=\"#7-不带条件查询\" class=\"headerlink\" title=\"7. 不带条件查询\"></a>7. 不带条件查询</h3><p><code>db.users.find()</code>  </p>\n<h3 id=\"8-带条件查询\"><a href=\"#8-带条件查询\" class=\"headerlink\" title=\"8. 带条件查询\"></a>8. 带条件查询</h3><p>(参数是一个对象)<br><code>db.users.find({&#39;name&#39;:&#39;xiaomo&#39;})</code>  </p>\n<h3 id=\"9-更新数据\"><a href=\"#9-更新数据\" class=\"headerlink\" title=\"9. 更新数据\"></a>9. 更新数据</h3><p>(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}})</code>   修改满足条件的第一条数据<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}},{multi:true})</code>    修改所有满足条件的数据  </p>\n<h3 id=\"10-保存数据\"><a href=\"#10-保存数据\" class=\"headerlink\" title=\"10. 保存数据\"></a>10. 保存数据</h3><p>(只有一个参数，必须要传id，后面是要修改的数据)<br><code>db.users.save({&#39;id&#39;:&#39;objectId(574710a97a3afd63cde56a49)&#39;,&#39;age&#39;:30})</code>  </p>\n<h3 id=\"11-删除数据\"><a href=\"#11-删除数据\" class=\"headerlink\" title=\"11. 删除数据\"></a>11. 删除数据</h3><p>(1:条件 2 是否删除所有符合条件的)<br><code>db.users.remove({&#39;name&#39;:&#39;xiaomoing&#39;},true)</code>  </p>\n<h3 id=\"12-删除集合\"><a href=\"#12-删除集合\" class=\"headerlink\" title=\"12. 删除集合\"></a>12. 删除集合</h3><p><code>db.users.drop()</code>  </p>\n<h2 id=\"三、使用mongoose操作数据库\"><a href=\"#三、使用mongoose操作数据库\" class=\"headerlink\" title=\"三、使用mongoose操作数据库\"></a>三、使用mongoose操作数据库</h2><h3 id=\"1-模块的介绍\"><a href=\"#1-模块的介绍\" class=\"headerlink\" title=\"1. 模块的介绍\"></a>1. 模块的介绍</h3><p>连接mongdodb的驱动</p>\n<h3 id=\"2-配置和链接\"><a href=\"#2-配置和链接\" class=\"headerlink\" title=\"2. 配置和链接\"></a>2. 配置和链接</h3><p><code>npm install --save mongoose</code>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- var uri = 'mongodb://username:password@hostname:port/databasename'; --&gt;</span></span><br><span class=\"line\">var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';</span><br><span class=\"line\">mongoose.connect(uri);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Model-和Shema\"><a href=\"#3-Model-和Shema\" class=\"headerlink\" title=\"3. Model 和Shema\"></a>3. Model 和Shema</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// model.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema,</span><br><span class=\"line\">    ObjectId = Schema.ObjectId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BlogPost = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    author    : ObjectId,</span><br><span class=\"line\">    title     : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    body      : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    date      : <span class=\"built_in\">Date</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Model</span></span><br><span class=\"line\">mongoose.model(<span class=\"string\">'blog'</span>,Schema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Comment = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">String</span>, <span class=\"keyword\">default</span>: <span class=\"string\">'hahaha'</span> &#125;,</span><br><span class=\"line\">  age: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">Number</span>, min: <span class=\"number\">18</span>, index: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  bio: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">String</span>, match: <span class=\"regexp\">/[a-z]/</span> &#125;,</span><br><span class=\"line\">  date: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">Date</span>, <span class=\"keyword\">default</span>: <span class=\"built_in\">Date</span>.now &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a setter</span></span><br><span class=\"line\">Comment.path(<span class=\"string\">'name'</span>).set(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> capitalize(v);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// middleware</span></span><br><span class=\"line\">Comment.pre(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">  notify(<span class=\"keyword\">this</span>.get(<span class=\"string\">'email'</span>));</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-创建文档\"><a href=\"#4-创建文档\" class=\"headerlink\" title=\"4. 创建文档\"></a>4. 创建文档</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//insert.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose ＝ <span class=\"keyword\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">'./model.js'</span>); <span class=\"comment\">//执行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> blog = <span class=\"keyword\">new</span> Blog(<span class=\"comment\">&#123;</span><br><span class=\"line\">    name:'xiaomo',</span><br><span class=\"line\">    age:25,</span><br><span class=\"line\">    bio:'don't know',</span><br><span class=\"line\">    date:new Date</span><br><span class=\"line\">  &#125;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">book.save(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span><span class=\"comment\">&#123;</span><br><span class=\"line\">    console.log('save status:'+err);</span><br><span class=\"line\">  &#125;</span>);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-删除文档\"><a href=\"#5-删除文档\" class=\"headerlink\" title=\"5. 删除文档\"></a>5. 删除文档</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.findOne(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(doc)&#123;</span><br><span class=\"line\">  doc.reomove();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-简单查询\"><a href=\"#6-简单查询\" class=\"headerlink\" title=\"6. 简单查询\"></a>6. 简单查询</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.find(&#123;&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>第一个满足条件的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.findOne(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-条件语句\"><a href=\"#7-条件语句\" class=\"headerlink\" title=\"7. 条件语句\"></a>7. 条件语句</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// condation.js</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\"> <span class=\"comment\">//名字是xiaomo或者xiaoming 可以用$or和$and</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> condation = &#123;</span><br><span class=\"line\">   $or  $and:[</span><br><span class=\"line\">   &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaoming'</span>&#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Blog.find(condation,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、在项目中使用mongoose\"><a href=\"#三、在项目中使用mongoose\" class=\"headerlink\" title=\"三、在项目中使用mongoose\"></a>三、在项目中使用mongoose</h2><h3 id=\"1-生成项目\"><a href=\"#1-生成项目\" class=\"headerlink\" title=\"1. 生成项目\"></a>1. 生成项目</h3><p><code>koa koatest -e koatest</code>  </p>\n<h3 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2. 安装依赖\"></a>2. 安装依赖</h3><p><code>cd koatest &amp;&amp; npm install</code></p>\n<h3 id=\"3-安装mongoose\"><a href=\"#3-安装mongoose\" class=\"headerlink\" title=\"3. 安装mongoose\"></a>3. 安装mongoose</h3><p><code>npm install --save mongoose</code>  </p>\n<h3 id=\"4-创建模型\"><a href=\"#4-创建模型\" class=\"headerlink\" title=\"4. 创建模型\"></a>4. 创建模型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// models/users.server.model.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    uid:<span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    username:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    createTime:<span class=\"built_in\">Date</span>,</span><br><span class=\"line\">    lastLogin:<span class=\"built_in\">Date</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'User'</span>,UserSchema);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建配置文件\"><a href=\"#5-创建配置文件\" class=\"headerlink\" title=\"5. 创建配置文件\"></a>5. 创建配置文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">  mongodb:<span class=\"string\">'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//config/mongoose.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> db = mongoose.connect(config.mongodb);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./../models/users.server.model.js'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-操作mongdodb-代码\"><a href=\"#6-操作mongdodb-代码\" class=\"headerlink\" title=\"6. 操作mongdodb 代码\"></a>6. 操作mongdodb 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//routers/users.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>);</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">      uid:</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> User.find(&#123;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>最近在学习node，听说node和mongodb更配哦。。所以我就来学习mongodb了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/mongodb.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、mongodb的开启和关闭\"><a href=\"#一、mongodb的开启和关闭\" class=\"headerlink\" title=\"一、mongodb的开启和关闭\"></a>一、mongodb的开启和关闭</h2><h3 id=\"1-查找mongod是否可用\"><a href=\"#1-查找mongod是否可用\" class=\"headerlink\" title=\"1. 查找mongod是否可用\"></a>1. 查找mongod是否可用</h3><p><code>which mongod</code></p>\n<h3 id=\"2-启动mongodb\"><a href=\"#2-启动mongodb\" class=\"headerlink\" title=\"2. 启动mongodb\"></a>2. 启动mongodb</h3><p> 指定path 和log日志<br><code>mongod --dbpath /data2/db --port=27017 --fork /data2/db/log/mongod.log</code></p>\n<h3 id=\"3-关闭数据库\"><a href=\"#3-关闭数据库\" class=\"headerlink\" title=\"3. 关闭数据库\"></a>3. 关闭数据库</h3><p><code>mongod --shutdown</code></p>\n<h2 id=\"二、mongodb的操作\"><a href=\"#二、mongodb的操作\" class=\"headerlink\" title=\"二、mongodb的操作\"></a>二、mongodb的操作</h2><h3 id=\"1-连接服务器\"><a href=\"#1-连接服务器\" class=\"headerlink\" title=\"1. 连接服务器\"></a>1. 连接服务器</h3><p><code>mongod 115.29.137.34:27017</code>  </p>\n<h3 id=\"2-使用数据库\"><a href=\"#2-使用数据库\" class=\"headerlink\" title=\"2. 使用数据库\"></a>2. 使用数据库</h3><p>(不存在的数据库也可以使用,插入数据之后会自动保存)<br><code>use mydb</code>  </p>\n<h3 id=\"3-权限登陆\"><a href=\"#3-权限登陆\" class=\"headerlink\" title=\"3. 权限登陆\"></a>3. 权限登陆</h3><p><code>db.auth(&#39;username&#39;,&#39;password&#39;)</code></p>\n<h3 id=\"4-展示数据库列表\"><a href=\"#4-展示数据库列表\" class=\"headerlink\" title=\"4. 展示数据库列表\"></a>4. 展示数据库列表</h3><p><code>show dbs</code></p>\n<h3 id=\"5-插入数据\"><a href=\"#5-插入数据\" class=\"headerlink\" title=\"5. 插入数据\"></a>5. 插入数据</h3><p>(类似于mysql的表)<br><code>db.users.insert({&#39;name&#39;:&#39;xiaomo&#39;})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:25})</code><br><code>db.users.insert({&#39;name&#39;:&#39;xiaoming&#39;,&#39;age&#39;:24,&#39;sex&#39;:&#39;女&#39;})</code></p>\n<h3 id=\"6-查询集合\"><a href=\"#6-查询集合\" class=\"headerlink\" title=\"6. 查询集合\"></a>6. 查询集合</h3><p>(前提是use了一个数据库)<br>有一个System.indexes 是索引<br><code>show collections</code></p>\n<h3 id=\"7-不带条件查询\"><a href=\"#7-不带条件查询\" class=\"headerlink\" title=\"7. 不带条件查询\"></a>7. 不带条件查询</h3><p><code>db.users.find()</code>  </p>\n<h3 id=\"8-带条件查询\"><a href=\"#8-带条件查询\" class=\"headerlink\" title=\"8. 带条件查询\"></a>8. 带条件查询</h3><p>(参数是一个对象)<br><code>db.users.find({&#39;name&#39;:&#39;xiaomo&#39;})</code>  </p>\n<h3 id=\"9-更新数据\"><a href=\"#9-更新数据\" class=\"headerlink\" title=\"9. 更新数据\"></a>9. 更新数据</h3><p>(有三个参数,1:查询条件,2:更新的内容 3：更新的配置)<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}})</code>   修改满足条件的第一条数据<br><code>db.users.update({&#39;name&#39;:&#39;xiaomo&#39;,{$set:{&#39;name:&#39;xm}},{multi:true})</code>    修改所有满足条件的数据  </p>\n<h3 id=\"10-保存数据\"><a href=\"#10-保存数据\" class=\"headerlink\" title=\"10. 保存数据\"></a>10. 保存数据</h3><p>(只有一个参数，必须要传id，后面是要修改的数据)<br><code>db.users.save({&#39;id&#39;:&#39;objectId(574710a97a3afd63cde56a49)&#39;,&#39;age&#39;:30})</code>  </p>\n<h3 id=\"11-删除数据\"><a href=\"#11-删除数据\" class=\"headerlink\" title=\"11. 删除数据\"></a>11. 删除数据</h3><p>(1:条件 2 是否删除所有符合条件的)<br><code>db.users.remove({&#39;name&#39;:&#39;xiaomoing&#39;},true)</code>  </p>\n<h3 id=\"12-删除集合\"><a href=\"#12-删除集合\" class=\"headerlink\" title=\"12. 删除集合\"></a>12. 删除集合</h3><p><code>db.users.drop()</code>  </p>\n<h2 id=\"三、使用mongoose操作数据库\"><a href=\"#三、使用mongoose操作数据库\" class=\"headerlink\" title=\"三、使用mongoose操作数据库\"></a>三、使用mongoose操作数据库</h2><h3 id=\"1-模块的介绍\"><a href=\"#1-模块的介绍\" class=\"headerlink\" title=\"1. 模块的介绍\"></a>1. 模块的介绍</h3><p>连接mongdodb的驱动</p>\n<h3 id=\"2-配置和链接\"><a href=\"#2-配置和链接\" class=\"headerlink\" title=\"2. 配置和链接\"></a>2. 配置和链接</h3><p><code>npm install --save mongoose</code>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- var uri = 'mongodb://username:password@hostname:port/databasename'; --&gt;</span></span><br><span class=\"line\">var uri = 'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin';</span><br><span class=\"line\">mongoose.connect(uri);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Model-和Shema\"><a href=\"#3-Model-和Shema\" class=\"headerlink\" title=\"3. Model 和Shema\"></a>3. Model 和Shema</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// model.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema,</span><br><span class=\"line\">    ObjectId = Schema.ObjectId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> BlogPost = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    author    : ObjectId,</span><br><span class=\"line\">    title     : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    body      : <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    date      : <span class=\"built_in\">Date</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Model</span></span><br><span class=\"line\">mongoose.model(<span class=\"string\">'blog'</span>,Schema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Comment = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">String</span>, <span class=\"keyword\">default</span>: <span class=\"string\">'hahaha'</span> &#125;,</span><br><span class=\"line\">  age: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">Number</span>, min: <span class=\"number\">18</span>, index: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">  bio: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">String</span>, match: <span class=\"regexp\">/[a-z]/</span> &#125;,</span><br><span class=\"line\">  date: &#123; <span class=\"keyword\">type</span>: <span class=\"built_in\">Date</span>, <span class=\"keyword\">default</span>: <span class=\"built_in\">Date</span>.now &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a setter</span></span><br><span class=\"line\">Comment.path(<span class=\"string\">'name'</span>).set(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> capitalize(v);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// middleware</span></span><br><span class=\"line\">Comment.pre(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">  notify(<span class=\"keyword\">this</span>.get(<span class=\"string\">'email'</span>));</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-创建文档\"><a href=\"#4-创建文档\" class=\"headerlink\" title=\"4. 创建文档\"></a>4. 创建文档</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//insert.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose ＝ <span class=\"keyword\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">require</span>(<span class=\"string\">'./model.js'</span>); <span class=\"comment\">//执行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> blog = <span class=\"keyword\">new</span> Blog(<span class=\"comment\">&#123;</span><br><span class=\"line\">    name:'xiaomo',</span><br><span class=\"line\">    age:25,</span><br><span class=\"line\">    bio:'don't know',</span><br><span class=\"line\">    date:new Date</span><br><span class=\"line\">  &#125;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">book.save(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err)</span><span class=\"comment\">&#123;</span><br><span class=\"line\">    console.log('save status:'+err);</span><br><span class=\"line\">  &#125;</span>);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-删除文档\"><a href=\"#5-删除文档\" class=\"headerlink\" title=\"5. 删除文档\"></a>5. 删除文档</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.findOne(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(doc)&#123;</span><br><span class=\"line\">  doc.reomove();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-简单查询\"><a href=\"#6-简单查询\" class=\"headerlink\" title=\"6. 简单查询\"></a>6. 简单查询</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.find(&#123;&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<p>第一个满足条件的结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\">Blog.findOne(&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-条件语句\"><a href=\"#7-条件语句\" class=\"headerlink\" title=\"7. 条件语句\"></a>7. 条件语句</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// condation.js</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"> <span class=\"built_in\">require</span>(<span class=\"string\">'./model.js'</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'blog'</span>);</span><br><span class=\"line\"> <span class=\"comment\">//名字是xiaomo或者xiaoming 可以用$or和$and</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> condation = &#123;</span><br><span class=\"line\">   $or  $and:[</span><br><span class=\"line\">   &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaomo'</span>&#125;,</span><br><span class=\"line\">   &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'xiaoming'</span>&#125;</span><br><span class=\"line\">   ]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> Blog.find(condation,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,doc</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'result'</span>,doc)</span><br><span class=\"line\">   &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、在项目中使用mongoose\"><a href=\"#三、在项目中使用mongoose\" class=\"headerlink\" title=\"三、在项目中使用mongoose\"></a>三、在项目中使用mongoose</h2><h3 id=\"1-生成项目\"><a href=\"#1-生成项目\" class=\"headerlink\" title=\"1. 生成项目\"></a>1. 生成项目</h3><p><code>koa koatest -e koatest</code>  </p>\n<h3 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2. 安装依赖\"></a>2. 安装依赖</h3><p><code>cd koatest &amp;&amp; npm install</code></p>\n<h3 id=\"3-安装mongoose\"><a href=\"#3-安装mongoose\" class=\"headerlink\" title=\"3. 安装mongoose\"></a>3. 安装mongoose</h3><p><code>npm install --save mongoose</code>  </p>\n<h3 id=\"4-创建模型\"><a href=\"#4-创建模型\" class=\"headerlink\" title=\"4. 创建模型\"></a>4. 创建模型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// models/users.server.model.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> UserSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">    uid:<span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    username:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">    createTime:<span class=\"built_in\">Date</span>,</span><br><span class=\"line\">    lastLogin:<span class=\"built_in\">Date</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = mongoose.model(<span class=\"string\">'User'</span>,UserSchema);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-创建配置文件\"><a href=\"#5-创建配置文件\" class=\"headerlink\" title=\"5. 创建配置文件\"></a>5. 创建配置文件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">  mongodb:<span class=\"string\">'mongodb://xiaomo:xiaomo@115.29.137.34:27017/admin'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//config/mongoose.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> db = mongoose.connect(config.mongodb);</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./../models/users.server.model.js'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-操作mongdodb-代码\"><a href=\"#6-操作mongdodb-代码\" class=\"headerlink\" title=\"6. 操作mongdodb 代码\"></a>6. 操作mongdodb 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//routers/users.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>);</span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//add</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(&#123;</span><br><span class=\"line\">      uid:</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> User.find(&#123;&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-05-31T16:00:00.000Z","title":"npm模块分享","_content":"平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/npm.png)](https://github.com/qq83387856)\n## 一、 实用的模块\n### 1.[thunder-vip](https://github.com/nswbmw/thunder-vip)  \n作用：获取最新可用的迅雷 vip 账号。                  \n解决什么：不用每次打开网站去找号。。            \n用法： `$ thunder`  or\n\n  ```\n    var thunderVip = require('thunder-vip');\n\n    thunderVip(function (err, accounts) {\n    console.log(accounts);\n    });\n  ```\n\n  截图  \n\n  ![1](https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9)\n\n### 2. npm-user-downloads\n[npm-user-downloads](https://github.com/nswbmw/npm-user-downloads)  \n\n  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。\n\n  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。\n\n  用法： `$ nud hupengbest last-month --limit=20`\n\n  截图：\n\n  ![1](https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl)\n\n## 二、koa开发模块\n### 1. [co](https://npm.taobao.org/package/co)  \n作用：异步控制  \n\n1 栗子\n\n```\n\tco(function* () {\n\t  var result = yield Promise.resolve(true);\n\t  return result;\n\t}).then(function (value) {\n\t  console.log(value);\n\t}, function (err) {\n\t  console.error(err.stack);\n\t});\n```\n\n2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用`co.wrap(fn*)`\n\n```\n\tvar fn = co.wrap(function* (val) {\n\t  return yield Promise.resolve(val);\n\t});\n\n\tfn(true).then(function (val) {\n\n\t});\n```\n\n3 完整的example  \n\n```\n\tvar co = require('co');\n\n\tco(function *(){\n\t  // yield any promise\n\t  var result = yield Promise.resolve(true);\n\t}).catch(onerror);\n\n\tco(function *(){\n\t  // resolve multiple promises in parallel\n\t  var a = Promise.resolve(1);\n\t  var b = Promise.resolve(2);\n\t  var c = Promise.resolve(3);\n\t  var res = yield [a, b, c];\n\t  console.log(res);\n\t  // => [1, 2, 3]\n\t}).catch(onerror);\n\n\t// errors can be try/catched\n\tco(function *(){\n\t  try {\n\t    yield Promise.reject(new Error('boom'));\n\t  } catch (err) {\n\t    console.error(err.message); // \"boom\"\n\t }\n\t}).catch(onerror);\n\n\tfunction onerror(err) {\n\t  // log any uncaught errors\n\t  // co will not throw any errors you do not handle!!!\n\t  // HANDLE ALL YOUR ERRORS!!!\n\t  console.error(err.stack);\n\t}\n```\n\n4 api  \n\n`co(fn*).then( val => )`  \n解决一个generator然后返回一个promise\n\n```\n\tco(function* () {\n\t  return yield Promise.resolve(true);\n\t}).then(function (val) {\n\t  console.log(val);\n\t}, function (err) {\n\t  console.error(err.stack);\n\t});\n```\n\n`var fn = co.wrap(fn*)`  \n将一个generator转成普通的function并返回一个promise  \n\n```\n\tvar fn = co.wrap(function* (val) {\n\t  return yield Promise.resolve(val);\n\t});\n\n\tfn(true).then(function (val) {\n\n\t});\n```\n### 2、[debug](https://npm.taobao.org/package/debug)  \n` npm install debug`  \n\n1. 使用方法  \n\n```\n  //Example app.js\n\tvar debug = require('debug')('http')\n\t  , http = require('http')\n\t  , name = 'My App';\n\n\t// fake app\n\n\tdebug('booting %s', name);\n\n\thttp.createServer(function(req, res){\n\t  debug(req.method + ' ' + req.url);\n\t  res.end('hello\\n');\n\t}).listen(3000, function(){\n\t  debug('listening');\n\t});\n\n\t// fake worker of some kind\n\n\trequire('./worker');\n```\n\n\n```\n //Example worker.js:\n\tvar debug = require('debug')('worker');\n\n\tsetInterval(function(){\n\t  debug('doing some work');\n\t}, 1000);\n```\n\n效果图  \n![1](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n在windows环境下需要设置环境变量`set DEBUG=*,-not_this` 我这里使用的是idea的debug调试  \n![1](http://static.xiaomo.info/images/debug.png)\n\nwindows 下启动方式  \n![1](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n将debug日志转存到文件中  \n`DEBUG_FD=3 node your-app.js 3> whatever.log`   \n\n### 3、[koa-bodyparser](https://npm.taobao.org/package/koa-bodyparser)  \n\n\n使用方法  \n\n```\n  var koa = require('koa');\n  var bodyParser = require('koa-bodyparser');\n\n  var app = koa();\n  app.use(bodyParser());\n\n  app.use(function *() {\n    this.body = this.request.body;\n  });\n```\n\n\n在koa2中使用   \n\n`npm install koa-bodyparser@next --save`\n\n### 4. [koa-json](https://npm.taobao.org/package/koa-json)  \n`npm install koa-json --save`  \n\n使用方法   \n\n```\nvar json = require('koa-json');\nvar Koa = require('koa');\nvar app = new Koa();\n\napp.use(json());\n\napp.use((ctx) => {\n  ctx.body = { foo: 'bar' };\n});\n```\n\n### 4. [koa-webpack-dev-middleware](https://npm.taobao.org/package/koa-webpack-dev-middleware)\n\n使用方法   \n\n`npm install --save-dev koa-webpack-dev-middleware`\n\n```\nvar app = require('koa')();\nvar webpackMiddleware = require(\"koa-webpack-dev-middleware\");\napp.use(webpackMiddleware(webpack({\n  // webpack options\n  // webpackMiddleware takes a Compiler object as first parameter\n  // which is returned by webpack(...) without callback.\n  entry: \"...\",\n  output: {\n      path: \"/\"\n      // no real path is required, just pass \"/\"\n      // but it will work with other paths too.\n  }\n}), {\n  // all options optional\n\n  noInfo: false,\n  // display no info to console (only warnings and errors)\n\n  quiet: false,\n  // display nothing to the console\n\n  lazy: true,\n  // switch into lazy mode\n  // that means no watching, but recompilation on every request\n\n  watchDelay: 300,\n  // delay after change (only lazy: false)\n\n  publicPath: \"/assets/\",\n  // public path to bind the middleware to\n  // use the same as in webpack\n\n  headers: { \"X-Custom-Header\": \"yes\" },\n  // custom headers\n\n  stats: {\n      colors: true\n  }\n  // options for formating the statistics\n}));\n```\n","source":"_posts/2016-06-01.npm_modules_share.md","raw":"---\nauthor: 小莫\ndate: 2016-06-01\ntitle: npm模块分享\ntags:\n- npm\n- node\n- koa\ncategory: npm\npermalink: npm_modules_share\n---\n平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/npm.png)](https://github.com/qq83387856)\n## 一、 实用的模块\n### 1.[thunder-vip](https://github.com/nswbmw/thunder-vip)  \n作用：获取最新可用的迅雷 vip 账号。                  \n解决什么：不用每次打开网站去找号。。            \n用法： `$ thunder`  or\n\n  ```\n    var thunderVip = require('thunder-vip');\n\n    thunderVip(function (err, accounts) {\n    console.log(accounts);\n    });\n  ```\n\n  截图  \n\n  ![1](https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9)\n\n### 2. npm-user-downloads\n[npm-user-downloads](https://github.com/nswbmw/npm-user-downloads)  \n\n  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。\n\n  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。\n\n  用法： `$ nud hupengbest last-month --limit=20`\n\n  截图：\n\n  ![1](https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl)\n\n## 二、koa开发模块\n### 1. [co](https://npm.taobao.org/package/co)  \n作用：异步控制  \n\n1 栗子\n\n```\n\tco(function* () {\n\t  var result = yield Promise.resolve(true);\n\t  return result;\n\t}).then(function (value) {\n\t  console.log(value);\n\t}, function (err) {\n\t  console.error(err.stack);\n\t});\n```\n\n2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用`co.wrap(fn*)`\n\n```\n\tvar fn = co.wrap(function* (val) {\n\t  return yield Promise.resolve(val);\n\t});\n\n\tfn(true).then(function (val) {\n\n\t});\n```\n\n3 完整的example  \n\n```\n\tvar co = require('co');\n\n\tco(function *(){\n\t  // yield any promise\n\t  var result = yield Promise.resolve(true);\n\t}).catch(onerror);\n\n\tco(function *(){\n\t  // resolve multiple promises in parallel\n\t  var a = Promise.resolve(1);\n\t  var b = Promise.resolve(2);\n\t  var c = Promise.resolve(3);\n\t  var res = yield [a, b, c];\n\t  console.log(res);\n\t  // => [1, 2, 3]\n\t}).catch(onerror);\n\n\t// errors can be try/catched\n\tco(function *(){\n\t  try {\n\t    yield Promise.reject(new Error('boom'));\n\t  } catch (err) {\n\t    console.error(err.message); // \"boom\"\n\t }\n\t}).catch(onerror);\n\n\tfunction onerror(err) {\n\t  // log any uncaught errors\n\t  // co will not throw any errors you do not handle!!!\n\t  // HANDLE ALL YOUR ERRORS!!!\n\t  console.error(err.stack);\n\t}\n```\n\n4 api  \n\n`co(fn*).then( val => )`  \n解决一个generator然后返回一个promise\n\n```\n\tco(function* () {\n\t  return yield Promise.resolve(true);\n\t}).then(function (val) {\n\t  console.log(val);\n\t}, function (err) {\n\t  console.error(err.stack);\n\t});\n```\n\n`var fn = co.wrap(fn*)`  \n将一个generator转成普通的function并返回一个promise  \n\n```\n\tvar fn = co.wrap(function* (val) {\n\t  return yield Promise.resolve(val);\n\t});\n\n\tfn(true).then(function (val) {\n\n\t});\n```\n### 2、[debug](https://npm.taobao.org/package/debug)  \n` npm install debug`  \n\n1. 使用方法  \n\n```\n  //Example app.js\n\tvar debug = require('debug')('http')\n\t  , http = require('http')\n\t  , name = 'My App';\n\n\t// fake app\n\n\tdebug('booting %s', name);\n\n\thttp.createServer(function(req, res){\n\t  debug(req.method + ' ' + req.url);\n\t  res.end('hello\\n');\n\t}).listen(3000, function(){\n\t  debug('listening');\n\t});\n\n\t// fake worker of some kind\n\n\trequire('./worker');\n```\n\n\n```\n //Example worker.js:\n\tvar debug = require('debug')('worker');\n\n\tsetInterval(function(){\n\t  debug('doing some work');\n\t}, 1000);\n```\n\n效果图  \n![1](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n在windows环境下需要设置环境变量`set DEBUG=*,-not_this` 我这里使用的是idea的debug调试  \n![1](http://static.xiaomo.info/images/debug.png)\n\nwindows 下启动方式  \n![1](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n将debug日志转存到文件中  \n`DEBUG_FD=3 node your-app.js 3> whatever.log`   \n\n### 3、[koa-bodyparser](https://npm.taobao.org/package/koa-bodyparser)  \n\n\n使用方法  \n\n```\n  var koa = require('koa');\n  var bodyParser = require('koa-bodyparser');\n\n  var app = koa();\n  app.use(bodyParser());\n\n  app.use(function *() {\n    this.body = this.request.body;\n  });\n```\n\n\n在koa2中使用   \n\n`npm install koa-bodyparser@next --save`\n\n### 4. [koa-json](https://npm.taobao.org/package/koa-json)  \n`npm install koa-json --save`  \n\n使用方法   \n\n```\nvar json = require('koa-json');\nvar Koa = require('koa');\nvar app = new Koa();\n\napp.use(json());\n\napp.use((ctx) => {\n  ctx.body = { foo: 'bar' };\n});\n```\n\n### 4. [koa-webpack-dev-middleware](https://npm.taobao.org/package/koa-webpack-dev-middleware)\n\n使用方法   \n\n`npm install --save-dev koa-webpack-dev-middleware`\n\n```\nvar app = require('koa')();\nvar webpackMiddleware = require(\"koa-webpack-dev-middleware\");\napp.use(webpackMiddleware(webpack({\n  // webpack options\n  // webpackMiddleware takes a Compiler object as first parameter\n  // which is returned by webpack(...) without callback.\n  entry: \"...\",\n  output: {\n      path: \"/\"\n      // no real path is required, just pass \"/\"\n      // but it will work with other paths too.\n  }\n}), {\n  // all options optional\n\n  noInfo: false,\n  // display no info to console (only warnings and errors)\n\n  quiet: false,\n  // display nothing to the console\n\n  lazy: true,\n  // switch into lazy mode\n  // that means no watching, but recompilation on every request\n\n  watchDelay: 300,\n  // delay after change (only lazy: false)\n\n  publicPath: \"/assets/\",\n  // public path to bind the middleware to\n  // use the same as in webpack\n\n  headers: { \"X-Custom-Header\": \"yes\" },\n  // custom headers\n\n  stats: {\n      colors: true\n  }\n  // options for formating the statistics\n}));\n```\n","slug":"npm_modules_share","published":1,"updated":"2016-06-28T02:49:25.132Z","_id":"cipjfs5vc00294wmceb16bfj2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/npm.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-实用的模块\"><a href=\"#一、-实用的模块\" class=\"headerlink\" title=\"一、 实用的模块\"></a>一、 实用的模块</h2><h3 id=\"1-thunder-vip\"><a href=\"#1-thunder-vip\" class=\"headerlink\" title=\"1.thunder-vip\"></a>1.<a href=\"https://github.com/nswbmw/thunder-vip\" target=\"_blank\" rel=\"external\">thunder-vip</a></h3><p>作用：获取最新可用的迅雷 vip 账号。<br>解决什么：不用每次打开网站去找号。。<br>用法： <code>$ thunder</code>  or</p>\n  <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var thunderVip = require('thunder-vip')<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">thunderVip(<span class=\"name\">function</span> (<span class=\"name\">err</span>, accounts) &#123;</span><br><span class=\"line\">console.log(<span class=\"name\">accounts</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>  截图  </p>\n<p>  <img src=\"https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9\" alt=\"1\"></p>\n<h3 id=\"2-npm-user-downloads\"><a href=\"#2-npm-user-downloads\" class=\"headerlink\" title=\"2. npm-user-downloads\"></a>2. npm-user-downloads</h3><p><a href=\"https://github.com/nswbmw/npm-user-downloads\" target=\"_blank\" rel=\"external\">npm-user-downloads</a>  </p>\n<p>  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。</p>\n<p>  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。</p>\n<p>  用法： <code>$ nud hupengbest last-month --limit=20</code></p>\n<p>  截图：</p>\n<p>  <img src=\"https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl\" alt=\"1\"></p>\n<h2 id=\"二、koa开发模块\"><a href=\"#二、koa开发模块\" class=\"headerlink\" title=\"二、koa开发模块\"></a>二、koa开发模块</h2><h3 id=\"1-co\"><a href=\"#1-co\" class=\"headerlink\" title=\"1. co\"></a>1. <a href=\"https://npm.taobao.org/package/co\" target=\"_blank\" rel=\"external\">co</a></h3><p>作用：异步控制  </p>\n<p>1 栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用<code>co.wrap(fn*)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = co.wrap(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(val);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"literal\">true</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3 完整的example  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// yield any promise</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve multiple promises in parallel</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> [a, b, c];</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// errors can be try/catched</span></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'boom'</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err.message); <span class=\"comment\">// \"boom\"</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onerror</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// log any uncaught errors</span></span><br><span class=\"line\">  <span class=\"comment\">// co will not throw any errors you do not handle!!!</span></span><br><span class=\"line\">  <span class=\"comment\">// HANDLE ALL YOUR ERRORS!!!</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4 api  </p>\n<p><code>co(fn*).then( val =&gt; )</code><br>解决一个generator然后返回一个promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>var fn = co.wrap(fn*)</code><br>将一个generator转成普通的function并返回一个promise  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = co.wrap(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(val);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"literal\">true</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、debug\"><a href=\"#2、debug\" class=\"headerlink\" title=\"2、debug\"></a>2、<a href=\"https://npm.taobao.org/package/debug\" target=\"_blank\" rel=\"external\">debug</a></h3><p><code>npm install debug</code>  </p>\n<ol>\n<li>使用方法  </li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //Example app.js</span><br><span class=\"line\">var <span class=\"built_in\">debug</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">  , http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">  , name = <span class=\"string\">'My App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// fake app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">debug</span>(<span class=\"string\">'booting %s'</span>, name);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">debug</span>(req.method + <span class=\"string\">' '</span> + req.url);</span><br><span class=\"line\">  res.<span class=\"keyword\">end</span>(<span class=\"string\">'hello\\n'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">debug</span>(<span class=\"string\">'listening'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// fake worker of some kind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./worker'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example worker.js:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  debug(<span class=\"string\">'doing some work'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png\" alt=\"1\"></p>\n<p>在windows环境下需要设置环境变量<code>set DEBUG=*,-not_this</code> 我这里使用的是idea的debug调试<br><img src=\"http://static.xiaomo.info/images/debug.png\" alt=\"1\"></p>\n<p>windows 下启动方式<br><img src=\"http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png\" alt=\"1\"></p>\n<p>将debug日志转存到文件中<br><code>DEBUG_FD=3 node your-app.js 3&gt; whatever.log</code>   </p>\n<h3 id=\"3、koa-bodyparser\"><a href=\"#3、koa-bodyparser\" class=\"headerlink\" title=\"3、koa-bodyparser\"></a>3、<a href=\"https://npm.taobao.org/package/koa-bodyparser\" target=\"_blank\" rel=\"external\">koa-bodyparser</a></h3><p>使用方法  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = koa();</span><br><span class=\"line\">app.use(bodyParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.request.body;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在koa2中使用   </p>\n<p><code>npm install koa-bodyparser@next --save</code></p>\n<h3 id=\"4-koa-json\"><a href=\"#4-koa-json\" class=\"headerlink\" title=\"4. koa-json\"></a>4. <a href=\"https://npm.taobao.org/package/koa-json\" target=\"_blank\" rel=\"external\">koa-json</a></h3><p><code>npm install koa-json --save</code>  </p>\n<p>使用方法   </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Koa = <span class=\"keyword\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(json());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>((ctx) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = &#123; foo: <span class=\"string\">'bar'</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-koa-webpack-dev-middleware\"><a href=\"#4-koa-webpack-dev-middleware\" class=\"headerlink\" title=\"4. koa-webpack-dev-middleware\"></a>4. <a href=\"https://npm.taobao.org/package/koa-webpack-dev-middleware\" target=\"_blank\" rel=\"external\">koa-webpack-dev-middleware</a></h3><p>使用方法   </p>\n<p><code>npm install --save-dev koa-webpack-dev-middleware</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">require</span>(<span class=\"string\">'koa'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackMiddleware = <span class=\"keyword\">require</span>(<span class=\"string\">\"koa-webpack-dev-middleware\"</span>);</span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(webpackMiddleware(webpack(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// webpack options</span></span><br><span class=\"line\">  <span class=\"comment\">// webpackMiddleware takes a Compiler object as first parameter</span></span><br><span class=\"line\">  <span class=\"comment\">// which is returned by webpack(...) without callback.</span></span><br><span class=\"line\">  entry: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">      <span class=\"comment\">// no real path is required, just pass \"/\"</span></span><br><span class=\"line\">      <span class=\"comment\">// but it will work with other paths too.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;), &#123;</span><br><span class=\"line\">  <span class=\"comment\">// all options optional</span></span><br><span class=\"line\"></span><br><span class=\"line\">  noInfo: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// display no info to console (only warnings and errors)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  quiet: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// display nothing to the console</span></span><br><span class=\"line\"></span><br><span class=\"line\">  lazy: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// switch into lazy mode</span></span><br><span class=\"line\">  <span class=\"comment\">// that means no watching, but recompilation on every request</span></span><br><span class=\"line\"></span><br><span class=\"line\">  watchDelay: <span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"comment\">// delay after change (only lazy: false)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  publicPath: <span class=\"string\">\"/assets/\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// public path to bind the middleware to</span></span><br><span class=\"line\">  <span class=\"comment\">// use the same as in webpack</span></span><br><span class=\"line\"></span><br><span class=\"line\">  headers: &#123; <span class=\"string\">\"X-Custom-Header\"</span>: <span class=\"string\">\"yes\"</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// custom headers</span></span><br><span class=\"line\"></span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">      colors: <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// options for formating the statistics</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>平时自己用的npm模块也不算少了，其实网上有很多牛人开发的npm模块都很好，希望不要被埋没了。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/npm.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-实用的模块\"><a href=\"#一、-实用的模块\" class=\"headerlink\" title=\"一、 实用的模块\"></a>一、 实用的模块</h2><h3 id=\"1-thunder-vip\"><a href=\"#1-thunder-vip\" class=\"headerlink\" title=\"1.thunder-vip\"></a>1.<a href=\"https://github.com/nswbmw/thunder-vip\">thunder-vip</a></h3><p>作用：获取最新可用的迅雷 vip 账号。<br>解决什么：不用每次打开网站去找号。。<br>用法： <code>$ thunder</code>  or</p>\n  <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var thunderVip = require('thunder-vip')<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">thunderVip(<span class=\"name\">function</span> (<span class=\"name\">err</span>, accounts) &#123;</span><br><span class=\"line\">console.log(<span class=\"name\">accounts</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>  截图  </p>\n<p>  <img src=\"https://dn-cnode.qbox.me/FskKgd_Epv4IYYh0waATFFHoD7g9\" alt=\"1\"></p>\n<h3 id=\"2-npm-user-downloads\"><a href=\"#2-npm-user-downloads\" class=\"headerlink\" title=\"2. npm-user-downloads\"></a>2. npm-user-downloads</h3><p><a href=\"https://github.com/nswbmw/npm-user-downloads\">npm-user-downloads</a>  </p>\n<p>  查看 npm 用户某个时间段内所有模块的下载量，按从高到低排名。</p>\n<p>  解决什么：起初是想看自己的那些模块下载量多，好重点维护。。</p>\n<p>  用法： <code>$ nud hupengbest last-month --limit=20</code></p>\n<p>  截图：</p>\n<p>  <img src=\"https://dn-cnode.qbox.me/FhJDMWtAwWxgkXsEMWsfIz4XZ3Jl\" alt=\"1\"></p>\n<h2 id=\"二、koa开发模块\"><a href=\"#二、koa开发模块\" class=\"headerlink\" title=\"二、koa开发模块\"></a>二、koa开发模块</h2><h3 id=\"1-co\"><a href=\"#1-co\" class=\"headerlink\" title=\"1. co\"></a>1. <a href=\"https://npm.taobao.org/package/co\">co</a></h3><p>作用：异步控制  </p>\n<p>1 栗子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>2 如果你想把一个 co-generator-function 转成真实的functionu并返回一个promise 可以使用<code>co.wrap(fn*)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = co.wrap(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(val);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"literal\">true</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>3 完整的example  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// yield any promise</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// resolve multiple promises in parallel</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> [a, b, c];</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  <span class=\"comment\">// =&gt; [1, 2, 3]</span></span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// errors can be try/catched</span></span><br><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'boom'</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err.message); <span class=\"comment\">// \"boom\"</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;).catch(onerror);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onerror</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// log any uncaught errors</span></span><br><span class=\"line\">  <span class=\"comment\">// co will not throw any errors you do not handle!!!</span></span><br><span class=\"line\">  <span class=\"comment\">// HANDLE ALL YOUR ERRORS!!!</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4 api  </p>\n<p><code>co(fn*).then( val =&gt; )</code><br>解决一个generator然后返回一个promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(val);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>var fn = co.wrap(fn*)</code><br>将一个generator转成普通的function并返回一个promise  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fn = co.wrap(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"built_in\">Promise</span>.resolve(val);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"literal\">true</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、debug\"><a href=\"#2、debug\" class=\"headerlink\" title=\"2、debug\"></a>2、<a href=\"https://npm.taobao.org/package/debug\">debug</a></h3><p><code>npm install debug</code>  </p>\n<ol>\n<li>使用方法  </li>\n</ol>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> //Example app.js</span><br><span class=\"line\">var <span class=\"built_in\">debug</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">  , http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">  , name = <span class=\"string\">'My App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">// fake app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">debug</span>(<span class=\"string\">'booting %s'</span>, name);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">debug</span>(req.method + <span class=\"string\">' '</span> + req.url);</span><br><span class=\"line\">  res.<span class=\"keyword\">end</span>(<span class=\"string\">'hello\\n'</span>);</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">debug</span>(<span class=\"string\">'listening'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// fake worker of some kind</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./worker'</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Example worker.js:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'worker'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  debug(<span class=\"string\">'doing some work'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png\" alt=\"1\"></p>\n<p>在windows环境下需要设置环境变量<code>set DEBUG=*,-not_this</code> 我这里使用的是idea的debug调试<br><img src=\"http://static.xiaomo.info/images/debug.png\" alt=\"1\"></p>\n<p>windows 下启动方式<br><img src=\"http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png\" alt=\"1\"></p>\n<p>将debug日志转存到文件中<br><code>DEBUG_FD=3 node your-app.js 3&gt; whatever.log</code>   </p>\n<h3 id=\"3、koa-bodyparser\"><a href=\"#3、koa-bodyparser\" class=\"headerlink\" title=\"3、koa-bodyparser\"></a>3、<a href=\"https://npm.taobao.org/package/koa-bodyparser\">koa-bodyparser</a></h3><p>使用方法  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = koa();</span><br><span class=\"line\">app.use(bodyParser());</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.request.body;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在koa2中使用   </p>\n<p><code>npm install koa-bodyparser@next --save</code></p>\n<h3 id=\"4-koa-json\"><a href=\"#4-koa-json\" class=\"headerlink\" title=\"4. koa-json\"></a>4. <a href=\"https://npm.taobao.org/package/koa-json\">koa-json</a></h3><p><code>npm install koa-json --save</code>  </p>\n<p>使用方法   </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> json = <span class=\"keyword\">require</span>(<span class=\"string\">'koa-json'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Koa = <span class=\"keyword\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(json());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"keyword\">use</span>((ctx) =&gt; &#123;</span><br><span class=\"line\">  ctx.body = &#123; foo: <span class=\"string\">'bar'</span> &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-koa-webpack-dev-middleware\"><a href=\"#4-koa-webpack-dev-middleware\" class=\"headerlink\" title=\"4. koa-webpack-dev-middleware\"></a>4. <a href=\"https://npm.taobao.org/package/koa-webpack-dev-middleware\">koa-webpack-dev-middleware</a></h3><p>使用方法   </p>\n<p><code>npm install --save-dev koa-webpack-dev-middleware</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">require</span>(<span class=\"string\">'koa'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> webpackMiddleware = <span class=\"keyword\">require</span>(<span class=\"string\">\"koa-webpack-dev-middleware\"</span>);</span><br><span class=\"line\">app.<span class=\"keyword\">use</span>(webpackMiddleware(webpack(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// webpack options</span></span><br><span class=\"line\">  <span class=\"comment\">// webpackMiddleware takes a Compiler object as first parameter</span></span><br><span class=\"line\">  <span class=\"comment\">// which is returned by webpack(...) without callback.</span></span><br><span class=\"line\">  entry: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">      path: <span class=\"string\">\"/\"</span></span><br><span class=\"line\">      <span class=\"comment\">// no real path is required, just pass \"/\"</span></span><br><span class=\"line\">      <span class=\"comment\">// but it will work with other paths too.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;), &#123;</span><br><span class=\"line\">  <span class=\"comment\">// all options optional</span></span><br><span class=\"line\"></span><br><span class=\"line\">  noInfo: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// display no info to console (only warnings and errors)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  quiet: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// display nothing to the console</span></span><br><span class=\"line\"></span><br><span class=\"line\">  lazy: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// switch into lazy mode</span></span><br><span class=\"line\">  <span class=\"comment\">// that means no watching, but recompilation on every request</span></span><br><span class=\"line\"></span><br><span class=\"line\">  watchDelay: <span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"comment\">// delay after change (only lazy: false)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  publicPath: <span class=\"string\">\"/assets/\"</span>,</span><br><span class=\"line\">  <span class=\"comment\">// public path to bind the middleware to</span></span><br><span class=\"line\">  <span class=\"comment\">// use the same as in webpack</span></span><br><span class=\"line\"></span><br><span class=\"line\">  headers: &#123; <span class=\"string\">\"X-Custom-Header\"</span>: <span class=\"string\">\"yes\"</span> &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// custom headers</span></span><br><span class=\"line\"></span><br><span class=\"line\">  stats: &#123;</span><br><span class=\"line\">      colors: <span class=\"keyword\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// options for formating the statistics</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-05-29T16:00:00.000Z","title":"markdown编辑器推荐和使用","_content":"由于自己在用markdown写博客，当然一个称手的利器是少不了的，所以我一直在探索用一款什么样的编辑器才能使用写博客更加的得心应手。我才开始一直是在atom里面写博客的，但是它的实时预览功能一旦开启就会很卡，因此我开始了寻找新的工具。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 一、markdown编辑器推荐\n### 1.工具                 \n`atom`、`idea`、`markdownpad2`都是不错的编辑工具               \n### 2. 缺点                    \n但是idea和atom有一个缺点:很卡！！！电脑配置不高的情况下很磨人，所以使用markdownpad2是不错的选择。　　　          \n\n## 二、安装markdownpad2\n\n### 1. 官方下载，放心、安全  \n下载链接：[http://markdownpad.com/download.html](http://markdownpad.com/download.html)\n\n### 2. 安装和注册\n\n 邮箱：`Soar360@live.com`\n\n 授权秘钥：\n\n```\nGBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==\n```\n\n### 3. 出现的问题\nMarkdownPad 2 在win10下html渲染错误This view has crashed，windows 10系统 需要下载 一个`awesomium_v1.6.6_sdk_win`这是一个`HTML UI ENGINE`\n\n下载地址[http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe](http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe \"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\")\n\n亲测下载安装后渲染正常;\n\n如果以上安装后问题还没解决，官方文档建议下载安装 Microsoft's DirectX End-User Runtimes (June 2010).\n\n## 三、使用效果图\n\n![markdownpad2](http://static.xiaomo.info/images/markdownpad2.png)\n","source":"_posts/2016-05-30.markdownpad2.md","raw":"---\nauthor: 小莫\ndate: 2016-05-30\ntitle: markdown编辑器推荐和使用\ntags: markdown\ncategory:\n- markdown\npermalink: markdownpad2\n---\n由于自己在用markdown写博客，当然一个称手的利器是少不了的，所以我一直在探索用一款什么样的编辑器才能使用写博客更加的得心应手。我才开始一直是在atom里面写博客的，但是它的实时预览功能一旦开启就会很卡，因此我开始了寻找新的工具。\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n## 一、markdown编辑器推荐\n### 1.工具                 \n`atom`、`idea`、`markdownpad2`都是不错的编辑工具               \n### 2. 缺点                    \n但是idea和atom有一个缺点:很卡！！！电脑配置不高的情况下很磨人，所以使用markdownpad2是不错的选择。　　　          \n\n## 二、安装markdownpad2\n\n### 1. 官方下载，放心、安全  \n下载链接：[http://markdownpad.com/download.html](http://markdownpad.com/download.html)\n\n### 2. 安装和注册\n\n 邮箱：`Soar360@live.com`\n\n 授权秘钥：\n\n```\nGBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==\n```\n\n### 3. 出现的问题\nMarkdownPad 2 在win10下html渲染错误This view has crashed，windows 10系统 需要下载 一个`awesomium_v1.6.6_sdk_win`这是一个`HTML UI ENGINE`\n\n下载地址[http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe](http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe \"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\")\n\n亲测下载安装后渲染正常;\n\n如果以上安装后问题还没解决，官方文档建议下载安装 Microsoft's DirectX End-User Runtimes (June 2010).\n\n## 三、使用效果图\n\n![markdownpad2](http://static.xiaomo.info/images/markdownpad2.png)\n","slug":"markdownpad2","published":1,"updated":"2016-06-28T02:49:31.359Z","_id":"cipjfs5vf002d4wmcwynsrgae","comments":1,"layout":"post","photos":[],"link":"","content":"<p>由于自己在用markdown写博客，当然一个称手的利器是少不了的，所以我一直在探索用一款什么样的编辑器才能使用写博客更加的得心应手。我才开始一直是在atom里面写博客的，但是它的实时预览功能一旦开启就会很卡，因此我开始了寻找新的工具。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、markdown编辑器推荐\"><a href=\"#一、markdown编辑器推荐\" class=\"headerlink\" title=\"一、markdown编辑器推荐\"></a>一、markdown编辑器推荐</h2><h3 id=\"1-工具\"><a href=\"#1-工具\" class=\"headerlink\" title=\"1.工具\"></a>1.工具</h3><p><code>atom</code>、<code>idea</code>、<code>markdownpad2</code>都是不错的编辑工具               </p>\n<h3 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h3><p>但是idea和atom有一个缺点:很卡！！！电脑配置不高的情况下很磨人，所以使用markdownpad2是不错的选择。　　　          </p>\n<h2 id=\"二、安装markdownpad2\"><a href=\"#二、安装markdownpad2\" class=\"headerlink\" title=\"二、安装markdownpad2\"></a>二、安装markdownpad2</h2><h3 id=\"1-官方下载，放心、安全\"><a href=\"#1-官方下载，放心、安全\" class=\"headerlink\" title=\"1. 官方下载，放心、安全\"></a>1. 官方下载，放心、安全</h3><p>下载链接：<a href=\"http://markdownpad.com/download.html\" target=\"_blank\" rel=\"external\">http://markdownpad.com/download.html</a></p>\n<h3 id=\"2-安装和注册\"><a href=\"#2-安装和注册\" class=\"headerlink\" title=\"2. 安装和注册\"></a>2. 安装和注册</h3><p> 邮箱：<code>Soar360@live.com</code></p>\n<p> 授权秘钥：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5<span class=\"regexp\">/sQytXJUQl/</span>QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb<span class=\"regexp\">/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/</span>eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-出现的问题\"><a href=\"#3-出现的问题\" class=\"headerlink\" title=\"3. 出现的问题\"></a>3. 出现的问题</h3><p>MarkdownPad 2 在win10下html渲染错误This view has crashed，windows 10系统 需要下载 一个<code>awesomium_v1.6.6_sdk_win</code>这是一个<code>HTML UI ENGINE</code></p>\n<p>下载地址<a href=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\" title=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\" target=\"_blank\" rel=\"external\">http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe</a></p>\n<p>亲测下载安装后渲染正常;</p>\n<p>如果以上安装后问题还没解决，官方文档建议下载安装 Microsoft’s DirectX End-User Runtimes (June 2010).</p>\n<h2 id=\"三、使用效果图\"><a href=\"#三、使用效果图\" class=\"headerlink\" title=\"三、使用效果图\"></a>三、使用效果图</h2><p><img src=\"http://static.xiaomo.info/images/markdownpad2.png\" alt=\"markdownpad2\"></p>\n","excerpt":"<p>由于自己在用markdown写博客，当然一个称手的利器是少不了的，所以我一直在探索用一款什么样的编辑器才能使用写博客更加的得心应手。我才开始一直是在atom里面写博客的，但是它的实时预览功能一旦开启就会很卡，因此我开始了寻找新的工具。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、markdown编辑器推荐\"><a href=\"#一、markdown编辑器推荐\" class=\"headerlink\" title=\"一、markdown编辑器推荐\"></a>一、markdown编辑器推荐</h2><h3 id=\"1-工具\"><a href=\"#1-工具\" class=\"headerlink\" title=\"1.工具\"></a>1.工具</h3><p><code>atom</code>、<code>idea</code>、<code>markdownpad2</code>都是不错的编辑工具               </p>\n<h3 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h3><p>但是idea和atom有一个缺点:很卡！！！电脑配置不高的情况下很磨人，所以使用markdownpad2是不错的选择。　　　          </p>\n<h2 id=\"二、安装markdownpad2\"><a href=\"#二、安装markdownpad2\" class=\"headerlink\" title=\"二、安装markdownpad2\"></a>二、安装markdownpad2</h2><h3 id=\"1-官方下载，放心、安全\"><a href=\"#1-官方下载，放心、安全\" class=\"headerlink\" title=\"1. 官方下载，放心、安全\"></a>1. 官方下载，放心、安全</h3><p>下载链接：<a href=\"http://markdownpad.com/download.html\">http://markdownpad.com/download.html</a></p>\n<h3 id=\"2-安装和注册\"><a href=\"#2-安装和注册\" class=\"headerlink\" title=\"2. 安装和注册\"></a>2. 安装和注册</h3><p> 邮箱：<code>Soar360@live.com</code></p>\n<p> 授权秘钥：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5<span class=\"regexp\">/sQytXJUQl/</span>QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb<span class=\"regexp\">/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/</span>eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-出现的问题\"><a href=\"#3-出现的问题\" class=\"headerlink\" title=\"3. 出现的问题\"></a>3. 出现的问题</h3><p>MarkdownPad 2 在win10下html渲染错误This view has crashed，windows 10系统 需要下载 一个<code>awesomium_v1.6.6_sdk_win</code>这是一个<code>HTML UI ENGINE</code></p>\n<p>下载地址<a href=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\" title=\"http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe\">http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe</a></p>\n<p>亲测下载安装后渲染正常;</p>\n<p>如果以上安装后问题还没解决，官方文档建议下载安装 Microsoft’s DirectX End-User Runtimes (June 2010).</p>\n<h2 id=\"三、使用效果图\"><a href=\"#三、使用效果图\" class=\"headerlink\" title=\"三、使用效果图\"></a>三、使用效果图</h2><p><img src=\"http://static.xiaomo.info/images/markdownpad2.png\" alt=\"markdownpad2\"></p>"},{"author":"小莫","date":"2016-06-02T16:00:00.000Z","title":"nodejs爬虫项目实战","_content":"这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、 依赖\n### 1. DOM操作  [cheerio](https://npm.taobao.org/package/cheerio)    \n### 2. 请求插件  [request](https://npm.taobao.org/package/request)    \n### 3. http库  [superagent](https://npm.taobao.org/package/superagent)   \n### 4. 代理  [eventproxy](https://npm.taobao.org/package/eventproxy)   \n\n## 二、建立项目node-spider\n\n### 1. 建立一个Koa2项目\n `npm install -g koa-generator`\n### 2. 生成一个koa2的项目\n `koa2 -e node-spider`   -e表示使用ejs模板，具体参照[koa生成器,一键生成koa和koa2项目](http://localhost:4000/2016/05/26/2016-5-26-koa_generator/)   \n\n## 三、目标网站分析\n\n如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。\n![](http://static.xiaomo.info/images/0.png)\n\n## 四、爬虫功能制作\n\n### 1. superagent   \n是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。\n\n```\n  var koa = require('koa');\n  var router = require('koa-router')\n  var url = require('url'); //解析操作url\n  var superagent = require('superagent'); //这三个外部依赖不要忘记npm install\n  var cheerio = require('cheerio');\n  var eventproxy = require('eventproxy');\n  var targetUrl = 'https://cnodejs.org/';\n  superagent.get(targetUrl)\n    .end(function (err, res) {\n        console.log(res);\n    });\n```\n\n它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。\n\n![](http://static.xiaomo.info/images/1.png)\n\n### 2. 使用cheerio解析\n\ncheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。\n\n```\n  var $ = cheerio.load(res.text);\n  //通过CSS selector来筛选数据\n  $('#topic_list .topic_title').each(function (idx, element) {\n      console.log(element);\n  });\n```\n\n其结果为一个个对象，调用 `.each(function(index, element))`函数来遍历每一个对象，返回的是HTML DOM Elements。\n\n![](http://static.xiaomo.info/images/2.png)\n\n输出 `console.log($element.attr('title'));`的结果为\n `广州2014年12月06日 NodeParty 之 UC 场之类的标题`   \n输出 `console.log($element.attr('href'));`的结果为\n` /topic/545c395becbcb78265856eb2之类的url`。  \n再用`NodeJS1的url.resolve()`函数来补全完整的url。  \n\n\n```\nsuperagent.get(tUrl)\n    .end(function (err, res) {\n        if (err) {\n            return console.error(err);\n        }\n        var topicUrls = [];\n        var $ = cheerio.load(res.text);\n        // 获取首页所有的链接\n        $('#topic_list .topic_title').each(function (idx, element) {\n            var $element = $(element);\n            var href = url.resolve(tUrl, $element.attr('href'));\n            console.log(href);\n            //topicUrls.push(href);\n        });\n    });\n```\n\n### 3.使用eventproxy来并发抓取\n教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。\n\n```\n  //第一步：得到一个 eventproxy 的实例\n  var ep = new eventproxy();\n  //第二步：定义监听事件的回调函数。\n  //after方法为重复监听\n  //params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数\n  ep.after('topic_html', topicUrls.length, function(topics){\n      // topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair\n      //.map\n      topics = topics.map(function(topicPair){\n          //use cheerio\n          var topicUrl = topicPair[0];\n          var topicHtml = topicPair[1];\n          var $ = cheerio.load(topicHtml);\n          return ({\n              title: $('.topic_full_title').text().trim(),\n              href: topicUrl,\n              comment1: $('.reply_content').eq(0).text().trim()\n          });\n      });\n      //outcome\n      console.log('outcome:');\n      console.log(topics);\n  });\n  //第三步：确定放出事件消息的\n  topicUrls.forEach(function (topicUrl) {\n      superagent.get(topicUrl)\n          .end(function (err, res) {\n              console.log('fetch ' + topicUrl + ' successful');\n              ep.emit('topic_html', [topicUrl, res.text]);\n          });\n  });\n```\n\n结果如下  \n\n![](http://static.xiaomo.info/images/3.png)\n\n\n获取留言用户名和积分  \n\n![](http://static.xiaomo.info/images/4.png)\n\n在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $('.reply_author').get(0)可以看到，我们需要获取东西都在这里头。\n\n![](http://static.xiaomo.info/images/5.png)\n\n首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。\n\n```\n  var userHref = url.resolve(tUrl, $('.reply_author').get(0).attribs.href);\n  console.log(userHref);\n  console.log($('.reply_author').get(0).children[0].data);\n```\n\n我们可以通过`https://cnodejs.org/user/username`抓取积分信息\n\n```\n$('.reply_author').each(function (idx, element) {\nvar $element = $(element);\nconsole.log($element.attr('href'));\n});\n```\n\n在用户信息页面 `$('.big').text().trim()`即为积分信息。\n使用cheerio的函数.get(0)为获取第一个元素。\n\n```\nvar userHref = url.resolve(tUrl, $('.reply_author').get(0).attribs.href);\nconsole.log(userHref);\n```\n","source":"_posts/2016-06-02.nodejs_spider_system.md","raw":"---\nauthor: 小莫\ndate: 2016-06-03\ntitle: nodejs爬虫项目实战\ntags:\n- node\n- javascript\n- es6\ncategory: node\npermalink: node_spider\n---\n这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/nodejs.png)](https://github.com/qq83387856)\n## 一、 依赖\n### 1. DOM操作  [cheerio](https://npm.taobao.org/package/cheerio)    \n### 2. 请求插件  [request](https://npm.taobao.org/package/request)    \n### 3. http库  [superagent](https://npm.taobao.org/package/superagent)   \n### 4. 代理  [eventproxy](https://npm.taobao.org/package/eventproxy)   \n\n## 二、建立项目node-spider\n\n### 1. 建立一个Koa2项目\n `npm install -g koa-generator`\n### 2. 生成一个koa2的项目\n `koa2 -e node-spider`   -e表示使用ejs模板，具体参照[koa生成器,一键生成koa和koa2项目](http://localhost:4000/2016/05/26/2016-5-26-koa_generator/)   \n\n## 三、目标网站分析\n\n如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。\n![](http://static.xiaomo.info/images/0.png)\n\n## 四、爬虫功能制作\n\n### 1. superagent   \n是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。\n\n```\n  var koa = require('koa');\n  var router = require('koa-router')\n  var url = require('url'); //解析操作url\n  var superagent = require('superagent'); //这三个外部依赖不要忘记npm install\n  var cheerio = require('cheerio');\n  var eventproxy = require('eventproxy');\n  var targetUrl = 'https://cnodejs.org/';\n  superagent.get(targetUrl)\n    .end(function (err, res) {\n        console.log(res);\n    });\n```\n\n它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。\n\n![](http://static.xiaomo.info/images/1.png)\n\n### 2. 使用cheerio解析\n\ncheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。\n\n```\n  var $ = cheerio.load(res.text);\n  //通过CSS selector来筛选数据\n  $('#topic_list .topic_title').each(function (idx, element) {\n      console.log(element);\n  });\n```\n\n其结果为一个个对象，调用 `.each(function(index, element))`函数来遍历每一个对象，返回的是HTML DOM Elements。\n\n![](http://static.xiaomo.info/images/2.png)\n\n输出 `console.log($element.attr('title'));`的结果为\n `广州2014年12月06日 NodeParty 之 UC 场之类的标题`   \n输出 `console.log($element.attr('href'));`的结果为\n` /topic/545c395becbcb78265856eb2之类的url`。  \n再用`NodeJS1的url.resolve()`函数来补全完整的url。  \n\n\n```\nsuperagent.get(tUrl)\n    .end(function (err, res) {\n        if (err) {\n            return console.error(err);\n        }\n        var topicUrls = [];\n        var $ = cheerio.load(res.text);\n        // 获取首页所有的链接\n        $('#topic_list .topic_title').each(function (idx, element) {\n            var $element = $(element);\n            var href = url.resolve(tUrl, $element.attr('href'));\n            console.log(href);\n            //topicUrls.push(href);\n        });\n    });\n```\n\n### 3.使用eventproxy来并发抓取\n教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。\n\n```\n  //第一步：得到一个 eventproxy 的实例\n  var ep = new eventproxy();\n  //第二步：定义监听事件的回调函数。\n  //after方法为重复监听\n  //params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数\n  ep.after('topic_html', topicUrls.length, function(topics){\n      // topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair\n      //.map\n      topics = topics.map(function(topicPair){\n          //use cheerio\n          var topicUrl = topicPair[0];\n          var topicHtml = topicPair[1];\n          var $ = cheerio.load(topicHtml);\n          return ({\n              title: $('.topic_full_title').text().trim(),\n              href: topicUrl,\n              comment1: $('.reply_content').eq(0).text().trim()\n          });\n      });\n      //outcome\n      console.log('outcome:');\n      console.log(topics);\n  });\n  //第三步：确定放出事件消息的\n  topicUrls.forEach(function (topicUrl) {\n      superagent.get(topicUrl)\n          .end(function (err, res) {\n              console.log('fetch ' + topicUrl + ' successful');\n              ep.emit('topic_html', [topicUrl, res.text]);\n          });\n  });\n```\n\n结果如下  \n\n![](http://static.xiaomo.info/images/3.png)\n\n\n获取留言用户名和积分  \n\n![](http://static.xiaomo.info/images/4.png)\n\n在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $('.reply_author').get(0)可以看到，我们需要获取东西都在这里头。\n\n![](http://static.xiaomo.info/images/5.png)\n\n首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。\n\n```\n  var userHref = url.resolve(tUrl, $('.reply_author').get(0).attribs.href);\n  console.log(userHref);\n  console.log($('.reply_author').get(0).children[0].data);\n```\n\n我们可以通过`https://cnodejs.org/user/username`抓取积分信息\n\n```\n$('.reply_author').each(function (idx, element) {\nvar $element = $(element);\nconsole.log($element.attr('href'));\n});\n```\n\n在用户信息页面 `$('.big').text().trim()`即为积分信息。\n使用cheerio的函数.get(0)为获取第一个元素。\n\n```\nvar userHref = url.resolve(tUrl, $('.reply_author').get(0).attribs.href);\nconsole.log(userHref);\n```\n","slug":"node_spider","published":1,"updated":"2016-06-28T02:49:16.496Z","_id":"cipjfs5vj002g4wmciy2ir3d7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-依赖\"><a href=\"#一、-依赖\" class=\"headerlink\" title=\"一、 依赖\"></a>一、 依赖</h2><h3 id=\"1-DOM操作-cheerio\"><a href=\"#1-DOM操作-cheerio\" class=\"headerlink\" title=\"1. DOM操作  cheerio\"></a>1. DOM操作  <a href=\"https://npm.taobao.org/package/cheerio\" target=\"_blank\" rel=\"external\">cheerio</a></h3><h3 id=\"2-请求插件-request\"><a href=\"#2-请求插件-request\" class=\"headerlink\" title=\"2. 请求插件  request\"></a>2. 请求插件  <a href=\"https://npm.taobao.org/package/request\" target=\"_blank\" rel=\"external\">request</a></h3><h3 id=\"3-http库-superagent\"><a href=\"#3-http库-superagent\" class=\"headerlink\" title=\"3. http库  superagent\"></a>3. http库  <a href=\"https://npm.taobao.org/package/superagent\" target=\"_blank\" rel=\"external\">superagent</a></h3><h3 id=\"4-代理-eventproxy\"><a href=\"#4-代理-eventproxy\" class=\"headerlink\" title=\"4. 代理  eventproxy\"></a>4. 代理  <a href=\"https://npm.taobao.org/package/eventproxy\" target=\"_blank\" rel=\"external\">eventproxy</a></h3><h2 id=\"二、建立项目node-spider\"><a href=\"#二、建立项目node-spider\" class=\"headerlink\" title=\"二、建立项目node-spider\"></a>二、建立项目node-spider</h2><h3 id=\"1-建立一个Koa2项目\"><a href=\"#1-建立一个Koa2项目\" class=\"headerlink\" title=\"1. 建立一个Koa2项目\"></a>1. 建立一个Koa2项目</h3><p> <code>npm install -g koa-generator</code></p>\n<h3 id=\"2-生成一个koa2的项目\"><a href=\"#2-生成一个koa2的项目\" class=\"headerlink\" title=\"2. 生成一个koa2的项目\"></a>2. 生成一个koa2的项目</h3><p> <code>koa2 -e node-spider</code>   -e表示使用ejs模板，具体参照<a href=\"http://localhost:4000/2016/05/26/2016-5-26-koa_generator/\" target=\"_blank\" rel=\"external\">koa生成器,一键生成koa和koa2项目</a>   </p>\n<h2 id=\"三、目标网站分析\"><a href=\"#三、目标网站分析\" class=\"headerlink\" title=\"三、目标网站分析\"></a>三、目标网站分析</h2><p>如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。<br><img src=\"http://static.xiaomo.info/images/0.png\" alt=\"\"></p>\n<h2 id=\"四、爬虫功能制作\"><a href=\"#四、爬虫功能制作\" class=\"headerlink\" title=\"四、爬虫功能制作\"></a>四、爬虫功能制作</h2><h3 id=\"1-superagent\"><a href=\"#1-superagent\" class=\"headerlink\" title=\"1. superagent\"></a>1. superagent</h3><p>是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>); <span class=\"comment\">//解析操作url</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>); <span class=\"comment\">//这三个外部依赖不要忘记npm install</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> eventproxy = <span class=\"built_in\">require</span>(<span class=\"string\">'eventproxy'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> targetUrl = <span class=\"string\">'https://cnodejs.org/'</span>;</span><br><span class=\"line\">superagent.get(targetUrl)</span><br><span class=\"line\">  .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。</p>\n<p><img src=\"http://static.xiaomo.info/images/1.png\" alt=\"\"></p>\n<h3 id=\"2-使用cheerio解析\"><a href=\"#2-使用cheerio解析\" class=\"headerlink\" title=\"2. 使用cheerio解析\"></a>2. 使用cheerio解析</h3><p>cheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = cheerio.load(res.text);</span><br><span class=\"line\"><span class=\"comment\">//通过CSS selector来筛选数据</span></span><br><span class=\"line\">$(<span class=\"string\">'#topic_list .topic_title'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其结果为一个个对象，调用 <code>.each(function(index, element))</code>函数来遍历每一个对象，返回的是HTML DOM Elements。</p>\n<p><img src=\"http://static.xiaomo.info/images/2.png\" alt=\"\"></p>\n<p>输出 <code>console.log($element.attr(&#39;title&#39;));</code>的结果为<br> <code>广州2014年12月06日 NodeParty 之 UC 场之类的标题</code><br>输出 <code>console.log($element.attr(&#39;href&#39;));</code>的结果为<br><code>/topic/545c395becbcb78265856eb2之类的url</code>。<br>再用<code>NodeJS1的url.resolve()</code>函数来补全完整的url。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">superagent.get(tUrl)</span><br><span class=\"line\">    .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicUrls = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $ = cheerio.load(res.text);</span><br><span class=\"line\">        <span class=\"comment\">// 获取首页所有的链接</span></span><br><span class=\"line\">        $(<span class=\"string\">'#topic_list .topic_title'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $element = $(element);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> href = url.resolve(tUrl, $element.attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(href);</span><br><span class=\"line\">            <span class=\"comment\">//topicUrls.push(href);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用eventproxy来并发抓取\"><a href=\"#3-使用eventproxy来并发抓取\" class=\"headerlink\" title=\"3.使用eventproxy来并发抓取\"></a>3.使用eventproxy来并发抓取</h3><p>教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步：得到一个 eventproxy 的实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ep = <span class=\"keyword\">new</span> eventproxy();</span><br><span class=\"line\"><span class=\"comment\">//第二步：定义监听事件的回调函数。</span></span><br><span class=\"line\"><span class=\"comment\">//after方法为重复监听</span></span><br><span class=\"line\"><span class=\"comment\">//params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数</span></span><br><span class=\"line\">ep.after(<span class=\"string\">'topic_html'</span>, topicUrls.length, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topics</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair</span></span><br><span class=\"line\">    <span class=\"comment\">//.map</span></span><br><span class=\"line\">    topics = topics.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topicPair</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//use cheerio</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicUrl = topicPair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicHtml = topicPair[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $ = cheerio.load(topicHtml);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">            title: $(<span class=\"string\">'.topic_full_title'</span>).text().trim(),</span><br><span class=\"line\">            href: topicUrl,</span><br><span class=\"line\">            comment1: $(<span class=\"string\">'.reply_content'</span>).eq(<span class=\"number\">0</span>).text().trim()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//outcome</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'outcome:'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(topics);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//第三步：确定放出事件消息的</span></span><br><span class=\"line\">topicUrls.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topicUrl</span>) </span>&#123;</span><br><span class=\"line\">    superagent.get(topicUrl)</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fetch '</span> + topicUrl + <span class=\"string\">' successful'</span>);</span><br><span class=\"line\">            ep.emit(<span class=\"string\">'topic_html'</span>, [topicUrl, res.text]);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果如下  </p>\n<p><img src=\"http://static.xiaomo.info/images/3.png\" alt=\"\"></p>\n<p>获取留言用户名和积分  </p>\n<p><img src=\"http://static.xiaomo.info/images/4.png\" alt=\"\"></p>\n<p>在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $(‘.reply_author’).get(0)可以看到，我们需要获取东西都在这里头。</p>\n<p><img src=\"http://static.xiaomo.info/images/5.png\" alt=\"\"></p>\n<p>首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userHref = url.resolve(tUrl, $(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).attribs.href);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userHref);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).children[<span class=\"number\">0</span>].data);</span><br></pre></td></tr></table></figure>\n<p>我们可以通过<code>https://cnodejs.org/user/username</code>抓取积分信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.reply_author'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> $element = $(element);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($element.attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在用户信息页面 <code>$(&#39;.big&#39;).text().trim()</code>即为积分信息。<br>使用cheerio的函数.get(0)为获取第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userHref = url.resolve(tUrl, $(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).attribs.href);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userHref);</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>这篇文章主要介绍了NodeJS制作爬虫的全过程，包括项目建立，目标网站分析、使用superagent获取源数据、使用cheerio解析、使用eventproxy来并发抓取每个主题的内容等方面，有需要的小伙伴参考下吧。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/nodejs.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-依赖\"><a href=\"#一、-依赖\" class=\"headerlink\" title=\"一、 依赖\"></a>一、 依赖</h2><h3 id=\"1-DOM操作-cheerio\"><a href=\"#1-DOM操作-cheerio\" class=\"headerlink\" title=\"1. DOM操作  cheerio\"></a>1. DOM操作  <a href=\"https://npm.taobao.org/package/cheerio\">cheerio</a></h3><h3 id=\"2-请求插件-request\"><a href=\"#2-请求插件-request\" class=\"headerlink\" title=\"2. 请求插件  request\"></a>2. 请求插件  <a href=\"https://npm.taobao.org/package/request\">request</a></h3><h3 id=\"3-http库-superagent\"><a href=\"#3-http库-superagent\" class=\"headerlink\" title=\"3. http库  superagent\"></a>3. http库  <a href=\"https://npm.taobao.org/package/superagent\">superagent</a></h3><h3 id=\"4-代理-eventproxy\"><a href=\"#4-代理-eventproxy\" class=\"headerlink\" title=\"4. 代理  eventproxy\"></a>4. 代理  <a href=\"https://npm.taobao.org/package/eventproxy\">eventproxy</a></h3><h2 id=\"二、建立项目node-spider\"><a href=\"#二、建立项目node-spider\" class=\"headerlink\" title=\"二、建立项目node-spider\"></a>二、建立项目node-spider</h2><h3 id=\"1-建立一个Koa2项目\"><a href=\"#1-建立一个Koa2项目\" class=\"headerlink\" title=\"1. 建立一个Koa2项目\"></a>1. 建立一个Koa2项目</h3><p> <code>npm install -g koa-generator</code></p>\n<h3 id=\"2-生成一个koa2的项目\"><a href=\"#2-生成一个koa2的项目\" class=\"headerlink\" title=\"2. 生成一个koa2的项目\"></a>2. 生成一个koa2的项目</h3><p> <code>koa2 -e node-spider</code>   -e表示使用ejs模板，具体参照<a href=\"http://localhost:4000/2016/05/26/2016-5-26-koa_generator/\">koa生成器,一键生成koa和koa2项目</a>   </p>\n<h2 id=\"三、目标网站分析\"><a href=\"#三、目标网站分析\" class=\"headerlink\" title=\"三、目标网站分析\"></a>三、目标网站分析</h2><p>如图，这是CNode首页一部分div标签，我们就是通过这一系列的id、class来定位我们需要的信息。<br><img src=\"http://static.xiaomo.info/images/0.png\" alt=\"\"></p>\n<h2 id=\"四、爬虫功能制作\"><a href=\"#四、爬虫功能制作\" class=\"headerlink\" title=\"四、爬虫功能制作\"></a>四、爬虫功能制作</h2><h3 id=\"1-superagent\"><a href=\"#1-superagent\" class=\"headerlink\" title=\"1. superagent\"></a>1. superagent</h3><p>是ajax API来使用的Http库，它的使用方法与jQuery差不多，我们通过它发起get请求，在回调函数中输出结果。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)</span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">url</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>); <span class=\"comment\">//解析操作url</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> superagent = <span class=\"built_in\">require</span>(<span class=\"string\">'superagent'</span>); <span class=\"comment\">//这三个外部依赖不要忘记npm install</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">'cheerio'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> eventproxy = <span class=\"built_in\">require</span>(<span class=\"string\">'eventproxy'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> targetUrl = <span class=\"string\">'https://cnodejs.org/'</span>;</span><br><span class=\"line\">superagent.get(targetUrl)</span><br><span class=\"line\">  .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>它的res结果为一个包含目标url信息的对象，网站内容主要在其text(string)里。</p>\n<p><img src=\"http://static.xiaomo.info/images/1.png\" alt=\"\"></p>\n<h3 id=\"2-使用cheerio解析\"><a href=\"#2-使用cheerio解析\" class=\"headerlink\" title=\"2. 使用cheerio解析\"></a>2. 使用cheerio解析</h3><p>cheerio充当服务器端的jQuery功能，我们先使用它的.load()来载入HTML，再通过CSS selector来筛选元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = cheerio.load(res.text);</span><br><span class=\"line\"><span class=\"comment\">//通过CSS selector来筛选数据</span></span><br><span class=\"line\">$(<span class=\"string\">'#topic_list .topic_title'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(element);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其结果为一个个对象，调用 <code>.each(function(index, element))</code>函数来遍历每一个对象，返回的是HTML DOM Elements。</p>\n<p><img src=\"http://static.xiaomo.info/images/2.png\" alt=\"\"></p>\n<p>输出 <code>console.log($element.attr(&#39;title&#39;));</code>的结果为<br> <code>广州2014年12月06日 NodeParty 之 UC 场之类的标题</code><br>输出 <code>console.log($element.attr(&#39;href&#39;));</code>的结果为<br><code>/topic/545c395becbcb78265856eb2之类的url</code>。<br>再用<code>NodeJS1的url.resolve()</code>函数来补全完整的url。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">superagent.get(tUrl)</span><br><span class=\"line\">    .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicUrls = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $ = cheerio.load(res.text);</span><br><span class=\"line\">        <span class=\"comment\">// 获取首页所有的链接</span></span><br><span class=\"line\">        $(<span class=\"string\">'#topic_list .topic_title'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $element = $(element);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> href = url.resolve(tUrl, $element.attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(href);</span><br><span class=\"line\">            <span class=\"comment\">//topicUrls.push(href);</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-使用eventproxy来并发抓取\"><a href=\"#3-使用eventproxy来并发抓取\" class=\"headerlink\" title=\"3.使用eventproxy来并发抓取\"></a>3.使用eventproxy来并发抓取</h3><p>教程上展示了深度嵌套(串行)方法和计数器方法的例子，eventproxy就是使用事件(并行)方法来解决这个问题。当所有的抓取完成后，eventproxy接收到事件消息自动帮你调用处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一步：得到一个 eventproxy 的实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ep = <span class=\"keyword\">new</span> eventproxy();</span><br><span class=\"line\"><span class=\"comment\">//第二步：定义监听事件的回调函数。</span></span><br><span class=\"line\"><span class=\"comment\">//after方法为重复监听</span></span><br><span class=\"line\"><span class=\"comment\">//params: eventname(String) 事件名,times(Number) 监听次数, callback 回调函数</span></span><br><span class=\"line\">ep.after(<span class=\"string\">'topic_html'</span>, topicUrls.length, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topics</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// topics 是个数组，包含了 40 次 ep.emit('topic_html', pair) 中的那 40 个 pair</span></span><br><span class=\"line\">    <span class=\"comment\">//.map</span></span><br><span class=\"line\">    topics = topics.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">topicPair</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//use cheerio</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicUrl = topicPair[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> topicHtml = topicPair[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $ = cheerio.load(topicHtml);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (&#123;</span><br><span class=\"line\">            title: $(<span class=\"string\">'.topic_full_title'</span>).text().trim(),</span><br><span class=\"line\">            href: topicUrl,</span><br><span class=\"line\">            comment1: $(<span class=\"string\">'.reply_content'</span>).eq(<span class=\"number\">0</span>).text().trim()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//outcome</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'outcome:'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(topics);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//第三步：确定放出事件消息的</span></span><br><span class=\"line\">topicUrls.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">topicUrl</span>) </span>&#123;</span><br><span class=\"line\">    superagent.get(topicUrl)</span><br><span class=\"line\">        .end(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'fetch '</span> + topicUrl + <span class=\"string\">' successful'</span>);</span><br><span class=\"line\">            ep.emit(<span class=\"string\">'topic_html'</span>, [topicUrl, res.text]);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结果如下  </p>\n<p><img src=\"http://static.xiaomo.info/images/3.png\" alt=\"\"></p>\n<p>获取留言用户名和积分  </p>\n<p><img src=\"http://static.xiaomo.info/images/4.png\" alt=\"\"></p>\n<p>在文章页面的源码找到评论的用户class名，classname为reply_author。console.log第一个元素 $(‘.reply_author’).get(0)可以看到，我们需要获取东西都在这里头。</p>\n<p><img src=\"http://static.xiaomo.info/images/5.png\" alt=\"\"></p>\n<p>首先，我们先对一篇文章进行抓取，一次性把需要的都得到即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userHref = url.resolve(tUrl, $(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).attribs.href);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userHref);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).children[<span class=\"number\">0</span>].data);</span><br></pre></td></tr></table></figure>\n<p>我们可以通过<code>https://cnodejs.org/user/username</code>抓取积分信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.reply_author'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">idx, element</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> $element = $(element);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log($element.attr(<span class=\"string\">'href'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在用户信息页面 <code>$(&#39;.big&#39;).text().trim()</code>即为积分信息。<br>使用cheerio的函数.get(0)为获取第一个元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userHref = url.resolve(tUrl, $(<span class=\"string\">'.reply_author'</span>).get(<span class=\"number\">0</span>).attribs.href);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userHref);</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-01T16:00:00.000Z","title":"package.json常用script","_content":"好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/npm.png)](https://github.com/qq83387856)\n## 一、git相关\n\n\n### 1. 查看分支\n  `branch:git branch -a`,    \n### 2. 查看标签\n  `tag:git tag`,    \n### 3. 创建标签\n  `createtag:git tag -a 0.1.2 -m Release^-^`,    \n### 4. 推送标签\n  `pushtag:npm run createtag && git push origin --tags`,        \n### 5. 删除分支\n  `delbranch:git push origin --delete`,             \n### 6. 同步git\n  `fetch`:`git fetch -p`,                  \n### 7. 推送更新\n  `push`:`git push origin master`,            \n### 8. 提交代码\n `commit`:`git commit -a `,             \n### 9. 检出代码\n  `checkout`:`git checkout`,            \n### 10. 删除标签\n  `deltag:git push origin --delete tag`,             \n### 11. 删除己合并分支\n   `delbranck:git branch -d`,          \n### 12. 删除所分支\n `delbranchall:git branch -D`,                 \n### 13. 重命名分支\n  `renamebranch:git branch -m`,   \n\n\n## 二、webpack相关\n### 1. 清空目录\n  `clean:rimraf dist`,\n### 2. 构建项目\n  `build:npm run clean && webpack --progress --colors --profile`,\n### 3. 启动项目\n  `start:webpack-dev-server --progress --colors --profile`,\n### 4. 测试代码\n  `test:karma start`,\n### 5. 检测测试\n  `test-watch:karma start --auto-watch --no-single-run`\n","source":"_posts/2016-06-02.package.json_scripts.md","raw":"---\nauthor: 小莫\ndate: 2016-06-02\ntitle: package.json常用script\ntags:\n- npm\n- node\n- git\n- webpack\ncategory: npm\npermalink: package.json_scripts\n---\n好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/npm.png)](https://github.com/qq83387856)\n## 一、git相关\n\n\n### 1. 查看分支\n  `branch:git branch -a`,    \n### 2. 查看标签\n  `tag:git tag`,    \n### 3. 创建标签\n  `createtag:git tag -a 0.1.2 -m Release^-^`,    \n### 4. 推送标签\n  `pushtag:npm run createtag && git push origin --tags`,        \n### 5. 删除分支\n  `delbranch:git push origin --delete`,             \n### 6. 同步git\n  `fetch`:`git fetch -p`,                  \n### 7. 推送更新\n  `push`:`git push origin master`,            \n### 8. 提交代码\n `commit`:`git commit -a `,             \n### 9. 检出代码\n  `checkout`:`git checkout`,            \n### 10. 删除标签\n  `deltag:git push origin --delete tag`,             \n### 11. 删除己合并分支\n   `delbranck:git branch -d`,          \n### 12. 删除所分支\n `delbranchall:git branch -D`,                 \n### 13. 重命名分支\n  `renamebranch:git branch -m`,   \n\n\n## 二、webpack相关\n### 1. 清空目录\n  `clean:rimraf dist`,\n### 2. 构建项目\n  `build:npm run clean && webpack --progress --colors --profile`,\n### 3. 启动项目\n  `start:webpack-dev-server --progress --colors --profile`,\n### 4. 测试代码\n  `test:karma start`,\n### 5. 检测测试\n  `test-watch:karma start --auto-watch --no-single-run`\n","slug":"package.json_scripts","published":1,"updated":"2016-06-28T02:49:11.092Z","_id":"cipjfs5vl002j4wmck5edl5el","comments":1,"layout":"post","photos":[],"link":"","content":"<p>好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/npm.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、git相关\"><a href=\"#一、git相关\" class=\"headerlink\" title=\"一、git相关\"></a>一、git相关</h2><h3 id=\"1-查看分支\"><a href=\"#1-查看分支\" class=\"headerlink\" title=\"1. 查看分支\"></a>1. 查看分支</h3><p>  <code>branch:git branch -a</code>,    </p>\n<h3 id=\"2-查看标签\"><a href=\"#2-查看标签\" class=\"headerlink\" title=\"2. 查看标签\"></a>2. 查看标签</h3><p>  <code>tag:git tag</code>,    </p>\n<h3 id=\"3-创建标签\"><a href=\"#3-创建标签\" class=\"headerlink\" title=\"3. 创建标签\"></a>3. 创建标签</h3><p>  <code>createtag:git tag -a 0.1.2 -m Release^-^</code>,    </p>\n<h3 id=\"4-推送标签\"><a href=\"#4-推送标签\" class=\"headerlink\" title=\"4. 推送标签\"></a>4. 推送标签</h3><p>  <code>pushtag:npm run createtag &amp;&amp; git push origin --tags</code>,        </p>\n<h3 id=\"5-删除分支\"><a href=\"#5-删除分支\" class=\"headerlink\" title=\"5. 删除分支\"></a>5. 删除分支</h3><p>  <code>delbranch:git push origin --delete</code>,             </p>\n<h3 id=\"6-同步git\"><a href=\"#6-同步git\" class=\"headerlink\" title=\"6. 同步git\"></a>6. 同步git</h3><p>  <code>fetch</code>:<code>git fetch -p</code>,                  </p>\n<h3 id=\"7-推送更新\"><a href=\"#7-推送更新\" class=\"headerlink\" title=\"7. 推送更新\"></a>7. 推送更新</h3><p>  <code>push</code>:<code>git push origin master</code>,            </p>\n<h3 id=\"8-提交代码\"><a href=\"#8-提交代码\" class=\"headerlink\" title=\"8. 提交代码\"></a>8. 提交代码</h3><p> <code>commit</code>:<code>git commit -a</code>,             </p>\n<h3 id=\"9-检出代码\"><a href=\"#9-检出代码\" class=\"headerlink\" title=\"9. 检出代码\"></a>9. 检出代码</h3><p>  <code>checkout</code>:<code>git checkout</code>,            </p>\n<h3 id=\"10-删除标签\"><a href=\"#10-删除标签\" class=\"headerlink\" title=\"10. 删除标签\"></a>10. 删除标签</h3><p>  <code>deltag:git push origin --delete tag</code>,             </p>\n<h3 id=\"11-删除己合并分支\"><a href=\"#11-删除己合并分支\" class=\"headerlink\" title=\"11. 删除己合并分支\"></a>11. 删除己合并分支</h3><p>   <code>delbranck:git branch -d</code>,          </p>\n<h3 id=\"12-删除所分支\"><a href=\"#12-删除所分支\" class=\"headerlink\" title=\"12. 删除所分支\"></a>12. 删除所分支</h3><p> <code>delbranchall:git branch -D</code>,                 </p>\n<h3 id=\"13-重命名分支\"><a href=\"#13-重命名分支\" class=\"headerlink\" title=\"13. 重命名分支\"></a>13. 重命名分支</h3><p>  <code>renamebranch:git branch -m</code>,   </p>\n<h2 id=\"二、webpack相关\"><a href=\"#二、webpack相关\" class=\"headerlink\" title=\"二、webpack相关\"></a>二、webpack相关</h2><h3 id=\"1-清空目录\"><a href=\"#1-清空目录\" class=\"headerlink\" title=\"1. 清空目录\"></a>1. 清空目录</h3><p>  <code>clean:rimraf dist</code>,</p>\n<h3 id=\"2-构建项目\"><a href=\"#2-构建项目\" class=\"headerlink\" title=\"2. 构建项目\"></a>2. 构建项目</h3><p>  <code>build:npm run clean &amp;&amp; webpack --progress --colors --profile</code>,</p>\n<h3 id=\"3-启动项目\"><a href=\"#3-启动项目\" class=\"headerlink\" title=\"3. 启动项目\"></a>3. 启动项目</h3><p>  <code>start:webpack-dev-server --progress --colors --profile</code>,</p>\n<h3 id=\"4-测试代码\"><a href=\"#4-测试代码\" class=\"headerlink\" title=\"4. 测试代码\"></a>4. 测试代码</h3><p>  <code>test:karma start</code>,</p>\n<h3 id=\"5-检测测试\"><a href=\"#5-检测测试\" class=\"headerlink\" title=\"5. 检测测试\"></a>5. 检测测试</h3><p>  <code>test-watch:karma start --auto-watch --no-single-run</code></p>\n","excerpt":"<p>好的script能够大大减少我们对命令行的操作，直接使用npm run xxx 就可以执行。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/npm.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、git相关\"><a href=\"#一、git相关\" class=\"headerlink\" title=\"一、git相关\"></a>一、git相关</h2><h3 id=\"1-查看分支\"><a href=\"#1-查看分支\" class=\"headerlink\" title=\"1. 查看分支\"></a>1. 查看分支</h3><p>  <code>branch:git branch -a</code>,    </p>\n<h3 id=\"2-查看标签\"><a href=\"#2-查看标签\" class=\"headerlink\" title=\"2. 查看标签\"></a>2. 查看标签</h3><p>  <code>tag:git tag</code>,    </p>\n<h3 id=\"3-创建标签\"><a href=\"#3-创建标签\" class=\"headerlink\" title=\"3. 创建标签\"></a>3. 创建标签</h3><p>  <code>createtag:git tag -a 0.1.2 -m Release^-^</code>,    </p>\n<h3 id=\"4-推送标签\"><a href=\"#4-推送标签\" class=\"headerlink\" title=\"4. 推送标签\"></a>4. 推送标签</h3><p>  <code>pushtag:npm run createtag &amp;&amp; git push origin --tags</code>,        </p>\n<h3 id=\"5-删除分支\"><a href=\"#5-删除分支\" class=\"headerlink\" title=\"5. 删除分支\"></a>5. 删除分支</h3><p>  <code>delbranch:git push origin --delete</code>,             </p>\n<h3 id=\"6-同步git\"><a href=\"#6-同步git\" class=\"headerlink\" title=\"6. 同步git\"></a>6. 同步git</h3><p>  <code>fetch</code>:<code>git fetch -p</code>,                  </p>\n<h3 id=\"7-推送更新\"><a href=\"#7-推送更新\" class=\"headerlink\" title=\"7. 推送更新\"></a>7. 推送更新</h3><p>  <code>push</code>:<code>git push origin master</code>,            </p>\n<h3 id=\"8-提交代码\"><a href=\"#8-提交代码\" class=\"headerlink\" title=\"8. 提交代码\"></a>8. 提交代码</h3><p> <code>commit</code>:<code>git commit -a</code>,             </p>\n<h3 id=\"9-检出代码\"><a href=\"#9-检出代码\" class=\"headerlink\" title=\"9. 检出代码\"></a>9. 检出代码</h3><p>  <code>checkout</code>:<code>git checkout</code>,            </p>\n<h3 id=\"10-删除标签\"><a href=\"#10-删除标签\" class=\"headerlink\" title=\"10. 删除标签\"></a>10. 删除标签</h3><p>  <code>deltag:git push origin --delete tag</code>,             </p>\n<h3 id=\"11-删除己合并分支\"><a href=\"#11-删除己合并分支\" class=\"headerlink\" title=\"11. 删除己合并分支\"></a>11. 删除己合并分支</h3><p>   <code>delbranck:git branch -d</code>,          </p>\n<h3 id=\"12-删除所分支\"><a href=\"#12-删除所分支\" class=\"headerlink\" title=\"12. 删除所分支\"></a>12. 删除所分支</h3><p> <code>delbranchall:git branch -D</code>,                 </p>\n<h3 id=\"13-重命名分支\"><a href=\"#13-重命名分支\" class=\"headerlink\" title=\"13. 重命名分支\"></a>13. 重命名分支</h3><p>  <code>renamebranch:git branch -m</code>,   </p>\n<h2 id=\"二、webpack相关\"><a href=\"#二、webpack相关\" class=\"headerlink\" title=\"二、webpack相关\"></a>二、webpack相关</h2><h3 id=\"1-清空目录\"><a href=\"#1-清空目录\" class=\"headerlink\" title=\"1. 清空目录\"></a>1. 清空目录</h3><p>  <code>clean:rimraf dist</code>,</p>\n<h3 id=\"2-构建项目\"><a href=\"#2-构建项目\" class=\"headerlink\" title=\"2. 构建项目\"></a>2. 构建项目</h3><p>  <code>build:npm run clean &amp;&amp; webpack --progress --colors --profile</code>,</p>\n<h3 id=\"3-启动项目\"><a href=\"#3-启动项目\" class=\"headerlink\" title=\"3. 启动项目\"></a>3. 启动项目</h3><p>  <code>start:webpack-dev-server --progress --colors --profile</code>,</p>\n<h3 id=\"4-测试代码\"><a href=\"#4-测试代码\" class=\"headerlink\" title=\"4. 测试代码\"></a>4. 测试代码</h3><p>  <code>test:karma start</code>,</p>\n<h3 id=\"5-检测测试\"><a href=\"#5-检测测试\" class=\"headerlink\" title=\"5. 检测测试\"></a>5. 检测测试</h3><p>  <code>test-watch:karma start --auto-watch --no-single-run</code></p>"},{"title":"CSS font-family 网页字体使用小结","date":"2016-06-02T16:33:55.000Z","_content":"\n<h2 id=\"intro\">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 基本用法\n\n### 使用语法\n\n``` css\nfont-family: 字体名1, 字体名2, 字体名n, 字体系列名;\nfont-family: Verdana, Helvetica, \"Microsoft YaHei\", Arial;\n```\n\n### 语法说明\n> 1. 系统将选择列表中最先可用的字体来显示文字;\n1. 因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;\n1. 因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;\n1. 字体名为中文或包含空格等时，需要加双引号\"\"才能正确识别;\n1. 中文字体建议也是用其对应英文字体名，如\"微软雅黑\"为\"Microsoft YaHei\"，以提高编码兼容性。\n\n## 常见字体系列\n\n### Serif 衬线字体\n- Times New Roman, Georgia 和宋体都是很常见的衬线字体；\n- 特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。\n\n![serif](http://moxfive.xyz/resources/serif.png)\n\n### Sans-serif 无衬线字体\n- Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;\n- 说明: `sans-`源于法语前缀，意思为`没有`。Sans-serif 也就是指无衬线字体。\n- 特征: 字体比较圆滑，笔划较为均匀。\n\n![sans-serif](http://moxfive.xyz/resources/sans-serif.png)\n\n- 字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。\n\n### Monospace 等宽字体\n- Courier New, Consolas, Menlo 都是比较常见的等宽字体;\n- 特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。\n\n![Monospace](http://moxfive.xyz/resources/Monospace.png)\n\n- 一个优秀的代码字体除了等宽外，还应该能较好地区分出`0 o O i l 1 I \"\" '' [] () {}` 等字符。\n\n### Cursive 手写体\n- Comic Sans, Author, 华文行楷都是比较常见的仿手写体;\n- 特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。\n\n![cursive](http://moxfive.xyz/resources/cursive.png)\n\n\n## 获取字体名称\n同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。\n\n### 本地字体\n- Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;\n- 通过软件，如记事本、Office 等也可以查看字体名字:\n\n![font-a1](http://moxfive.xyz/resources/font-a1.png)\n\n- Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:\n\n![font-a2](http://moxfive.xyz/resources/font-a2.png)\n\n### 网页字体\n\n- 审查元素，查看生效的 font-family:\n\n![font-a3](http://moxfive.xyz/resources/font-a3.png)\n\n- 通过 Chrome 插件 [WhatFont](http://chengyinliu.com/whatfont.html):\n\n![font-a4](http://moxfive.xyz/resources/font-a4.png)\n\n## 字体图标\n\n使用`@font-face`引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, [Font Awesome](http://fontawesome.io/).\n\n![font-icon](http://moxfive.xyz/resources/font-icon.png)\n\n## 备用记录\n\n### 字体配置\n- 下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。\n\n``` stylus\n//中文\nfont-chs = \"Microsoft YaHei\", \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\"\n//无衬线字体 sans-serif\nfont-sans = Verdana, \"Helvetica Neue\", Helvetica, Tahoma, Arial\n//衬线字体 serif\nfont-serif = Times, Georgia\n//等宽字体 monospace\nfont-mono = Menlo, Consolas, \"Source Code Pro\", Inconsolata, Monaco, \"Courier New\"\n```\n\n### 字体英文名\n- 一些常见中文字体的对应英文名。\n\n<style>\n\t.fa-apple {\n\t\tcolor: #9d9e9d;\n\t}\n\t.fa-windows {\n\t\tcolor: #4ca6e7;\n\t}\n</style>\n\n-|中文名|英文名\n:-:|-|-\n1|<i class=\"fa fa-apple\"></i> 苹方|PingFang SC\n2|<i class=\"fa fa-apple\"></i> 冬青黑/苹果丽黑|Hiragino Sans GB\n3|<i class=\"fa fa-apple\"></i> 思源黑体|Source Han Sans CN\n4|<i class=\"fa fa-apple\"></i> 华文细黑|STHeiti Light [STXihei]\n5|<i class=\"fa fa-apple\"></i> 华文黑体|ST Heiti\n6|<i class=\"fa fa-apple\"></i> 华文楷体|STKaiti\n7|<i class=\"fa fa-apple\"></i> 华文宋体|STSong\n8|<i class=\"fa fa-apple\"></i> 华文仿宋|STFangsong\n9|<i class=\"fa fa-apple\"></i> 丽黑 Pro|LiHei Pro Medium\n10|<i class=\"fa fa-apple\"></i> 丽宋 Pro|LiSong Pro Light\n11|<i class=\"fa fa-apple\"></i> 标楷体|BiauKai\n12|<i class=\"fa fa-apple\"></i> 苹果丽中黑|Apple LiGothic Medium\n13|<i class=\"fa fa-apple\"></i> 苹果丽细宋|Apple LiSung Light\n14|<i class=\"fa fa-windows\"></i> 新细明体|PMingLiU\n15|<i class=\"fa fa-windows\"></i> 细明体|MingLiU\n16|<i class=\"fa fa-windows\"></i> 标楷体|DFKai-SB\n17|<i class=\"fa fa-windows\"></i> (中易)黑体|SimHei\n18|<i class=\"fa fa-windows\"></i> 宋体|SimSun\n19|<i class=\"fa fa-windows\"></i> 新宋体|NSimSun\n20|<i class=\"fa fa-windows\"></i> 仿宋|FangSong\n21|<i class=\"fa fa-windows\"></i> 楷体|KaiTi\n22|<i class=\"fa fa-windows\"></i> 仿宋_GB2312|FangSong_GB2312\n23|<i class=\"fa fa-windows\"></i> 楷体_GB2312|KaiTi_GB2312\n24|<i class=\"fa fa-windows\"></i> 微软正黑体|Microsoft JhengHei\n25|<i class=\"fa fa-windows\"></i> 微软雅黑|Microsoft YaHei\n26|<i class=\"fa fa-file-word-o\"></i>  隶书|LiSu\n27|<i class=\"fa fa-file-word-o\"></i>  幼圆|YouYuan\n28|<i class=\"fa fa-file-word-o\"></i>  华文中宋|STZhongsong\n29|<i class=\"fa fa-file-word-o\"></i>  方正舒体|FZShuTi\n30|<i class=\"fa fa-file-word-o\"></i>  方正姚体|FZYaoti\n31|<i class=\"fa fa-file-word-o\"></i>  华文彩云|STCaiyun\n32|<i class=\"fa fa-file-word-o\"></i>  华文琥珀|STHupo\n33|<i class=\"fa fa-file-word-o\"></i>  华文隶书|STLiti\n34|<i class=\"fa fa-file-word-o\"></i>  华文行楷|STXingkai\n35|<i class=\"fa fa-file-word-o\"></i>  华文新魏|STXinwei\n36|<i class=\"fa fa-linux\"></i> 文泉驿微米黑|Wenquanyi Micro Hei\n37|<i class=\"fa fa-linux\"></i> 文泉驿正黑|WenQuanYi Zen Hei\n38|<i class=\"fa fa-linux\"></i> 文泉驿点阵正黑|WenQuanYi Zen Hei Sharp\n\n## 相关链接\n1. **Font Awesome**: <http://fontawesome.io/>\n1. **Webdings和Wingdings字符码对应表**: <http://dwz.cn/2jOjYi>\n1. ***CSS魔法堂：再次认识 font*** by **肥仔John** on <code>2015/3/3</code>: <http://www.cnblogs.com/fsjohnhuang/p/4310533.html>\n1. **有字库-中文在线字体**: <http://www.youziku.com/>\n1. ***谈谈网页设计中的字体应用 (2) serif 和 sans-serif*** by **棕熊** on <code>2008/5/6</code>: <http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html>\n1. ***Serif 和 Sans Serif 字体的区别*** by **冰火九九** on <code>2013/11/4</code>: <http://blog.jobbole.com/50828/>\n1. ***Chinese Web Font Guide*** by **Kendra Schaefer** on <code>2012/6/11</code>: <http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/>\n1. **Fonts.css -- 跨平台中文字体解决方案**: <http://zenozeng.github.io/fonts.css/>\n","source":"_posts/2016-06-03.css_font_family.md","raw":"---\ntitle: CSS font-family 网页字体使用小结\ndate: 2016-06-03 00:33:55\ncategories:\n- 自用笔记\n- 术业专攻\ntags:\n- css\npermalink: css-font-family\n---\n\n<h2 id=\"intro\">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 基本用法\n\n### 使用语法\n\n``` css\nfont-family: 字体名1, 字体名2, 字体名n, 字体系列名;\nfont-family: Verdana, Helvetica, \"Microsoft YaHei\", Arial;\n```\n\n### 语法说明\n> 1. 系统将选择列表中最先可用的字体来显示文字;\n1. 因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;\n1. 因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;\n1. 字体名为中文或包含空格等时，需要加双引号\"\"才能正确识别;\n1. 中文字体建议也是用其对应英文字体名，如\"微软雅黑\"为\"Microsoft YaHei\"，以提高编码兼容性。\n\n## 常见字体系列\n\n### Serif 衬线字体\n- Times New Roman, Georgia 和宋体都是很常见的衬线字体；\n- 特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。\n\n![serif](http://moxfive.xyz/resources/serif.png)\n\n### Sans-serif 无衬线字体\n- Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;\n- 说明: `sans-`源于法语前缀，意思为`没有`。Sans-serif 也就是指无衬线字体。\n- 特征: 字体比较圆滑，笔划较为均匀。\n\n![sans-serif](http://moxfive.xyz/resources/sans-serif.png)\n\n- 字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。\n\n### Monospace 等宽字体\n- Courier New, Consolas, Menlo 都是比较常见的等宽字体;\n- 特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。\n\n![Monospace](http://moxfive.xyz/resources/Monospace.png)\n\n- 一个优秀的代码字体除了等宽外，还应该能较好地区分出`0 o O i l 1 I \"\" '' [] () {}` 等字符。\n\n### Cursive 手写体\n- Comic Sans, Author, 华文行楷都是比较常见的仿手写体;\n- 特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。\n\n![cursive](http://moxfive.xyz/resources/cursive.png)\n\n\n## 获取字体名称\n同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。\n\n### 本地字体\n- Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;\n- 通过软件，如记事本、Office 等也可以查看字体名字:\n\n![font-a1](http://moxfive.xyz/resources/font-a1.png)\n\n- Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:\n\n![font-a2](http://moxfive.xyz/resources/font-a2.png)\n\n### 网页字体\n\n- 审查元素，查看生效的 font-family:\n\n![font-a3](http://moxfive.xyz/resources/font-a3.png)\n\n- 通过 Chrome 插件 [WhatFont](http://chengyinliu.com/whatfont.html):\n\n![font-a4](http://moxfive.xyz/resources/font-a4.png)\n\n## 字体图标\n\n使用`@font-face`引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, [Font Awesome](http://fontawesome.io/).\n\n![font-icon](http://moxfive.xyz/resources/font-icon.png)\n\n## 备用记录\n\n### 字体配置\n- 下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。\n\n``` stylus\n//中文\nfont-chs = \"Microsoft YaHei\", \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\"\n//无衬线字体 sans-serif\nfont-sans = Verdana, \"Helvetica Neue\", Helvetica, Tahoma, Arial\n//衬线字体 serif\nfont-serif = Times, Georgia\n//等宽字体 monospace\nfont-mono = Menlo, Consolas, \"Source Code Pro\", Inconsolata, Monaco, \"Courier New\"\n```\n\n### 字体英文名\n- 一些常见中文字体的对应英文名。\n\n<style>\n\t.fa-apple {\n\t\tcolor: #9d9e9d;\n\t}\n\t.fa-windows {\n\t\tcolor: #4ca6e7;\n\t}\n</style>\n\n-|中文名|英文名\n:-:|-|-\n1|<i class=\"fa fa-apple\"></i> 苹方|PingFang SC\n2|<i class=\"fa fa-apple\"></i> 冬青黑/苹果丽黑|Hiragino Sans GB\n3|<i class=\"fa fa-apple\"></i> 思源黑体|Source Han Sans CN\n4|<i class=\"fa fa-apple\"></i> 华文细黑|STHeiti Light [STXihei]\n5|<i class=\"fa fa-apple\"></i> 华文黑体|ST Heiti\n6|<i class=\"fa fa-apple\"></i> 华文楷体|STKaiti\n7|<i class=\"fa fa-apple\"></i> 华文宋体|STSong\n8|<i class=\"fa fa-apple\"></i> 华文仿宋|STFangsong\n9|<i class=\"fa fa-apple\"></i> 丽黑 Pro|LiHei Pro Medium\n10|<i class=\"fa fa-apple\"></i> 丽宋 Pro|LiSong Pro Light\n11|<i class=\"fa fa-apple\"></i> 标楷体|BiauKai\n12|<i class=\"fa fa-apple\"></i> 苹果丽中黑|Apple LiGothic Medium\n13|<i class=\"fa fa-apple\"></i> 苹果丽细宋|Apple LiSung Light\n14|<i class=\"fa fa-windows\"></i> 新细明体|PMingLiU\n15|<i class=\"fa fa-windows\"></i> 细明体|MingLiU\n16|<i class=\"fa fa-windows\"></i> 标楷体|DFKai-SB\n17|<i class=\"fa fa-windows\"></i> (中易)黑体|SimHei\n18|<i class=\"fa fa-windows\"></i> 宋体|SimSun\n19|<i class=\"fa fa-windows\"></i> 新宋体|NSimSun\n20|<i class=\"fa fa-windows\"></i> 仿宋|FangSong\n21|<i class=\"fa fa-windows\"></i> 楷体|KaiTi\n22|<i class=\"fa fa-windows\"></i> 仿宋_GB2312|FangSong_GB2312\n23|<i class=\"fa fa-windows\"></i> 楷体_GB2312|KaiTi_GB2312\n24|<i class=\"fa fa-windows\"></i> 微软正黑体|Microsoft JhengHei\n25|<i class=\"fa fa-windows\"></i> 微软雅黑|Microsoft YaHei\n26|<i class=\"fa fa-file-word-o\"></i>  隶书|LiSu\n27|<i class=\"fa fa-file-word-o\"></i>  幼圆|YouYuan\n28|<i class=\"fa fa-file-word-o\"></i>  华文中宋|STZhongsong\n29|<i class=\"fa fa-file-word-o\"></i>  方正舒体|FZShuTi\n30|<i class=\"fa fa-file-word-o\"></i>  方正姚体|FZYaoti\n31|<i class=\"fa fa-file-word-o\"></i>  华文彩云|STCaiyun\n32|<i class=\"fa fa-file-word-o\"></i>  华文琥珀|STHupo\n33|<i class=\"fa fa-file-word-o\"></i>  华文隶书|STLiti\n34|<i class=\"fa fa-file-word-o\"></i>  华文行楷|STXingkai\n35|<i class=\"fa fa-file-word-o\"></i>  华文新魏|STXinwei\n36|<i class=\"fa fa-linux\"></i> 文泉驿微米黑|Wenquanyi Micro Hei\n37|<i class=\"fa fa-linux\"></i> 文泉驿正黑|WenQuanYi Zen Hei\n38|<i class=\"fa fa-linux\"></i> 文泉驿点阵正黑|WenQuanYi Zen Hei Sharp\n\n## 相关链接\n1. **Font Awesome**: <http://fontawesome.io/>\n1. **Webdings和Wingdings字符码对应表**: <http://dwz.cn/2jOjYi>\n1. ***CSS魔法堂：再次认识 font*** by **肥仔John** on <code>2015/3/3</code>: <http://www.cnblogs.com/fsjohnhuang/p/4310533.html>\n1. **有字库-中文在线字体**: <http://www.youziku.com/>\n1. ***谈谈网页设计中的字体应用 (2) serif 和 sans-serif*** by **棕熊** on <code>2008/5/6</code>: <http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html>\n1. ***Serif 和 Sans Serif 字体的区别*** by **冰火九九** on <code>2013/11/4</code>: <http://blog.jobbole.com/50828/>\n1. ***Chinese Web Font Guide*** by **Kendra Schaefer** on <code>2012/6/11</code>: <http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/>\n1. **Fonts.css -- 跨平台中文字体解决方案**: <http://zenozeng.github.io/fonts.css/>\n","slug":"css-font-family","published":1,"updated":"2016-06-28T02:49:05.413Z","_id":"cipjfs5vo002o4wmc1v6gsu2e","comments":1,"layout":"post","photos":[],"link":"","content":"<p></p><h2 id=\"intro\">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。<p></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>: 字体名1, 字体名2, 字体名<span class=\"selector-tag\">n</span>, 字体系列名;</span><br><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Verdana</span>, <span class=\"selector-tag\">Helvetica</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", <span class=\"selector-tag\">Arial</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><blockquote>\n<ol>\n<li>系统将选择列表中最先可用的字体来显示文字;</li>\n<li>因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;</li>\n<li>因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;</li>\n<li>字体名为中文或包含空格等时，需要加双引号””才能正确识别;</li>\n<li>中文字体建议也是用其对应英文字体名，如”微软雅黑”为”Microsoft YaHei”，以提高编码兼容性。</li>\n</ol>\n</blockquote>\n<h2 id=\"常见字体系列\"><a href=\"#常见字体系列\" class=\"headerlink\" title=\"常见字体系列\"></a>常见字体系列</h2><h3 id=\"Serif-衬线字体\"><a href=\"#Serif-衬线字体\" class=\"headerlink\" title=\"Serif 衬线字体\"></a>Serif 衬线字体</h3><ul>\n<li>Times New Roman, Georgia 和宋体都是很常见的衬线字体；</li>\n<li>特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/serif.png\" alt=\"serif\"></p>\n<h3 id=\"Sans-serif-无衬线字体\"><a href=\"#Sans-serif-无衬线字体\" class=\"headerlink\" title=\"Sans-serif 无衬线字体\"></a>Sans-serif 无衬线字体</h3><ul>\n<li>Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;</li>\n<li>说明: <code>sans-</code>源于法语前缀，意思为<code>没有</code>。Sans-serif 也就是指无衬线字体。</li>\n<li>特征: 字体比较圆滑，笔划较为均匀。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/sans-serif.png\" alt=\"sans-serif\"></p>\n<ul>\n<li>字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。</li>\n</ul>\n<h3 id=\"Monospace-等宽字体\"><a href=\"#Monospace-等宽字体\" class=\"headerlink\" title=\"Monospace 等宽字体\"></a>Monospace 等宽字体</h3><ul>\n<li>Courier New, Consolas, Menlo 都是比较常见的等宽字体;</li>\n<li>特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/Monospace.png\" alt=\"Monospace\"></p>\n<ul>\n<li>一个优秀的代码字体除了等宽外，还应该能较好地区分出<code>0 o O i l 1 I &quot;&quot; &#39;&#39; [] () {}</code> 等字符。</li>\n</ul>\n<h3 id=\"Cursive-手写体\"><a href=\"#Cursive-手写体\" class=\"headerlink\" title=\"Cursive 手写体\"></a>Cursive 手写体</h3><ul>\n<li>Comic Sans, Author, 华文行楷都是比较常见的仿手写体;</li>\n<li>特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/cursive.png\" alt=\"cursive\"></p>\n<h2 id=\"获取字体名称\"><a href=\"#获取字体名称\" class=\"headerlink\" title=\"获取字体名称\"></a>获取字体名称</h2><p>同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。</p>\n<h3 id=\"本地字体\"><a href=\"#本地字体\" class=\"headerlink\" title=\"本地字体\"></a>本地字体</h3><ul>\n<li>Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;</li>\n<li>通过软件，如记事本、Office 等也可以查看字体名字:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a1.png\" alt=\"font-a1\"></p>\n<ul>\n<li>Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a2.png\" alt=\"font-a2\"></p>\n<h3 id=\"网页字体\"><a href=\"#网页字体\" class=\"headerlink\" title=\"网页字体\"></a>网页字体</h3><ul>\n<li>审查元素，查看生效的 font-family:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a3.png\" alt=\"font-a3\"></p>\n<ul>\n<li>通过 Chrome 插件 <a href=\"http://chengyinliu.com/whatfont.html\" target=\"_blank\" rel=\"external\">WhatFont</a>:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a4.png\" alt=\"font-a4\"></p>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><p>使用<code>@font-face</code>引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">Font Awesome</a>.</p>\n<p><img src=\"http://moxfive.xyz/resources/font-icon.png\" alt=\"font-icon\"></p>\n<h2 id=\"备用记录\"><a href=\"#备用记录\" class=\"headerlink\" title=\"备用记录\"></a>备用记录</h2><h3 id=\"字体配置\"><a href=\"#字体配置\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h3><ul>\n<li>下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中文</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-chs = <span class=\"string\">\"Microsoft YaHei\"</span>, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span></span><br><span class=\"line\"><span class=\"comment\">//无衬线字体 sans-serif</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-sans = Verdana, <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, Tahoma, Arial</span><br><span class=\"line\"><span class=\"comment\">//衬线字体 serif</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-serif = Times, Georgia</span><br><span class=\"line\"><span class=\"comment\">//等宽字体 monospace</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-mono = Menlo, Consolas, <span class=\"string\">\"Source Code Pro\"</span>, Inconsolata, Monaco, <span class=\"string\">\"Courier New\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字体英文名\"><a href=\"#字体英文名\" class=\"headerlink\" title=\"字体英文名\"></a>字体英文名</h3><ul>\n<li>一些常见中文字体的对应英文名。</li>\n</ul>\n<style>\n    .fa-apple {\n        color: #9d9e9d;\n    }\n    .fa-windows {\n        color: #4ca6e7;\n    }\n</style>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>中文名</th>\n<th>英文名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td><i class=\"fa fa-apple\"></i> 苹方</td>\n<td>PingFang SC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td><i class=\"fa fa-apple\"></i> 冬青黑/苹果丽黑</td>\n<td>Hiragino Sans GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td><i class=\"fa fa-apple\"></i> 思源黑体</td>\n<td>Source Han Sans CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td><i class=\"fa fa-apple\"></i> 华文细黑</td>\n<td>STHeiti Light [STXihei]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td><i class=\"fa fa-apple\"></i> 华文黑体</td>\n<td>ST Heiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td><i class=\"fa fa-apple\"></i> 华文楷体</td>\n<td>STKaiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td><i class=\"fa fa-apple\"></i> 华文宋体</td>\n<td>STSong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td><i class=\"fa fa-apple\"></i> 华文仿宋</td>\n<td>STFangsong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td><i class=\"fa fa-apple\"></i> 丽黑 Pro</td>\n<td>LiHei Pro Medium</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td><i class=\"fa fa-apple\"></i> 丽宋 Pro</td>\n<td>LiSong Pro Light</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td><i class=\"fa fa-apple\"></i> 标楷体</td>\n<td>BiauKai</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td><i class=\"fa fa-apple\"></i> 苹果丽中黑</td>\n<td>Apple LiGothic Medium</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td><i class=\"fa fa-apple\"></i> 苹果丽细宋</td>\n<td>Apple LiSung Light</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td><i class=\"fa fa-windows\"></i> 新细明体</td>\n<td>PMingLiU</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td><i class=\"fa fa-windows\"></i> 细明体</td>\n<td>MingLiU</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td><i class=\"fa fa-windows\"></i> 标楷体</td>\n<td>DFKai-SB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td><i class=\"fa fa-windows\"></i> (中易)黑体</td>\n<td>SimHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td><i class=\"fa fa-windows\"></i> 宋体</td>\n<td>SimSun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td><i class=\"fa fa-windows\"></i> 新宋体</td>\n<td>NSimSun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td><i class=\"fa fa-windows\"></i> 仿宋</td>\n<td>FangSong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td><i class=\"fa fa-windows\"></i> 楷体</td>\n<td>KaiTi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td><i class=\"fa fa-windows\"></i> 仿宋_GB2312</td>\n<td>FangSong_GB2312</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td><i class=\"fa fa-windows\"></i> 楷体_GB2312</td>\n<td>KaiTi_GB2312</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td><i class=\"fa fa-windows\"></i> 微软正黑体</td>\n<td>Microsoft JhengHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td><i class=\"fa fa-windows\"></i> 微软雅黑</td>\n<td>Microsoft YaHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td><i class=\"fa fa-file-word-o\"></i>  隶书</td>\n<td>LiSu</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td><i class=\"fa fa-file-word-o\"></i>  幼圆</td>\n<td>YouYuan</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文中宋</td>\n<td>STZhongsong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td><i class=\"fa fa-file-word-o\"></i>  方正舒体</td>\n<td>FZShuTi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td><i class=\"fa fa-file-word-o\"></i>  方正姚体</td>\n<td>FZYaoti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文彩云</td>\n<td>STCaiyun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文琥珀</td>\n<td>STHupo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文隶书</td>\n<td>STLiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文行楷</td>\n<td>STXingkai</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文新魏</td>\n<td>STXinwei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿微米黑</td>\n<td>Wenquanyi Micro Hei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿正黑</td>\n<td>WenQuanYi Zen Hei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿点阵正黑</td>\n<td>WenQuanYi Zen Hei Sharp</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li><strong>Font Awesome</strong>: <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">http://fontawesome.io/</a></li>\n<li><strong>Webdings和Wingdings字符码对应表</strong>: <a href=\"http://dwz.cn/2jOjYi\" target=\"_blank\" rel=\"external\">http://dwz.cn/2jOjYi</a></li>\n<li><strong><em>CSS魔法堂：再次认识 font</em></strong> by <strong>肥仔John</strong> on <code>2015/3/3</code>: <a href=\"http://www.cnblogs.com/fsjohnhuang/p/4310533.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/fsjohnhuang/p/4310533.html</a></li>\n<li><strong>有字库-中文在线字体</strong>: <a href=\"http://www.youziku.com/\" target=\"_blank\" rel=\"external\">http://www.youziku.com/</a></li>\n<li><strong><em>谈谈网页设计中的字体应用 (2) serif 和 sans-serif</em></strong> by <strong>棕熊</strong> on <code>2008/5/6</code>: <a href=\"http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html</a></li>\n<li><strong><em>Serif 和 Sans Serif 字体的区别</em></strong> by <strong>冰火九九</strong> on <code>2013/11/4</code>: <a href=\"http://blog.jobbole.com/50828/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/50828/</a></li>\n<li><strong><em>Chinese Web Font Guide</em></strong> by <strong>Kendra Schaefer</strong> on <code>2012/6/11</code>: <a href=\"http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/\" target=\"_blank\" rel=\"external\">http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/</a></li>\n<li><strong>Fonts.css – 跨平台中文字体解决方案</strong>: <a href=\"http://zenozeng.github.io/fonts.css/\" target=\"_blank\" rel=\"external\">http://zenozeng.github.io/fonts.css/</a></li>\n</ol>\n","excerpt":"<p><h2 id=\"intro\">前言</h2>一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"使用语法\"><a href=\"#使用语法\" class=\"headerlink\" title=\"使用语法\"></a>使用语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>: 字体名1, 字体名2, 字体名<span class=\"selector-tag\">n</span>, 字体系列名;</span><br><span class=\"line\"><span class=\"selector-tag\">font-family</span>: <span class=\"selector-tag\">Verdana</span>, <span class=\"selector-tag\">Helvetica</span>, \"<span class=\"selector-tag\">Microsoft</span> <span class=\"selector-tag\">YaHei</span>\", <span class=\"selector-tag\">Arial</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><blockquote>\n<ol>\n<li>系统将选择列表中最先可用的字体来显示文字;</li>\n<li>因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果;</li>\n<li>因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体;</li>\n<li>字体名为中文或包含空格等时，需要加双引号””才能正确识别;</li>\n<li>中文字体建议也是用其对应英文字体名，如”微软雅黑”为”Microsoft YaHei”，以提高编码兼容性。</li>\n</ol>\n</blockquote>\n<h2 id=\"常见字体系列\"><a href=\"#常见字体系列\" class=\"headerlink\" title=\"常见字体系列\"></a>常见字体系列</h2><h3 id=\"Serif-衬线字体\"><a href=\"#Serif-衬线字体\" class=\"headerlink\" title=\"Serif 衬线字体\"></a>Serif 衬线字体</h3><ul>\n<li>Times New Roman, Georgia 和宋体都是很常见的衬线字体；</li>\n<li>特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/serif.png\" alt=\"serif\"></p>\n<h3 id=\"Sans-serif-无衬线字体\"><a href=\"#Sans-serif-无衬线字体\" class=\"headerlink\" title=\"Sans-serif 无衬线字体\"></a>Sans-serif 无衬线字体</h3><ul>\n<li>Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体;</li>\n<li>说明: <code>sans-</code>源于法语前缀，意思为<code>没有</code>。Sans-serif 也就是指无衬线字体。</li>\n<li>特征: 字体比较圆滑，笔划较为均匀。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/sans-serif.png\" alt=\"sans-serif\"></p>\n<ul>\n<li>字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。</li>\n</ul>\n<h3 id=\"Monospace-等宽字体\"><a href=\"#Monospace-等宽字体\" class=\"headerlink\" title=\"Monospace 等宽字体\"></a>Monospace 等宽字体</h3><ul>\n<li>Courier New, Consolas, Menlo 都是比较常见的等宽字体;</li>\n<li>特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/Monospace.png\" alt=\"Monospace\"></p>\n<ul>\n<li>一个优秀的代码字体除了等宽外，还应该能较好地区分出<code>0 o O i l 1 I &quot;&quot; &#39;&#39; [] () {}</code> 等字符。</li>\n</ul>\n<h3 id=\"Cursive-手写体\"><a href=\"#Cursive-手写体\" class=\"headerlink\" title=\"Cursive 手写体\"></a>Cursive 手写体</h3><ul>\n<li>Comic Sans, Author, 华文行楷都是比较常见的仿手写体;</li>\n<li>特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/cursive.png\" alt=\"cursive\"></p>\n<h2 id=\"获取字体名称\"><a href=\"#获取字体名称\" class=\"headerlink\" title=\"获取字体名称\"></a>获取字体名称</h2><p>同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。</p>\n<h3 id=\"本地字体\"><a href=\"#本地字体\" class=\"headerlink\" title=\"本地字体\"></a>本地字体</h3><ul>\n<li>Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称;</li>\n<li>通过软件，如记事本、Office 等也可以查看字体名字:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a1.png\" alt=\"font-a1\"></p>\n<ul>\n<li>Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a2.png\" alt=\"font-a2\"></p>\n<h3 id=\"网页字体\"><a href=\"#网页字体\" class=\"headerlink\" title=\"网页字体\"></a>网页字体</h3><ul>\n<li>审查元素，查看生效的 font-family:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a3.png\" alt=\"font-a3\"></p>\n<ul>\n<li>通过 Chrome 插件 <a href=\"http://chengyinliu.com/whatfont.html\">WhatFont</a>:</li>\n</ul>\n<p><img src=\"http://moxfive.xyz/resources/font-a4.png\" alt=\"font-a4\"></p>\n<h2 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h2><p>使用<code>@font-face</code>引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, <a href=\"http://fontawesome.io/\">Font Awesome</a>.</p>\n<p><img src=\"http://moxfive.xyz/resources/font-icon.png\" alt=\"font-icon\"></p>\n<h2 id=\"备用记录\"><a href=\"#备用记录\" class=\"headerlink\" title=\"备用记录\"></a>备用记录</h2><h3 id=\"字体配置\"><a href=\"#字体配置\" class=\"headerlink\" title=\"字体配置\"></a>字体配置</h3><ul>\n<li>下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//中文</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-chs = <span class=\"string\">\"Microsoft YaHei\"</span>, <span class=\"string\">\"Hiragino Sans GB\"</span>, <span class=\"string\">\"WenQuanYi Micro Hei\"</span></span><br><span class=\"line\"><span class=\"comment\">//无衬线字体 sans-serif</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-sans = Verdana, <span class=\"string\">\"Helvetica Neue\"</span>, Helvetica, Tahoma, Arial</span><br><span class=\"line\"><span class=\"comment\">//衬线字体 serif</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-serif = Times, Georgia</span><br><span class=\"line\"><span class=\"comment\">//等宽字体 monospace</span></span><br><span class=\"line\"><span class=\"attribute\">font</span>-mono = Menlo, Consolas, <span class=\"string\">\"Source Code Pro\"</span>, Inconsolata, Monaco, <span class=\"string\">\"Courier New\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字体英文名\"><a href=\"#字体英文名\" class=\"headerlink\" title=\"字体英文名\"></a>字体英文名</h3><ul>\n<li>一些常见中文字体的对应英文名。</li>\n</ul>\n<style>\n    .fa-apple {\n        color: #9d9e9d;\n    }\n    .fa-windows {\n        color: #4ca6e7;\n    }\n</style>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>中文名</th>\n<th>英文名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td><i class=\"fa fa-apple\"></i> 苹方</td>\n<td>PingFang SC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td><i class=\"fa fa-apple\"></i> 冬青黑/苹果丽黑</td>\n<td>Hiragino Sans GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td><i class=\"fa fa-apple\"></i> 思源黑体</td>\n<td>Source Han Sans CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td><i class=\"fa fa-apple\"></i> 华文细黑</td>\n<td>STHeiti Light [STXihei]</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td><i class=\"fa fa-apple\"></i> 华文黑体</td>\n<td>ST Heiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td><i class=\"fa fa-apple\"></i> 华文楷体</td>\n<td>STKaiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td><i class=\"fa fa-apple\"></i> 华文宋体</td>\n<td>STSong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td><i class=\"fa fa-apple\"></i> 华文仿宋</td>\n<td>STFangsong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td><i class=\"fa fa-apple\"></i> 丽黑 Pro</td>\n<td>LiHei Pro Medium</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td><i class=\"fa fa-apple\"></i> 丽宋 Pro</td>\n<td>LiSong Pro Light</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td><i class=\"fa fa-apple\"></i> 标楷体</td>\n<td>BiauKai</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td><i class=\"fa fa-apple\"></i> 苹果丽中黑</td>\n<td>Apple LiGothic Medium</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td><i class=\"fa fa-apple\"></i> 苹果丽细宋</td>\n<td>Apple LiSung Light</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td><i class=\"fa fa-windows\"></i> 新细明体</td>\n<td>PMingLiU</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td><i class=\"fa fa-windows\"></i> 细明体</td>\n<td>MingLiU</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td><i class=\"fa fa-windows\"></i> 标楷体</td>\n<td>DFKai-SB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td><i class=\"fa fa-windows\"></i> (中易)黑体</td>\n<td>SimHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td><i class=\"fa fa-windows\"></i> 宋体</td>\n<td>SimSun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td><i class=\"fa fa-windows\"></i> 新宋体</td>\n<td>NSimSun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td><i class=\"fa fa-windows\"></i> 仿宋</td>\n<td>FangSong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td><i class=\"fa fa-windows\"></i> 楷体</td>\n<td>KaiTi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td><i class=\"fa fa-windows\"></i> 仿宋_GB2312</td>\n<td>FangSong_GB2312</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td><i class=\"fa fa-windows\"></i> 楷体_GB2312</td>\n<td>KaiTi_GB2312</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td><i class=\"fa fa-windows\"></i> 微软正黑体</td>\n<td>Microsoft JhengHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td><i class=\"fa fa-windows\"></i> 微软雅黑</td>\n<td>Microsoft YaHei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td><i class=\"fa fa-file-word-o\"></i>  隶书</td>\n<td>LiSu</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td><i class=\"fa fa-file-word-o\"></i>  幼圆</td>\n<td>YouYuan</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文中宋</td>\n<td>STZhongsong</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td><i class=\"fa fa-file-word-o\"></i>  方正舒体</td>\n<td>FZShuTi</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td><i class=\"fa fa-file-word-o\"></i>  方正姚体</td>\n<td>FZYaoti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文彩云</td>\n<td>STCaiyun</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文琥珀</td>\n<td>STHupo</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文隶书</td>\n<td>STLiti</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文行楷</td>\n<td>STXingkai</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td><i class=\"fa fa-file-word-o\"></i>  华文新魏</td>\n<td>STXinwei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿微米黑</td>\n<td>Wenquanyi Micro Hei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿正黑</td>\n<td>WenQuanYi Zen Hei</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td><i class=\"fa fa-linux\"></i> 文泉驿点阵正黑</td>\n<td>WenQuanYi Zen Hei Sharp</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li><strong>Font Awesome</strong>: <a href=\"http://fontawesome.io/\">http://fontawesome.io/</a></li>\n<li><strong>Webdings和Wingdings字符码对应表</strong>: <a href=\"http://dwz.cn/2jOjYi\">http://dwz.cn/2jOjYi</a></li>\n<li><strong><em>CSS魔法堂：再次认识 font</em></strong> by <strong>肥仔John</strong> on <code>2015/3/3</code>: <a href=\"http://www.cnblogs.com/fsjohnhuang/p/4310533.html\">http://www.cnblogs.com/fsjohnhuang/p/4310533.html</a></li>\n<li><strong>有字库-中文在线字体</strong>: <a href=\"http://www.youziku.com/\">http://www.youziku.com/</a></li>\n<li><strong><em>谈谈网页设计中的字体应用 (2) serif 和 sans-serif</em></strong> by <strong>棕熊</strong> on <code>2008/5/6</code>: <a href=\"http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html\">http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html</a></li>\n<li><strong><em>Serif 和 Sans Serif 字体的区别</em></strong> by <strong>冰火九九</strong> on <code>2013/11/4</code>: <a href=\"http://blog.jobbole.com/50828/\">http://blog.jobbole.com/50828/</a></li>\n<li><strong><em>Chinese Web Font Guide</em></strong> by <strong>Kendra Schaefer</strong> on <code>2012/6/11</code>: <a href=\"http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/\">http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/</a></li>\n<li><strong>Fonts.css – 跨平台中文字体解决方案</strong>: <a href=\"http://zenozeng.github.io/fonts.css/\">http://zenozeng.github.io/fonts.css/</a></li>\n</ol>"},{"title":"Anki 记忆库之 Excel 快捷键大全","date":"2016-06-04T15:15:00.000Z","_content":"\n<h2 id=\"intro\">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 记忆库使用\n所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。\n\n> 下载: [Excel 快捷键大全 (Windows) for Anki](/resources/Excel-Shortcut-keys.apkg)\n\n释义默认中英对照显示，可按需隐藏。\n![Anki-a1](http://moxfive.xyz/resources/Anki-a1.png)\n\n## 常用快捷键\n列出自己平时使用最频繁的10个 Excel 快捷键。\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|CTRL+D|使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。\n2|CTRL+ENTER|使用当前输入的条目填充选定的单元格区域。\n3|F2|编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。\n4|CTRL+1|显示“单元格格式”对话框。\n5|CTRL+SHIFT+~|应用“常规”数字格式。\n6|CTRL+G|显示“定位”对话框。\n7|CTRL+`|在工作表中切换显示单元格值和公式。\n8|CTRL+'|将公式从活动单元格上方的单元格复制到单元格或编辑栏中。\n9|F4|重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换\n10|ALT+ENTER|在同一单元格中另起一个新行。\n\n## 快捷键大全\n\n### Ctrl 组合快捷键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|CTRL+PgUp|向左切换工作表\n2|CTRL+PgDn|向右切换工作表\n3|CTRL+SHIFT+&|将外框应用于选定单元格。\n4|CTRL+SHIFT_|从选定单元格删除外框。\n5|CTRL+SHIFT+~|应用“常规”数字格式。\n6|CTRL+SHIFT+$|应用带有两位小数的“货币”格式（负数放在括号中）。\n7|CTRL+SHIFT+%|应用不带小数位的“百分比”格式。\n8|CTRL+SHIFT+^|应用带有两位小数的“指数”格式。\n9|CTRL+SHIFT+#|应用带有日、月和年的“日期”格式。\n10|CTRL+SHIFT+@|应用带有小时和分钟以及 AM 或 PM 的“时间”格式。\n11|CTRL+SHIFT+!|应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。\n12|CTRL+SHIFT+*|选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。\n13|CTRL+SHIFT+:|输入当前时间。\n14|CTRL+SHIFT+\"|将值从活动单元格上方的单元格复制到单元格或编辑栏中。\n15|CTRL+SHIFT+Plus (+)|显示用于插入空白单元格的“插入”对话框。\n16|CTRL+Minus (-)|显示用于删除选定单元格的“删除”对话框。\n17|CTRL+;|输入当前日期。\n18|CTRL+`|在工作表中切换显示单元格值和公式。\n19|CTRL+'|将公式从活动单元格上方的单元格复制到单元格或编辑栏中。\n20|CTRL+1|显示“单元格格式”对话框。\n21|CTRL+2|应用或取消加粗格式设置。\n22|CTRL+3|应用或取消倾斜格式设置。\n23|CTRL+4|应用或取消下划线。\n24|CTRL+5|应用或取消删除线。\n25|CTRL+6|在隐藏对象、显示对象和显示对象占位符之间切换。\n26|CTRL+8|显示或隐藏大纲符号。\n27|CTRL+9|隐藏选定的行。\n28|CTRL+0|隐藏选定的列。\n29|CTRL+A|☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。\n30|CTRL+B|应用或取消加粗格式设置。\n31|CTRL+C|复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。\n32|CTRL+D|使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。\n33|CTRL+F|显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。\n34|SHIFT+F4 |重复上一次“查找”操作。\n35|CTRL+SHIFT+F<br>CTRL+SHIFT+P|打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。\n36|CTRL+G<br>F5|显示“定位”对话框。\n37|CTRL+H|显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。\n38|CTRL+I|应用或取消倾斜格式设置。\n39|CTRL+K|为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。\n40|CTRL+N|创建一个新的空白工作簿。\n41|CTRL+O|显示“打开”对话框以打开或查找文件。\n42|CTRL+SHIFT+O|选择所有包含批注的单元格。\n43|CTRL+P|显示“打印”对话框。\n44|CTRL+R|使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。\n45|CTRL+S|使用其当前文件名、位置和文件格式保存活动文件。\n46|CTRL+T|显示“创建表”对话框。\n47|CTRL+U|应用或取消下划线。\n48|CTRL+SHIFT+U|在展开和折叠编辑栏之间切换。\n49|CTRL+V|在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。\n50|CTRL+ALT+V|显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。\n51|CTRL+W|关闭选定的工作簿窗口。\n52|CTRL+X|剪切选定的单元格。\n53|CTRL+Y|重复上一个命令或操作（如有可能）。\n54|CTRL+Z|使用“撤消”命令来撤消上一个命令或删除最后键入的内容。\n55|CTRL+SHIFT+Z|显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。\n\n### 功能键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|F1|显示“Microsoft Office Excel 帮助”任务窗格。\n2|ALT+F1|创建当前范围中数据的图表。\n3|ALT+SHIFT+F1|插入新的工作表。\n4|F2|编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。\n5|SHIFT+F2|添加或编辑单元格批注。\n6|CTRL+F2|显示“打印预览”窗口。\n7|F3|显示“粘贴名称”对话框。\n8|SHIFT+F3|显示“插入函数”对话框。\n9|F4|\"重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换\"\n10|Ctrl+F4|关闭选定的工作簿窗口。\n11|Ctrl+F5|从最大化中恢复选定工作簿窗口的窗口大小。\n12|F6|在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。\n13|SHIFT+F6|在工作表、缩放控件、任务窗格和功能区之间切换。\n14|CTRL+F6|如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。\n15|F7|显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。\n16|CTRL+F7|如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。\n17|F8|打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。\n18|SHIFT+F8|使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。\n19|CTRL+F8|当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。\n20|ALT+F8|显示用于创建、运行、编辑或删除宏的“宏”对话框。\n21|F9|计算所有打开的工作簿中的所有工作表。\n22|SHIFT+F9|按 Shift+F9 可计算活动工作表。\n23|CTRL+ALT+F9|计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。\n24|CTRL+ALT+SHIFT+F9|重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。\n25|CTRL+F9|将工作簿窗口最小化为图标。\n26|F10|\"打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。\"\n27|SHIFT+F10|按 Shift+F10 可显示选定项目的快捷菜单。\n28|ALT+SHIFT+F10|显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。\n29|CTRL+F10|最大化或还原选定的工作簿窗口。\n30|F11|创建当前范围内数据的图表。\n31|SHIFT+F11|按 Shift+F11 可插入一个新工作表。\n32|ALT+F11|打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。\n33|F12|显示“另存为”对话框。\n\n### 其他实用快捷键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|ARROW KEYS|在工作表中上移、下移、左移或右移一个单元格。\n2|CTRL+ARROW KEY|移动到工作表中当前数据区域的边缘。\n3|SHIFT+ARROW KEY|将单元格的选定范围扩大一个单元格。\n4|CTRL+SHIFT+ARROW KEY|按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。\n5|BACKSPACE|在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。\n6|DELETE|从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。\n7|END|当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。\n8|CTRL+END|移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。\n9|CTRL+SHIFT+END|按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。\n10|ENTER|从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。\n11|ALT+ENTER|在同一单元格中另起一个新行。\n12|CTRL+ENTER|使用当前输入的条目填充选定的单元格区域。\n13|SHIFT+ENTER|完成单元格输入并选择上面的单元格。\n14|ESC|取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。\n15|HOME|移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。\n16|CTRL+HOME |移到工作表的开头。\n17|CTRL+SHIFT+HOME|将单元格的选定范围扩展到工作表的开头。\n18|PAGE DOWN|在工作表中下移一个屏幕。\n19|ALT+PAGE DOWN|在工作表中向右移动一个屏幕。\n20|CTRL+SHIFT+PAGE DOWN|选择工作簿中的当前和下一个工作表。\n21|PAGE UP|在工作表中上移一个屏幕。\n22|ALT+PAGE UP|在工作表中向左移动一个屏幕。\n23|CTRL+SHIFT+PAGE UP|选择工作簿中的当前和上一个工作表。\n24|SPACEBAR|在对话框中，执行选定按钮的操作，或者选中或清除复选框。\n25|CTRL+SPACEBAR|选择工作表中的整列。\n26|SHIFT+SPACEBAR|选择工作表中的整行。\n27|CTRL+SHIFT+SPACEBAR|按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。\n28|ALT+SPACEBAR|显示 Microsoft Office Excel 窗口的“控制”菜单。\n29|TAB|在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。\n30|SHIFT+TAB|移到前一个单元格（在工作表中）或前一个选项（在对话框中）。\n31|CTRL+TAB|在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。\n32|CTRL+SHIFT+TAB|在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。\n\n## 相关链接\n\n1. 微软 Office 帮助中心: [Excel 快捷键和功能键](https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&rs=zh-CN&ad=CN)\n1. Microsoft Office Support: [Excel shortcut and function keys](https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f)\n","source":"_posts/2016-06-04.anki_excel_shortcuts.md","raw":"---\ntitle: Anki 记忆库之 Excel 快捷键大全\ndate: 2016-06-04 23:15:00\ncategories:\n- 触类旁通\ntags:\n- excel\npermalink: anki-excel-shortcuts\n---\n\n<h2 id=\"intro\">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 记忆库使用\n所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。\n\n> 下载: [Excel 快捷键大全 (Windows) for Anki](/resources/Excel-Shortcut-keys.apkg)\n\n释义默认中英对照显示，可按需隐藏。\n![Anki-a1](http://moxfive.xyz/resources/Anki-a1.png)\n\n## 常用快捷键\n列出自己平时使用最频繁的10个 Excel 快捷键。\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|CTRL+D|使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。\n2|CTRL+ENTER|使用当前输入的条目填充选定的单元格区域。\n3|F2|编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。\n4|CTRL+1|显示“单元格格式”对话框。\n5|CTRL+SHIFT+~|应用“常规”数字格式。\n6|CTRL+G|显示“定位”对话框。\n7|CTRL+`|在工作表中切换显示单元格值和公式。\n8|CTRL+'|将公式从活动单元格上方的单元格复制到单元格或编辑栏中。\n9|F4|重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换\n10|ALT+ENTER|在同一单元格中另起一个新行。\n\n## 快捷键大全\n\n### Ctrl 组合快捷键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|CTRL+PgUp|向左切换工作表\n2|CTRL+PgDn|向右切换工作表\n3|CTRL+SHIFT+&|将外框应用于选定单元格。\n4|CTRL+SHIFT_|从选定单元格删除外框。\n5|CTRL+SHIFT+~|应用“常规”数字格式。\n6|CTRL+SHIFT+$|应用带有两位小数的“货币”格式（负数放在括号中）。\n7|CTRL+SHIFT+%|应用不带小数位的“百分比”格式。\n8|CTRL+SHIFT+^|应用带有两位小数的“指数”格式。\n9|CTRL+SHIFT+#|应用带有日、月和年的“日期”格式。\n10|CTRL+SHIFT+@|应用带有小时和分钟以及 AM 或 PM 的“时间”格式。\n11|CTRL+SHIFT+!|应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。\n12|CTRL+SHIFT+*|选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。\n13|CTRL+SHIFT+:|输入当前时间。\n14|CTRL+SHIFT+\"|将值从活动单元格上方的单元格复制到单元格或编辑栏中。\n15|CTRL+SHIFT+Plus (+)|显示用于插入空白单元格的“插入”对话框。\n16|CTRL+Minus (-)|显示用于删除选定单元格的“删除”对话框。\n17|CTRL+;|输入当前日期。\n18|CTRL+`|在工作表中切换显示单元格值和公式。\n19|CTRL+'|将公式从活动单元格上方的单元格复制到单元格或编辑栏中。\n20|CTRL+1|显示“单元格格式”对话框。\n21|CTRL+2|应用或取消加粗格式设置。\n22|CTRL+3|应用或取消倾斜格式设置。\n23|CTRL+4|应用或取消下划线。\n24|CTRL+5|应用或取消删除线。\n25|CTRL+6|在隐藏对象、显示对象和显示对象占位符之间切换。\n26|CTRL+8|显示或隐藏大纲符号。\n27|CTRL+9|隐藏选定的行。\n28|CTRL+0|隐藏选定的列。\n29|CTRL+A|☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。\n30|CTRL+B|应用或取消加粗格式设置。\n31|CTRL+C|复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。\n32|CTRL+D|使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。\n33|CTRL+F|显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。\n34|SHIFT+F4 |重复上一次“查找”操作。\n35|CTRL+SHIFT+F<br>CTRL+SHIFT+P|打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。\n36|CTRL+G<br>F5|显示“定位”对话框。\n37|CTRL+H|显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。\n38|CTRL+I|应用或取消倾斜格式设置。\n39|CTRL+K|为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。\n40|CTRL+N|创建一个新的空白工作簿。\n41|CTRL+O|显示“打开”对话框以打开或查找文件。\n42|CTRL+SHIFT+O|选择所有包含批注的单元格。\n43|CTRL+P|显示“打印”对话框。\n44|CTRL+R|使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。\n45|CTRL+S|使用其当前文件名、位置和文件格式保存活动文件。\n46|CTRL+T|显示“创建表”对话框。\n47|CTRL+U|应用或取消下划线。\n48|CTRL+SHIFT+U|在展开和折叠编辑栏之间切换。\n49|CTRL+V|在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。\n50|CTRL+ALT+V|显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。\n51|CTRL+W|关闭选定的工作簿窗口。\n52|CTRL+X|剪切选定的单元格。\n53|CTRL+Y|重复上一个命令或操作（如有可能）。\n54|CTRL+Z|使用“撤消”命令来撤消上一个命令或删除最后键入的内容。\n55|CTRL+SHIFT+Z|显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。\n\n### 功能键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|F1|显示“Microsoft Office Excel 帮助”任务窗格。\n2|ALT+F1|创建当前范围中数据的图表。\n3|ALT+SHIFT+F1|插入新的工作表。\n4|F2|编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。\n5|SHIFT+F2|添加或编辑单元格批注。\n6|CTRL+F2|显示“打印预览”窗口。\n7|F3|显示“粘贴名称”对话框。\n8|SHIFT+F3|显示“插入函数”对话框。\n9|F4|\"重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换\"\n10|Ctrl+F4|关闭选定的工作簿窗口。\n11|Ctrl+F5|从最大化中恢复选定工作簿窗口的窗口大小。\n12|F6|在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。\n13|SHIFT+F6|在工作表、缩放控件、任务窗格和功能区之间切换。\n14|CTRL+F6|如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。\n15|F7|显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。\n16|CTRL+F7|如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。\n17|F8|打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。\n18|SHIFT+F8|使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。\n19|CTRL+F8|当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。\n20|ALT+F8|显示用于创建、运行、编辑或删除宏的“宏”对话框。\n21|F9|计算所有打开的工作簿中的所有工作表。\n22|SHIFT+F9|按 Shift+F9 可计算活动工作表。\n23|CTRL+ALT+F9|计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。\n24|CTRL+ALT+SHIFT+F9|重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。\n25|CTRL+F9|将工作簿窗口最小化为图标。\n26|F10|\"打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。\"\n27|SHIFT+F10|按 Shift+F10 可显示选定项目的快捷菜单。\n28|ALT+SHIFT+F10|显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。\n29|CTRL+F10|最大化或还原选定的工作簿窗口。\n30|F11|创建当前范围内数据的图表。\n31|SHIFT+F11|按 Shift+F11 可插入一个新工作表。\n32|ALT+F11|打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。\n33|F12|显示“另存为”对话框。\n\n### 其他实用快捷键\n\n-|快捷键|　　　　说明　　　　\n:-:|-|-\n1|ARROW KEYS|在工作表中上移、下移、左移或右移一个单元格。\n2|CTRL+ARROW KEY|移动到工作表中当前数据区域的边缘。\n3|SHIFT+ARROW KEY|将单元格的选定范围扩大一个单元格。\n4|CTRL+SHIFT+ARROW KEY|按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。\n5|BACKSPACE|在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。\n6|DELETE|从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。\n7|END|当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。\n8|CTRL+END|移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。\n9|CTRL+SHIFT+END|按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。\n10|ENTER|从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。\n11|ALT+ENTER|在同一单元格中另起一个新行。\n12|CTRL+ENTER|使用当前输入的条目填充选定的单元格区域。\n13|SHIFT+ENTER|完成单元格输入并选择上面的单元格。\n14|ESC|取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。\n15|HOME|移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。\n16|CTRL+HOME |移到工作表的开头。\n17|CTRL+SHIFT+HOME|将单元格的选定范围扩展到工作表的开头。\n18|PAGE DOWN|在工作表中下移一个屏幕。\n19|ALT+PAGE DOWN|在工作表中向右移动一个屏幕。\n20|CTRL+SHIFT+PAGE DOWN|选择工作簿中的当前和下一个工作表。\n21|PAGE UP|在工作表中上移一个屏幕。\n22|ALT+PAGE UP|在工作表中向左移动一个屏幕。\n23|CTRL+SHIFT+PAGE UP|选择工作簿中的当前和上一个工作表。\n24|SPACEBAR|在对话框中，执行选定按钮的操作，或者选中或清除复选框。\n25|CTRL+SPACEBAR|选择工作表中的整列。\n26|SHIFT+SPACEBAR|选择工作表中的整行。\n27|CTRL+SHIFT+SPACEBAR|按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。\n28|ALT+SPACEBAR|显示 Microsoft Office Excel 窗口的“控制”菜单。\n29|TAB|在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。\n30|SHIFT+TAB|移到前一个单元格（在工作表中）或前一个选项（在对话框中）。\n31|CTRL+TAB|在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。\n32|CTRL+SHIFT+TAB|在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。\n\n## 相关链接\n\n1. 微软 Office 帮助中心: [Excel 快捷键和功能键](https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&rs=zh-CN&ad=CN)\n1. Microsoft Office Support: [Excel shortcut and function keys](https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f)\n","slug":"anki-excel-shortcuts","published":1,"updated":"2016-06-28T02:48:59.284Z","_id":"cipjfs5vs002v4wmc5w94y6l2","comments":1,"layout":"post","photos":[],"link":"","content":"<p></p><h2 id=\"intro\">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。<p></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"记忆库使用\"><a href=\"#记忆库使用\" class=\"headerlink\" title=\"记忆库使用\"></a>记忆库使用</h2><p>所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。</p>\n<blockquote>\n<p>下载: <a href=\"/resources/Excel-Shortcut-keys.apkg\">Excel 快捷键大全 (Windows) for Anki</a></p>\n</blockquote>\n<p>释义默认中英对照显示，可按需隐藏。<br><img src=\"http://moxfive.xyz/resources/Anki-a1.png\" alt=\"Anki-a1\"></p>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><p>列出自己平时使用最频繁的10个 Excel 快捷键。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>CTRL+D</td>\n<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+ENTER</td>\n<td>使用当前输入的条目填充选定的单元格区域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>F2</td>\n<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+1</td>\n<td>显示“单元格格式”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>CTRL+SHIFT+~</td>\n<td>应用“常规”数字格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+G</td>\n<td>显示“定位”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>CTRL+`</td>\n<td>在工作表中切换显示单元格值和公式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+’</td>\n<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>F4</td>\n<td>重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>ALT+ENTER</td>\n<td>在同一单元格中另起一个新行。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"快捷键大全\"><a href=\"#快捷键大全\" class=\"headerlink\" title=\"快捷键大全\"></a>快捷键大全</h2><h3 id=\"Ctrl-组合快捷键\"><a href=\"#Ctrl-组合快捷键\" class=\"headerlink\" title=\"Ctrl 组合快捷键\"></a>Ctrl 组合快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>CTRL+PgUp</td>\n<td>向左切换工作表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+PgDn</td>\n<td>向右切换工作表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>CTRL+SHIFT+&amp;</td>\n<td>将外框应用于选定单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+SHIFT_</td>\n<td>从选定单元格删除外框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>CTRL+SHIFT+~</td>\n<td>应用“常规”数字格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+SHIFT+$</td>\n<td>应用带有两位小数的“货币”格式（负数放在括号中）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>CTRL+SHIFT+%</td>\n<td>应用不带小数位的“百分比”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+SHIFT+^</td>\n<td>应用带有两位小数的“指数”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>CTRL+SHIFT+#</td>\n<td>应用带有日、月和年的“日期”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>CTRL+SHIFT+@</td>\n<td>应用带有小时和分钟以及 AM 或 PM 的“时间”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>CTRL+SHIFT+!</td>\n<td>应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>CTRL+SHIFT+*</td>\n<td>选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>CTRL+SHIFT+:</td>\n<td>输入当前时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>CTRL+SHIFT+”</td>\n<td>将值从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>CTRL+SHIFT+Plus (+)</td>\n<td>显示用于插入空白单元格的“插入”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+Minus (-)</td>\n<td>显示用于删除选定单元格的“删除”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>CTRL+;</td>\n<td>输入当前日期。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>CTRL+`</td>\n<td>在工作表中切换显示单元格值和公式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>CTRL+’</td>\n<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>CTRL+1</td>\n<td>显示“单元格格式”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>CTRL+2</td>\n<td>应用或取消加粗格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>CTRL+3</td>\n<td>应用或取消倾斜格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+4</td>\n<td>应用或取消下划线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>CTRL+5</td>\n<td>应用或取消删除线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+6</td>\n<td>在隐藏对象、显示对象和显示对象占位符之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>CTRL+8</td>\n<td>显示或隐藏大纲符号。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>CTRL+9</td>\n<td>隐藏选定的行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>CTRL+0</td>\n<td>隐藏选定的列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>CTRL+A</td>\n<td>☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>CTRL+B</td>\n<td>应用或取消加粗格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>CTRL+C</td>\n<td>复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>CTRL+D</td>\n<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td>CTRL+F</td>\n<td>显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td>SHIFT+F4</td>\n<td>重复上一次“查找”操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td>CTRL+SHIFT+F<br>CTRL+SHIFT+P</td>\n<td>打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td>CTRL+G<br>F5</td>\n<td>显示“定位”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td>CTRL+H</td>\n<td>显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td>CTRL+I</td>\n<td>应用或取消倾斜格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td>CTRL+K</td>\n<td>为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40</td>\n<td>CTRL+N</td>\n<td>创建一个新的空白工作簿。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td>CTRL+O</td>\n<td>显示“打开”对话框以打开或查找文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td>CTRL+SHIFT+O</td>\n<td>选择所有包含批注的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td>CTRL+P</td>\n<td>显示“打印”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">44</td>\n<td>CTRL+R</td>\n<td>使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">45</td>\n<td>CTRL+S</td>\n<td>使用其当前文件名、位置和文件格式保存活动文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">46</td>\n<td>CTRL+T</td>\n<td>显示“创建表”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">47</td>\n<td>CTRL+U</td>\n<td>应用或取消下划线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">48</td>\n<td>CTRL+SHIFT+U</td>\n<td>在展开和折叠编辑栏之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">49</td>\n<td>CTRL+V</td>\n<td>在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">50</td>\n<td>CTRL+ALT+V</td>\n<td>显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">51</td>\n<td>CTRL+W</td>\n<td>关闭选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">52</td>\n<td>CTRL+X</td>\n<td>剪切选定的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">53</td>\n<td>CTRL+Y</td>\n<td>重复上一个命令或操作（如有可能）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">54</td>\n<td>CTRL+Z</td>\n<td>使用“撤消”命令来撤消上一个命令或删除最后键入的内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">55</td>\n<td>CTRL+SHIFT+Z</td>\n<td>显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"功能键\"><a href=\"#功能键\" class=\"headerlink\" title=\"功能键\"></a>功能键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>F1</td>\n<td>显示“Microsoft Office Excel 帮助”任务窗格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>ALT+F1</td>\n<td>创建当前范围中数据的图表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>ALT+SHIFT+F1</td>\n<td>插入新的工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>F2</td>\n<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>SHIFT+F2</td>\n<td>添加或编辑单元格批注。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+F2</td>\n<td>显示“打印预览”窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>F3</td>\n<td>显示“粘贴名称”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>SHIFT+F3</td>\n<td>显示“插入函数”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>F4</td>\n<td>“重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>Ctrl+F4</td>\n<td>关闭选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>Ctrl+F5</td>\n<td>从最大化中恢复选定工作簿窗口的窗口大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>F6</td>\n<td>在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>SHIFT+F6</td>\n<td>在工作表、缩放控件、任务窗格和功能区之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>CTRL+F6</td>\n<td>如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>F7</td>\n<td>显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+F7</td>\n<td>如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>F8</td>\n<td>打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>SHIFT+F8</td>\n<td>使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>CTRL+F8</td>\n<td>当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>ALT+F8</td>\n<td>显示用于创建、运行、编辑或删除宏的“宏”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>F9</td>\n<td>计算所有打开的工作簿中的所有工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>SHIFT+F9</td>\n<td>按 Shift+F9 可计算活动工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+ALT+F9</td>\n<td>计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>CTRL+ALT+SHIFT+F9</td>\n<td>重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+F9</td>\n<td>将工作簿窗口最小化为图标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>F10</td>\n<td>“打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>SHIFT+F10</td>\n<td>按 Shift+F10 可显示选定项目的快捷菜单。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>ALT+SHIFT+F10</td>\n<td>显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>CTRL+F10</td>\n<td>最大化或还原选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>F11</td>\n<td>创建当前范围内数据的图表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>SHIFT+F11</td>\n<td>按 Shift+F11 可插入一个新工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>ALT+F11</td>\n<td>打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td>F12</td>\n<td>显示“另存为”对话框。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"其他实用快捷键\"><a href=\"#其他实用快捷键\" class=\"headerlink\" title=\"其他实用快捷键\"></a>其他实用快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>ARROW KEYS</td>\n<td>在工作表中上移、下移、左移或右移一个单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+ARROW KEY</td>\n<td>移动到工作表中当前数据区域的边缘。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>SHIFT+ARROW KEY</td>\n<td>将单元格的选定范围扩大一个单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+SHIFT+ARROW KEY</td>\n<td>按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>BACKSPACE</td>\n<td>在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>DELETE</td>\n<td>从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>END</td>\n<td>当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+END</td>\n<td>移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>CTRL+SHIFT+END</td>\n<td>按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>ENTER</td>\n<td>从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>ALT+ENTER</td>\n<td>在同一单元格中另起一个新行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>CTRL+ENTER</td>\n<td>使用当前输入的条目填充选定的单元格区域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>SHIFT+ENTER</td>\n<td>完成单元格输入并选择上面的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>ESC</td>\n<td>取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>HOME</td>\n<td>移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+HOME</td>\n<td>移到工作表的开头。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>CTRL+SHIFT+HOME</td>\n<td>将单元格的选定范围扩展到工作表的开头。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>PAGE DOWN</td>\n<td>在工作表中下移一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>ALT+PAGE DOWN</td>\n<td>在工作表中向右移动一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>CTRL+SHIFT+PAGE DOWN</td>\n<td>选择工作簿中的当前和下一个工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>PAGE UP</td>\n<td>在工作表中上移一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>ALT+PAGE UP</td>\n<td>在工作表中向左移动一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+SHIFT+PAGE UP</td>\n<td>选择工作簿中的当前和上一个工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>SPACEBAR</td>\n<td>在对话框中，执行选定按钮的操作，或者选中或清除复选框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+SPACEBAR</td>\n<td>选择工作表中的整列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>SHIFT+SPACEBAR</td>\n<td>选择工作表中的整行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>CTRL+SHIFT+SPACEBAR</td>\n<td>按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>ALT+SPACEBAR</td>\n<td>显示 Microsoft Office Excel 窗口的“控制”菜单。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>TAB</td>\n<td>在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>SHIFT+TAB</td>\n<td>移到前一个单元格（在工作表中）或前一个选项（在对话框中）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>CTRL+TAB</td>\n<td>在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>CTRL+SHIFT+TAB</td>\n<td>在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li>微软 Office 帮助中心: <a href=\"https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN\" target=\"_blank\" rel=\"external\">Excel 快捷键和功能键</a></li>\n<li>Microsoft Office Support: <a href=\"https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f\" target=\"_blank\" rel=\"external\">Excel shortcut and function keys</a></li>\n</ol>\n","excerpt":"<p><h2 id=\"intro\">前言</h2>如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"记忆库使用\"><a href=\"#记忆库使用\" class=\"headerlink\" title=\"记忆库使用\"></a>记忆库使用</h2><p>所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。</p>\n<blockquote>\n<p>下载: <a href=\"/resources/Excel-Shortcut-keys.apkg\">Excel 快捷键大全 (Windows) for Anki</a></p>\n</blockquote>\n<p>释义默认中英对照显示，可按需隐藏。<br><img src=\"http://moxfive.xyz/resources/Anki-a1.png\" alt=\"Anki-a1\"></p>\n<h2 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h2><p>列出自己平时使用最频繁的10个 Excel 快捷键。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>CTRL+D</td>\n<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+ENTER</td>\n<td>使用当前输入的条目填充选定的单元格区域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>F2</td>\n<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+1</td>\n<td>显示“单元格格式”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>CTRL+SHIFT+~</td>\n<td>应用“常规”数字格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+G</td>\n<td>显示“定位”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>CTRL+`</td>\n<td>在工作表中切换显示单元格值和公式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+’</td>\n<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>F4</td>\n<td>重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>ALT+ENTER</td>\n<td>在同一单元格中另起一个新行。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"快捷键大全\"><a href=\"#快捷键大全\" class=\"headerlink\" title=\"快捷键大全\"></a>快捷键大全</h2><h3 id=\"Ctrl-组合快捷键\"><a href=\"#Ctrl-组合快捷键\" class=\"headerlink\" title=\"Ctrl 组合快捷键\"></a>Ctrl 组合快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>CTRL+PgUp</td>\n<td>向左切换工作表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+PgDn</td>\n<td>向右切换工作表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>CTRL+SHIFT+&amp;</td>\n<td>将外框应用于选定单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+SHIFT_</td>\n<td>从选定单元格删除外框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>CTRL+SHIFT+~</td>\n<td>应用“常规”数字格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+SHIFT+$</td>\n<td>应用带有两位小数的“货币”格式（负数放在括号中）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>CTRL+SHIFT+%</td>\n<td>应用不带小数位的“百分比”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+SHIFT+^</td>\n<td>应用带有两位小数的“指数”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>CTRL+SHIFT+#</td>\n<td>应用带有日、月和年的“日期”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>CTRL+SHIFT+@</td>\n<td>应用带有小时和分钟以及 AM 或 PM 的“时间”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>CTRL+SHIFT+!</td>\n<td>应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>CTRL+SHIFT+*</td>\n<td>选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。<br>在数据透视表中，它将选择整个数据透视表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>CTRL+SHIFT+:</td>\n<td>输入当前时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>CTRL+SHIFT+”</td>\n<td>将值从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>CTRL+SHIFT+Plus (+)</td>\n<td>显示用于插入空白单元格的“插入”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+Minus (-)</td>\n<td>显示用于删除选定单元格的“删除”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>CTRL+;</td>\n<td>输入当前日期。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>CTRL+`</td>\n<td>在工作表中切换显示单元格值和公式。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>CTRL+’</td>\n<td>将公式从活动单元格上方的单元格复制到单元格或编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>CTRL+1</td>\n<td>显示“单元格格式”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>CTRL+2</td>\n<td>应用或取消加粗格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>CTRL+3</td>\n<td>应用或取消倾斜格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+4</td>\n<td>应用或取消下划线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>CTRL+5</td>\n<td>应用或取消删除线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+6</td>\n<td>在隐藏对象、显示对象和显示对象占位符之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>CTRL+8</td>\n<td>显示或隐藏大纲符号。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>CTRL+9</td>\n<td>隐藏选定的行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>CTRL+0</td>\n<td>隐藏选定的列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>CTRL+A</td>\n<td>☆选择整个工作表。<br>☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。<br>☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。<br>☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>CTRL+B</td>\n<td>应用或取消加粗格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>CTRL+C</td>\n<td>复制选定的单元格。<br>如果连续按两次 Ctrl+C，则会显示剪贴板。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>CTRL+D</td>\n<td>使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td>CTRL+F</td>\n<td>显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。<br>按 Shift+F5 也会显示此选项卡。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td>SHIFT+F4</td>\n<td>重复上一次“查找”操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td>CTRL+SHIFT+F<br>CTRL+SHIFT+P</td>\n<td>打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td>CTRL+G<br>F5</td>\n<td>显示“定位”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td>CTRL+H</td>\n<td>显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td>CTRL+I</td>\n<td>应用或取消倾斜格式设置。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td>CTRL+K</td>\n<td>为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40</td>\n<td>CTRL+N</td>\n<td>创建一个新的空白工作簿。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td>CTRL+O</td>\n<td>显示“打开”对话框以打开或查找文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td>CTRL+SHIFT+O</td>\n<td>选择所有包含批注的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td>CTRL+P</td>\n<td>显示“打印”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">44</td>\n<td>CTRL+R</td>\n<td>使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">45</td>\n<td>CTRL+S</td>\n<td>使用其当前文件名、位置和文件格式保存活动文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">46</td>\n<td>CTRL+T</td>\n<td>显示“创建表”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">47</td>\n<td>CTRL+U</td>\n<td>应用或取消下划线。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">48</td>\n<td>CTRL+SHIFT+U</td>\n<td>在展开和折叠编辑栏之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">49</td>\n<td>CTRL+V</td>\n<td>在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">50</td>\n<td>CTRL+ALT+V</td>\n<td>显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">51</td>\n<td>CTRL+W</td>\n<td>关闭选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">52</td>\n<td>CTRL+X</td>\n<td>剪切选定的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">53</td>\n<td>CTRL+Y</td>\n<td>重复上一个命令或操作（如有可能）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">54</td>\n<td>CTRL+Z</td>\n<td>使用“撤消”命令来撤消上一个命令或删除最后键入的内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">55</td>\n<td>CTRL+SHIFT+Z</td>\n<td>显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"功能键\"><a href=\"#功能键\" class=\"headerlink\" title=\"功能键\"></a>功能键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>F1</td>\n<td>显示“Microsoft Office Excel 帮助”任务窗格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>ALT+F1</td>\n<td>创建当前范围中数据的图表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>ALT+SHIFT+F1</td>\n<td>插入新的工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>F2</td>\n<td>编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>SHIFT+F2</td>\n<td>添加或编辑单元格批注。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>CTRL+F2</td>\n<td>显示“打印预览”窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>F3</td>\n<td>显示“粘贴名称”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>SHIFT+F3</td>\n<td>显示“插入函数”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>F4</td>\n<td>“重复上一个命令或操作（如有可能）。<br>编辑公式时，在绝对引用和相对引用间切换”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>Ctrl+F4</td>\n<td>关闭选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>Ctrl+F5</td>\n<td>从最大化中恢复选定工作簿窗口的窗口大小。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>F6</td>\n<td>在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>SHIFT+F6</td>\n<td>在工作表、缩放控件、任务窗格和功能区之间切换。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>CTRL+F6</td>\n<td>如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>F7</td>\n<td>显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+F7</td>\n<td>如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>F8</td>\n<td>打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>SHIFT+F8</td>\n<td>使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>CTRL+F8</td>\n<td>当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>ALT+F8</td>\n<td>显示用于创建、运行、编辑或删除宏的“宏”对话框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>F9</td>\n<td>计算所有打开的工作簿中的所有工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>SHIFT+F9</td>\n<td>按 Shift+F9 可计算活动工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+ALT+F9</td>\n<td>计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>CTRL+ALT+SHIFT+F9</td>\n<td>重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+F9</td>\n<td>将工作簿窗口最小化为图标。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>F10</td>\n<td>“打开或关闭键盘操作提示。<br>当打开提示时箭头键可用于导航。”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>SHIFT+F10</td>\n<td>按 Shift+F10 可显示选定项目的快捷菜单。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>ALT+SHIFT+F10</td>\n<td>显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>CTRL+F10</td>\n<td>最大化或还原选定的工作簿窗口。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>F11</td>\n<td>创建当前范围内数据的图表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>SHIFT+F11</td>\n<td>按 Shift+F11 可插入一个新工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>ALT+F11</td>\n<td>打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td>F12</td>\n<td>显示“另存为”对话框。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"其他实用快捷键\"><a href=\"#其他实用快捷键\" class=\"headerlink\" title=\"其他实用快捷键\"></a>其他实用快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">-</th>\n<th>快捷键</th>\n<th>　　　　说明　　　　</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>ARROW KEYS</td>\n<td>在工作表中上移、下移、左移或右移一个单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>CTRL+ARROW KEY</td>\n<td>移动到工作表中当前数据区域的边缘。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>SHIFT+ARROW KEY</td>\n<td>将单元格的选定范围扩大一个单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td>CTRL+SHIFT+ARROW KEY</td>\n<td>按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td>BACKSPACE</td>\n<td>在编辑栏中删除左边的一个字符。<br>也可清除活动单元格的内容。<br>在单元格编辑模式下，按该键将会删除插入点左边的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>DELETE</td>\n<td>从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。<br>在单元格编辑模式下，按该键将会删除插入点右边的字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td>END</td>\n<td>当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。<br>当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>CTRL+END</td>\n<td>移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td>CTRL+SHIFT+END</td>\n<td>按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td>ENTER</td>\n<td>从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。<br>打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。<br>在数据表单中，按该键可移动到下一条记录中的第一个字段。<br>在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td>ALT+ENTER</td>\n<td>在同一单元格中另起一个新行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td>CTRL+ENTER</td>\n<td>使用当前输入的条目填充选定的单元格区域。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td>SHIFT+ENTER</td>\n<td>完成单元格输入并选择上面的单元格。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td>ESC</td>\n<td>取消单元格或编辑栏中的输入。<br>关闭打开的菜单或子菜单、对话框或消息窗口。<br>在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td>HOME</td>\n<td>移到工作表中某一行的开头。<br>当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。<br>当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td>CTRL+HOME</td>\n<td>移到工作表的开头。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td>CTRL+SHIFT+HOME</td>\n<td>将单元格的选定范围扩展到工作表的开头。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td>PAGE DOWN</td>\n<td>在工作表中下移一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td>ALT+PAGE DOWN</td>\n<td>在工作表中向右移动一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td>CTRL+SHIFT+PAGE DOWN</td>\n<td>选择工作簿中的当前和下一个工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td>PAGE UP</td>\n<td>在工作表中上移一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td>ALT+PAGE UP</td>\n<td>在工作表中向左移动一个屏幕。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td>CTRL+SHIFT+PAGE UP</td>\n<td>选择工作簿中的当前和上一个工作表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td>SPACEBAR</td>\n<td>在对话框中，执行选定按钮的操作，或者选中或清除复选框。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td>CTRL+SPACEBAR</td>\n<td>选择工作表中的整列。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td>SHIFT+SPACEBAR</td>\n<td>选择工作表中的整行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td>CTRL+SHIFT+SPACEBAR</td>\n<td>按 Ctrl+Shift+空格键可选择整个工作表。<br>如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。<br>当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td>ALT+SPACEBAR</td>\n<td>显示 Microsoft Office Excel 窗口的“控制”菜单。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td>TAB</td>\n<td>在工作表中向右移动一个单元格。<br>在受保护的工作表中，可在未锁定的单元格之间移动。<br>在对话框中，移到下一个选项或选项组。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td>SHIFT+TAB</td>\n<td>移到前一个单元格（在工作表中）或前一个选项（在对话框中）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td>CTRL+TAB</td>\n<td>在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td>CTRL+SHIFT+TAB</td>\n<td>在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li>微软 Office 帮助中心: <a href=\"https://support.office.com/zh-cn/article/Excel-%e5%bf%ab%e6%8d%b7%e9%94%ae%e5%92%8c%e5%8a%9f%e8%83%bd%e9%94%ae-1798d9d5-842a-42b8-9c99-9b7213f0040f?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN\">Excel 快捷键和功能键</a></li>\n<li>Microsoft Office Support: <a href=\"https://support.office.com/en-ca/article/Excel-shortcut-and-function-keys-1798d9d5-842a-42b8-9c99-9b7213f0040f\">Excel shortcut and function keys</a></li>\n</ol>"},{"title":"前端工程化工具初选","date":"2016-06-05T10:53:03.000Z","comments":1,"note":1,"_content":"\n　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 库与框架\n\n>\n - [jQuery](http://jquery.com/)\n - [jQuery UI](http://jqueryui.com/): 一个JQuery的UI框架,特点是高效、组件化\n - [Vue.js](http://cn.vuejs.org/): 数据驱动的组件，为现代化的 Web 界面而生\n - [angularjs](http://www.apjs.net/) 应用最广泛的企业级web开发框架\n - [angular](https://angular.io/): 新一代angular开发框架\n - [React.js](http://facebook.github.io/react/): 构建组化件应用的javascript库\n - [React Native](https://facebook.github.io/react-native/): 使用react构建移动app应用\n\n## 构建工具&模块化\n\n一个构建、测试应用的构建工具\n\n>\n - [gulp.js](http://gulpjs.com/): 自动化工作流\n - [node](https://nodejs.org/) 建立在V8引擎上的快速构建平台\n\n\n##   模块打包器\n\n将模块打包到一个bundle中\n\n>\n- [webpack](https://webpack.github.io/): 能够将依赖打包、生成的自动构建工具\n\n## 包管理\n\n一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具\n\n>\n - [npm](https://www.npmjs.com/): Node 模块化管理工具\n\n## CSS 处理\n\n提供一个高效、动态的方法生成css\n\n>\n - [Stylus](https://github.com/stylus/stylus): node社区的css预处理器\n - [PostCSS](https://github.com/postcss/postcss): 将css转换成js插件\n\n## 模块化\n\n>\n - [ECMAScript 6 Module](http://exploringjs.com/es6/ch_modules.html)\n\n## 模板引擎\n\n使用js生成html文件\n\n>\n - [EJS](http://ejs.co/)\n - [jade](http://jade-lang.com/)\n\n## 测试框架\n>\n - [Mocha](http://mochajs.org/): 一个简单、快速的用来测试node和web应用的测试框架\n - [Chai](http://chaijs.com/): Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。\n\n\n## 脚手架\n\n>\n - [Yeoman](http://yeoman.io/) Web 应用开发流程与工具   \n - [koa-generator](https://npm.taobao.org/package/koa-generator) koa项目生成器         \n\n## 集成方案\n>\n - [FIS](http://fis.baidu.com/): 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题\n\n## UI框架\n\n>\n - [bootstrap](http://bootcss.com/) 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。\n - [foundation](http://foundation.zurb.com/) 最流行的响应式前前端布局框架\n - [semantic-ui](http://www.semantic-ui.cn/) Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。\n - [Material UI](http://callemall.github.io/material-ui/#/)  一组反应元件，实现谷歌的材料设计。\n - [ant design](http://ant.design/) Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。\n\n## 游戏引擎\n\n>\n  - [CreateJS](http://createjs.com/)  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。\n  - [PhaserJS](http://phaser.io/)  PC端和移动端HTML5游戏框架 。\n  - [ThreeJS](http://threejs.org/) 制作HTML5的3D游戏引擎 。\n  - [白鹭](http://www.egret.com/) Egret是一套HTML5游戏开发解决方案\n  - [Cocos2d-JS](http://www.cocos.com/) 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。\n## 容器\n> - [Docker](http://www.docker.com/): Build, Ship, and Run Any App, Anywhere\n\n## 社区\n\n>\n  - [stackoverflow](http://stackoverflow.com/) 技术大牛多，素质好，质量高\n  - [segmentfault](https://segmentfault.com/) 自动生成目录，博客UI看起来相对漂亮\n  - [开源中国](http://www.oschina.net/) 支持开源文化\n\n## 学习网站\n\n>\n  - [极客学院](http://www.jikexueyuan.com/)  学习资源多\n  - [慕课网](http://www.imooc.com/)  质量高，全免费  \n  - [花川学院](http://www.huachuanxueyuan.com/) 学习swift的好去处\n  - [麦子学院](http://www.maiziedu.com/) 后起之秀\n  - [W3C菜鸟](http://www.runoob.com/) 新手程序员的天堂\n  - [云路课堂](http://www.yun.lu/student/homepage) 极客风\n  - [码萌](http://www.mengma.com/) 编程从来简单有趣\n\n\n## 其他常用网站\n>\n  - [github](https://github.com) 程序员的QQ,面试的门面\n  - [码云](https://git.oschina.net) 和马云同名，给个面子\n  - [淘宝同步npm](https://npm.taobao.org/) 访问快，10分钟同步一次，查资料必备\n  - [bootCDN](http://www.bootcdn.cn/) 使用最普遍的CDN\n  - [font-awesome](http://fontawesome.dashgame.com/) 最好用的图标库\n  - [JSON格式化](http://json.cn/#)  这个时代的开发者谁离得了JSON呢\n  - [开发工具](http://fenav.com/#/p11) 全面省心\n","source":"_posts/2016-06-05.front_end_tools.md","raw":"---\ntitle: 前端工程化工具初选\ndate: 2016-06-05 18:53:03\ncategories:\n- 自用笔记\n- 术业专攻\ntags:\n- 开发工具\ncomments:\npermalink: front-end-tools\nnote: 1\n---\n\n　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 库与框架\n\n>\n - [jQuery](http://jquery.com/)\n - [jQuery UI](http://jqueryui.com/): 一个JQuery的UI框架,特点是高效、组件化\n - [Vue.js](http://cn.vuejs.org/): 数据驱动的组件，为现代化的 Web 界面而生\n - [angularjs](http://www.apjs.net/) 应用最广泛的企业级web开发框架\n - [angular](https://angular.io/): 新一代angular开发框架\n - [React.js](http://facebook.github.io/react/): 构建组化件应用的javascript库\n - [React Native](https://facebook.github.io/react-native/): 使用react构建移动app应用\n\n## 构建工具&模块化\n\n一个构建、测试应用的构建工具\n\n>\n - [gulp.js](http://gulpjs.com/): 自动化工作流\n - [node](https://nodejs.org/) 建立在V8引擎上的快速构建平台\n\n\n##   模块打包器\n\n将模块打包到一个bundle中\n\n>\n- [webpack](https://webpack.github.io/): 能够将依赖打包、生成的自动构建工具\n\n## 包管理\n\n一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具\n\n>\n - [npm](https://www.npmjs.com/): Node 模块化管理工具\n\n## CSS 处理\n\n提供一个高效、动态的方法生成css\n\n>\n - [Stylus](https://github.com/stylus/stylus): node社区的css预处理器\n - [PostCSS](https://github.com/postcss/postcss): 将css转换成js插件\n\n## 模块化\n\n>\n - [ECMAScript 6 Module](http://exploringjs.com/es6/ch_modules.html)\n\n## 模板引擎\n\n使用js生成html文件\n\n>\n - [EJS](http://ejs.co/)\n - [jade](http://jade-lang.com/)\n\n## 测试框架\n>\n - [Mocha](http://mochajs.org/): 一个简单、快速的用来测试node和web应用的测试框架\n - [Chai](http://chaijs.com/): Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。\n\n\n## 脚手架\n\n>\n - [Yeoman](http://yeoman.io/) Web 应用开发流程与工具   \n - [koa-generator](https://npm.taobao.org/package/koa-generator) koa项目生成器         \n\n## 集成方案\n>\n - [FIS](http://fis.baidu.com/): 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题\n\n## UI框架\n\n>\n - [bootstrap](http://bootcss.com/) 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。\n - [foundation](http://foundation.zurb.com/) 最流行的响应式前前端布局框架\n - [semantic-ui](http://www.semantic-ui.cn/) Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。\n - [Material UI](http://callemall.github.io/material-ui/#/)  一组反应元件，实现谷歌的材料设计。\n - [ant design](http://ant.design/) Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。\n\n## 游戏引擎\n\n>\n  - [CreateJS](http://createjs.com/)  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。\n  - [PhaserJS](http://phaser.io/)  PC端和移动端HTML5游戏框架 。\n  - [ThreeJS](http://threejs.org/) 制作HTML5的3D游戏引擎 。\n  - [白鹭](http://www.egret.com/) Egret是一套HTML5游戏开发解决方案\n  - [Cocos2d-JS](http://www.cocos.com/) 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。\n## 容器\n> - [Docker](http://www.docker.com/): Build, Ship, and Run Any App, Anywhere\n\n## 社区\n\n>\n  - [stackoverflow](http://stackoverflow.com/) 技术大牛多，素质好，质量高\n  - [segmentfault](https://segmentfault.com/) 自动生成目录，博客UI看起来相对漂亮\n  - [开源中国](http://www.oschina.net/) 支持开源文化\n\n## 学习网站\n\n>\n  - [极客学院](http://www.jikexueyuan.com/)  学习资源多\n  - [慕课网](http://www.imooc.com/)  质量高，全免费  \n  - [花川学院](http://www.huachuanxueyuan.com/) 学习swift的好去处\n  - [麦子学院](http://www.maiziedu.com/) 后起之秀\n  - [W3C菜鸟](http://www.runoob.com/) 新手程序员的天堂\n  - [云路课堂](http://www.yun.lu/student/homepage) 极客风\n  - [码萌](http://www.mengma.com/) 编程从来简单有趣\n\n\n## 其他常用网站\n>\n  - [github](https://github.com) 程序员的QQ,面试的门面\n  - [码云](https://git.oschina.net) 和马云同名，给个面子\n  - [淘宝同步npm](https://npm.taobao.org/) 访问快，10分钟同步一次，查资料必备\n  - [bootCDN](http://www.bootcdn.cn/) 使用最普遍的CDN\n  - [font-awesome](http://fontawesome.dashgame.com/) 最好用的图标库\n  - [JSON格式化](http://json.cn/#)  这个时代的开发者谁离得了JSON呢\n  - [开发工具](http://fenav.com/#/p11) 全面省心\n","slug":"front-end-tools","published":1,"updated":"2016-06-28T02:48:53.128Z","_id":"cipjfs5vv002y4wmc0220fft2","layout":"post","photos":[],"link":"","content":"<p>　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"库与框架\"><a href=\"#库与框架\" class=\"headerlink\" title=\"库与框架\"></a>库与框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a></li>\n<li><a href=\"http://jqueryui.com/\" target=\"_blank\" rel=\"external\">jQuery UI</a>: 一个JQuery的UI框架,特点是高效、组件化</li>\n<li><a href=\"http://cn.vuejs.org/\" target=\"_blank\" rel=\"external\">Vue.js</a>: 数据驱动的组件，为现代化的 Web 界面而生</li>\n<li><a href=\"http://www.apjs.net/\" target=\"_blank\" rel=\"external\">angularjs</a> 应用最广泛的企业级web开发框架</li>\n<li><a href=\"https://angular.io/\" target=\"_blank\" rel=\"external\">angular</a>: 新一代angular开发框架</li>\n<li><a href=\"http://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React.js</a>: 构建组化件应用的javascript库</li>\n<li><a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"external\">React Native</a>: 使用react构建移动app应用</li>\n</ul>\n<h2 id=\"构建工具-amp-模块化\"><a href=\"#构建工具-amp-模块化\" class=\"headerlink\" title=\"构建工具&amp;模块化\"></a>构建工具&amp;模块化</h2><p>一个构建、测试应用的构建工具</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"http://gulpjs.com/\" target=\"_blank\" rel=\"external\">gulp.js</a>: 自动化工作流</li>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">node</a> 建立在V8引擎上的快速构建平台</li>\n</ul>\n<h2 id=\"模块打包器\"><a href=\"#模块打包器\" class=\"headerlink\" title=\"模块打包器\"></a>模块打包器</h2><p>将模块打包到一个bundle中</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a>: 能够将依赖打包、生成的自动构建工具</li>\n</ul>\n<h2 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h2><p>一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm</a>: Node 模块化管理工具</li>\n</ul>\n<h2 id=\"CSS-处理\"><a href=\"#CSS-处理\" class=\"headerlink\" title=\"CSS 处理\"></a>CSS 处理</h2><p>提供一个高效、动态的方法生成css</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://github.com/stylus/stylus\" target=\"_blank\" rel=\"external\">Stylus</a>: node社区的css预处理器</li>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">PostCSS</a>: 将css转换成js插件</li>\n</ul>\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"external\">ECMAScript 6 Module</a></li>\n</ul>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>使用js生成html文件</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"http://ejs.co/\" target=\"_blank\" rel=\"external\">EJS</a></li>\n<li><a href=\"http://jade-lang.com/\" target=\"_blank\" rel=\"external\">jade</a></li>\n</ul>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"external\">Mocha</a>: 一个简单、快速的用来测试node和web应用的测试框架</li>\n<li><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"external\">Chai</a>: Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。</li>\n</ul>\n<h2 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"external\">Yeoman</a> Web 应用开发流程与工具   </li>\n<li><a href=\"https://npm.taobao.org/package/koa-generator\" target=\"_blank\" rel=\"external\">koa-generator</a> koa项目生成器         </li>\n</ul>\n<h2 id=\"集成方案\"><a href=\"#集成方案\" class=\"headerlink\" title=\"集成方案\"></a>集成方案</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://fis.baidu.com/\" target=\"_blank\" rel=\"external\">FIS</a>: 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题</li>\n</ul>\n<h2 id=\"UI框架\"><a href=\"#UI框架\" class=\"headerlink\" title=\"UI框架\"></a>UI框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://bootcss.com/\" target=\"_blank\" rel=\"external\">bootstrap</a> 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。</li>\n<li><a href=\"http://foundation.zurb.com/\" target=\"_blank\" rel=\"external\">foundation</a> 最流行的响应式前前端布局框架</li>\n<li><a href=\"http://www.semantic-ui.cn/\" target=\"_blank\" rel=\"external\">semantic-ui</a> Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。</li>\n<li><a href=\"http://callemall.github.io/material-ui/#/\" target=\"_blank\" rel=\"external\">Material UI</a>  一组反应元件，实现谷歌的材料设计。</li>\n<li><a href=\"http://ant.design/\" target=\"_blank\" rel=\"external\">ant design</a> Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。</li>\n</ul>\n<h2 id=\"游戏引擎\"><a href=\"#游戏引擎\" class=\"headerlink\" title=\"游戏引擎\"></a>游戏引擎</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://createjs.com/\" target=\"_blank\" rel=\"external\">CreateJS</a>  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。</li>\n<li><a href=\"http://phaser.io/\" target=\"_blank\" rel=\"external\">PhaserJS</a>  PC端和移动端HTML5游戏框架 。</li>\n<li><a href=\"http://threejs.org/\" target=\"_blank\" rel=\"external\">ThreeJS</a> 制作HTML5的3D游戏引擎 。</li>\n<li><a href=\"http://www.egret.com/\" target=\"_blank\" rel=\"external\">白鹭</a> Egret是一套HTML5游戏开发解决方案</li>\n<li><a href=\"http://www.cocos.com/\" target=\"_blank\" rel=\"external\">Cocos2d-JS</a> 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><blockquote>\n<ul>\n<li><a href=\"http://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a>: Build, Ship, and Run Any App, Anywhere</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"社区\"><a href=\"#社区\" class=\"headerlink\" title=\"社区\"></a>社区</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">stackoverflow</a> 技术大牛多，素质好，质量高</li>\n<li><a href=\"https://segmentfault.com/\" target=\"_blank\" rel=\"external\">segmentfault</a> 自动生成目录，博客UI看起来相对漂亮</li>\n<li><a href=\"http://www.oschina.net/\" target=\"_blank\" rel=\"external\">开源中国</a> 支持开源文化</li>\n</ul>\n<h2 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://www.jikexueyuan.com/\" target=\"_blank\" rel=\"external\">极客学院</a>  学习资源多</li>\n<li><a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">慕课网</a>  质量高，全免费  </li>\n<li><a href=\"http://www.huachuanxueyuan.com/\" target=\"_blank\" rel=\"external\">花川学院</a> 学习swift的好去处</li>\n<li><a href=\"http://www.maiziedu.com/\" target=\"_blank\" rel=\"external\">麦子学院</a> 后起之秀</li>\n<li><a href=\"http://www.runoob.com/\" target=\"_blank\" rel=\"external\">W3C菜鸟</a> 新手程序员的天堂</li>\n<li><a href=\"http://www.yun.lu/student/homepage\" target=\"_blank\" rel=\"external\">云路课堂</a> 极客风</li>\n<li><a href=\"http://www.mengma.com/\" target=\"_blank\" rel=\"external\">码萌</a> 编程从来简单有趣</li>\n</ul>\n<h2 id=\"其他常用网站\"><a href=\"#其他常用网站\" class=\"headerlink\" title=\"其他常用网站\"></a>其他常用网站</h2><p>&gt;</p>\n<ul>\n<li><a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a> 程序员的QQ,面试的门面</li>\n<li><a href=\"https://git.oschina.net\" target=\"_blank\" rel=\"external\">码云</a> 和马云同名，给个面子</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝同步npm</a> 访问快，10分钟同步一次，查资料必备</li>\n<li><a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"external\">bootCDN</a> 使用最普遍的CDN</li>\n<li><a href=\"http://fontawesome.dashgame.com/\" target=\"_blank\" rel=\"external\">font-awesome</a> 最好用的图标库</li>\n<li><a href=\"http://json.cn/#\" target=\"_blank\" rel=\"external\">JSON格式化</a>  这个时代的开发者谁离得了JSON呢</li>\n<li><a href=\"http://fenav.com/#/p11\" target=\"_blank\" rel=\"external\">开发工具</a> 全面省心</li>\n</ul>\n","excerpt":"<p>　　面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"库与框架\"><a href=\"#库与框架\" class=\"headerlink\" title=\"库与框架\"></a>库与框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://jquery.com/\">jQuery</a></li>\n<li><a href=\"http://jqueryui.com/\">jQuery UI</a>: 一个JQuery的UI框架,特点是高效、组件化</li>\n<li><a href=\"http://cn.vuejs.org/\">Vue.js</a>: 数据驱动的组件，为现代化的 Web 界面而生</li>\n<li><a href=\"http://www.apjs.net/\">angularjs</a> 应用最广泛的企业级web开发框架</li>\n<li><a href=\"https://angular.io/\">angular</a>: 新一代angular开发框架</li>\n<li><a href=\"http://facebook.github.io/react/\">React.js</a>: 构建组化件应用的javascript库</li>\n<li><a href=\"https://facebook.github.io/react-native/\">React Native</a>: 使用react构建移动app应用</li>\n</ul>\n<h2 id=\"构建工具-amp-模块化\"><a href=\"#构建工具-amp-模块化\" class=\"headerlink\" title=\"构建工具&amp;模块化\"></a>构建工具&amp;模块化</h2><p>一个构建、测试应用的构建工具</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"http://gulpjs.com/\">gulp.js</a>: 自动化工作流</li>\n<li><a href=\"https://nodejs.org/\">node</a> 建立在V8引擎上的快速构建平台</li>\n</ul>\n<h2 id=\"模块打包器\"><a href=\"#模块打包器\" class=\"headerlink\" title=\"模块打包器\"></a>模块打包器</h2><p>将模块打包到一个bundle中</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://webpack.github.io/\">webpack</a>: 能够将依赖打包、生成的自动构建工具</li>\n</ul>\n<h2 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h2><p>一个用来管理依赖的包管理器，你可以使用它下载很多模块化的工具</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/\">npm</a>: Node 模块化管理工具</li>\n</ul>\n<h2 id=\"CSS-处理\"><a href=\"#CSS-处理\" class=\"headerlink\" title=\"CSS 处理\"></a>CSS 处理</h2><p>提供一个高效、动态的方法生成css</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"https://github.com/stylus/stylus\">Stylus</a>: node社区的css预处理器</li>\n<li><a href=\"https://github.com/postcss/postcss\">PostCSS</a>: 将css转换成js插件</li>\n</ul>\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">ECMAScript 6 Module</a></li>\n</ul>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>使用js生成html文件</p>\n<p>&gt;</p>\n<ul>\n<li><a href=\"http://ejs.co/\">EJS</a></li>\n<li><a href=\"http://jade-lang.com/\">jade</a></li>\n</ul>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://mochajs.org/\">Mocha</a>: 一个简单、快速的用来测试node和web应用的测试框架</li>\n<li><a href=\"http://chaijs.com/\">Chai</a>: Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。</li>\n</ul>\n<h2 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://yeoman.io/\">Yeoman</a> Web 应用开发流程与工具   </li>\n<li><a href=\"https://npm.taobao.org/package/koa-generator\">koa-generator</a> koa项目生成器         </li>\n</ul>\n<h2 id=\"集成方案\"><a href=\"#集成方案\" class=\"headerlink\" title=\"集成方案\"></a>集成方案</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://fis.baidu.com/\">FIS</a>: 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题</li>\n</ul>\n<h2 id=\"UI框架\"><a href=\"#UI框架\" class=\"headerlink\" title=\"UI框架\"></a>UI框架</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://bootcss.com/\">bootstrap</a> 简洁、直观、强悍的UI框架，让web开发更迅速,后端程序的福音。</li>\n<li><a href=\"http://foundation.zurb.com/\">foundation</a> 最流行的响应式前前端布局框架</li>\n<li><a href=\"http://www.semantic-ui.cn/\">semantic-ui</a> Semantic作为一个开发框架，通过HTML语言帮助创建令人赏心悦目、响应式的布局。</li>\n<li><a href=\"http://callemall.github.io/material-ui/#/\">Material UI</a>  一组反应元件，实现谷歌的材料设计。</li>\n<li><a href=\"http://ant.design/\">ant design</a> Ant Design 是一个 UI 设计语言，是一套提炼和应用于企业级后台产品的交互语言和视觉体系。</li>\n</ul>\n<h2 id=\"游戏引擎\"><a href=\"#游戏引擎\" class=\"headerlink\" title=\"游戏引擎\"></a>游戏引擎</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://createjs.com/\">CreateJS</a>  基于HTML5的一套模块化的库和工具共同工作或独立使丰富的交互式内容的开放式Web技术。</li>\n<li><a href=\"http://phaser.io/\">PhaserJS</a>  PC端和移动端HTML5游戏框架 。</li>\n<li><a href=\"http://threejs.org/\">ThreeJS</a> 制作HTML5的3D游戏引擎 。</li>\n<li><a href=\"http://www.egret.com/\">白鹭</a> Egret是一套HTML5游戏开发解决方案</li>\n<li><a href=\"http://www.cocos.com/\">Cocos2d-JS</a> 开发者可以通过cocos游戏开发引擎快速编辑界面和动画、编写和调试代码等，最终导出适合于各平台、各渠道发布的游戏安装包。<h2 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h2><blockquote>\n<ul>\n<li><a href=\"http://www.docker.com/\">Docker</a>: Build, Ship, and Run Any App, Anywhere</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"社区\"><a href=\"#社区\" class=\"headerlink\" title=\"社区\"></a>社区</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/\">stackoverflow</a> 技术大牛多，素质好，质量高</li>\n<li><a href=\"https://segmentfault.com/\">segmentfault</a> 自动生成目录，博客UI看起来相对漂亮</li>\n<li><a href=\"http://www.oschina.net/\">开源中国</a> 支持开源文化</li>\n</ul>\n<h2 id=\"学习网站\"><a href=\"#学习网站\" class=\"headerlink\" title=\"学习网站\"></a>学习网站</h2><p>&gt;</p>\n<ul>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a>  学习资源多</li>\n<li><a href=\"http://www.imooc.com/\">慕课网</a>  质量高，全免费  </li>\n<li><a href=\"http://www.huachuanxueyuan.com/\">花川学院</a> 学习swift的好去处</li>\n<li><a href=\"http://www.maiziedu.com/\">麦子学院</a> 后起之秀</li>\n<li><a href=\"http://www.runoob.com/\">W3C菜鸟</a> 新手程序员的天堂</li>\n<li><a href=\"http://www.yun.lu/student/homepage\">云路课堂</a> 极客风</li>\n<li><a href=\"http://www.mengma.com/\">码萌</a> 编程从来简单有趣</li>\n</ul>\n<h2 id=\"其他常用网站\"><a href=\"#其他常用网站\" class=\"headerlink\" title=\"其他常用网站\"></a>其他常用网站</h2><p>&gt;</p>\n<ul>\n<li><a href=\"https://github.com\">github</a> 程序员的QQ,面试的门面</li>\n<li><a href=\"https://git.oschina.net\">码云</a> 和马云同名，给个面子</li>\n<li><a href=\"https://npm.taobao.org/\">淘宝同步npm</a> 访问快，10分钟同步一次，查资料必备</li>\n<li><a href=\"http://www.bootcdn.cn/\">bootCDN</a> 使用最普遍的CDN</li>\n<li><a href=\"http://fontawesome.dashgame.com/\">font-awesome</a> 最好用的图标库</li>\n<li><a href=\"http://json.cn/#\">JSON格式化</a>  这个时代的开发者谁离得了JSON呢</li>\n<li><a href=\"http://fenav.com/#/p11\">开发工具</a> 全面省心</li>\n</ul>"},{"author":"小莫","date":"2016-06-06T16:00:00.000Z","title":"gulp构建工具的使用","_content":"\n先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍...。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/gulp.png)](https://github.com/qq83387856)\n## 一、简介(增强和使你的工作自动化)\n### 1. 使用简单  \n没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  \n\n### 2. 高效  \n利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  \n\n### 3. 高质量  \ngulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。\n\n### 4. 易学  \n通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。\n\n## 二、gulp相关api\n### 1. `gulp.src`: 来源\n### 2. `gulp.dest`: 目标\n### 3. `gulp.pipe`: 管道\n### 4. `gulp.watch`: 热加载\n### 5. `gulp.task`: 任务\n### 6. `gulp.task`('default')  \n 默认任务,必须存在\n\n## 三、使用(工作流程)  \n### 1. 全局安装gulp     \n`npm install -g gulp`  \n### 2. 建立项目    \n`mkdir gulp-test && cd gulp-test`\n### 3. 初始化项目  \n`npm init -y`  (会生成package.json)   \n### 4. 安装项目依赖  \n`npm install --save-dev gulp`\n5. 创建配置文件\n`touch gulpfile.js`\n### 6. gulp常用的功能  \n转码（`gulp-babel` `babel-preset-es2015` `gulp-sass` `gulp-less` `gulp-react`）、合并（`gulp-concat`）、压缩（`gulp-uglify`）、模块化（`gulp-browserify`）、测试（gulp-jasmine），请依次安装这些依赖。\n### 7. 小常识  \n因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用`cnpm`或者设置镜像源`npm config set registry https://registry.npm.taobao.org `\n### 8. 写配置   \n（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）\n\n```\nvar gulp = require(\"gulp\");\nvar babel = require(\"gulp-babel\");\nvar react = require(\"gulp-react\");\nvar sass = require(\"gulp-sass\");\nvar less = require(\"gulp-less\");\nvar uglify = require(\"gulp-uglify\");\nvar jasmine = require(\"gulp-jasmine\");\nvar concat = require(\"gulp-concat\");\n\n//定义常量\nconst transformJs = \"transformJs\";\nconst transformSass = \"transformSass\";\nconst transformLess = \"transformLess\";\nconst test = 'test';\n\n\n//js\ngulp.task(transformJs, function () {\n    return gulp.src(\"src/*.js\")\n        .pipe(react())\n        .pipe(babel(\n            {\n                presets: [\"babel-preset-es2015\"]\n            }\n        ))\n        .pipe(concat('bundle.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n// scss\ngulp.task(transformSass, function () {\n    return gulp.src(\"src/css/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n\n// less\ngulp.task(transformLess, function () {\n    return gulp.src(\"src/css/*.less\")\n        .pipe(less())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n\n// jasmine\ngulp.task(test, function () {\n    return gulp.src(\"./test/*.js\")\n        .pipe(jasmine())\n});\n\ngulp.task(\"default\", [transformJs, transformSass, transformLess, test]);\n```\n\n## 四、配置文件解读\n\n### 1. 第一部分   \n一堆`reqire`,是引用gulp相应的插件。在引用之前要确保己经安装。\n### 2. 第二部分   \n几个`const`,是定义任务名常量，有多几任务就定义多少常量。\n### 3. 第三部分   \n几个`task`,每个task对应一个任务，具有不同的功能。可以使用 `gulp xxx`来启动这个任务。\n### 4. 第四部分   \n`default`,是执行`gulp`之后就会开始的任务 常用参数(`'default',[task1,task2,...],callback[可选]`)。\n\n## 五、执行  \n1. 如果要执行`default`任务，直接`gulp`\n\n```\n  [09:56:04] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js\n  [09:56:04] Starting 'transformJs'...\n  [09:56:04] Starting 'transformSass'...\n  [09:56:04] Starting 'transformLess'...\n  [09:56:04] Starting 'test'...\n  .\n\n  1 spec, 0 failures\n  Finished in 0 seconds\n  [09:56:04] Finished 'test' after 62 ms\n  [09:56:06] Finished 'transformLess' after 2.66 s\n  [09:56:06] Finished 'transformSass' after 2.68 s\n  [09:56:06] Finished 'transformJs' after 2.7 s\n  [09:56:06] Finished 'default' after 32 μs\n\n  Process finished with exit code 0\n```\n\n2. 如果想要执行单个任务，请输入 `gulp taskName`,例如`gulp test`\n\n```\n  [09:56:47] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js\n  [09:56:47] Starting 'test'...\n  .\n\n  1 spec, 0 failures\n  Finished in 0 seconds\n  [09:56:47] Finished 'test' after 77 ms\n\n  Process finished with exit code 0\n```\n\n## 六、gulp常见任务\n### 1. 处理js\n\n（包括转码、合并、压缩）  [gulp-babel](https://npm.taobao.org/package/gulp-babel) [babel-preset-es2015](https://npm.taobao.org/package/babel-preset-es2015) [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n\n```\ngulp.task(transformJs, function () {\n  return gulp.src(\"src/*.js\")\n      .pipe(react())\n      .pipe(babel(\n          {\n              presets: [\"babel-preset-es2015\"]\n          }\n      ))\n      .pipe(concat('bundle.min.js'))\n      .pipe(uglify())\n      .pipe(gulp.dest(\"./dist\"))\n});\n```\n\n### 2. 处理scss\n\n(包括转码、合并、压缩)  [gulp-sass](https://npm.taobao.org/package/gulp-sass)  [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n\n\n```\n  // scss\n  gulp.task(transformSass, function () {\n      return gulp.src(\"src/css/*.scss\")\n          .pipe(sass())\n          .pipe(gulp.dest(\"./dist\"))\n  });\n```\n\n\n### 3. 处理less\n\n(包括转码、合并、压缩)  [gulp-less](https://npm.taobao.org/package/gulp-less)  [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n```\n  // less\n  gulp.task(transformLess, function () {\n    return gulp.src(\"src/css/*.less\")\n        .pipe(less())\n        .pipe(gulp.dest(\"./dist\"))\n  });\n```\n\n### 4. 测试\n[gulp-jasmine](https://npm.taobao.org/package/gulp-jasmine)  \n\n```\n  // jasmine\n  gulp.task(test, function () {\n      return gulp.src(\"./test/*.js\")\n          .pipe(jasmine())\n  });\n\n  //测试文件 test.spec.js\n  describe('test one', function () {\n      it('test', function () {\n          expect(true).toBe(true);\n      })\n  });\n```\n\n### 5. 清理  \n\n [gulp-clean](https://npm.taobao.org/package/gulp-clean)\n\n```\ngulp.task('clean', function () {\n  return gulp.src(config.dist + '/*', {read: false})\n      .pipe(clean());\n});\n```\n\n### 6. 热加载\n\n  [gulp-util](https://npm.taobao.org/package/gulp-util) [gulp-watch](https://npm.taobao.org/package/gulp-watch)\n\n```\n  var util = require('gulp-util');\n  var watch = require('gulp-watch');\n  var config = {};\n  config.dist = 'dist';\n  config.static = [\n    'bin/**/*',\n    'package.json'\n  ];\n  // sync static resource in production mode\n  gulp.task('static-sync', function () {\n    return gulp.src(config.static, {base: './'})\n        .pipe(gulp.dest(config.dist));\n  });\n\n  gulp.task('static-sync:dev', ['static-sync'], function () {\n    util.log('[Sync] starting file watch');\n    return watch(config.static, function (obj) {\n      if (obj.event === 'change' || obj.event === 'add')\n        return gulp.src(obj.path, {base: './'})\n            .pipe(gulp.dest(config.dist))\n            .pipe(print(function () {\n              return '[Sync] file sync success: ' + obj.path.replace(obj.base, '');\n            }));\n      else if (obj.event === 'unlink') {\n        var distFilePath = obj.path.replace(__dirname, __dirname + '/' + config.dist);\n        return gulp.src(distFilePath)\n            .pipe(clean())\n            .pipe(print(function () {\n              return '[Sync] file remove success: ' + obj.path.replace(obj.base, '');\n            }));\n      }\n    });\n  });\n\n```\n\n### 7. debug\n\n [gulp-print](https://npm.taobao.org/package/gulp-print)\n\n```\n//下载\nnpm install gulp-print\n//引用\nvar gulp = require('gulp');\nvar print = require('gulp-print');\n// 注册任务\ngulp.task('print', function() {\n  gulp.src('test/*.js')\n    .pipe(print())\n});\n```\n\n### 8. sourceMap\n\n  [gulp-sourcemaps](https://npm.taobao.org/package/gulp-sourcemaps)\n\n```\n  var sourcemaps = require('gulp-sourcemaps');\n  // compile server script in production mode\n  gulp.task('compile:server', function () {\n    if (config.babel.sourceMaps){\n      return gulp.src('**/*.es6', {base: './'})\n          .pipe(sourcemaps.init())\n          .pipe(babel(config.babel))\n          .pipe(sourcemaps.write('.', {sourceRoot: '/ustar'}))\n          .pipe(gulp.dest(config.dist));\n    }else{\n      return gulp.src('**/*.es6', {base: './'})\n          .pipe(babel({\n            preset:'babel-preset-es2015'\n            }))\n          .pipe(gulp.dest('./dist'));\n  });\n```\n\n### 9. 复制静态资源\n\n```\ngulp.task('static-sync', function () {\n    return gulp.src('src/css/*', {base: './'})\n        .pipe(gulp.dest('./dist'));\n});\n```\n\n### 10. 处理css雪碧图\n\n [gulp-css-spriter](https://npm.taobao.org/package/gulp-css-spriter)\n\n```\n  var gulp = require('gulp');\n  var spriter = require('gulp-css-spriter');\n\n  gulp.task('css', function() {\n    return gulp.src('./src/css/styles.css')\n        .pipe(spriter({\n            // The path and file name of where we will save the sprite sheet\n            'spriteSheet': './dist/images/spritesheet.png',\n            // Because we don't know where you will end up saving the CSS file at this point in the pipe,\n            // we need a litle help identifying where it will be.\n            'pathToSpriteSheetFromCSS': '../images/spritesheet.png'\n        }))\n        .pipe(gulp.dest('./dist/css'));\n  });\n```\n\n### 11. 压缩css\n\n[gulp-minify-css](https://npm.taobao.org/package/gulp-minify-css)\n\n```\n  gulp.task(gulp_minify_css,function () {\n     return gulp.src('./dist/*.css')\n         .pipe(print())\n         .pipe(minifycss())\n         .pipe(gulp.dest(config.dist))\n  });\n```\n\n### 12. 压缩图片\n\n[gulp-imagemin](https://npm.taobao.org/package/gulp-imagemin)\n\n```\n// 压缩图片\n  gulp.task('img', function() {\n    return gulp.src('src/images/*')\n      .pipe(imagemin({\n          progressive: true,\n          svgoPlugins: [{removeViewBox: false}],\n          use: [pngcrush()]\n      }))\n      .pipe(gulp.dest('./dest/images/'))\n      .pipe(notify({ message: 'img task ok' }));\n  });\n```\n\n### 13. 检查js  \n\n  [gulp-jshint](https://npm.taobao.org/package/gulp-jshint)  [gulp-jshint](https://npm.taobao.org/package/jshint)\n\n```\n// 检查js\n  gulp.task('lint', function() {\n    return gulp.src('src/js/*.js')\n      .pipe(jshint())\n      .pipe(jshint.reporter('default'))\n      .pipe(notify({ message: 'lint task ok' }));\n  });\n```\n\n### 14. gzip压缩\n\n [gulp-gzip](https://npm.taobao.org/package/gulp-gzip)\n\n```\n  var gulp = require('gulp');\n  var gzip = require('gulp-gzip');\n\n  gulp.task('compress', function() {\n      gulp.src('./dev/scripts/*.js')\n      .pipe(gzip())\n      .pipe(gulp.dest('./public/scripts'));\n  });\n```\n\n### 15. 处理前缀  \n\n[gulp-autoprefixer](https://npm.taobao.org/package/gulp-autoprefixer)\n\n```\n  var gulp = require('gulp');\n  var autoprefixer = require('gulp-autoprefixer');\n\n  gulp.task('default', function () {\n    return gulp.src('src/app.css')\n      .pipe(sourcemaps.init())\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions'],\n            cascade: false\n        }))\n        .pipe(concat('all.css'))\n        .pipe(sourcemaps.write('.',{sourceRoot:config.dist}))\n        .pipe(gulp.dest('dist'));\n  });\n```\n\n\n## 七、项目地址\n[gulp-start-kit](https://github.com/qq83387856/gulp-start-kit)\n","source":"_posts/2016-06-07.gulp_use.md","raw":"---\nauthor: 小莫\ndate: 2016-06-07\ntitle: gulp构建工具的使用\ntags:\n- gulp\n- 开发工具\n- node\n- JavaScript\n- es6\ncategory: gulp\npermalink: gulp_use\n---\n\n先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍...。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/gulp.png)](https://github.com/qq83387856)\n## 一、简介(增强和使你的工作自动化)\n### 1. 使用简单  \n没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  \n\n### 2. 高效  \n利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  \n\n### 3. 高质量  \ngulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。\n\n### 4. 易学  \n通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。\n\n## 二、gulp相关api\n### 1. `gulp.src`: 来源\n### 2. `gulp.dest`: 目标\n### 3. `gulp.pipe`: 管道\n### 4. `gulp.watch`: 热加载\n### 5. `gulp.task`: 任务\n### 6. `gulp.task`('default')  \n 默认任务,必须存在\n\n## 三、使用(工作流程)  \n### 1. 全局安装gulp     \n`npm install -g gulp`  \n### 2. 建立项目    \n`mkdir gulp-test && cd gulp-test`\n### 3. 初始化项目  \n`npm init -y`  (会生成package.json)   \n### 4. 安装项目依赖  \n`npm install --save-dev gulp`\n5. 创建配置文件\n`touch gulpfile.js`\n### 6. gulp常用的功能  \n转码（`gulp-babel` `babel-preset-es2015` `gulp-sass` `gulp-less` `gulp-react`）、合并（`gulp-concat`）、压缩（`gulp-uglify`）、模块化（`gulp-browserify`）、测试（gulp-jasmine），请依次安装这些依赖。\n### 7. 小常识  \n因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用`cnpm`或者设置镜像源`npm config set registry https://registry.npm.taobao.org `\n### 8. 写配置   \n（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）\n\n```\nvar gulp = require(\"gulp\");\nvar babel = require(\"gulp-babel\");\nvar react = require(\"gulp-react\");\nvar sass = require(\"gulp-sass\");\nvar less = require(\"gulp-less\");\nvar uglify = require(\"gulp-uglify\");\nvar jasmine = require(\"gulp-jasmine\");\nvar concat = require(\"gulp-concat\");\n\n//定义常量\nconst transformJs = \"transformJs\";\nconst transformSass = \"transformSass\";\nconst transformLess = \"transformLess\";\nconst test = 'test';\n\n\n//js\ngulp.task(transformJs, function () {\n    return gulp.src(\"src/*.js\")\n        .pipe(react())\n        .pipe(babel(\n            {\n                presets: [\"babel-preset-es2015\"]\n            }\n        ))\n        .pipe(concat('bundle.min.js'))\n        .pipe(uglify())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n// scss\ngulp.task(transformSass, function () {\n    return gulp.src(\"src/css/*.scss\")\n        .pipe(sass())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n\n// less\ngulp.task(transformLess, function () {\n    return gulp.src(\"src/css/*.less\")\n        .pipe(less())\n        .pipe(gulp.dest(\"./dist\"))\n});\n\n\n// jasmine\ngulp.task(test, function () {\n    return gulp.src(\"./test/*.js\")\n        .pipe(jasmine())\n});\n\ngulp.task(\"default\", [transformJs, transformSass, transformLess, test]);\n```\n\n## 四、配置文件解读\n\n### 1. 第一部分   \n一堆`reqire`,是引用gulp相应的插件。在引用之前要确保己经安装。\n### 2. 第二部分   \n几个`const`,是定义任务名常量，有多几任务就定义多少常量。\n### 3. 第三部分   \n几个`task`,每个task对应一个任务，具有不同的功能。可以使用 `gulp xxx`来启动这个任务。\n### 4. 第四部分   \n`default`,是执行`gulp`之后就会开始的任务 常用参数(`'default',[task1,task2,...],callback[可选]`)。\n\n## 五、执行  \n1. 如果要执行`default`任务，直接`gulp`\n\n```\n  [09:56:04] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js\n  [09:56:04] Starting 'transformJs'...\n  [09:56:04] Starting 'transformSass'...\n  [09:56:04] Starting 'transformLess'...\n  [09:56:04] Starting 'test'...\n  .\n\n  1 spec, 0 failures\n  Finished in 0 seconds\n  [09:56:04] Finished 'test' after 62 ms\n  [09:56:06] Finished 'transformLess' after 2.66 s\n  [09:56:06] Finished 'transformSass' after 2.68 s\n  [09:56:06] Finished 'transformJs' after 2.7 s\n  [09:56:06] Finished 'default' after 32 μs\n\n  Process finished with exit code 0\n```\n\n2. 如果想要执行单个任务，请输入 `gulp taskName`,例如`gulp test`\n\n```\n  [09:56:47] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js\n  [09:56:47] Starting 'test'...\n  .\n\n  1 spec, 0 failures\n  Finished in 0 seconds\n  [09:56:47] Finished 'test' after 77 ms\n\n  Process finished with exit code 0\n```\n\n## 六、gulp常见任务\n### 1. 处理js\n\n（包括转码、合并、压缩）  [gulp-babel](https://npm.taobao.org/package/gulp-babel) [babel-preset-es2015](https://npm.taobao.org/package/babel-preset-es2015) [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n\n```\ngulp.task(transformJs, function () {\n  return gulp.src(\"src/*.js\")\n      .pipe(react())\n      .pipe(babel(\n          {\n              presets: [\"babel-preset-es2015\"]\n          }\n      ))\n      .pipe(concat('bundle.min.js'))\n      .pipe(uglify())\n      .pipe(gulp.dest(\"./dist\"))\n});\n```\n\n### 2. 处理scss\n\n(包括转码、合并、压缩)  [gulp-sass](https://npm.taobao.org/package/gulp-sass)  [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n\n\n```\n  // scss\n  gulp.task(transformSass, function () {\n      return gulp.src(\"src/css/*.scss\")\n          .pipe(sass())\n          .pipe(gulp.dest(\"./dist\"))\n  });\n```\n\n\n### 3. 处理less\n\n(包括转码、合并、压缩)  [gulp-less](https://npm.taobao.org/package/gulp-less)  [gulp-concat](https://npm.taobao.org/package/gulp-concat) [gulp-uglify](https://npm.taobao.org/package/gulp-uglify)\n\n```\n  // less\n  gulp.task(transformLess, function () {\n    return gulp.src(\"src/css/*.less\")\n        .pipe(less())\n        .pipe(gulp.dest(\"./dist\"))\n  });\n```\n\n### 4. 测试\n[gulp-jasmine](https://npm.taobao.org/package/gulp-jasmine)  \n\n```\n  // jasmine\n  gulp.task(test, function () {\n      return gulp.src(\"./test/*.js\")\n          .pipe(jasmine())\n  });\n\n  //测试文件 test.spec.js\n  describe('test one', function () {\n      it('test', function () {\n          expect(true).toBe(true);\n      })\n  });\n```\n\n### 5. 清理  \n\n [gulp-clean](https://npm.taobao.org/package/gulp-clean)\n\n```\ngulp.task('clean', function () {\n  return gulp.src(config.dist + '/*', {read: false})\n      .pipe(clean());\n});\n```\n\n### 6. 热加载\n\n  [gulp-util](https://npm.taobao.org/package/gulp-util) [gulp-watch](https://npm.taobao.org/package/gulp-watch)\n\n```\n  var util = require('gulp-util');\n  var watch = require('gulp-watch');\n  var config = {};\n  config.dist = 'dist';\n  config.static = [\n    'bin/**/*',\n    'package.json'\n  ];\n  // sync static resource in production mode\n  gulp.task('static-sync', function () {\n    return gulp.src(config.static, {base: './'})\n        .pipe(gulp.dest(config.dist));\n  });\n\n  gulp.task('static-sync:dev', ['static-sync'], function () {\n    util.log('[Sync] starting file watch');\n    return watch(config.static, function (obj) {\n      if (obj.event === 'change' || obj.event === 'add')\n        return gulp.src(obj.path, {base: './'})\n            .pipe(gulp.dest(config.dist))\n            .pipe(print(function () {\n              return '[Sync] file sync success: ' + obj.path.replace(obj.base, '');\n            }));\n      else if (obj.event === 'unlink') {\n        var distFilePath = obj.path.replace(__dirname, __dirname + '/' + config.dist);\n        return gulp.src(distFilePath)\n            .pipe(clean())\n            .pipe(print(function () {\n              return '[Sync] file remove success: ' + obj.path.replace(obj.base, '');\n            }));\n      }\n    });\n  });\n\n```\n\n### 7. debug\n\n [gulp-print](https://npm.taobao.org/package/gulp-print)\n\n```\n//下载\nnpm install gulp-print\n//引用\nvar gulp = require('gulp');\nvar print = require('gulp-print');\n// 注册任务\ngulp.task('print', function() {\n  gulp.src('test/*.js')\n    .pipe(print())\n});\n```\n\n### 8. sourceMap\n\n  [gulp-sourcemaps](https://npm.taobao.org/package/gulp-sourcemaps)\n\n```\n  var sourcemaps = require('gulp-sourcemaps');\n  // compile server script in production mode\n  gulp.task('compile:server', function () {\n    if (config.babel.sourceMaps){\n      return gulp.src('**/*.es6', {base: './'})\n          .pipe(sourcemaps.init())\n          .pipe(babel(config.babel))\n          .pipe(sourcemaps.write('.', {sourceRoot: '/ustar'}))\n          .pipe(gulp.dest(config.dist));\n    }else{\n      return gulp.src('**/*.es6', {base: './'})\n          .pipe(babel({\n            preset:'babel-preset-es2015'\n            }))\n          .pipe(gulp.dest('./dist'));\n  });\n```\n\n### 9. 复制静态资源\n\n```\ngulp.task('static-sync', function () {\n    return gulp.src('src/css/*', {base: './'})\n        .pipe(gulp.dest('./dist'));\n});\n```\n\n### 10. 处理css雪碧图\n\n [gulp-css-spriter](https://npm.taobao.org/package/gulp-css-spriter)\n\n```\n  var gulp = require('gulp');\n  var spriter = require('gulp-css-spriter');\n\n  gulp.task('css', function() {\n    return gulp.src('./src/css/styles.css')\n        .pipe(spriter({\n            // The path and file name of where we will save the sprite sheet\n            'spriteSheet': './dist/images/spritesheet.png',\n            // Because we don't know where you will end up saving the CSS file at this point in the pipe,\n            // we need a litle help identifying where it will be.\n            'pathToSpriteSheetFromCSS': '../images/spritesheet.png'\n        }))\n        .pipe(gulp.dest('./dist/css'));\n  });\n```\n\n### 11. 压缩css\n\n[gulp-minify-css](https://npm.taobao.org/package/gulp-minify-css)\n\n```\n  gulp.task(gulp_minify_css,function () {\n     return gulp.src('./dist/*.css')\n         .pipe(print())\n         .pipe(minifycss())\n         .pipe(gulp.dest(config.dist))\n  });\n```\n\n### 12. 压缩图片\n\n[gulp-imagemin](https://npm.taobao.org/package/gulp-imagemin)\n\n```\n// 压缩图片\n  gulp.task('img', function() {\n    return gulp.src('src/images/*')\n      .pipe(imagemin({\n          progressive: true,\n          svgoPlugins: [{removeViewBox: false}],\n          use: [pngcrush()]\n      }))\n      .pipe(gulp.dest('./dest/images/'))\n      .pipe(notify({ message: 'img task ok' }));\n  });\n```\n\n### 13. 检查js  \n\n  [gulp-jshint](https://npm.taobao.org/package/gulp-jshint)  [gulp-jshint](https://npm.taobao.org/package/jshint)\n\n```\n// 检查js\n  gulp.task('lint', function() {\n    return gulp.src('src/js/*.js')\n      .pipe(jshint())\n      .pipe(jshint.reporter('default'))\n      .pipe(notify({ message: 'lint task ok' }));\n  });\n```\n\n### 14. gzip压缩\n\n [gulp-gzip](https://npm.taobao.org/package/gulp-gzip)\n\n```\n  var gulp = require('gulp');\n  var gzip = require('gulp-gzip');\n\n  gulp.task('compress', function() {\n      gulp.src('./dev/scripts/*.js')\n      .pipe(gzip())\n      .pipe(gulp.dest('./public/scripts'));\n  });\n```\n\n### 15. 处理前缀  \n\n[gulp-autoprefixer](https://npm.taobao.org/package/gulp-autoprefixer)\n\n```\n  var gulp = require('gulp');\n  var autoprefixer = require('gulp-autoprefixer');\n\n  gulp.task('default', function () {\n    return gulp.src('src/app.css')\n      .pipe(sourcemaps.init())\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions'],\n            cascade: false\n        }))\n        .pipe(concat('all.css'))\n        .pipe(sourcemaps.write('.',{sourceRoot:config.dist}))\n        .pipe(gulp.dest('dist'));\n  });\n```\n\n\n## 七、项目地址\n[gulp-start-kit](https://github.com/qq83387856/gulp-start-kit)\n","slug":"gulp_use","published":1,"updated":"2016-06-28T02:48:31.164Z","_id":"cipjfs5w200354wmcjui8gach","comments":1,"layout":"post","photos":[],"link":"","content":"<p>先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍…。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/gulp.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、简介-增强和使你的工作自动化\"><a href=\"#一、简介-增强和使你的工作自动化\" class=\"headerlink\" title=\"一、简介(增强和使你的工作自动化)\"></a>一、简介(增强和使你的工作自动化)</h2><h3 id=\"1-使用简单\"><a href=\"#1-使用简单\" class=\"headerlink\" title=\"1. 使用简单\"></a>1. 使用简单</h3><p>没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  </p>\n<h3 id=\"2-高效\"><a href=\"#2-高效\" class=\"headerlink\" title=\"2. 高效\"></a>2. 高效</h3><p>利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  </p>\n<h3 id=\"3-高质量\"><a href=\"#3-高质量\" class=\"headerlink\" title=\"3. 高质量\"></a>3. 高质量</h3><p>gulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p>\n<h3 id=\"4-易学\"><a href=\"#4-易学\" class=\"headerlink\" title=\"4. 易学\"></a>4. 易学</h3><p>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p>\n<h2 id=\"二、gulp相关api\"><a href=\"#二、gulp相关api\" class=\"headerlink\" title=\"二、gulp相关api\"></a>二、gulp相关api</h2><h3 id=\"1-gulp-src-来源\"><a href=\"#1-gulp-src-来源\" class=\"headerlink\" title=\"1. gulp.src: 来源\"></a>1. <code>gulp.src</code>: 来源</h3><h3 id=\"2-gulp-dest-目标\"><a href=\"#2-gulp-dest-目标\" class=\"headerlink\" title=\"2. gulp.dest: 目标\"></a>2. <code>gulp.dest</code>: 目标</h3><h3 id=\"3-gulp-pipe-管道\"><a href=\"#3-gulp-pipe-管道\" class=\"headerlink\" title=\"3. gulp.pipe: 管道\"></a>3. <code>gulp.pipe</code>: 管道</h3><h3 id=\"4-gulp-watch-热加载\"><a href=\"#4-gulp-watch-热加载\" class=\"headerlink\" title=\"4. gulp.watch: 热加载\"></a>4. <code>gulp.watch</code>: 热加载</h3><h3 id=\"5-gulp-task-任务\"><a href=\"#5-gulp-task-任务\" class=\"headerlink\" title=\"5. gulp.task: 任务\"></a>5. <code>gulp.task</code>: 任务</h3><h3 id=\"6-gulp-task-‘default’\"><a href=\"#6-gulp-task-‘default’\" class=\"headerlink\" title=\"6. gulp.task(‘default’)\"></a>6. <code>gulp.task</code>(‘default’)</h3><p> 默认任务,必须存在</p>\n<h2 id=\"三、使用-工作流程\"><a href=\"#三、使用-工作流程\" class=\"headerlink\" title=\"三、使用(工作流程)\"></a>三、使用(工作流程)</h2><h3 id=\"1-全局安装gulp\"><a href=\"#1-全局安装gulp\" class=\"headerlink\" title=\"1. 全局安装gulp\"></a>1. 全局安装gulp</h3><p><code>npm install -g gulp</code>  </p>\n<h3 id=\"2-建立项目\"><a href=\"#2-建立项目\" class=\"headerlink\" title=\"2. 建立项目\"></a>2. 建立项目</h3><p><code>mkdir gulp-test &amp;&amp; cd gulp-test</code></p>\n<h3 id=\"3-初始化项目\"><a href=\"#3-初始化项目\" class=\"headerlink\" title=\"3. 初始化项目\"></a>3. 初始化项目</h3><p><code>npm init -y</code>  (会生成package.json)   </p>\n<h3 id=\"4-安装项目依赖\"><a href=\"#4-安装项目依赖\" class=\"headerlink\" title=\"4. 安装项目依赖\"></a>4. 安装项目依赖</h3><p><code>npm install --save-dev gulp</code></p>\n<ol>\n<li>创建配置文件<br><code>touch gulpfile.js</code><h3 id=\"6-gulp常用的功能\"><a href=\"#6-gulp常用的功能\" class=\"headerlink\" title=\"6. gulp常用的功能\"></a>6. gulp常用的功能</h3>转码（<code>gulp-babel</code> <code>babel-preset-es2015</code> <code>gulp-sass</code> <code>gulp-less</code> <code>gulp-react</code>）、合并（<code>gulp-concat</code>）、压缩（<code>gulp-uglify</code>）、模块化（<code>gulp-browserify</code>）、测试（gulp-jasmine），请依次安装这些依赖。<h3 id=\"7-小常识\"><a href=\"#7-小常识\" class=\"headerlink\" title=\"7. 小常识\"></a>7. 小常识</h3>因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用<code>cnpm</code>或者设置镜像源<code>npm config set registry https://registry.npm.taobao.org</code><h3 id=\"8-写配置\"><a href=\"#8-写配置\" class=\"headerlink\" title=\"8. 写配置\"></a>8. 写配置</h3>（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-babel\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-react\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-sass\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-less\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> jasmine = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-jasmine\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-concat\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformJs = <span class=\"string\">\"transformJs\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformSass = <span class=\"string\">\"transformSass\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformLess = <span class=\"string\">\"transformLess\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\">gulp.task(transformJs, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/*.js\"</span>)</span><br><span class=\"line\">        .pipe(react())</span><br><span class=\"line\">        .pipe(babel(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">\"babel-preset-es2015\"</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ))</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'bundle.min.js'</span>))</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// scss</span></span><br><span class=\"line\">gulp.task(transformSass, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/css/*.scss\"</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less</span></span><br><span class=\"line\">gulp.task(transformLess, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/css/*.less\"</span>)</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jasmine</span></span><br><span class=\"line\">gulp.task(test, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"./test/*.js\"</span>)</span><br><span class=\"line\">        .pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>, [transformJs, transformSass, transformLess, test]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、配置文件解读\"><a href=\"#四、配置文件解读\" class=\"headerlink\" title=\"四、配置文件解读\"></a>四、配置文件解读</h2><h3 id=\"1-第一部分\"><a href=\"#1-第一部分\" class=\"headerlink\" title=\"1. 第一部分\"></a>1. 第一部分</h3><p>一堆<code>reqire</code>,是引用gulp相应的插件。在引用之前要确保己经安装。</p>\n<h3 id=\"2-第二部分\"><a href=\"#2-第二部分\" class=\"headerlink\" title=\"2. 第二部分\"></a>2. 第二部分</h3><p>几个<code>const</code>,是定义任务名常量，有多几任务就定义多少常量。</p>\n<h3 id=\"3-第三部分\"><a href=\"#3-第三部分\" class=\"headerlink\" title=\"3. 第三部分\"></a>3. 第三部分</h3><p>几个<code>task</code>,每个task对应一个任务，具有不同的功能。可以使用 <code>gulp xxx</code>来启动这个任务。</p>\n<h3 id=\"4-第四部分\"><a href=\"#4-第四部分\" class=\"headerlink\" title=\"4. 第四部分\"></a>4. 第四部分</h3><p><code>default</code>,是执行<code>gulp</code>之后就会开始的任务 常用参数(<code>&#39;default&#39;,[task1,task2,...],callback[可选]</code>)。</p>\n<h2 id=\"五、执行\"><a href=\"#五、执行\" class=\"headerlink\" title=\"五、执行\"></a>五、执行</h2><ol>\n<li>如果要执行<code>default</code>任务，直接<code>gulp</code></li>\n</ol>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"name\">09:56:04</span>] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js</span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformJs</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformSass</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformLess</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'test</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> spec, <span class=\"number\">0</span> failures</span><br><span class=\"line\">Finished in <span class=\"number\">0</span> seconds</span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Finished <span class=\"symbol\">'test</span>' after <span class=\"number\">62</span> ms</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformLess</span>' after <span class=\"number\">2.66</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformSass</span>' after <span class=\"number\">2.68</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformJs</span>' after <span class=\"number\">2.7</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'default</span>' after <span class=\"number\">32</span> μs</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>如果想要执行单个任务，请输入 <code>gulp taskName</code>,例如<code>gulp test</code></li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[09:56:47] Using gulpfile e:\\oscchina\\gulp-<span class=\"keyword\">start</span>-kit\\gulpfile.js</span><br><span class=\"line\">[<span class=\"number\">09</span>:<span class=\"number\">56</span>:<span class=\"number\">47</span>] <span class=\"keyword\">Starting</span> <span class=\"string\">'test'</span>...</span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> spec, <span class=\"number\">0</span> failures</span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> <span class=\"number\">0</span> seconds</span><br><span class=\"line\">[<span class=\"number\">09</span>:<span class=\"number\">56</span>:<span class=\"number\">47</span>] Finished <span class=\"string\">'test'</span> <span class=\"keyword\">after</span> <span class=\"number\">77</span> ms</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished <span class=\"keyword\">with</span> <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、gulp常见任务\"><a href=\"#六、gulp常见任务\" class=\"headerlink\" title=\"六、gulp常见任务\"></a>六、gulp常见任务</h2><h3 id=\"1-处理js\"><a href=\"#1-处理js\" class=\"headerlink\" title=\"1. 处理js\"></a>1. 处理js</h3><p>（包括转码、合并、压缩）  <a href=\"https://npm.taobao.org/package/gulp-babel\" target=\"_blank\" rel=\"external\">gulp-babel</a> <a href=\"https://npm.taobao.org/package/babel-preset-es2015\" target=\"_blank\" rel=\"external\">babel-preset-es2015</a> <a href=\"https://npm.taobao.org/package/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformJs, function () &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/*.js\"</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(react())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(babel(</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"attribute\">presets</span>: [<span class=\"string\">\"babel-preset-es2015\"</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(concat(<span class=\"string\">'bundle.min.js'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(uglify())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-处理scss\"><a href=\"#2-处理scss\" class=\"headerlink\" title=\"2. 处理scss\"></a>2. 处理scss</h3><p>(包括转码、合并、压缩)  <a href=\"https://npm.taobao.org/package/gulp-sass\" target=\"_blank\" rel=\"external\">gulp-sass</a>  <a href=\"https://npm.taobao.org/package/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// scss</span></span><br><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformSass, function () &#123;</span><br><span class=\"line\">    return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/css/*.scss\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(sass())</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-处理less\"><a href=\"#3-处理less\" class=\"headerlink\" title=\"3. 处理less\"></a>3. 处理less</h3><p>(包括转码、合并、压缩)  <a href=\"https://npm.taobao.org/package/gulp-less\" target=\"_blank\" rel=\"external\">gulp-less</a>  <a href=\"https://npm.taobao.org/package/gulp-concat\" target=\"_blank\" rel=\"external\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\" target=\"_blank\" rel=\"external\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// less</span></span><br><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformLess, function () &#123;</span><br><span class=\"line\">  return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/css/*.less\"</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(less())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h3><p><a href=\"https://npm.taobao.org/package/gulp-jasmine\" target=\"_blank\" rel=\"external\">gulp-jasmine</a>  </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jasmine</span></span><br><span class=\"line\">gulp.task(test, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"./test/*.js\"</span>)</span><br><span class=\"line\">        .pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试文件 test.spec.js</span></span><br><span class=\"line\">describe(<span class=\"string\">'test one'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-清理\"><a href=\"#5-清理\" class=\"headerlink\" title=\"5. 清理\"></a>5. 清理</h3><p> <a href=\"https://npm.taobao.org/package/gulp-clean\" target=\"_blank\" rel=\"external\">gulp-clean</a></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"keyword\">task</span>(<span class=\"symbol\">'clean</span>', <span class=\"keyword\">function</span> <span class=\"title\"></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">gulp.src(config.dist</span> + '/*', &#123;read: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">      .pipe(clean());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-热加载\"><a href=\"#6-热加载\" class=\"headerlink\" title=\"6. 热加载\"></a>6. 热加载</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-util\" target=\"_blank\" rel=\"external\">gulp-util</a> <a href=\"https://npm.taobao.org/package/gulp-watch\" target=\"_blank\" rel=\"external\">gulp-watch</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-watch'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\">config.dist = <span class=\"string\">'dist'</span>;</span><br><span class=\"line\">config.<span class=\"keyword\">static</span> = [</span><br><span class=\"line\">  <span class=\"string\">'bin/**/*'</span>,</span><br><span class=\"line\">  <span class=\"string\">'package.json'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// sync static resource in production mode</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'static-sync'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(config.<span class=\"keyword\">static</span>, &#123;base: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">      .pipe(gulp.dest(config.dist));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'static-sync:dev'</span>, [<span class=\"string\">'static-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  util.log(<span class=\"string\">'[Sync] starting file watch'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> watch(config.<span class=\"keyword\">static</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.event === <span class=\"string\">'change'</span> || obj.event === <span class=\"string\">'add'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(obj.path, &#123;base: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">          .pipe(gulp.dest(config.dist))</span><br><span class=\"line\">          .pipe(<span class=\"keyword\">print</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'[Sync] file sync success: '</span> + obj.path.replace(obj.base, <span class=\"string\">''</span>);</span><br><span class=\"line\">          &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.event === <span class=\"string\">'unlink'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> distFilePath = obj.path.replace(__dirname, __dirname + <span class=\"string\">'/'</span> + config.dist);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(distFilePath)</span><br><span class=\"line\">          .pipe(clean())</span><br><span class=\"line\">          .pipe(<span class=\"keyword\">print</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'[Sync] file remove success: '</span> + obj.path.replace(obj.base, <span class=\"string\">''</span>);</span><br><span class=\"line\">          &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-debug\"><a href=\"#7-debug\" class=\"headerlink\" title=\"7. debug\"></a>7. debug</h3><p> <a href=\"https://npm.taobao.org/package/gulp-print\" target=\"_blank\" rel=\"external\">gulp-print</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下载</span></span><br><span class=\"line\">npm install gulp-<span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">print</span> = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-print'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 注册任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'print'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'test/*.js'</span>)</span><br><span class=\"line\">    .pipe(<span class=\"keyword\">print</span>())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-sourceMap\"><a href=\"#8-sourceMap\" class=\"headerlink\" title=\"8. sourceMap\"></a>8. sourceMap</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-sourcemaps\" target=\"_blank\" rel=\"external\">gulp-sourcemaps</a></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sourcemaps = require(<span class=\"string\">'gulp-sourcemaps'</span>);</span><br><span class=\"line\"><span class=\"comment\">// compile server script in production mode</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:server'</span>, function () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.babel.sourceMaps)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class=\"line\">        .pipe(sourcemaps.init())</span><br><span class=\"line\">        .pipe(babel(config.babel))</span><br><span class=\"line\">        .pipe(sourcemaps.write('.', &#123;sourceRoot: '/ustar'&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(config.dist));</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">          preset:'babel-preset-es2015'</span><br><span class=\"line\">          &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest('./dist'));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-复制静态资源\"><a href=\"#9-复制静态资源\" class=\"headerlink\" title=\"9. 复制静态资源\"></a>9. 复制静态资源</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'static-sync'</span>, function () &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/css/*'</span>, &#123;<span class=\"attribute\">base</span>: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">'./dist'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-处理css雪碧图\"><a href=\"#10-处理css雪碧图\" class=\"headerlink\" title=\"10. 处理css雪碧图\"></a>10. 处理css雪碧图</h3><p> <a href=\"https://npm.taobao.org/package/gulp-css-spriter\" target=\"_blank\" rel=\"external\">gulp-css-spriter</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> spriter = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-css-spriter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./src/css/styles.css'</span>)</span><br><span class=\"line\">      .pipe(spriter(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// The path and file name of where we will save the sprite sheet</span></span><br><span class=\"line\">          <span class=\"string\">'spriteSheet'</span>: <span class=\"string\">'./dist/images/spritesheet.png'</span>,</span><br><span class=\"line\">          <span class=\"comment\">// Because we don't know where you will end up saving the CSS file at this point in the pipe,</span></span><br><span class=\"line\">          <span class=\"comment\">// we need a litle help identifying where it will be.</span></span><br><span class=\"line\">          <span class=\"string\">'pathToSpriteSheetFromCSS'</span>: <span class=\"string\">'../images/spritesheet.png'</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-压缩css\"><a href=\"#11-压缩css\" class=\"headerlink\" title=\"11. 压缩css\"></a>11. 压缩css</h3><p><a href=\"https://npm.taobao.org/package/gulp-minify-css\" target=\"_blank\" rel=\"external\">gulp-minify-css</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(gulp_minify_css,function () &#123;</span><br><span class=\"line\">   return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">'./dist/*.css'</span>)</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(print())</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(minifycss())</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(gulp.dest(config.dist))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-压缩图片\"><a href=\"#12-压缩图片\" class=\"headerlink\" title=\"12. 压缩图片\"></a>12. 压缩图片</h3><p><a href=\"https://npm.taobao.org/package/gulp-imagemin\" target=\"_blank\" rel=\"external\">gulp-imagemin</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 压缩图片</span></span><br><span class=\"line\">  <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'img'</span>, function() &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/images/*'</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(imagemin(&#123;</span><br><span class=\"line\">          <span class=\"attribute\">progressive</span>: true,</span><br><span class=\"line\">          <span class=\"attribute\">svgoPlugins</span>: [&#123;<span class=\"attribute\">removeViewBox</span>: false&#125;],</span><br><span class=\"line\">          <span class=\"attribute\">use</span>: [pngcrush()]</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">'./dest/images/'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(notify(&#123; <span class=\"attribute\">message</span>: <span class=\"string\">'img task ok'</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-检查js\"><a href=\"#13-检查js\" class=\"headerlink\" title=\"13. 检查js\"></a>13. 检查js</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-jshint\" target=\"_blank\" rel=\"external\">gulp-jshint</a>  <a href=\"https://npm.taobao.org/package/jshint\" target=\"_blank\" rel=\"external\">gulp-jshint</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查js</span></span><br><span class=\"line\">  <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'lint'</span>, function() &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(jshint())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(notify(&#123; <span class=\"attribute\">message</span>: <span class=\"string\">'lint task ok'</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-gzip压缩\"><a href=\"#14-gzip压缩\" class=\"headerlink\" title=\"14. gzip压缩\"></a>14. gzip压缩</h3><p> <a href=\"https://npm.taobao.org/package/gulp-gzip\" target=\"_blank\" rel=\"external\">gulp-gzip</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gzip = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-gzip'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./dev/scripts/*.js'</span>)</span><br><span class=\"line\">    .pipe(gzip())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public/scripts'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-处理前缀\"><a href=\"#15-处理前缀\" class=\"headerlink\" title=\"15. 处理前缀\"></a>15. 处理前缀</h3><p><a href=\"https://npm.taobao.org/package/gulp-autoprefixer\" target=\"_blank\" rel=\"external\">gulp-autoprefixer</a></p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"comment\">&#123;</span><br><span class=\"line\">  return gulp.src('src/app.css')</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">      .pipe(autoprefixer(&#123;</span><br><span class=\"line\">          browsers: ['last 2 versions'],</span><br><span class=\"line\">          cascade: false</span><br><span class=\"line\">      &#125;</span>))</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">concat</span>(<span class=\"string\">'all.css'</span>)</span>)</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(sourcemaps.<span class=\"keyword\">write</span>(<span class=\"string\">'.'</span>,&#123;sourceRoot:config.dist&#125;)</span>)</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(gulp.dest(<span class=\"string\">'dist'</span>)</span>);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、项目地址\"><a href=\"#七、项目地址\" class=\"headerlink\" title=\"七、项目地址\"></a>七、项目地址</h2><p><a href=\"https://github.com/qq83387856/gulp-start-kit\" target=\"_blank\" rel=\"external\">gulp-start-kit</a></p>\n","excerpt":"<p>先前学习了webpack,但是总是感觉webpack略显复杂，并且现在很多公司gulp工作流用的比较多，因此就入gulp的坑来踩一踩，技多不压身，霍霍霍…。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/gulp.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、简介-增强和使你的工作自动化\"><a href=\"#一、简介-增强和使你的工作自动化\" class=\"headerlink\" title=\"一、简介(增强和使你的工作自动化)\"></a>一、简介(增强和使你的工作自动化)</h2><h3 id=\"1-使用简单\"><a href=\"#1-使用简单\" class=\"headerlink\" title=\"1. 使用简单\"></a>1. 使用简单</h3><p>没有繁琐的配置，一个任务一个task。通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。  </p>\n<h3 id=\"2-高效\"><a href=\"#2-高效\" class=\"headerlink\" title=\"2. 高效\"></a>2. 高效</h3><p>利用node强大的工作流，快速的构建项目并减少频繁的 IO 操作。  </p>\n<h3 id=\"3-高质量\"><a href=\"#3-高质量\" class=\"headerlink\" title=\"3. 高质量\"></a>3. 高质量</h3><p>gulp生态圈有相当多优秀的插件以供我们使用，Gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</p>\n<h3 id=\"4-易学\"><a href=\"#4-易学\" class=\"headerlink\" title=\"4. 易学\"></a>4. 易学</h3><p>通过最少的 API，掌握 Gulp 毫不费力，构建工作尽在掌握：如同一系列流管道。</p>\n<h2 id=\"二、gulp相关api\"><a href=\"#二、gulp相关api\" class=\"headerlink\" title=\"二、gulp相关api\"></a>二、gulp相关api</h2><h3 id=\"1-gulp-src-来源\"><a href=\"#1-gulp-src-来源\" class=\"headerlink\" title=\"1. gulp.src: 来源\"></a>1. <code>gulp.src</code>: 来源</h3><h3 id=\"2-gulp-dest-目标\"><a href=\"#2-gulp-dest-目标\" class=\"headerlink\" title=\"2. gulp.dest: 目标\"></a>2. <code>gulp.dest</code>: 目标</h3><h3 id=\"3-gulp-pipe-管道\"><a href=\"#3-gulp-pipe-管道\" class=\"headerlink\" title=\"3. gulp.pipe: 管道\"></a>3. <code>gulp.pipe</code>: 管道</h3><h3 id=\"4-gulp-watch-热加载\"><a href=\"#4-gulp-watch-热加载\" class=\"headerlink\" title=\"4. gulp.watch: 热加载\"></a>4. <code>gulp.watch</code>: 热加载</h3><h3 id=\"5-gulp-task-任务\"><a href=\"#5-gulp-task-任务\" class=\"headerlink\" title=\"5. gulp.task: 任务\"></a>5. <code>gulp.task</code>: 任务</h3><h3 id=\"6-gulp-task-‘default’\"><a href=\"#6-gulp-task-‘default’\" class=\"headerlink\" title=\"6. gulp.task(‘default’)\"></a>6. <code>gulp.task</code>(‘default’)</h3><p> 默认任务,必须存在</p>\n<h2 id=\"三、使用-工作流程\"><a href=\"#三、使用-工作流程\" class=\"headerlink\" title=\"三、使用(工作流程)\"></a>三、使用(工作流程)</h2><h3 id=\"1-全局安装gulp\"><a href=\"#1-全局安装gulp\" class=\"headerlink\" title=\"1. 全局安装gulp\"></a>1. 全局安装gulp</h3><p><code>npm install -g gulp</code>  </p>\n<h3 id=\"2-建立项目\"><a href=\"#2-建立项目\" class=\"headerlink\" title=\"2. 建立项目\"></a>2. 建立项目</h3><p><code>mkdir gulp-test &amp;&amp; cd gulp-test</code></p>\n<h3 id=\"3-初始化项目\"><a href=\"#3-初始化项目\" class=\"headerlink\" title=\"3. 初始化项目\"></a>3. 初始化项目</h3><p><code>npm init -y</code>  (会生成package.json)   </p>\n<h3 id=\"4-安装项目依赖\"><a href=\"#4-安装项目依赖\" class=\"headerlink\" title=\"4. 安装项目依赖\"></a>4. 安装项目依赖</h3><p><code>npm install --save-dev gulp</code></p>\n<ol>\n<li>创建配置文件<br><code>touch gulpfile.js</code><h3 id=\"6-gulp常用的功能\"><a href=\"#6-gulp常用的功能\" class=\"headerlink\" title=\"6. gulp常用的功能\"></a>6. gulp常用的功能</h3>转码（<code>gulp-babel</code> <code>babel-preset-es2015</code> <code>gulp-sass</code> <code>gulp-less</code> <code>gulp-react</code>）、合并（<code>gulp-concat</code>）、压缩（<code>gulp-uglify</code>）、模块化（<code>gulp-browserify</code>）、测试（gulp-jasmine），请依次安装这些依赖。<h3 id=\"7-小常识\"><a href=\"#7-小常识\" class=\"headerlink\" title=\"7. 小常识\"></a>7. 小常识</h3>因为国外的网站比较慢 npm经常会卡住。我们可以设置镜像源或使用<code>cnpm</code>或者设置镜像源<code>npm config set registry https://registry.npm.taobao.org</code><h3 id=\"8-写配置\"><a href=\"#8-写配置\" class=\"headerlink\" title=\"8. 写配置\"></a>8. 写配置</h3>（gulpfile一定有一个default的任务，你可以把每个任务分文件书写然后再require进来，这种方式适合多人同时书写任务时，可以防止多人修改同一文件导致的冲突）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-babel\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> react = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-react\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-sass\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-less\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-uglify\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> jasmine = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-jasmine\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">\"gulp-concat\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformJs = <span class=\"string\">\"transformJs\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformSass = <span class=\"string\">\"transformSass\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformLess = <span class=\"string\">\"transformLess\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//js</span></span><br><span class=\"line\">gulp.task(transformJs, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/*.js\"</span>)</span><br><span class=\"line\">        .pipe(react())</span><br><span class=\"line\">        .pipe(babel(</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">\"babel-preset-es2015\"</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ))</span><br><span class=\"line\">        .pipe(concat(<span class=\"string\">'bundle.min.js'</span>))</span><br><span class=\"line\">        .pipe(uglify())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// scss</span></span><br><span class=\"line\">gulp.task(transformSass, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/css/*.scss\"</span>)</span><br><span class=\"line\">        .pipe(sass())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// less</span></span><br><span class=\"line\">gulp.task(transformLess, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"src/css/*.less\"</span>)</span><br><span class=\"line\">        .pipe(less())</span><br><span class=\"line\">        .pipe(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jasmine</span></span><br><span class=\"line\">gulp.task(test, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"./test/*.js\"</span>)</span><br><span class=\"line\">        .pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">\"default\"</span>, [transformJs, transformSass, transformLess, test]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、配置文件解读\"><a href=\"#四、配置文件解读\" class=\"headerlink\" title=\"四、配置文件解读\"></a>四、配置文件解读</h2><h3 id=\"1-第一部分\"><a href=\"#1-第一部分\" class=\"headerlink\" title=\"1. 第一部分\"></a>1. 第一部分</h3><p>一堆<code>reqire</code>,是引用gulp相应的插件。在引用之前要确保己经安装。</p>\n<h3 id=\"2-第二部分\"><a href=\"#2-第二部分\" class=\"headerlink\" title=\"2. 第二部分\"></a>2. 第二部分</h3><p>几个<code>const</code>,是定义任务名常量，有多几任务就定义多少常量。</p>\n<h3 id=\"3-第三部分\"><a href=\"#3-第三部分\" class=\"headerlink\" title=\"3. 第三部分\"></a>3. 第三部分</h3><p>几个<code>task</code>,每个task对应一个任务，具有不同的功能。可以使用 <code>gulp xxx</code>来启动这个任务。</p>\n<h3 id=\"4-第四部分\"><a href=\"#4-第四部分\" class=\"headerlink\" title=\"4. 第四部分\"></a>4. 第四部分</h3><p><code>default</code>,是执行<code>gulp</code>之后就会开始的任务 常用参数(<code>&#39;default&#39;,[task1,task2,...],callback[可选]</code>)。</p>\n<h2 id=\"五、执行\"><a href=\"#五、执行\" class=\"headerlink\" title=\"五、执行\"></a>五、执行</h2><ol>\n<li>如果要执行<code>default</code>任务，直接<code>gulp</code></li>\n</ol>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"name\">09:56:04</span>] Using gulpfile e:\\oscchina\\gulp-start-kit\\gulpfile.js</span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformJs</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformSass</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'transformLess</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Starting <span class=\"symbol\">'test</span><span class=\"symbol\">'...</span></span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> spec, <span class=\"number\">0</span> failures</span><br><span class=\"line\">Finished in <span class=\"number\">0</span> seconds</span><br><span class=\"line\">[<span class=\"name\">09:56:04</span>] Finished <span class=\"symbol\">'test</span>' after <span class=\"number\">62</span> ms</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformLess</span>' after <span class=\"number\">2.66</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformSass</span>' after <span class=\"number\">2.68</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'transformJs</span>' after <span class=\"number\">2.7</span> s</span><br><span class=\"line\">[<span class=\"name\">09:56:06</span>] Finished <span class=\"symbol\">'default</span>' after <span class=\"number\">32</span> μs</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>如果想要执行单个任务，请输入 <code>gulp taskName</code>,例如<code>gulp test</code></li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[09:56:47] Using gulpfile e:\\oscchina\\gulp-<span class=\"keyword\">start</span>-kit\\gulpfile.js</span><br><span class=\"line\">[<span class=\"number\">09</span>:<span class=\"number\">56</span>:<span class=\"number\">47</span>] <span class=\"keyword\">Starting</span> <span class=\"string\">'test'</span>...</span><br><span class=\"line\">.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> spec, <span class=\"number\">0</span> failures</span><br><span class=\"line\">Finished <span class=\"keyword\">in</span> <span class=\"number\">0</span> seconds</span><br><span class=\"line\">[<span class=\"number\">09</span>:<span class=\"number\">56</span>:<span class=\"number\">47</span>] Finished <span class=\"string\">'test'</span> <span class=\"keyword\">after</span> <span class=\"number\">77</span> ms</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished <span class=\"keyword\">with</span> <span class=\"keyword\">exit</span> code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、gulp常见任务\"><a href=\"#六、gulp常见任务\" class=\"headerlink\" title=\"六、gulp常见任务\"></a>六、gulp常见任务</h2><h3 id=\"1-处理js\"><a href=\"#1-处理js\" class=\"headerlink\" title=\"1. 处理js\"></a>1. 处理js</h3><p>（包括转码、合并、压缩）  <a href=\"https://npm.taobao.org/package/gulp-babel\">gulp-babel</a> <a href=\"https://npm.taobao.org/package/babel-preset-es2015\">babel-preset-es2015</a> <a href=\"https://npm.taobao.org/package/gulp-concat\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformJs, function () &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/*.js\"</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(react())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(babel(</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"attribute\">presets</span>: [<span class=\"string\">\"babel-preset-es2015\"</span>]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      ))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(concat(<span class=\"string\">'bundle.min.js'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(uglify())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-处理scss\"><a href=\"#2-处理scss\" class=\"headerlink\" title=\"2. 处理scss\"></a>2. 处理scss</h3><p>(包括转码、合并、压缩)  <a href=\"https://npm.taobao.org/package/gulp-sass\">gulp-sass</a>  <a href=\"https://npm.taobao.org/package/gulp-concat\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// scss</span></span><br><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformSass, function () &#123;</span><br><span class=\"line\">    return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/css/*.scss\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(sass())</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-处理less\"><a href=\"#3-处理less\" class=\"headerlink\" title=\"3. 处理less\"></a>3. 处理less</h3><p>(包括转码、合并、压缩)  <a href=\"https://npm.taobao.org/package/gulp-less\">gulp-less</a>  <a href=\"https://npm.taobao.org/package/gulp-concat\">gulp-concat</a> <a href=\"https://npm.taobao.org/package/gulp-uglify\">gulp-uglify</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// less</span></span><br><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(transformLess, function () &#123;</span><br><span class=\"line\">  return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">\"src/css/*.less\"</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(less())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">\"./dist\"</span>))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4. 测试\"></a>4. 测试</h3><p><a href=\"https://npm.taobao.org/package/gulp-jasmine\">gulp-jasmine</a>  </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jasmine</span></span><br><span class=\"line\">gulp.task(test, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">\"./test/*.js\"</span>)</span><br><span class=\"line\">        .pipe(jasmine())</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试文件 test.spec.js</span></span><br><span class=\"line\">describe(<span class=\"string\">'test one'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-清理\"><a href=\"#5-清理\" class=\"headerlink\" title=\"5. 清理\"></a>5. 清理</h3><p> <a href=\"https://npm.taobao.org/package/gulp-clean\">gulp-clean</a></p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"keyword\">task</span>(<span class=\"symbol\">'clean</span>', <span class=\"keyword\">function</span> <span class=\"title\"></span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"type\">gulp.src(config.dist</span> + '/*', &#123;read: <span class=\"literal\">false</span>&#125;)</span><br><span class=\"line\">      .pipe(clean());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-热加载\"><a href=\"#6-热加载\" class=\"headerlink\" title=\"6. 热加载\"></a>6. 热加载</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-util\">gulp-util</a> <a href=\"https://npm.taobao.org/package/gulp-watch\">gulp-watch</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-util'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> watch = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-watch'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> config = &#123;&#125;;</span><br><span class=\"line\">config.dist = <span class=\"string\">'dist'</span>;</span><br><span class=\"line\">config.<span class=\"keyword\">static</span> = [</span><br><span class=\"line\">  <span class=\"string\">'bin/**/*'</span>,</span><br><span class=\"line\">  <span class=\"string\">'package.json'</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// sync static resource in production mode</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'static-sync'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(config.<span class=\"keyword\">static</span>, &#123;base: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">      .pipe(gulp.dest(config.dist));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'static-sync:dev'</span>, [<span class=\"string\">'static-sync'</span>], <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  util.log(<span class=\"string\">'[Sync] starting file watch'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> watch(config.<span class=\"keyword\">static</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.event === <span class=\"string\">'change'</span> || obj.event === <span class=\"string\">'add'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(obj.path, &#123;base: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">          .pipe(gulp.dest(config.dist))</span><br><span class=\"line\">          .pipe(<span class=\"keyword\">print</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'[Sync] file sync success: '</span> + obj.path.replace(obj.base, <span class=\"string\">''</span>);</span><br><span class=\"line\">          &#125;));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.event === <span class=\"string\">'unlink'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> distFilePath = obj.path.replace(__dirname, __dirname + <span class=\"string\">'/'</span> + config.dist);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> gulp.src(distFilePath)</span><br><span class=\"line\">          .pipe(clean())</span><br><span class=\"line\">          .pipe(<span class=\"keyword\">print</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'[Sync] file remove success: '</span> + obj.path.replace(obj.base, <span class=\"string\">''</span>);</span><br><span class=\"line\">          &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-debug\"><a href=\"#7-debug\" class=\"headerlink\" title=\"7. debug\"></a>7. debug</h3><p> <a href=\"https://npm.taobao.org/package/gulp-print\">gulp-print</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//下载</span></span><br><span class=\"line\">npm install gulp-<span class=\"keyword\">print</span></span><br><span class=\"line\"><span class=\"comment\">//引用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">print</span> = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-print'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 注册任务</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'print'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  gulp.src(<span class=\"string\">'test/*.js'</span>)</span><br><span class=\"line\">    .pipe(<span class=\"keyword\">print</span>())</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-sourceMap\"><a href=\"#8-sourceMap\" class=\"headerlink\" title=\"8. sourceMap\"></a>8. sourceMap</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-sourcemaps\">gulp-sourcemaps</a></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sourcemaps = require(<span class=\"string\">'gulp-sourcemaps'</span>);</span><br><span class=\"line\"><span class=\"comment\">// compile server script in production mode</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compile:server'</span>, function () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.babel.sourceMaps)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class=\"line\">        .pipe(sourcemaps.init())</span><br><span class=\"line\">        .pipe(babel(config.babel))</span><br><span class=\"line\">        .pipe(sourcemaps.write('.', &#123;sourceRoot: '/ustar'&#125;))</span><br><span class=\"line\">        .pipe(gulp.dest(config.dist));</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'**/*.es6'</span>, &#123;base: './'&#125;)</span><br><span class=\"line\">        .pipe(babel(&#123;</span><br><span class=\"line\">          preset:'babel-preset-es2015'</span><br><span class=\"line\">          &#125;))</span><br><span class=\"line\">        .pipe(gulp.dest('./dist'));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-复制静态资源\"><a href=\"#9-复制静态资源\" class=\"headerlink\" title=\"9. 复制静态资源\"></a>9. 复制静态资源</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'static-sync'</span>, function () &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/css/*'</span>, &#123;<span class=\"attribute\">base</span>: <span class=\"string\">'./'</span>&#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">'./dist'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-处理css雪碧图\"><a href=\"#10-处理css雪碧图\" class=\"headerlink\" title=\"10. 处理css雪碧图\"></a>10. 处理css雪碧图</h3><p> <a href=\"https://npm.taobao.org/package/gulp-css-spriter\">gulp-css-spriter</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> spriter = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-css-spriter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.src(<span class=\"string\">'./src/css/styles.css'</span>)</span><br><span class=\"line\">      .pipe(spriter(&#123;</span><br><span class=\"line\">          <span class=\"comment\">// The path and file name of where we will save the sprite sheet</span></span><br><span class=\"line\">          <span class=\"string\">'spriteSheet'</span>: <span class=\"string\">'./dist/images/spritesheet.png'</span>,</span><br><span class=\"line\">          <span class=\"comment\">// Because we don't know where you will end up saving the CSS file at this point in the pipe,</span></span><br><span class=\"line\">          <span class=\"comment\">// we need a litle help identifying where it will be.</span></span><br><span class=\"line\">          <span class=\"string\">'pathToSpriteSheetFromCSS'</span>: <span class=\"string\">'../images/spritesheet.png'</span></span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      .pipe(gulp.dest(<span class=\"string\">'./dist/css'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-压缩css\"><a href=\"#11-压缩css\" class=\"headerlink\" title=\"11. 压缩css\"></a>11. 压缩css</h3><p><a href=\"https://npm.taobao.org/package/gulp-minify-css\">gulp-minify-css</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(gulp_minify_css,function () &#123;</span><br><span class=\"line\">   return gulp<span class=\"selector-class\">.src</span>(<span class=\"string\">'./dist/*.css'</span>)</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(print())</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(minifycss())</span><br><span class=\"line\">       <span class=\"selector-class\">.pipe</span>(gulp.dest(config.dist))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-压缩图片\"><a href=\"#12-压缩图片\" class=\"headerlink\" title=\"12. 压缩图片\"></a>12. 压缩图片</h3><p><a href=\"https://npm.taobao.org/package/gulp-imagemin\">gulp-imagemin</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 压缩图片</span></span><br><span class=\"line\">  <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'img'</span>, function() &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/images/*'</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(imagemin(&#123;</span><br><span class=\"line\">          <span class=\"attribute\">progressive</span>: true,</span><br><span class=\"line\">          <span class=\"attribute\">svgoPlugins</span>: [&#123;<span class=\"attribute\">removeViewBox</span>: false&#125;],</span><br><span class=\"line\">          <span class=\"attribute\">use</span>: [pngcrush()]</span><br><span class=\"line\">      &#125;))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(gulp.dest(<span class=\"string\">'./dest/images/'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(notify(&#123; <span class=\"attribute\">message</span>: <span class=\"string\">'img task ok'</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-检查js\"><a href=\"#13-检查js\" class=\"headerlink\" title=\"13. 检查js\"></a>13. 检查js</h3><p>  <a href=\"https://npm.taobao.org/package/gulp-jshint\">gulp-jshint</a>  <a href=\"https://npm.taobao.org/package/jshint\">gulp-jshint</a></p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查js</span></span><br><span class=\"line\">  <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.task</span>(<span class=\"string\">'lint'</span>, function() &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">gulp</span><span class=\"selector-class\">.src</span>(<span class=\"string\">'src/js/*.js'</span>)</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(jshint())</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(jshint.reporter(<span class=\"string\">'default'</span>))</span><br><span class=\"line\">      <span class=\"selector-class\">.pipe</span>(notify(&#123; <span class=\"attribute\">message</span>: <span class=\"string\">'lint task ok'</span> &#125;));</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"14-gzip压缩\"><a href=\"#14-gzip压缩\" class=\"headerlink\" title=\"14. gzip压缩\"></a>14. gzip压缩</h3><p> <a href=\"https://npm.taobao.org/package/gulp-gzip\">gulp-gzip</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> gzip = <span class=\"built_in\">require</span>(<span class=\"string\">'gulp-gzip'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'compress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'./dev/scripts/*.js'</span>)</span><br><span class=\"line\">    .pipe(gzip())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./public/scripts'</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-处理前缀\"><a href=\"#15-处理前缀\" class=\"headerlink\" title=\"15. 处理前缀\"></a>15. 处理前缀</h3><p><a href=\"https://npm.taobao.org/package/gulp-autoprefixer\">gulp-autoprefixer</a></p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"keyword\">require</span>(<span class=\"string\">'gulp-autoprefixer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> <span class=\"comment\">&#123;</span><br><span class=\"line\">  return gulp.src('src/app.css')</span><br><span class=\"line\">    .pipe(sourcemaps.init())</span><br><span class=\"line\">      .pipe(autoprefixer(&#123;</span><br><span class=\"line\">          browsers: ['last 2 versions'],</span><br><span class=\"line\">          cascade: false</span><br><span class=\"line\">      &#125;</span>))</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(<span class=\"keyword\">concat</span>(<span class=\"string\">'all.css'</span>)</span>)</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(sourcemaps.<span class=\"keyword\">write</span>(<span class=\"string\">'.'</span>,&#123;sourceRoot:config.dist&#125;)</span>)</span><br><span class=\"line\">      .<span class=\"title\">pipe</span><span class=\"params\">(gulp.dest(<span class=\"string\">'dist'</span>)</span>);</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、项目地址\"><a href=\"#七、项目地址\" class=\"headerlink\" title=\"七、项目地址\"></a>七、项目地址</h2><p><a href=\"https://github.com/qq83387856/gulp-start-kit\">gulp-start-kit</a></p>"},{"title":"Markdown 表格样式调整与自适应优化","date":"2016-06-07T12:39:17.000Z","_content":"\n　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ONyKqb\" data-default-tab=\"css\" data-user=\"MOxFIVE\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/MOxFIVE/pen/ONyKqb/\">Table style</a> by MOxFIVE (<a href=\"http://codepen.io/MOxFIVE\">@MOxFIVE</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n## 样式调整\n\n### 基础概念\n\n    <table>: 表格\n    <thead>: table header 表头区\n    <th>: table headings 表头单元格内容\n    <tbody>: table body 表格内容区\n    <tr>: table row 表行\n    <td>: table data 单元格内容\n\n\n### 基本样式\n\n``` css\ntable {\n    width: 100%; /*表格宽度*/\n    max-width: 65em; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 15px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n}\n\ntable th,\ntable td {\n  height: 35px; /*统一每一行的默认高度*/\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\n```\n\n### 表头样式\n\n``` css\ntable th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: rgba(158,188,226,0.2); /*背景色*/\n}\n```\n\n### 隔行变色\n- 使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 `<tbody>` 包裹内容，那下面就相当于从表格第二行开始计数\n\n``` css\ntable tbody tr:nth-child(2n) {\n    background: rgba(158,188,226,0.12);\n}\n```\n\n### 悬浮变色\n- 鼠标悬浮时该行改变背景色\n\n``` css\ntable tr:hover {\n    background: #efefef;\n}\n```\n\n\n## 自适应优化\n表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。\n\n### 表头不换行\n- 设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧\n\n``` css\ntable th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n}\n```\n\n### 首列不换行\n- 表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行\n\n``` css\ntable td:nth-child(1) {\n    white-space: nowrap;\n}\n```\n\n### 表格滚动条\n- 添加 JavaScript 代码，用一个 `<div>` 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局\n\n``` js\n[].slice.call(document.querySelectorAll('table')).forEach(function(el){\n    var wrapper = document.createElement('div');\n    wrapper.className = 'table-area';\n    el.parentNode.insertBefore(wrapper, el);\n    el.parentNode.removeChild(el);\n    wrapper.appendChild(el);\n})\n```\n\n- jQuery\n\n``` js\n$(\"table\").wrap(\"<div class='table-area'></div>\");\n```\n\n- 同时添加如下 CSS\n\n``` css\n.table-area {\n    overflow: auto;\n}\n```\n\n\n- To be added\n","source":"_posts/2016-06-07.markdown_table_style.md","raw":"---\ntitle: Markdown 表格样式调整与自适应优化\ndate: 2016-06-07 20:39:17\ncategories:\n- 术业专攻\ntags:\n- markdown\n- css\n- JavaScript\npermalink: markdown-table-style\n---\n\n　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/markdown.png)](https://github.com/qq83387856)\n<p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ONyKqb\" data-default-tab=\"css\" data-user=\"MOxFIVE\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/MOxFIVE/pen/ONyKqb/\">Table style</a> by MOxFIVE (<a href=\"http://codepen.io/MOxFIVE\">@MOxFIVE</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n## 样式调整\n\n### 基础概念\n\n    <table>: 表格\n    <thead>: table header 表头区\n    <th>: table headings 表头单元格内容\n    <tbody>: table body 表格内容区\n    <tr>: table row 表行\n    <td>: table data 单元格内容\n\n\n### 基本样式\n\n``` css\ntable {\n    width: 100%; /*表格宽度*/\n    max-width: 65em; /*表格最大宽度，避免表格过宽*/\n    border: 1px solid #dedede; /*表格外边框设置*/\n    margin: 15px auto; /*外边距*/\n    border-collapse: collapse; /*使用单一线条的边框*/\n    empty-cells: show; /*单元格无内容依旧绘制边框*/\n}\n\ntable th,\ntable td {\n  height: 35px; /*统一每一行的默认高度*/\n  border: 1px solid #dedede; /*内部边框样式*/\n  padding: 0 10px; /*内边距*/\n}\n```\n\n### 表头样式\n\n``` css\ntable th {\n    font-weight: bold; /*加粗*/\n    text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/\n    background: rgba(158,188,226,0.2); /*背景色*/\n}\n```\n\n### 隔行变色\n- 使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 `<tbody>` 包裹内容，那下面就相当于从表格第二行开始计数\n\n``` css\ntable tbody tr:nth-child(2n) {\n    background: rgba(158,188,226,0.12);\n}\n```\n\n### 悬浮变色\n- 鼠标悬浮时该行改变背景色\n\n``` css\ntable tr:hover {\n    background: #efefef;\n}\n```\n\n\n## 自适应优化\n表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。\n\n### 表头不换行\n- 设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧\n\n``` css\ntable th {\n    white-space: nowrap; /*表头内容强制在一行显示*/\n}\n```\n\n### 首列不换行\n- 表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行\n\n``` css\ntable td:nth-child(1) {\n    white-space: nowrap;\n}\n```\n\n### 表格滚动条\n- 添加 JavaScript 代码，用一个 `<div>` 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局\n\n``` js\n[].slice.call(document.querySelectorAll('table')).forEach(function(el){\n    var wrapper = document.createElement('div');\n    wrapper.className = 'table-area';\n    el.parentNode.insertBefore(wrapper, el);\n    el.parentNode.removeChild(el);\n    wrapper.appendChild(el);\n})\n```\n\n- jQuery\n\n``` js\n$(\"table\").wrap(\"<div class='table-area'></div>\");\n```\n\n- 同时添加如下 CSS\n\n``` css\n.table-area {\n    overflow: auto;\n}\n```\n\n\n- To be added\n","slug":"markdown-table-style","published":1,"updated":"2016-06-28T02:48:25.717Z","_id":"cipjfs5w500394wmcesugwzzo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<p></p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ONyKqb\" data-default-tab=\"css\" data-user=\"MOxFIVE\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/MOxFIVE/pen/ONyKqb/\" target=\"_blank\" rel=\"external\">Table style</a> by MOxFIVE (<a href=\"http://codepen.io/MOxFIVE\" target=\"_blank\" rel=\"external\">@MOxFIVE</a>) on <a href=\"http://codepen.io\" target=\"_blank\" rel=\"external\">CodePen</a>.</p><p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"样式调整\"><a href=\"#样式调整\" class=\"headerlink\" title=\"样式调整\"></a>样式调整</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><pre><code>&lt;table&gt;: 表格\n&lt;thead&gt;: table header 表头区\n&lt;th&gt;: table headings 表头单元格内容\n&lt;tbody&gt;: table body 表格内容区\n&lt;tr&gt;: table row 表行\n&lt;td&gt;: table data 单元格内容\n</code></pre><h3 id=\"基本样式\"><a href=\"#基本样式\" class=\"headerlink\" title=\"基本样式\"></a>基本样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/*表格宽度*/</span></span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">65em</span>; <span class=\"comment\">/*表格最大宽度，避免表格过宽*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>; <span class=\"comment\">/*表格外边框设置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">15px</span> auto; <span class=\"comment\">/*外边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"comment\">/*使用单一线条的边框*/</span></span><br><span class=\"line\">    <span class=\"attribute\">empty-cells</span>: show; <span class=\"comment\">/*单元格无内容依旧绘制边框*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>; <span class=\"comment\">/*统一每一行的默认高度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>; <span class=\"comment\">/*内部边框样式*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>; <span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表头样式\"><a href=\"#表头样式\" class=\"headerlink\" title=\"表头样式\"></a>表头样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; <span class=\"comment\">/*加粗*/</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center <span class=\"meta\">!important</span>; <span class=\"comment\">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(158,188,226,0.2); <span class=\"comment\">/*背景色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隔行变色\"><a href=\"#隔行变色\" class=\"headerlink\" title=\"隔行变色\"></a>隔行变色</h3><ul>\n<li>使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 <code>&lt;tbody&gt;</code> 包裹内容，那下面就相当于从表格第二行开始计数</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2n)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(158,188,226,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"悬浮变色\"><a href=\"#悬浮变色\" class=\"headerlink\" title=\"悬浮变色\"></a>悬浮变色</h3><ul>\n<li>鼠标悬浮时该行改变背景色</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自适应优化\"><a href=\"#自适应优化\" class=\"headerlink\" title=\"自适应优化\"></a>自适应优化</h2><p>表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。</p>\n<h3 id=\"表头不换行\"><a href=\"#表头不换行\" class=\"headerlink\" title=\"表头不换行\"></a>表头不换行</h3><ul>\n<li>设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap; <span class=\"comment\">/*表头内容强制在一行显示*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"首列不换行\"><a href=\"#首列不换行\" class=\"headerlink\" title=\"首列不换行\"></a>首列不换行</h3><ul>\n<li>表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格滚动条\"><a href=\"#表格滚动条\" class=\"headerlink\" title=\"表格滚动条\"></a>表格滚动条</h3><ul>\n<li>添加 JavaScript 代码，用一个 <code>&lt;div&gt;</code> 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'table'</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    wrapper.className = <span class=\"string\">'table-area'</span>;</span><br><span class=\"line\">    el.parentNode.insertBefore(wrapper, el);</span><br><span class=\"line\">    el.parentNode.removeChild(el);</span><br><span class=\"line\">    wrapper.appendChild(el);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>jQuery</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"table\"</span>).wrap(<span class=\"string\">\"&lt;div class='table-area'&gt;&lt;/div&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同时添加如下 CSS</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.table-area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>To be added</li>\n</ul>\n","excerpt":"<p>　　Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/markdown.png\" alt=\"点击访问小莫的github\"></a></p>\n<p><p data-height=\"300\" data-theme-id=\"0\" data-slug-hash=\"ONyKqb\" data-default-tab=\"css\" data-user=\"MOxFIVE\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/MOxFIVE/pen/ONyKqb/\">Table style</a> by MOxFIVE (<a href=\"http://codepen.io/MOxFIVE\">@MOxFIVE</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"样式调整\"><a href=\"#样式调整\" class=\"headerlink\" title=\"样式调整\"></a>样式调整</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><pre><code>&lt;table&gt;: 表格\n&lt;thead&gt;: table header 表头区\n&lt;th&gt;: table headings 表头单元格内容\n&lt;tbody&gt;: table body 表格内容区\n&lt;tr&gt;: table row 表行\n&lt;td&gt;: table data 单元格内容\n</code></pre><h3 id=\"基本样式\"><a href=\"#基本样式\" class=\"headerlink\" title=\"基本样式\"></a>基本样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/*表格宽度*/</span></span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">65em</span>; <span class=\"comment\">/*表格最大宽度，避免表格过宽*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>; <span class=\"comment\">/*表格外边框设置*/</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">15px</span> auto; <span class=\"comment\">/*外边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"comment\">/*使用单一线条的边框*/</span></span><br><span class=\"line\">    <span class=\"attribute\">empty-cells</span>: show; <span class=\"comment\">/*单元格无内容依旧绘制边框*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">35px</span>; <span class=\"comment\">/*统一每一行的默认高度*/</span></span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#dedede</span>; <span class=\"comment\">/*内部边框样式*/</span></span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">10px</span>; <span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表头样式\"><a href=\"#表头样式\" class=\"headerlink\" title=\"表头样式\"></a>表头样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; <span class=\"comment\">/*加粗*/</span></span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center <span class=\"meta\">!important</span>; <span class=\"comment\">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(158,188,226,0.2); <span class=\"comment\">/*背景色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隔行变色\"><a href=\"#隔行变色\" class=\"headerlink\" title=\"隔行变色\"></a>隔行变色</h3><ul>\n<li>使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 <code>&lt;tbody&gt;</code> 包裹内容，那下面就相当于从表格第二行开始计数</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tbody</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2n)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(158,188,226,0.12);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"悬浮变色\"><a href=\"#悬浮变色\" class=\"headerlink\" title=\"悬浮变色\"></a>悬浮变色</h3><ul>\n<li>鼠标悬浮时该行改变背景色</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自适应优化\"><a href=\"#自适应优化\" class=\"headerlink\" title=\"自适应优化\"></a>自适应优化</h2><p>表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。</p>\n<h3 id=\"表头不换行\"><a href=\"#表头不换行\" class=\"headerlink\" title=\"表头不换行\"></a>表头不换行</h3><ul>\n<li>设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap; <span class=\"comment\">/*表头内容强制在一行显示*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"首列不换行\"><a href=\"#首列不换行\" class=\"headerlink\" title=\"首列不换行\"></a>首列不换行</h3><ul>\n<li>表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表格滚动条\"><a href=\"#表格滚动条\" class=\"headerlink\" title=\"表格滚动条\"></a>表格滚动条</h3><ul>\n<li>添加 JavaScript 代码，用一个 <code>&lt;div&gt;</code> 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[].slice.call(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'table'</span>)).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    wrapper.className = <span class=\"string\">'table-area'</span>;</span><br><span class=\"line\">    el.parentNode.insertBefore(wrapper, el);</span><br><span class=\"line\">    el.parentNode.removeChild(el);</span><br><span class=\"line\">    wrapper.appendChild(el);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>jQuery</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"table\"</span>).wrap(<span class=\"string\">\"&lt;div class='table-area'&gt;&lt;/div&gt;\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同时添加如下 CSS</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.table-area</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>To be added</li>\n</ul>"},{"author":"小莫","date":"2016-06-16T16:00:00.000Z","title":"linux权限详细解读","_content":"话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、理论说明\nLinux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。\n### 1. 权限说明\n文件或目录的访问权限分为只读，只写和可执行三种。\n以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。\n可执行权限表示允许将该文件作为一个程序执行。\n文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。\n用户也可根据需要把访问权限设置为需要的任何组合。\n### 2. 用户组\n有三种不同类型的用户可对文件或目录进行访问：\n* 文件所有者，\n* 同组用户\n* 其他用户\n所有者一般是文件的创建者。\n\n所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。\n在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。\n### 3. 文件权限\n每一文件或目录的访问权限都有三组，每组用三位表示，分别为\n* 文件属主的读、写和执行权限；\n* 与属主同组的用户的读、写和执行权限；\n* 系统中其他用户的读、写和执行权限。\n当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。\n\n### 4.实例分析\n\n随意查看一个目录： `ll`\n\n```\ndrwxr-xr-x   9 root root    4096 Jun 17 10:18 .\ndrwxr-xr-x   8 root root    4096 Jun 15 09:08 ..\n-rw-r--r--   1 root root    1771 Jun 16 23:22 _config.yml\n-rw-r--r--   1 root root 1201148 Jun 17 10:18 db.json\ndrwxr-xr-x   8 root root    4096 Jun 17 10:31 .git\n-rw-r--r--   1 root root      55 Jun 15 09:09 .gitignore\ndrwxr-xr-x   2 root root    4096 Jun 15 09:09 .idea\ndrwxr-xr-x 411 root root   16384 Jun 15 09:12 node_modules\n-rw-r--r--   1 root root     861 Jun 16 10:55 package.json\ndrwxr-xr-x  13 root root    4096 Jun 17 10:18 public\ndrwxr-xr-x   2 root root    4096 Jun 15 09:09 scaffolds\ndrwxr-xr-x   7 root root    4096 Jun 15 12:51 source\ndrwxr-xr-x   6 root root    4096 Jun 15 12:51 themes\n\n```\n\n解读：\n```\n  注意这里共有10个位置,10个位置又可以分为4个部分。\n  四个部分分别为 1.类型 2.属主权限 2.同组用户权限 3 其他用户权限\n  第一个字符指定了文件类型。\n  r代表只读，w代表写，x代表可执行，横线代表空。\n  在通常意义上，一个目录也是一个文件。\n  如果第一个字符是横线，表示是一个非目录的文件。\n  如果是d，表示是一个目录。\n```\n\n单个实例\n\n```\n-rw-r--r--\n```\n\n详细解读(如果没有看懂建议回头看看理论说明1-3)\n\n![](http://static.xiaomo.info/images/chmod.png)\n\n\n## 二、命令使用说明\n\n### 1.格式(参数设定)\n\n`chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼`\n\n\n命令解读：\n\n\n操作对象who可是下述字母中的任一个或者它们的组合：\n\n```\n　　u 表示“用户（user）”，即文件或目录的所有者。\n\n　　g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。\n\n　　o 表示“其他（others）用户”。\n\n　　a 表示“所有（all）用户”。它是系统默认值。\n```\n\n　　操作符号可以是：\n\n```\n　　+ 添加某个权限。\n\n　　- 取消某个权限。\n\n　　= 赋予给定权限并取消其他所有权限（如果有的话）。\n\n```\n\n　　设置mode所表示的权限可用下述字母的任意组合：\n\n```\n　　r 可读。\n\n　　w 可写。\n\n　　x 可执行。\n\n　　X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。\n\n　　s 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。\n\n　　t 保存程序的文本到交换设备上。\n\n　　u 与文件属主拥有一样的权限。\n\n　　g 与和文件属主同组的用户拥有一样的权限。\n\n　　o 与其他用户拥有一样的权限。\n\n　　文件名：以空格分开的要改变权限的文件列表，支持通配符。\n\n　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+r，o+r example\n\n　　使同组和其他用户对文件example 有读权限。\n\n```\n\n\n### 2.权限设置(数字)\n\n我们必须首先了解用数字表示的属性的含义：\n\n```\n0表示没有权限，\n1表示可执行权限，\n2表示可写权限，\n4表示可读权限，\n然后将其相加。所\n以数字属性的格式应为3个从0到7的八进制数，\n其顺序是（u）（g）（o）。\n```\n\n## 三、其他命令\n\n### 1. `　chgrp`命令\n\n功能：改变文件或目录所属的组。\n\n语法：`chgrp ［选项］ group filename¼`\n\n该命令改变指定指定文件所属的用户组。其中`group`可以是用户组ID，也可以是`/etc/group`文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。\n\n该命令的各选项含义为：\n\n```\n  - R 递归式地改变指定目录及其下的所有子目录和文件的属组。\n```\n\n　　例1：`$ chgrp - R book /opt/local /book`\n\n　　改变``/opt/local` `/book/`及其子目录下的所有文件的属组为`book`。\n\n### 2. `chown`命令\n\n　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。\n\n　　语法：`chown ［选项］ 用户或组 文件`\n\n　　说明：`chown`将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。\n\n　　该命令的各选项含义如下：\n\n```\n　　- R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。\n　　- v 显示chown命令所做的工作。\n```\n\n　　例1：把文件`shiyan.c`的所有者改为`wang`。\n\n　　$ `chown wang shiyan.c`\n\n　　例2：把目录/his及其下的所有文件和子目录的属主改成`wang`，属组改成`users`。\n\n　　$ `chown - R wang.users /his`\n","source":"_posts/2016-06-17.linux_chmod.md","raw":"---\nauthor: 小莫\ndate: 2016-06-17\ntitle: linux权限详细解读\ntags:\n- linux\ncategory: linux权限操作\npermalink: linux_chmod\n---\n话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、理论说明\nLinux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。\n### 1. 权限说明\n文件或目录的访问权限分为只读，只写和可执行三种。\n以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。\n可执行权限表示允许将该文件作为一个程序执行。\n文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。\n用户也可根据需要把访问权限设置为需要的任何组合。\n### 2. 用户组\n有三种不同类型的用户可对文件或目录进行访问：\n* 文件所有者，\n* 同组用户\n* 其他用户\n所有者一般是文件的创建者。\n\n所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。\n在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。\n### 3. 文件权限\n每一文件或目录的访问权限都有三组，每组用三位表示，分别为\n* 文件属主的读、写和执行权限；\n* 与属主同组的用户的读、写和执行权限；\n* 系统中其他用户的读、写和执行权限。\n当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。\n\n### 4.实例分析\n\n随意查看一个目录： `ll`\n\n```\ndrwxr-xr-x   9 root root    4096 Jun 17 10:18 .\ndrwxr-xr-x   8 root root    4096 Jun 15 09:08 ..\n-rw-r--r--   1 root root    1771 Jun 16 23:22 _config.yml\n-rw-r--r--   1 root root 1201148 Jun 17 10:18 db.json\ndrwxr-xr-x   8 root root    4096 Jun 17 10:31 .git\n-rw-r--r--   1 root root      55 Jun 15 09:09 .gitignore\ndrwxr-xr-x   2 root root    4096 Jun 15 09:09 .idea\ndrwxr-xr-x 411 root root   16384 Jun 15 09:12 node_modules\n-rw-r--r--   1 root root     861 Jun 16 10:55 package.json\ndrwxr-xr-x  13 root root    4096 Jun 17 10:18 public\ndrwxr-xr-x   2 root root    4096 Jun 15 09:09 scaffolds\ndrwxr-xr-x   7 root root    4096 Jun 15 12:51 source\ndrwxr-xr-x   6 root root    4096 Jun 15 12:51 themes\n\n```\n\n解读：\n```\n  注意这里共有10个位置,10个位置又可以分为4个部分。\n  四个部分分别为 1.类型 2.属主权限 2.同组用户权限 3 其他用户权限\n  第一个字符指定了文件类型。\n  r代表只读，w代表写，x代表可执行，横线代表空。\n  在通常意义上，一个目录也是一个文件。\n  如果第一个字符是横线，表示是一个非目录的文件。\n  如果是d，表示是一个目录。\n```\n\n单个实例\n\n```\n-rw-r--r--\n```\n\n详细解读(如果没有看懂建议回头看看理论说明1-3)\n\n![](http://static.xiaomo.info/images/chmod.png)\n\n\n## 二、命令使用说明\n\n### 1.格式(参数设定)\n\n`chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼`\n\n\n命令解读：\n\n\n操作对象who可是下述字母中的任一个或者它们的组合：\n\n```\n　　u 表示“用户（user）”，即文件或目录的所有者。\n\n　　g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。\n\n　　o 表示“其他（others）用户”。\n\n　　a 表示“所有（all）用户”。它是系统默认值。\n```\n\n　　操作符号可以是：\n\n```\n　　+ 添加某个权限。\n\n　　- 取消某个权限。\n\n　　= 赋予给定权限并取消其他所有权限（如果有的话）。\n\n```\n\n　　设置mode所表示的权限可用下述字母的任意组合：\n\n```\n　　r 可读。\n\n　　w 可写。\n\n　　x 可执行。\n\n　　X 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性。\n\n　　s 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位。\n\n　　t 保存程序的文本到交换设备上。\n\n　　u 与文件属主拥有一样的权限。\n\n　　g 与和文件属主同组的用户拥有一样的权限。\n\n　　o 与其他用户拥有一样的权限。\n\n　　文件名：以空格分开的要改变权限的文件列表，支持通配符。\n\n　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+r，o+r example\n\n　　使同组和其他用户对文件example 有读权限。\n\n```\n\n\n### 2.权限设置(数字)\n\n我们必须首先了解用数字表示的属性的含义：\n\n```\n0表示没有权限，\n1表示可执行权限，\n2表示可写权限，\n4表示可读权限，\n然后将其相加。所\n以数字属性的格式应为3个从0到7的八进制数，\n其顺序是（u）（g）（o）。\n```\n\n## 三、其他命令\n\n### 1. `　chgrp`命令\n\n功能：改变文件或目录所属的组。\n\n语法：`chgrp ［选项］ group filename¼`\n\n该命令改变指定指定文件所属的用户组。其中`group`可以是用户组ID，也可以是`/etc/group`文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。\n\n该命令的各选项含义为：\n\n```\n  - R 递归式地改变指定目录及其下的所有子目录和文件的属组。\n```\n\n　　例1：`$ chgrp - R book /opt/local /book`\n\n　　改变``/opt/local` `/book/`及其子目录下的所有文件的属组为`book`。\n\n### 2. `chown`命令\n\n　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。\n\n　　语法：`chown ［选项］ 用户或组 文件`\n\n　　说明：`chown`将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。\n\n　　该命令的各选项含义如下：\n\n```\n　　- R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。\n　　- v 显示chown命令所做的工作。\n```\n\n　　例1：把文件`shiyan.c`的所有者改为`wang`。\n\n　　$ `chown wang shiyan.c`\n\n　　例2：把目录/his及其下的所有文件和子目录的属主改成`wang`，属组改成`users`。\n\n　　$ `chown - R wang.users /his`\n","slug":"linux_chmod","published":1,"updated":"2016-06-28T02:48:06.843Z","_id":"cipjfs5w7003c4wmc6n0zeh82","comments":1,"layout":"post","photos":[],"link":"","content":"<p>话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、理论说明\"><a href=\"#一、理论说明\" class=\"headerlink\" title=\"一、理论说明\"></a>一、理论说明</h2><p>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p>\n<h3 id=\"1-权限说明\"><a href=\"#1-权限说明\" class=\"headerlink\" title=\"1. 权限说明\"></a>1. 权限说明</h3><p>文件或目录的访问权限分为只读，只写和可执行三种。<br>以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。<br>可执行权限表示允许将该文件作为一个程序执行。<br>文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。<br>用户也可根据需要把访问权限设置为需要的任何组合。</p>\n<h3 id=\"2-用户组\"><a href=\"#2-用户组\" class=\"headerlink\" title=\"2. 用户组\"></a>2. 用户组</h3><p>有三种不同类型的用户可对文件或目录进行访问：</p>\n<ul>\n<li>文件所有者，</li>\n<li>同组用户</li>\n<li>其他用户<br>所有者一般是文件的创建者。</li>\n</ul>\n<p>所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。<br>在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p>\n<h3 id=\"3-文件权限\"><a href=\"#3-文件权限\" class=\"headerlink\" title=\"3. 文件权限\"></a>3. 文件权限</h3><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为</p>\n<ul>\n<li>文件属主的读、写和执行权限；</li>\n<li>与属主同组的用户的读、写和执行权限；</li>\n<li>系统中其他用户的读、写和执行权限。<br>当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。</li>\n</ul>\n<h3 id=\"4-实例分析\"><a href=\"#4-实例分析\" class=\"headerlink\" title=\"4.实例分析\"></a>4.实例分析</h3><p>随意查看一个目录： <code>ll</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   9 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> .</span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   8 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:08</span> ..</span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    1771 <span class=\"selector-tag\">Jun</span> 16 23<span class=\"selector-pseudo\">:22</span> _<span class=\"selector-tag\">config</span><span class=\"selector-class\">.yml</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span> 1201148 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> <span class=\"selector-tag\">db</span><span class=\"selector-class\">.json</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   8 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:31</span> <span class=\"selector-class\">.git</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>      55 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-class\">.gitignore</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   2 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-class\">.idea</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span> 411 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>   16384 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:12</span> <span class=\"selector-tag\">node_modules</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>     861 <span class=\"selector-tag\">Jun</span> 16 10<span class=\"selector-pseudo\">:55</span> <span class=\"selector-tag\">package</span><span class=\"selector-class\">.json</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>  13 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> <span class=\"selector-tag\">public</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   2 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-tag\">scaffolds</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   7 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 12<span class=\"selector-pseudo\">:51</span> <span class=\"selector-tag\">source</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   6 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 12<span class=\"selector-pseudo\">:51</span> <span class=\"selector-tag\">themes</span></span><br></pre></td></tr></table></figure>\n<p>解读：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意这里共有<span class=\"number\">10</span>个位置,<span class=\"number\">10</span>个位置又可以分为<span class=\"number\">4</span>个部分。</span><br><span class=\"line\">四个部分分别为 <span class=\"number\">1.</span>类型 <span class=\"number\">2.</span>属主权限 <span class=\"number\">2.</span>同组用户权限 <span class=\"number\">3</span> 其他用户权限</span><br><span class=\"line\">第一个字符指定了文件类型。</span><br><span class=\"line\"><span class=\"keyword\">r</span>代表只读，<span class=\"keyword\">w</span>代表写，<span class=\"keyword\">x</span>代表可执行，横线代表空。</span><br><span class=\"line\">在通常意义上，一个目录也是一个文件。</span><br><span class=\"line\">如果第一个字符是横线，表示是一个非目录的文件。</span><br><span class=\"line\">如果是<span class=\"keyword\">d</span>，表示是一个目录。</span><br></pre></td></tr></table></figure></p>\n<p>单个实例</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">-</span><span class=\"comment\">rw</span><span class=\"literal\">-</span><span class=\"comment\">r</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">r</span><span class=\"literal\">-</span><span class=\"literal\">-</span></span><br></pre></td></tr></table></figure>\n<p>详细解读(如果没有看懂建议回头看看理论说明1-3)</p>\n<p><img src=\"http://static.xiaomo.info/images/chmod.png\" alt=\"\"></p>\n<h2 id=\"二、命令使用说明\"><a href=\"#二、命令使用说明\" class=\"headerlink\" title=\"二、命令使用说明\"></a>二、命令使用说明</h2><h3 id=\"1-格式-参数设定\"><a href=\"#1-格式-参数设定\" class=\"headerlink\" title=\"1.格式(参数设定)\"></a>1.格式(参数设定)</h3><p><code>chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼</code></p>\n<p>命令解读：</p>\n<p>操作对象who可是下述字母中的任一个或者它们的组合：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　u 表示“用户（<span class=\"keyword\">user</span>）”，即文件或目录的所有者。</span><br><span class=\"line\"></span><br><span class=\"line\">　　g 表示“同组（<span class=\"keyword\">group</span>）用户”，即与文件属主有相同组ID的所有用户。</span><br><span class=\"line\"></span><br><span class=\"line\">　　o 表示“其他（others）用户”。</span><br><span class=\"line\"></span><br><span class=\"line\">　　a 表示“所有（<span class=\"literal\">all</span>）用户”。它是系统默认值。</span><br></pre></td></tr></table></figure>\n<p>　　操作符号可以是：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　+ 添加某个权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　-<span class=\"ruby\"> 取消某个权限。</span><br><span class=\"line\"></span></span><br><span class=\"line\">　　=<span class=\"ruby\"> 赋予给定权限并取消其他所有权限（如果有的话）。</span></span><br></pre></td></tr></table></figure>\n<p>　　设置mode所表示的权限可用下述字母的任意组合：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">r</span> 可读。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">w</span> 可写。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">x</span> 可执行。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">X</span> 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加<span class=\"keyword\">x</span> 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">s</span> 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋<span class=\"keyword\">s</span>”设置文件的用户ID位，“g＋<span class=\"keyword\">s</span>”设置组ID位。</span><br><span class=\"line\"></span><br><span class=\"line\">　　t 保存程序的文本到交换设备上。</span><br><span class=\"line\"></span><br><span class=\"line\">　　u 与文件属主拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　g 与和文件属主同组的用户拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　o 与其他用户拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　文件名：以空格分开的要改变权限的文件列表，支持通配符。</span><br><span class=\"line\"></span><br><span class=\"line\">　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+<span class=\"keyword\">r</span>，o+<span class=\"keyword\">r</span> example</span><br><span class=\"line\"></span><br><span class=\"line\">　　使同组和其他用户对文件example 有读权限。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-权限设置-数字\"><a href=\"#2-权限设置-数字\" class=\"headerlink\" title=\"2.权限设置(数字)\"></a>2.权限设置(数字)</h3><p>我们必须首先了解用数字表示的属性的含义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0表示没有权限，</span><br><span class=\"line\">1表示可执行权限，</span><br><span class=\"line\">2表示可写权限，</span><br><span class=\"line\">4表示可读权限，</span><br><span class=\"line\">然后将其相加。所</span><br><span class=\"line\">以数字属性的格式应为3个从0到7的八进制数，</span><br><span class=\"line\">其顺序是（u）（g）（o）。</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、其他命令\"><a href=\"#三、其他命令\" class=\"headerlink\" title=\"三、其他命令\"></a>三、其他命令</h2><h3 id=\"1-chgrp命令\"><a href=\"#1-chgrp命令\" class=\"headerlink\" title=\"1. chgrp命令\"></a>1. <code>chgrp</code>命令</h3><p>功能：改变文件或目录所属的组。</p>\n<p>语法：<code>chgrp ［选项］ group filename¼</code></p>\n<p>该命令改变指定指定文件所属的用户组。其中<code>group</code>可以是用户组ID，也可以是<code>/etc/group</code>文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</p>\n<p>该命令的各选项含义为：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>R 递归式地改变指定目录及其下的所有子目录和文件的属组。</span><br></pre></td></tr></table></figure>\n<p>　　例1：<code>$ chgrp - R book /opt/local /book</code></p>\n<p>　　改变<code>`/opt/local</code> <code>/book/</code>及其子目录下的所有文件的属组为<code>book</code>。</p>\n<h3 id=\"2-chown命令\"><a href=\"#2-chown命令\" class=\"headerlink\" title=\"2. chown命令\"></a>2. <code>chown</code>命令</h3><p>　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。</p>\n<p>　　语法：<code>chown ［选项］ 用户或组 文件</code></p>\n<p>　　说明：<code>chown</code>将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。</p>\n<p>　　该命令的各选项含义如下：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　-<span class=\"ruby\"> R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。</span><br><span class=\"line\"></span>　　-<span class=\"ruby\"> v 显示chown命令所做的工作。</span></span><br></pre></td></tr></table></figure>\n<p>　　例1：把文件<code>shiyan.c</code>的所有者改为<code>wang</code>。</p>\n<p>　　$ <code>chown wang shiyan.c</code></p>\n<p>　　例2：把目录/his及其下的所有文件和子目录的属主改成<code>wang</code>，属组改成<code>users</code>。</p>\n<p>　　$ <code>chown - R wang.users /his</code></p>\n","excerpt":"<p>话说我接触linux也有近2年的时候了,而且有自己的linux服务器。感觉对linux的操作熟练程度还可以，但是基本知识还是有待提高，linux权限这一块有必要啃一啃了。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、理论说明\"><a href=\"#一、理论说明\" class=\"headerlink\" title=\"一、理论说明\"></a>一、理论说明</h2><p>Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p>\n<h3 id=\"1-权限说明\"><a href=\"#1-权限说明\" class=\"headerlink\" title=\"1. 权限说明\"></a>1. 权限说明</h3><p>文件或目录的访问权限分为只读，只写和可执行三种。<br>以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。<br>可执行权限表示允许将该文件作为一个程序执行。<br>文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。<br>用户也可根据需要把访问权限设置为需要的任何组合。</p>\n<h3 id=\"2-用户组\"><a href=\"#2-用户组\" class=\"headerlink\" title=\"2. 用户组\"></a>2. 用户组</h3><p>有三种不同类型的用户可对文件或目录进行访问：</p>\n<ul>\n<li>文件所有者，</li>\n<li>同组用户</li>\n<li>其他用户<br>所有者一般是文件的创建者。</li>\n</ul>\n<p>所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。<br>在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p>\n<h3 id=\"3-文件权限\"><a href=\"#3-文件权限\" class=\"headerlink\" title=\"3. 文件权限\"></a>3. 文件权限</h3><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为</p>\n<ul>\n<li>文件属主的读、写和执行权限；</li>\n<li>与属主同组的用户的读、写和执行权限；</li>\n<li>系统中其他用户的读、写和执行权限。<br>当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。</li>\n</ul>\n<h3 id=\"4-实例分析\"><a href=\"#4-实例分析\" class=\"headerlink\" title=\"4.实例分析\"></a>4.实例分析</h3><p>随意查看一个目录： <code>ll</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   9 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> .</span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   8 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:08</span> ..</span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    1771 <span class=\"selector-tag\">Jun</span> 16 23<span class=\"selector-pseudo\">:22</span> _<span class=\"selector-tag\">config</span><span class=\"selector-class\">.yml</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span> 1201148 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> <span class=\"selector-tag\">db</span><span class=\"selector-class\">.json</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   8 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:31</span> <span class=\"selector-class\">.git</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>      55 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-class\">.gitignore</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   2 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-class\">.idea</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span> 411 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>   16384 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:12</span> <span class=\"selector-tag\">node_modules</span></span><br><span class=\"line\"><span class=\"selector-tag\">-rw-r--r--</span>   1 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>     861 <span class=\"selector-tag\">Jun</span> 16 10<span class=\"selector-pseudo\">:55</span> <span class=\"selector-tag\">package</span><span class=\"selector-class\">.json</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>  13 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 17 10<span class=\"selector-pseudo\">:18</span> <span class=\"selector-tag\">public</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   2 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 09<span class=\"selector-pseudo\">:09</span> <span class=\"selector-tag\">scaffolds</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   7 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 12<span class=\"selector-pseudo\">:51</span> <span class=\"selector-tag\">source</span></span><br><span class=\"line\"><span class=\"selector-tag\">drwxr-xr-x</span>   6 <span class=\"selector-tag\">root</span> <span class=\"selector-tag\">root</span>    4096 <span class=\"selector-tag\">Jun</span> 15 12<span class=\"selector-pseudo\">:51</span> <span class=\"selector-tag\">themes</span></span><br></pre></td></tr></table></figure>\n<p>解读：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意这里共有<span class=\"number\">10</span>个位置,<span class=\"number\">10</span>个位置又可以分为<span class=\"number\">4</span>个部分。</span><br><span class=\"line\">四个部分分别为 <span class=\"number\">1.</span>类型 <span class=\"number\">2.</span>属主权限 <span class=\"number\">2.</span>同组用户权限 <span class=\"number\">3</span> 其他用户权限</span><br><span class=\"line\">第一个字符指定了文件类型。</span><br><span class=\"line\"><span class=\"keyword\">r</span>代表只读，<span class=\"keyword\">w</span>代表写，<span class=\"keyword\">x</span>代表可执行，横线代表空。</span><br><span class=\"line\">在通常意义上，一个目录也是一个文件。</span><br><span class=\"line\">如果第一个字符是横线，表示是一个非目录的文件。</span><br><span class=\"line\">如果是<span class=\"keyword\">d</span>，表示是一个目录。</span><br></pre></td></tr></table></figure></p>\n<p>单个实例</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">-</span><span class=\"comment\">rw</span><span class=\"literal\">-</span><span class=\"comment\">r</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">r</span><span class=\"literal\">-</span><span class=\"literal\">-</span></span><br></pre></td></tr></table></figure>\n<p>详细解读(如果没有看懂建议回头看看理论说明1-3)</p>\n<p><img src=\"http://static.xiaomo.info/images/chmod.png\" alt=\"\"></p>\n<h2 id=\"二、命令使用说明\"><a href=\"#二、命令使用说明\" class=\"headerlink\" title=\"二、命令使用说明\"></a>二、命令使用说明</h2><h3 id=\"1-格式-参数设定\"><a href=\"#1-格式-参数设定\" class=\"headerlink\" title=\"1.格式(参数设定)\"></a>1.格式(参数设定)</h3><p><code>chmod ［who］ ［+ | - | =］ ［mode］ 文件名¼</code></p>\n<p>命令解读：</p>\n<p>操作对象who可是下述字母中的任一个或者它们的组合：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　u 表示“用户（<span class=\"keyword\">user</span>）”，即文件或目录的所有者。</span><br><span class=\"line\"></span><br><span class=\"line\">　　g 表示“同组（<span class=\"keyword\">group</span>）用户”，即与文件属主有相同组ID的所有用户。</span><br><span class=\"line\"></span><br><span class=\"line\">　　o 表示“其他（others）用户”。</span><br><span class=\"line\"></span><br><span class=\"line\">　　a 表示“所有（<span class=\"literal\">all</span>）用户”。它是系统默认值。</span><br></pre></td></tr></table></figure>\n<p>　　操作符号可以是：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　+ 添加某个权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　-<span class=\"ruby\"> 取消某个权限。</span><br><span class=\"line\"></span></span><br><span class=\"line\">　　=<span class=\"ruby\"> 赋予给定权限并取消其他所有权限（如果有的话）。</span></span><br></pre></td></tr></table></figure>\n<p>　　设置mode所表示的权限可用下述字母的任意组合：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"keyword\">r</span> 可读。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">w</span> 可写。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">x</span> 可执行。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">X</span> 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加<span class=\"keyword\">x</span> 属性。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"keyword\">s</span> 在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋<span class=\"keyword\">s</span>”设置文件的用户ID位，“g＋<span class=\"keyword\">s</span>”设置组ID位。</span><br><span class=\"line\"></span><br><span class=\"line\">　　t 保存程序的文本到交换设备上。</span><br><span class=\"line\"></span><br><span class=\"line\">　　u 与文件属主拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　g 与和文件属主同组的用户拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　o 与其他用户拥有一样的权限。</span><br><span class=\"line\"></span><br><span class=\"line\">　　文件名：以空格分开的要改变权限的文件列表，支持通配符。</span><br><span class=\"line\"></span><br><span class=\"line\">　　在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：chmod g+<span class=\"keyword\">r</span>，o+<span class=\"keyword\">r</span> example</span><br><span class=\"line\"></span><br><span class=\"line\">　　使同组和其他用户对文件example 有读权限。</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-权限设置-数字\"><a href=\"#2-权限设置-数字\" class=\"headerlink\" title=\"2.权限设置(数字)\"></a>2.权限设置(数字)</h3><p>我们必须首先了解用数字表示的属性的含义：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0表示没有权限，</span><br><span class=\"line\">1表示可执行权限，</span><br><span class=\"line\">2表示可写权限，</span><br><span class=\"line\">4表示可读权限，</span><br><span class=\"line\">然后将其相加。所</span><br><span class=\"line\">以数字属性的格式应为3个从0到7的八进制数，</span><br><span class=\"line\">其顺序是（u）（g）（o）。</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、其他命令\"><a href=\"#三、其他命令\" class=\"headerlink\" title=\"三、其他命令\"></a>三、其他命令</h2><h3 id=\"1-chgrp命令\"><a href=\"#1-chgrp命令\" class=\"headerlink\" title=\"1. chgrp命令\"></a>1. <code>chgrp</code>命令</h3><p>功能：改变文件或目录所属的组。</p>\n<p>语法：<code>chgrp ［选项］ group filename¼</code></p>\n<p>该命令改变指定指定文件所属的用户组。其中<code>group</code>可以是用户组ID，也可以是<code>/etc/group</code>文件中用户组的组名。文件名是以空格分开的要改变属组的文件列表，支持通配符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。</p>\n<p>该命令的各选项含义为：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>R 递归式地改变指定目录及其下的所有子目录和文件的属组。</span><br></pre></td></tr></table></figure>\n<p>　　例1：<code>$ chgrp - R book /opt/local /book</code></p>\n<p>　　改变<code>`/opt/local</code> <code>/book/</code>及其子目录下的所有文件的属组为<code>book</code>。</p>\n<h3 id=\"2-chown命令\"><a href=\"#2-chown命令\" class=\"headerlink\" title=\"2. chown命令\"></a>2. <code>chown</code>命令</h3><p>　　功能：更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户xu，为了让用户xu能够存取这个文件，root用户应该把这个文件的属主设为xu，否则，用户xu无法存取这个文件。</p>\n<p>　　语法：<code>chown ［选项］ 用户或组 文件</code></p>\n<p>　　说明：<code>chown</code>将指定文件的拥有者改为指定的用户或组。用户可以是用户名或用户ID。组可以是组名或组ID。文件是以空格分开的要改变权限的文件列表，支持通配符。</p>\n<p>　　该命令的各选项含义如下：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　-<span class=\"ruby\"> R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。</span><br><span class=\"line\"></span>　　-<span class=\"ruby\"> v 显示chown命令所做的工作。</span></span><br></pre></td></tr></table></figure>\n<p>　　例1：把文件<code>shiyan.c</code>的所有者改为<code>wang</code>。</p>\n<p>　　$ <code>chown wang shiyan.c</code></p>\n<p>　　例2：把目录/his及其下的所有文件和子目录的属主改成<code>wang</code>，属组改成<code>users</code>。</p>\n<p>　　$ <code>chown - R wang.users /his</code></p>"},{"title":"获取多说和 Disqus 文章评论数的方法","date":"2016-06-17T13:19:34.000Z","_content":"\n<h2 id=\"intro\">前言</h2>不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 多说\n多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可\n\n### 请求参数\n\n- `short_name`: 站点注册的多说二级域名，比如注册了 http://helloworld.duoshuo.com/, 则对应二级域名为 helloworld;\n- `threads`: 文章的 `thread-key`, 与评论框中 data-thread-key 一致。\n\n### 返回数据示例\n```json\n{\n    \"response\": {\n        \"about/index.html\": {\n            \"thread_id\": \"6205475504969401090\",\n            \"channel_key\": null,\n            \"thread_key\": \"about/index.html\",\n            \"reposts\": 0,\n            \"views\": 0,\n            \"likes\": 8,\n            \"dislikes\": 0,\n            \"comments\": 187\n        }\n    },\n    \"options\": {\n        \"comments_zero\": \"暂无评论\",\n        \"comments_one\": \"1条评论\",\n        \"comments_multiple\": \"{num}条评论\"\n    },\n    \"code\": 0\n}\n```\n### 数据提取\n\n- 需要的只是评论数 `comments`，这里使用 jQuery 的 `getJSON` 比较方便\n\n```js\n$(function() {\n    var shortName = \"moxfive\";\n    var threads = \"about/index.html\";\n\n    var jsonUrl = \"http://api.duoshuo.com/threads/counts.jsonp?short_name=\" + shortName + \"&threads=\" + threads +  \"&callback=?\";\n    $.getJSON(jsonUrl, function(result) {\n        $.each(result.response, function(i, field) {\n            var value = field.comments;\n            $(\".duoshuo-count\").text(value);\n        })\n    })\n})\n```\n\n- 获得的值会显示在匹配的区域中\n\n```html\n<span class=\"disqus-count\"></span>\n```\n\n## Disqus\n\n### 加载相关 JS\n\n- 域名中填入自己的 Disqus `shortname`，获取方式参考 [官方文档](https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-)\n\n```html\n<script id=\"dsq-count-scr\" src=\"//<shortname>.disqus.com/count.js\" async></script>\n\n<!-- e.g. -->\n<script id=\"dsq-count-scr\" src=\"//moxfive.disqus.com/count.js\" async></script>\n```\n\n### 显示评论数\n- 这里介绍两种借助特定 Class 显示评论数的方法\n\n```html\n<!-- 通过 `data-disqus-identifier` -->\n<span class=\"disqus-comment-count\" data-disqus-identifier=\"about/index.html\"></span>\n\n\n<!-- 通过 `data-disqus-url` -->\n<span class=\"disqus-comment-count\" data-disqus-url=\"http://MOxFIVE.xyz/about/index.html\"></span>\n```\n\n> - `identifier` 和 `url` 的值如果不清楚，可以自行设置，方法参考 [官方文档](https://help.disqus.com/customer/portal/articles/472098)\n> - 获取的评论数不正确，很可能是因为远程数据没更新，等等就好。\n\n### 提取纯数字\n- 上面方法显示的评论数是类似 `1 Comment` 这样的格式，这里可以把它转为纯数字格式 `1`\n- 使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可\n\n```js\nvar $disqusCount = $(\".disqus-comment-count\");\n$disqusCount.bind(\"DOMNodeInserted\", function(e) {\n  var num = $(this).text().replace(/[^0-9]/ig,\"\");\n  $(this).text(num)\n})\n```\n\n## 相关链接\n\n1. 多说官方文档: [获取文章评论、转发数](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n1. 多说官方文档: [代码显示【文章评论数】方法](http://dev.duoshuo.com/threads/5016427f77cf5fa30500000e)\n1. Disqus Help: [Adding comment count links to your home page](https://help.disqus.com/customer/portal/articles/565624-adding-comment-c)\n","source":"_posts/2016-06-17.duoshuo_disqus_comment_ount.md","raw":"---\ntitle: 获取多说和 Disqus 文章评论数的方法\ndate: 2016-06-17 21:19:34\ncategories: 术业专攻\ntags:\n- jquery\npermalink: duoshuo_comment\n---\n\n<h2 id=\"intro\">前言</h2>不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/life.png)](https://github.com/qq83387856)\n## 多说\n多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可\n\n### 请求参数\n\n- `short_name`: 站点注册的多说二级域名，比如注册了 http://helloworld.duoshuo.com/, 则对应二级域名为 helloworld;\n- `threads`: 文章的 `thread-key`, 与评论框中 data-thread-key 一致。\n\n### 返回数据示例\n```json\n{\n    \"response\": {\n        \"about/index.html\": {\n            \"thread_id\": \"6205475504969401090\",\n            \"channel_key\": null,\n            \"thread_key\": \"about/index.html\",\n            \"reposts\": 0,\n            \"views\": 0,\n            \"likes\": 8,\n            \"dislikes\": 0,\n            \"comments\": 187\n        }\n    },\n    \"options\": {\n        \"comments_zero\": \"暂无评论\",\n        \"comments_one\": \"1条评论\",\n        \"comments_multiple\": \"{num}条评论\"\n    },\n    \"code\": 0\n}\n```\n### 数据提取\n\n- 需要的只是评论数 `comments`，这里使用 jQuery 的 `getJSON` 比较方便\n\n```js\n$(function() {\n    var shortName = \"moxfive\";\n    var threads = \"about/index.html\";\n\n    var jsonUrl = \"http://api.duoshuo.com/threads/counts.jsonp?short_name=\" + shortName + \"&threads=\" + threads +  \"&callback=?\";\n    $.getJSON(jsonUrl, function(result) {\n        $.each(result.response, function(i, field) {\n            var value = field.comments;\n            $(\".duoshuo-count\").text(value);\n        })\n    })\n})\n```\n\n- 获得的值会显示在匹配的区域中\n\n```html\n<span class=\"disqus-count\"></span>\n```\n\n## Disqus\n\n### 加载相关 JS\n\n- 域名中填入自己的 Disqus `shortname`，获取方式参考 [官方文档](https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-)\n\n```html\n<script id=\"dsq-count-scr\" src=\"//<shortname>.disqus.com/count.js\" async></script>\n\n<!-- e.g. -->\n<script id=\"dsq-count-scr\" src=\"//moxfive.disqus.com/count.js\" async></script>\n```\n\n### 显示评论数\n- 这里介绍两种借助特定 Class 显示评论数的方法\n\n```html\n<!-- 通过 `data-disqus-identifier` -->\n<span class=\"disqus-comment-count\" data-disqus-identifier=\"about/index.html\"></span>\n\n\n<!-- 通过 `data-disqus-url` -->\n<span class=\"disqus-comment-count\" data-disqus-url=\"http://MOxFIVE.xyz/about/index.html\"></span>\n```\n\n> - `identifier` 和 `url` 的值如果不清楚，可以自行设置，方法参考 [官方文档](https://help.disqus.com/customer/portal/articles/472098)\n> - 获取的评论数不正确，很可能是因为远程数据没更新，等等就好。\n\n### 提取纯数字\n- 上面方法显示的评论数是类似 `1 Comment` 这样的格式，这里可以把它转为纯数字格式 `1`\n- 使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可\n\n```js\nvar $disqusCount = $(\".disqus-comment-count\");\n$disqusCount.bind(\"DOMNodeInserted\", function(e) {\n  var num = $(this).text().replace(/[^0-9]/ig,\"\");\n  $(this).text(num)\n})\n```\n\n## 相关链接\n\n1. 多说官方文档: [获取文章评论、转发数](http://dev.duoshuo.com/docs/50615732a834c63c56004257)\n1. 多说官方文档: [代码显示【文章评论数】方法](http://dev.duoshuo.com/threads/5016427f77cf5fa30500000e)\n1. Disqus Help: [Adding comment count links to your home page](https://help.disqus.com/customer/portal/articles/565624-adding-comment-c)\n","slug":"duoshuo_comment","published":1,"updated":"2016-06-28T02:48:14.171Z","_id":"cipjfs5wb003g4wmceqzav7r5","comments":1,"layout":"post","photos":[],"link":"","content":"<p></p><h2 id=\"intro\">前言</h2>不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。<p></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"多说\"><a href=\"#多说\" class=\"headerlink\" title=\"多说\"></a>多说</h2><p>多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可</p>\n<h3 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h3><ul>\n<li><code>short_name</code>: 站点注册的多说二级域名，比如注册了 <a href=\"http://helloworld.duoshuo.com/\" target=\"_blank\" rel=\"external\">http://helloworld.duoshuo.com/</a>, 则对应二级域名为 helloworld;</li>\n<li><code>threads</code>: 文章的 <code>thread-key</code>, 与评论框中 data-thread-key 一致。</li>\n</ul>\n<h3 id=\"返回数据示例\"><a href=\"#返回数据示例\" class=\"headerlink\" title=\"返回数据示例\"></a>返回数据示例</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"about/index.html\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"thread_id\"</span>: <span class=\"string\">\"6205475504969401090\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"channel_key\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"thread_key\"</span>: <span class=\"string\">\"about/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"reposts\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"views\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"likes\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"dislikes\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"comments\"</span>: <span class=\"number\">187</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"comments_zero\"</span>: <span class=\"string\">\"暂无评论\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"comments_one\"</span>: <span class=\"string\">\"1条评论\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"comments_multiple\"</span>: <span class=\"string\">\"&#123;num&#125;条评论\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据提取\"><a href=\"#数据提取\" class=\"headerlink\" title=\"数据提取\"></a>数据提取</h3><ul>\n<li>需要的只是评论数 <code>comments</code>，这里使用 jQuery 的 <code>getJSON</code> 比较方便</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> shortName = <span class=\"string\">\"moxfive\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threads = <span class=\"string\">\"about/index.html\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jsonUrl = <span class=\"string\">\"http://api.duoshuo.com/threads/counts.jsonp?short_name=\"</span> + shortName + <span class=\"string\">\"&amp;threads=\"</span> + threads +  <span class=\"string\">\"&amp;callback=?\"</span>;</span><br><span class=\"line\">    $.getJSON(jsonUrl, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        $.each(result.response, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, field</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = field.comments;</span><br><span class=\"line\">            $(<span class=\"string\">\".duoshuo-count\"</span>).text(value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获得的值会显示在匹配的区域中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h2><h3 id=\"加载相关-JS\"><a href=\"#加载相关-JS\" class=\"headerlink\" title=\"加载相关 JS\"></a>加载相关 JS</h3><ul>\n<li>域名中填入自己的 Disqus <code>shortname</code>，获取方式参考 <a href=\"https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dsq-count-scr\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//&lt;shortname&gt;.disqus.com/count.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- e.g. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dsq-count-scr\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//moxfive.disqus.com/count.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"显示评论数\"><a href=\"#显示评论数\" class=\"headerlink\" title=\"显示评论数\"></a>显示评论数</h3><ul>\n<li>这里介绍两种借助特定 Class 显示评论数的方法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 `data-disqus-identifier` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-comment-count\"</span> <span class=\"attr\">data-disqus-identifier</span>=<span class=\"string\">\"about/index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 `data-disqus-url` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-comment-count\"</span> <span class=\"attr\">data-disqus-url</span>=<span class=\"string\">\"http://MOxFIVE.xyz/about/index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>identifier</code> 和 <code>url</code> 的值如果不清楚，可以自行设置，方法参考 <a href=\"https://help.disqus.com/customer/portal/articles/472098\" target=\"_blank\" rel=\"external\">官方文档</a></li>\n<li>获取的评论数不正确，很可能是因为远程数据没更新，等等就好。</li>\n</ul>\n</blockquote>\n<h3 id=\"提取纯数字\"><a href=\"#提取纯数字\" class=\"headerlink\" title=\"提取纯数字\"></a>提取纯数字</h3><ul>\n<li>上面方法显示的评论数是类似 <code>1 Comment</code> 这样的格式，这里可以把它转为纯数字格式 <code>1</code></li>\n<li>使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $disqusCount = $(<span class=\"string\">\".disqus-comment-count\"</span>);</span><br><span class=\"line\">$disqusCount.bind(<span class=\"string\">\"DOMNodeInserted\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = $(<span class=\"keyword\">this</span>).text().replace(<span class=\"regexp\">/[^0-9]/ig</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).text(num)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li>多说官方文档: <a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\" target=\"_blank\" rel=\"external\">获取文章评论、转发数</a></li>\n<li>多说官方文档: <a href=\"http://dev.duoshuo.com/threads/5016427f77cf5fa30500000e\" target=\"_blank\" rel=\"external\">代码显示【文章评论数】方法</a></li>\n<li>Disqus Help: <a href=\"https://help.disqus.com/customer/portal/articles/565624-adding-comment-c\" target=\"_blank\" rel=\"external\">Adding comment count links to your home page</a></li>\n</ol>\n","excerpt":"<p><h2 id=\"intro\">前言</h2>不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/life.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"多说\"><a href=\"#多说\" class=\"headerlink\" title=\"多说\"></a>多说</h2><p>多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可</p>\n<h3 id=\"请求参数\"><a href=\"#请求参数\" class=\"headerlink\" title=\"请求参数\"></a>请求参数</h3><ul>\n<li><code>short_name</code>: 站点注册的多说二级域名，比如注册了 <a href=\"http://helloworld.duoshuo.com/\">http://helloworld.duoshuo.com/</a>, 则对应二级域名为 helloworld;</li>\n<li><code>threads</code>: 文章的 <code>thread-key</code>, 与评论框中 data-thread-key 一致。</li>\n</ul>\n<h3 id=\"返回数据示例\"><a href=\"#返回数据示例\" class=\"headerlink\" title=\"返回数据示例\"></a>返回数据示例</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"response\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"about/index.html\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"thread_id\"</span>: <span class=\"string\">\"6205475504969401090\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"channel_key\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"thread_key\"</span>: <span class=\"string\">\"about/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"reposts\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"views\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"likes\"</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"dislikes\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"comments\"</span>: <span class=\"number\">187</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"options\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"comments_zero\"</span>: <span class=\"string\">\"暂无评论\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"comments_one\"</span>: <span class=\"string\">\"1条评论\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"comments_multiple\"</span>: <span class=\"string\">\"&#123;num&#125;条评论\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据提取\"><a href=\"#数据提取\" class=\"headerlink\" title=\"数据提取\"></a>数据提取</h3><ul>\n<li>需要的只是评论数 <code>comments</code>，这里使用 jQuery 的 <code>getJSON</code> 比较方便</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> shortName = <span class=\"string\">\"moxfive\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> threads = <span class=\"string\">\"about/index.html\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> jsonUrl = <span class=\"string\">\"http://api.duoshuo.com/threads/counts.jsonp?short_name=\"</span> + shortName + <span class=\"string\">\"&amp;threads=\"</span> + threads +  <span class=\"string\">\"&amp;callback=?\"</span>;</span><br><span class=\"line\">    $.getJSON(jsonUrl, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">        $.each(result.response, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, field</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = field.comments;</span><br><span class=\"line\">            $(<span class=\"string\">\".duoshuo-count\"</span>).text(value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获得的值会显示在匹配的区域中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-count\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Disqus\"><a href=\"#Disqus\" class=\"headerlink\" title=\"Disqus\"></a>Disqus</h2><h3 id=\"加载相关-JS\"><a href=\"#加载相关-JS\" class=\"headerlink\" title=\"加载相关 JS\"></a>加载相关 JS</h3><ul>\n<li>域名中填入自己的 Disqus <code>shortname</code>，获取方式参考 <a href=\"https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-\">官方文档</a></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dsq-count-scr\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//&lt;shortname&gt;.disqus.com/count.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- e.g. --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dsq-count-scr\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//moxfive.disqus.com/count.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"显示评论数\"><a href=\"#显示评论数\" class=\"headerlink\" title=\"显示评论数\"></a>显示评论数</h3><ul>\n<li>这里介绍两种借助特定 Class 显示评论数的方法</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 `data-disqus-identifier` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-comment-count\"</span> <span class=\"attr\">data-disqus-identifier</span>=<span class=\"string\">\"about/index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 通过 `data-disqus-url` --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"disqus-comment-count\"</span> <span class=\"attr\">data-disqus-url</span>=<span class=\"string\">\"http://MOxFIVE.xyz/about/index.html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><code>identifier</code> 和 <code>url</code> 的值如果不清楚，可以自行设置，方法参考 <a href=\"https://help.disqus.com/customer/portal/articles/472098\">官方文档</a></li>\n<li>获取的评论数不正确，很可能是因为远程数据没更新，等等就好。</li>\n</ul>\n</blockquote>\n<h3 id=\"提取纯数字\"><a href=\"#提取纯数字\" class=\"headerlink\" title=\"提取纯数字\"></a>提取纯数字</h3><ul>\n<li>上面方法显示的评论数是类似 <code>1 Comment</code> 这样的格式，这里可以把它转为纯数字格式 <code>1</code></li>\n<li>使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $disqusCount = $(<span class=\"string\">\".disqus-comment-count\"</span>);</span><br><span class=\"line\">$disqusCount.bind(<span class=\"string\">\"DOMNodeInserted\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = $(<span class=\"keyword\">this</span>).text().replace(<span class=\"regexp\">/[^0-9]/ig</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  $(<span class=\"keyword\">this</span>).text(num)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h2><ol>\n<li>多说官方文档: <a href=\"http://dev.duoshuo.com/docs/50615732a834c63c56004257\">获取文章评论、转发数</a></li>\n<li>多说官方文档: <a href=\"http://dev.duoshuo.com/threads/5016427f77cf5fa30500000e\">代码显示【文章评论数】方法</a></li>\n<li>Disqus Help: <a href=\"https://help.disqus.com/customer/portal/articles/565624-adding-comment-c\">Adding comment count links to your home page</a></li>\n</ol>"},{"author":"小莫","date":"2016-06-16T16:00:00.000Z","title":"阿里云服务器磁盘挂载","_content":"起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、基本信息\n\n参考自阿里云服务器使用心得。\n\n云服务器环境：CentOS 6.2 64位\n\n客户端环境：Mac OSX\n\n远程连接方式：运行 Terminal，输入命令 ssh username@ip\n\n## 二、硬盘分区及挂载操作步骤\n\n### 1. 查看未挂载的硬盘\n（名称为/dev/xvdb）\n`fdisk -l`\n输出\n`Disk /dev/xvdb doesn't contain a valid partition table`\n\n### 2. 创建分区\n\n`fdisk /dev/xvdb`\n\n```\n\n输入n\n\nCommand (m for help):n\n\n输入p\n\nCommand action\ne extended\np primary partition (1-4)\np\n\n输入1\n\nPartition number (1-4): 1\n\n回车\n\nFirst cylinder (1-2610, default 1):\nUsing default value 1\n\n回车\n\nLast cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610):\nUsing default value 2610\n\n输入w\n\nCommand (m for help): w\nThe partition table has been altered!\n```\n\n### 3. 格式化分区\n\n 执行命令： `mkfs.ext3 /dev/xvdb1`\n\n### 4. 建立挂载目录\n\n执行命令： `mkdir /data`  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖\n\n### 5. 挂载分区\n\n将磁盘挂载到刚建立的`data`目录中   `mount /dev/xvdb1 /data`\n\n### 6. 设置开机自动挂载\n\n`vi /etc/fstab`\n\n在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出\n\n```\n/dev/xvdb1              /data                   ext3    defaults        0 0\n```\n\n### 7. 确认是否挂载成功\n\n重启服务器: `reboot`\n查看硬盘分区: `df`\n\n\n\n反馈信息\n\n```\n/dev/xvdb1            20635700    176196  19411268   1% /data\n```\n\n搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！\n\n## 四、 原文地址\n[aliyun-linux-fdisk](http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html)\n","source":"_posts/2016-06-17.linux_disk.md","raw":"---\nauthor: 小莫\ndate: 2016-06-17\ntitle: 阿里云服务器磁盘挂载\ntags:\n- linux\ncategory: linux磁盘挂载\npermalink: linux_disk\n---\n起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！\n\n<!--more-->\n[![点击访问小莫的github](http://static.xiaomo.info/images/linux.png)](https://github.com/qq83387856)\n## 一、基本信息\n\n参考自阿里云服务器使用心得。\n\n云服务器环境：CentOS 6.2 64位\n\n客户端环境：Mac OSX\n\n远程连接方式：运行 Terminal，输入命令 ssh username@ip\n\n## 二、硬盘分区及挂载操作步骤\n\n### 1. 查看未挂载的硬盘\n（名称为/dev/xvdb）\n`fdisk -l`\n输出\n`Disk /dev/xvdb doesn't contain a valid partition table`\n\n### 2. 创建分区\n\n`fdisk /dev/xvdb`\n\n```\n\n输入n\n\nCommand (m for help):n\n\n输入p\n\nCommand action\ne extended\np primary partition (1-4)\np\n\n输入1\n\nPartition number (1-4): 1\n\n回车\n\nFirst cylinder (1-2610, default 1):\nUsing default value 1\n\n回车\n\nLast cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610):\nUsing default value 2610\n\n输入w\n\nCommand (m for help): w\nThe partition table has been altered!\n```\n\n### 3. 格式化分区\n\n 执行命令： `mkfs.ext3 /dev/xvdb1`\n\n### 4. 建立挂载目录\n\n执行命令： `mkdir /data`  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖\n\n### 5. 挂载分区\n\n将磁盘挂载到刚建立的`data`目录中   `mount /dev/xvdb1 /data`\n\n### 6. 设置开机自动挂载\n\n`vi /etc/fstab`\n\n在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出\n\n```\n/dev/xvdb1              /data                   ext3    defaults        0 0\n```\n\n### 7. 确认是否挂载成功\n\n重启服务器: `reboot`\n查看硬盘分区: `df`\n\n\n\n反馈信息\n\n```\n/dev/xvdb1            20635700    176196  19411268   1% /data\n```\n\n搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！\n\n## 四、 原文地址\n[aliyun-linux-fdisk](http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html)\n","slug":"linux_disk","published":1,"updated":"2016-06-28T02:48:00.403Z","_id":"cipjfs5wc003j4wmcasa6rbpy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、基本信息\"><a href=\"#一、基本信息\" class=\"headerlink\" title=\"一、基本信息\"></a>一、基本信息</h2><p>参考自阿里云服务器使用心得。</p>\n<p>云服务器环境：CentOS 6.2 64位</p>\n<p>客户端环境：Mac OSX</p>\n<p>远程连接方式：运行 Terminal，输入命令 ssh username@ip</p>\n<h2 id=\"二、硬盘分区及挂载操作步骤\"><a href=\"#二、硬盘分区及挂载操作步骤\" class=\"headerlink\" title=\"二、硬盘分区及挂载操作步骤\"></a>二、硬盘分区及挂载操作步骤</h2><h3 id=\"1-查看未挂载的硬盘\"><a href=\"#1-查看未挂载的硬盘\" class=\"headerlink\" title=\"1. 查看未挂载的硬盘\"></a>1. 查看未挂载的硬盘</h3><p>（名称为/dev/xvdb）<br><code>fdisk -l</code><br>输出<br><code>Disk /dev/xvdb doesn&#39;t contain a valid partition table</code></p>\n<h3 id=\"2-创建分区\"><a href=\"#2-创建分区\" class=\"headerlink\" title=\"2. 创建分区\"></a>2. 创建分区</h3><p><code>fdisk /dev/xvdb</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入n</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for <span class=\"keyword\">help</span>):n</span><br><span class=\"line\"></span><br><span class=\"line\">输入p</span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"keyword\">action</span></span><br><span class=\"line\">e <span class=\"keyword\">extended</span></span><br><span class=\"line\">p primary <span class=\"keyword\">partition</span> (<span class=\"number\">1</span><span class=\"number\">-4</span>)</span><br><span class=\"line\">p</span><br><span class=\"line\"></span><br><span class=\"line\">输入<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Partition</span> <span class=\"built_in\">number</span> (<span class=\"number\">1</span><span class=\"number\">-4</span>): <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">回车</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">First</span> cylinder (<span class=\"number\">1</span><span class=\"number\">-2610</span>, <span class=\"keyword\">default</span> <span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"keyword\">default</span> <span class=\"keyword\">value</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">回车</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Last</span> cylinder, +cylinders <span class=\"keyword\">or</span> +<span class=\"keyword\">size</span>&#123;K,M,G&#125; (<span class=\"number\">1</span><span class=\"number\">-2610</span>, <span class=\"keyword\">default</span> <span class=\"number\">2610</span>):</span><br><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"keyword\">default</span> <span class=\"keyword\">value</span> <span class=\"number\">2610</span></span><br><span class=\"line\"></span><br><span class=\"line\">输入w</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"keyword\">help</span>): w</span><br><span class=\"line\">The <span class=\"keyword\">partition</span> <span class=\"keyword\">table</span> has been altered!</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化分区\"><a href=\"#3-格式化分区\" class=\"headerlink\" title=\"3. 格式化分区\"></a>3. 格式化分区</h3><p> 执行命令： <code>mkfs.ext3 /dev/xvdb1</code></p>\n<h3 id=\"4-建立挂载目录\"><a href=\"#4-建立挂载目录\" class=\"headerlink\" title=\"4. 建立挂载目录\"></a>4. 建立挂载目录</h3><p>执行命令： <code>mkdir /data</code>  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖</p>\n<h3 id=\"5-挂载分区\"><a href=\"#5-挂载分区\" class=\"headerlink\" title=\"5. 挂载分区\"></a>5. 挂载分区</h3><p>将磁盘挂载到刚建立的<code>data</code>目录中   <code>mount /dev/xvdb1 /data</code></p>\n<h3 id=\"6-设置开机自动挂载\"><a href=\"#6-设置开机自动挂载\" class=\"headerlink\" title=\"6. 设置开机自动挂载\"></a>6. 设置开机自动挂载</h3><p><code>vi /etc/fstab</code></p>\n<p>在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/xvdb1              /<span class=\"class\"><span class=\"keyword\">data</span>                   ext3    defaults        0 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-确认是否挂载成功\"><a href=\"#7-确认是否挂载成功\" class=\"headerlink\" title=\"7. 确认是否挂载成功\"></a>7. 确认是否挂载成功</h3><p>重启服务器: <code>reboot</code><br>查看硬盘分区: <code>df</code></p>\n<p>反馈信息</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/xvdb1            <span class=\"number\">20635700</span>    <span class=\"number\">176196</span>  <span class=\"number\">19411268</span>   <span class=\"number\">1</span>% /data</span><br></pre></td></tr></table></figure>\n<p>搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！</p>\n<h2 id=\"四、-原文地址\"><a href=\"#四、-原文地址\" class=\"headerlink\" title=\"四、 原文地址\"></a>四、 原文地址</h2><p><a href=\"http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html\" target=\"_blank\" rel=\"external\">aliyun-linux-fdisk</a></p>\n","excerpt":"<p>起因在于前段时间在阿里云上购买了一台ECS的云服务器，奈何硬盘20G不够用，所以又买了一块硬块。so,问题来了,磁盘挂载哪家强？最终还要靠自己！！</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/linux.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、基本信息\"><a href=\"#一、基本信息\" class=\"headerlink\" title=\"一、基本信息\"></a>一、基本信息</h2><p>参考自阿里云服务器使用心得。</p>\n<p>云服务器环境：CentOS 6.2 64位</p>\n<p>客户端环境：Mac OSX</p>\n<p>远程连接方式：运行 Terminal，输入命令 ssh username@ip</p>\n<h2 id=\"二、硬盘分区及挂载操作步骤\"><a href=\"#二、硬盘分区及挂载操作步骤\" class=\"headerlink\" title=\"二、硬盘分区及挂载操作步骤\"></a>二、硬盘分区及挂载操作步骤</h2><h3 id=\"1-查看未挂载的硬盘\"><a href=\"#1-查看未挂载的硬盘\" class=\"headerlink\" title=\"1. 查看未挂载的硬盘\"></a>1. 查看未挂载的硬盘</h3><p>（名称为/dev/xvdb）<br><code>fdisk -l</code><br>输出<br><code>Disk /dev/xvdb doesn&#39;t contain a valid partition table</code></p>\n<h3 id=\"2-创建分区\"><a href=\"#2-创建分区\" class=\"headerlink\" title=\"2. 创建分区\"></a>2. 创建分区</h3><p><code>fdisk /dev/xvdb</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">输入n</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m for <span class=\"keyword\">help</span>):n</span><br><span class=\"line\"></span><br><span class=\"line\">输入p</span><br><span class=\"line\"></span><br><span class=\"line\">Command <span class=\"keyword\">action</span></span><br><span class=\"line\">e <span class=\"keyword\">extended</span></span><br><span class=\"line\">p primary <span class=\"keyword\">partition</span> (<span class=\"number\">1</span><span class=\"number\">-4</span>)</span><br><span class=\"line\">p</span><br><span class=\"line\"></span><br><span class=\"line\">输入<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Partition</span> <span class=\"built_in\">number</span> (<span class=\"number\">1</span><span class=\"number\">-4</span>): <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">回车</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">First</span> cylinder (<span class=\"number\">1</span><span class=\"number\">-2610</span>, <span class=\"keyword\">default</span> <span class=\"number\">1</span>):</span><br><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"keyword\">default</span> <span class=\"keyword\">value</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">回车</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">Last</span> cylinder, +cylinders <span class=\"keyword\">or</span> +<span class=\"keyword\">size</span>&#123;K,M,G&#125; (<span class=\"number\">1</span><span class=\"number\">-2610</span>, <span class=\"keyword\">default</span> <span class=\"number\">2610</span>):</span><br><span class=\"line\"><span class=\"keyword\">Using</span> <span class=\"keyword\">default</span> <span class=\"keyword\">value</span> <span class=\"number\">2610</span></span><br><span class=\"line\"></span><br><span class=\"line\">输入w</span><br><span class=\"line\"></span><br><span class=\"line\">Command (m <span class=\"keyword\">for</span> <span class=\"keyword\">help</span>): w</span><br><span class=\"line\">The <span class=\"keyword\">partition</span> <span class=\"keyword\">table</span> has been altered!</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-格式化分区\"><a href=\"#3-格式化分区\" class=\"headerlink\" title=\"3. 格式化分区\"></a>3. 格式化分区</h3><p> 执行命令： <code>mkfs.ext3 /dev/xvdb1</code></p>\n<h3 id=\"4-建立挂载目录\"><a href=\"#4-建立挂载目录\" class=\"headerlink\" title=\"4. 建立挂载目录\"></a>4. 建立挂载目录</h3><p>执行命令： <code>mkdir /data</code>  注意名字不要和原有磁盘上的重复  不然原有磁盘上的内容会被覆盖</p>\n<h3 id=\"5-挂载分区\"><a href=\"#5-挂载分区\" class=\"headerlink\" title=\"5. 挂载分区\"></a>5. 挂载分区</h3><p>将磁盘挂载到刚建立的<code>data</code>目录中   <code>mount /dev/xvdb1 /data</code></p>\n<h3 id=\"6-设置开机自动挂载\"><a href=\"#6-设置开机自动挂载\" class=\"headerlink\" title=\"6. 设置开机自动挂载\"></a>6. 设置开机自动挂载</h3><p><code>vi /etc/fstab</code></p>\n<p>在vi中输入i进入INERT模式，将光标移至文件结尾处并回车，将下面的内容复制/粘贴，然后按Esc键，输入:x保存并退出</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/xvdb1              /<span class=\"class\"><span class=\"keyword\">data</span>                   ext3    defaults        0 0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-确认是否挂载成功\"><a href=\"#7-确认是否挂载成功\" class=\"headerlink\" title=\"7. 确认是否挂载成功\"></a>7. 确认是否挂载成功</h3><p>重启服务器: <code>reboot</code><br>查看硬盘分区: <code>df</code></p>\n<p>反馈信息</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/xvdb1            <span class=\"number\">20635700</span>    <span class=\"number\">176196</span>  <span class=\"number\">19411268</span>   <span class=\"number\">1</span>% /data</span><br></pre></td></tr></table></figure>\n<p>搞定！Mac 下通过 Terminal 远程操作 Linux 的感觉不错！</p>\n<h2 id=\"四、-原文地址\"><a href=\"#四、-原文地址\" class=\"headerlink\" title=\"四、 原文地址\"></a>四、 原文地址</h2><p><a href=\"http://www.cnblogs.com/dudu/archive/2012/12/07/aliyun-linux-fdisk.html\">aliyun-linux-fdisk</a></p>"},{"title":"几个国内专用的公共 DNS","date":"2016-06-17T12:57:08.000Z","_content":"\n　　之前 [有个网站](http://www.bootcdn.cn/) 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/dns.png)](https://github.com/qq83387856)\n## DNS 简介\nDNS 全称 `Domain Name System`，中文译为 `域名系统`，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。\n\n## 114DNS\n    114.114.114.114\n    114.114.115.115\n**官　网**：http://www.114dns.com/\n**关键词**：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒\n\n## 阿里公共DNS\n    223.5.5.5\n    223.6.6.6\n**官　网**：http://www.alidns.com/\n**关键词**：快速，稳定，智能\n\n## 腾讯 Public DNS +\n    119.29.29.29\n**官　网**：https://www.dnspod.cn/Products/Public.DNS\n**关键词**：快速，准确，稳定\n\n## 百度公共DNS\n    180.76.76.76\n**官　网**：http://dudns.baidu.com/intro/publicdns/\n**关键词**：云防护，无劫持，更精确\n\n## oneDNS\n    南方首选：112.124.47.27\n    北方首选：114.215.126.16\n**官　网**：http://www.onedns.net/\n**关键词**：安全，快速，恶意网站拦截，广告过滤，上网加速\n\n## CNNIC SDNS\n    1.2.4.8\n    210.2.4.8\n**官　网：**http://public.sdns.cn/\n**关键词：**权威，安全，智能，高速\n\n\n## DNS 选用\n\n### 在线查询\n- 可以通过 [在线小工具](http://www.webkaka.com/dns/) 测试一下 DNS 的解析速度，结果可以作为参考\n![DNS Tool](http://static.xiaomo.info/images/dns-tool.png)\n\n### 本地优选\n- 下载 [魔方DNS助手](http://www.crsky.com/soft/88043.html)，可以方便地检测，选择和修改 DNS\n\n![DNS Helper](http://static.xiaomo.info/images/dnshelper.png)\n\n> 如果更换 DNS 后网络异常，可以尝试 [刷新本地的DNS缓存](http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html)\n","source":"_posts/2016-06-17.public_dns.md","raw":"---\ntitle: 几个国内专用的公共 DNS\ndate: 2016-06-17 20:57:08\ncategories: 触类旁通\ntags:\n- 开发工具\npermalink: public_dns\n---\n\n　　之前 [有个网站](http://www.bootcdn.cn/) 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。\n\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/dns.png)](https://github.com/qq83387856)\n## DNS 简介\nDNS 全称 `Domain Name System`，中文译为 `域名系统`，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。\n\n## 114DNS\n    114.114.114.114\n    114.114.115.115\n**官　网**：http://www.114dns.com/\n**关键词**：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒\n\n## 阿里公共DNS\n    223.5.5.5\n    223.6.6.6\n**官　网**：http://www.alidns.com/\n**关键词**：快速，稳定，智能\n\n## 腾讯 Public DNS +\n    119.29.29.29\n**官　网**：https://www.dnspod.cn/Products/Public.DNS\n**关键词**：快速，准确，稳定\n\n## 百度公共DNS\n    180.76.76.76\n**官　网**：http://dudns.baidu.com/intro/publicdns/\n**关键词**：云防护，无劫持，更精确\n\n## oneDNS\n    南方首选：112.124.47.27\n    北方首选：114.215.126.16\n**官　网**：http://www.onedns.net/\n**关键词**：安全，快速，恶意网站拦截，广告过滤，上网加速\n\n## CNNIC SDNS\n    1.2.4.8\n    210.2.4.8\n**官　网：**http://public.sdns.cn/\n**关键词：**权威，安全，智能，高速\n\n\n## DNS 选用\n\n### 在线查询\n- 可以通过 [在线小工具](http://www.webkaka.com/dns/) 测试一下 DNS 的解析速度，结果可以作为参考\n![DNS Tool](http://static.xiaomo.info/images/dns-tool.png)\n\n### 本地优选\n- 下载 [魔方DNS助手](http://www.crsky.com/soft/88043.html)，可以方便地检测，选择和修改 DNS\n\n![DNS Helper](http://static.xiaomo.info/images/dnshelper.png)\n\n> 如果更换 DNS 后网络异常，可以尝试 [刷新本地的DNS缓存](http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html)\n","slug":"public_dns","published":1,"updated":"2016-06-28T02:47:51.562Z","_id":"cipjfs5xq006j4wmc2js4v6t0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>　　之前 <a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"external\">有个网站</a> 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/dns.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"DNS-简介\"><a href=\"#DNS-简介\" class=\"headerlink\" title=\"DNS 简介\"></a>DNS 简介</h2><p>DNS 全称 <code>Domain Name System</code>，中文译为 <code>域名系统</code>，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。</p>\n<h2 id=\"114DNS\"><a href=\"#114DNS\" class=\"headerlink\" title=\"114DNS\"></a>114DNS</h2><pre><code>114.114.114.114\n114.114.115.115\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.114dns.com/\" target=\"_blank\" rel=\"external\">http://www.114dns.com/</a><br><strong>关键词</strong>：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒</p>\n<h2 id=\"阿里公共DNS\"><a href=\"#阿里公共DNS\" class=\"headerlink\" title=\"阿里公共DNS\"></a>阿里公共DNS</h2><pre><code>223.5.5.5\n223.6.6.6\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.alidns.com/\" target=\"_blank\" rel=\"external\">http://www.alidns.com/</a><br><strong>关键词</strong>：快速，稳定，智能</p>\n<h2 id=\"腾讯-Public-DNS\"><a href=\"#腾讯-Public-DNS\" class=\"headerlink\" title=\"腾讯 Public DNS +\"></a>腾讯 Public DNS +</h2><pre><code>119.29.29.29\n</code></pre><p><strong>官　网</strong>：<a href=\"https://www.dnspod.cn/Products/Public.DNS\" target=\"_blank\" rel=\"external\">https://www.dnspod.cn/Products/Public.DNS</a><br><strong>关键词</strong>：快速，准确，稳定</p>\n<h2 id=\"百度公共DNS\"><a href=\"#百度公共DNS\" class=\"headerlink\" title=\"百度公共DNS\"></a>百度公共DNS</h2><pre><code>180.76.76.76\n</code></pre><p><strong>官　网</strong>：<a href=\"http://dudns.baidu.com/intro/publicdns/\" target=\"_blank\" rel=\"external\">http://dudns.baidu.com/intro/publicdns/</a><br><strong>关键词</strong>：云防护，无劫持，更精确</p>\n<h2 id=\"oneDNS\"><a href=\"#oneDNS\" class=\"headerlink\" title=\"oneDNS\"></a>oneDNS</h2><pre><code>南方首选：112.124.47.27\n北方首选：114.215.126.16\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.onedns.net/\" target=\"_blank\" rel=\"external\">http://www.onedns.net/</a><br><strong>关键词</strong>：安全，快速，恶意网站拦截，广告过滤，上网加速</p>\n<h2 id=\"CNNIC-SDNS\"><a href=\"#CNNIC-SDNS\" class=\"headerlink\" title=\"CNNIC SDNS\"></a>CNNIC SDNS</h2><pre><code>1.2.4.8\n210.2.4.8\n</code></pre><p><strong>官　网：</strong><a href=\"http://public.sdns.cn/\" target=\"_blank\" rel=\"external\">http://public.sdns.cn/</a><br><strong>关键词：</strong>权威，安全，智能，高速</p>\n<h2 id=\"DNS-选用\"><a href=\"#DNS-选用\" class=\"headerlink\" title=\"DNS 选用\"></a>DNS 选用</h2><h3 id=\"在线查询\"><a href=\"#在线查询\" class=\"headerlink\" title=\"在线查询\"></a>在线查询</h3><ul>\n<li>可以通过 <a href=\"http://www.webkaka.com/dns/\" target=\"_blank\" rel=\"external\">在线小工具</a> 测试一下 DNS 的解析速度，结果可以作为参考<br><img src=\"http://static.xiaomo.info/images/dns-tool.png\" alt=\"DNS Tool\"></li>\n</ul>\n<h3 id=\"本地优选\"><a href=\"#本地优选\" class=\"headerlink\" title=\"本地优选\"></a>本地优选</h3><ul>\n<li>下载 <a href=\"http://www.crsky.com/soft/88043.html\" target=\"_blank\" rel=\"external\">魔方DNS助手</a>，可以方便地检测，选择和修改 DNS</li>\n</ul>\n<p><img src=\"http://static.xiaomo.info/images/dnshelper.png\" alt=\"DNS Helper\"></p>\n<blockquote>\n<p>如果更换 DNS 后网络异常，可以尝试 <a href=\"http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html\" target=\"_blank\" rel=\"external\">刷新本地的DNS缓存</a></p>\n</blockquote>\n","excerpt":"<p>　　之前 <a href=\"http://www.bootcdn.cn/\">有个网站</a> 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。</p>","more":"<p><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/dns.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"DNS-简介\"><a href=\"#DNS-简介\" class=\"headerlink\" title=\"DNS 简介\"></a>DNS 简介</h2><p>DNS 全称 <code>Domain Name System</code>，中文译为 <code>域名系统</code>，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。</p>\n<h2 id=\"114DNS\"><a href=\"#114DNS\" class=\"headerlink\" title=\"114DNS\"></a>114DNS</h2><pre><code>114.114.114.114\n114.114.115.115\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.114dns.com/\">http://www.114dns.com/</a><br><strong>关键词</strong>：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒</p>\n<h2 id=\"阿里公共DNS\"><a href=\"#阿里公共DNS\" class=\"headerlink\" title=\"阿里公共DNS\"></a>阿里公共DNS</h2><pre><code>223.5.5.5\n223.6.6.6\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.alidns.com/\">http://www.alidns.com/</a><br><strong>关键词</strong>：快速，稳定，智能</p>\n<h2 id=\"腾讯-Public-DNS\"><a href=\"#腾讯-Public-DNS\" class=\"headerlink\" title=\"腾讯 Public DNS +\"></a>腾讯 Public DNS +</h2><pre><code>119.29.29.29\n</code></pre><p><strong>官　网</strong>：<a href=\"https://www.dnspod.cn/Products/Public.DNS\">https://www.dnspod.cn/Products/Public.DNS</a><br><strong>关键词</strong>：快速，准确，稳定</p>\n<h2 id=\"百度公共DNS\"><a href=\"#百度公共DNS\" class=\"headerlink\" title=\"百度公共DNS\"></a>百度公共DNS</h2><pre><code>180.76.76.76\n</code></pre><p><strong>官　网</strong>：<a href=\"http://dudns.baidu.com/intro/publicdns/\">http://dudns.baidu.com/intro/publicdns/</a><br><strong>关键词</strong>：云防护，无劫持，更精确</p>\n<h2 id=\"oneDNS\"><a href=\"#oneDNS\" class=\"headerlink\" title=\"oneDNS\"></a>oneDNS</h2><pre><code>南方首选：112.124.47.27\n北方首选：114.215.126.16\n</code></pre><p><strong>官　网</strong>：<a href=\"http://www.onedns.net/\">http://www.onedns.net/</a><br><strong>关键词</strong>：安全，快速，恶意网站拦截，广告过滤，上网加速</p>\n<h2 id=\"CNNIC-SDNS\"><a href=\"#CNNIC-SDNS\" class=\"headerlink\" title=\"CNNIC SDNS\"></a>CNNIC SDNS</h2><pre><code>1.2.4.8\n210.2.4.8\n</code></pre><p><strong>官　网：</strong><a href=\"http://public.sdns.cn/\">http://public.sdns.cn/</a><br><strong>关键词：</strong>权威，安全，智能，高速</p>\n<h2 id=\"DNS-选用\"><a href=\"#DNS-选用\" class=\"headerlink\" title=\"DNS 选用\"></a>DNS 选用</h2><h3 id=\"在线查询\"><a href=\"#在线查询\" class=\"headerlink\" title=\"在线查询\"></a>在线查询</h3><ul>\n<li>可以通过 <a href=\"http://www.webkaka.com/dns/\">在线小工具</a> 测试一下 DNS 的解析速度，结果可以作为参考<br><img src=\"http://static.xiaomo.info/images/dns-tool.png\" alt=\"DNS Tool\"></li>\n</ul>\n<h3 id=\"本地优选\"><a href=\"#本地优选\" class=\"headerlink\" title=\"本地优选\"></a>本地优选</h3><ul>\n<li>下载 <a href=\"http://www.crsky.com/soft/88043.html\">魔方DNS助手</a>，可以方便地检测，选择和修改 DNS</li>\n</ul>\n<p><img src=\"http://static.xiaomo.info/images/dnshelper.png\" alt=\"DNS Helper\"></p>\n<blockquote>\n<p>如果更换 DNS 后网络异常，可以尝试 <a href=\"http://jingyan.baidu.com/article/6d704a13fb6e1828db51ca3a.html\">刷新本地的DNS缓存</a></p>\n</blockquote>"},{"title":"react学习笔记之环境搭建","date":"2016-06-21T08:57:08.000Z","_content":"不知道为什么，就是突然想学一学react。先进的思想，前沿的技术，漂亮的组件。它的魔力就在于能让我一眼就爱上它！源码: [react-detail](https://github.com/nodejs-study/node-koa/tree/master/web/client)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/react.png)](https://github.com/qq83387856)\n## 一、核心依赖\n\n### 1. [react](https://npm.taobao.org/package/react)\n### 2. [react-dom](https://npm.taobao.org/package/react-dom)\n### 3. [react-redux](https://npm.taobao.org/package/react-redux)\n### 4. [react-router](https://npm.taobao.org/package/react-router)\n### 5. [redux](https://npm.taobao.org/package/redux)\n### 6. [react-router-redux](https://npm.taobao.org/package/react-router-redux)\n### 7. [redux-thunk](https://npm.taobao.org/package/redux-thunk)\n### 8. [isomorphic-fetch](https://npm.taobao.org/package/isomorphic-fetch)\n### 9. [antd](https://npm.taobao.org/package/antd)\n### 10.[bootstrap](https://npm.taobao.org/package/bootstrap)\n\n## 二、babel相关\n### 1. 命令编译器\n\n[babel-cli](https://npm.taobao.org/package/babel-cli)\n\n使用 `babel script.js`   一般全局安装 `npm install -g babel-cli`\n\n### 2. babel的核心库\n[babel-core](https://npm.taobao.org/package/babel-core)\n\n### 3. 解析器\n[babel-preset-es2015](https://npm.taobao.org/package/babel-preset-es2015) 和[babel-preset-react](https://npm.taobao.org/package/babel-react)\n\n使用 在项目根目录新建文件`.babelrc`加上以下代码，可以用babel将es2015和react转成浏览器能够识别的代码\n\n```\n  {\n    \"presets\": [\"es2015\",\"react\"]\n  }\n```\n\n### 4. es6的stage0转码器\n\n[babel-preset-stage-0](https://npm.taobao.org/package/babel-preset-stage-0)\n\n使用 在项目根目录`.babelrc`加上以下代码，可以转码最新的api\n\n```\n{\n  \"presets\": [\"stage-0\"]\n}\n```\n\n### 5. 转码器\n\n [babel-loader](https://npm.taobao.org/package/babel-loader)\n\n`npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev`\n\n### 6 babel插件\n[babel-runtime](https://npm.taobao.org/package/babel-runtime) [babel-plugin-transform-runtime](https://npm.taobao.org/package/babel-plugin-transform-runtime)\n\n使用 在项目根目录`.babelrc`加上以下代码，可以转码最新的api\n\n```\n{\n  plugins: [\"transform-runtime\"]\n}\n```\n\n### 7. es6转码垫片\n[babel-polyfill](https://npm.taobao.org/package/babel-polyfill)\n\n使用： 在入口文件引入 `import 'babel/polyfill';`\n作用：\nbabel-polyfill Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如`Iterator`、`Generator`、`Set`、`Maps`、`Proxy`、`Reflect`、`Symbol`、`Promise`等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。然后，在脚本头部，加入如下一行代码。`import 'babel-polyfill' `;Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。\n\n### 8. react代码优化插件\n\n[babel-preset-react-optimize](https://github.com/thejameskyle/babel-react-optimize)\n\n1.下载  `npm install --save-dev babel-preset-react-optimize`\n\n2.使用 .babelrc\n\n```\n{\n  \"presets\": [\"es2015\", \"react\"],\n  \"env\": {\n    \"production\": {\n      \"presets\": [\"es2015\", \"react\", \"react-optimize\"]\n    }\n  }\n}\n```\n\n3.具体表现\n转换常量元素  [transform-react-constant-elements](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-constant-elements)\n转换内联元素  [transform-react-inline-elements](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-inline-elements)\n移除属性类型  [transform-react-remove-prop-types](https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types)\n将类转成方法  [transform-react-pure-class-to-function](https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function)\n\n### 9. babel注册机\n\n[babel-register](https://github.com/aleclarson/babel-register)\n\n使用 `import 'babel-register'`\n\n作用： 能够将模块化引入的es和react代码交给babel进行转换\n\n## 三、webpack\n### 1. 依赖\n\n- webpack\n- webpack-dev-server\n- webpack-dev-middleware\n- webpack-hot-middleware\n- extract-text-webpack-plugin\n- html-webpack-plugin\n- copy-webpack-plugin\n\n### 2. 配置\n\n## 四、loaders\n\n### 1. html\n- raw-loader\n### 2. css\n- node-sass\n- style-loader\n- css-loader\n- less-loader\n- sass-loader\n- postcss-loader\n### 3. 图片、字体\n- file-loader\n- url-loader\n- imorts-loader\n### 4. json\n- json-loader\n\n## 五、其他\n- normalize\n- cssnano\n- history\n- ip\n- yargs\n- cheerio\n- better-npm-run\n- fs-extra\n- redbox-react\n- autoprefixer\n- nodemon\n\n## 六、后台相关\n\n- debug\n- koa\n- koa-connect-history-api-fallback\n- koa-convert\n- koa-proxy\n- koa-static\n- mongoose\n- moment\n","source":"_posts/2016-06-20.react_environment.md","raw":"---\ntitle: react学习笔记之环境搭建\ndate: 2016-06-21 16:57:08\ncategories: 前端框架\ntags:\n- reactjs\n- javascript\n- es6\npermalink: react_environment\n---\n不知道为什么，就是突然想学一学react。先进的思想，前沿的技术，漂亮的组件。它的魔力就在于能让我一眼就爱上它！源码: [react-detail](https://github.com/nodejs-study/node-koa/tree/master/web/client)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/react.png)](https://github.com/qq83387856)\n## 一、核心依赖\n\n### 1. [react](https://npm.taobao.org/package/react)\n### 2. [react-dom](https://npm.taobao.org/package/react-dom)\n### 3. [react-redux](https://npm.taobao.org/package/react-redux)\n### 4. [react-router](https://npm.taobao.org/package/react-router)\n### 5. [redux](https://npm.taobao.org/package/redux)\n### 6. [react-router-redux](https://npm.taobao.org/package/react-router-redux)\n### 7. [redux-thunk](https://npm.taobao.org/package/redux-thunk)\n### 8. [isomorphic-fetch](https://npm.taobao.org/package/isomorphic-fetch)\n### 9. [antd](https://npm.taobao.org/package/antd)\n### 10.[bootstrap](https://npm.taobao.org/package/bootstrap)\n\n## 二、babel相关\n### 1. 命令编译器\n\n[babel-cli](https://npm.taobao.org/package/babel-cli)\n\n使用 `babel script.js`   一般全局安装 `npm install -g babel-cli`\n\n### 2. babel的核心库\n[babel-core](https://npm.taobao.org/package/babel-core)\n\n### 3. 解析器\n[babel-preset-es2015](https://npm.taobao.org/package/babel-preset-es2015) 和[babel-preset-react](https://npm.taobao.org/package/babel-react)\n\n使用 在项目根目录新建文件`.babelrc`加上以下代码，可以用babel将es2015和react转成浏览器能够识别的代码\n\n```\n  {\n    \"presets\": [\"es2015\",\"react\"]\n  }\n```\n\n### 4. es6的stage0转码器\n\n[babel-preset-stage-0](https://npm.taobao.org/package/babel-preset-stage-0)\n\n使用 在项目根目录`.babelrc`加上以下代码，可以转码最新的api\n\n```\n{\n  \"presets\": [\"stage-0\"]\n}\n```\n\n### 5. 转码器\n\n [babel-loader](https://npm.taobao.org/package/babel-loader)\n\n`npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev`\n\n### 6 babel插件\n[babel-runtime](https://npm.taobao.org/package/babel-runtime) [babel-plugin-transform-runtime](https://npm.taobao.org/package/babel-plugin-transform-runtime)\n\n使用 在项目根目录`.babelrc`加上以下代码，可以转码最新的api\n\n```\n{\n  plugins: [\"transform-runtime\"]\n}\n```\n\n### 7. es6转码垫片\n[babel-polyfill](https://npm.taobao.org/package/babel-polyfill)\n\n使用： 在入口文件引入 `import 'babel/polyfill';`\n作用：\nbabel-polyfill Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如`Iterator`、`Generator`、`Set`、`Maps`、`Proxy`、`Reflect`、`Symbol`、`Promise`等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。然后，在脚本头部，加入如下一行代码。`import 'babel-polyfill' `;Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。\n\n### 8. react代码优化插件\n\n[babel-preset-react-optimize](https://github.com/thejameskyle/babel-react-optimize)\n\n1.下载  `npm install --save-dev babel-preset-react-optimize`\n\n2.使用 .babelrc\n\n```\n{\n  \"presets\": [\"es2015\", \"react\"],\n  \"env\": {\n    \"production\": {\n      \"presets\": [\"es2015\", \"react\", \"react-optimize\"]\n    }\n  }\n}\n```\n\n3.具体表现\n转换常量元素  [transform-react-constant-elements](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-constant-elements)\n转换内联元素  [transform-react-inline-elements](https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-inline-elements)\n移除属性类型  [transform-react-remove-prop-types](https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types)\n将类转成方法  [transform-react-pure-class-to-function](https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function)\n\n### 9. babel注册机\n\n[babel-register](https://github.com/aleclarson/babel-register)\n\n使用 `import 'babel-register'`\n\n作用： 能够将模块化引入的es和react代码交给babel进行转换\n\n## 三、webpack\n### 1. 依赖\n\n- webpack\n- webpack-dev-server\n- webpack-dev-middleware\n- webpack-hot-middleware\n- extract-text-webpack-plugin\n- html-webpack-plugin\n- copy-webpack-plugin\n\n### 2. 配置\n\n## 四、loaders\n\n### 1. html\n- raw-loader\n### 2. css\n- node-sass\n- style-loader\n- css-loader\n- less-loader\n- sass-loader\n- postcss-loader\n### 3. 图片、字体\n- file-loader\n- url-loader\n- imorts-loader\n### 4. json\n- json-loader\n\n## 五、其他\n- normalize\n- cssnano\n- history\n- ip\n- yargs\n- cheerio\n- better-npm-run\n- fs-extra\n- redbox-react\n- autoprefixer\n- nodemon\n\n## 六、后台相关\n\n- debug\n- koa\n- koa-connect-history-api-fallback\n- koa-convert\n- koa-proxy\n- koa-static\n- mongoose\n- moment\n","slug":"react_environment","published":1,"updated":"2016-06-28T02:47:04.210Z","_id":"cipnrw09q000034mc38o46fue","comments":1,"layout":"post","photos":[],"link":"","content":"<p>不知道为什么，就是突然想学一学react。先进的思想，前沿的技术，漂亮的组件。它的魔力就在于能让我一眼就爱上它！源码: <a href=\"https://github.com/nodejs-study/node-koa/tree/master/web/client\" target=\"_blank\" rel=\"external\">react-detail</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/react.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、核心依赖\"><a href=\"#一、核心依赖\" class=\"headerlink\" title=\"一、核心依赖\"></a>一、核心依赖</h2><h3 id=\"1-react\"><a href=\"#1-react\" class=\"headerlink\" title=\"1. react\"></a>1. <a href=\"https://npm.taobao.org/package/react\" target=\"_blank\" rel=\"external\">react</a></h3><h3 id=\"2-react-dom\"><a href=\"#2-react-dom\" class=\"headerlink\" title=\"2. react-dom\"></a>2. <a href=\"https://npm.taobao.org/package/react-dom\" target=\"_blank\" rel=\"external\">react-dom</a></h3><h3 id=\"3-react-redux\"><a href=\"#3-react-redux\" class=\"headerlink\" title=\"3. react-redux\"></a>3. <a href=\"https://npm.taobao.org/package/react-redux\" target=\"_blank\" rel=\"external\">react-redux</a></h3><h3 id=\"4-react-router\"><a href=\"#4-react-router\" class=\"headerlink\" title=\"4. react-router\"></a>4. <a href=\"https://npm.taobao.org/package/react-router\" target=\"_blank\" rel=\"external\">react-router</a></h3><h3 id=\"5-redux\"><a href=\"#5-redux\" class=\"headerlink\" title=\"5. redux\"></a>5. <a href=\"https://npm.taobao.org/package/redux\" target=\"_blank\" rel=\"external\">redux</a></h3><h3 id=\"6-react-router-redux\"><a href=\"#6-react-router-redux\" class=\"headerlink\" title=\"6. react-router-redux\"></a>6. <a href=\"https://npm.taobao.org/package/react-router-redux\" target=\"_blank\" rel=\"external\">react-router-redux</a></h3><h3 id=\"7-redux-thunk\"><a href=\"#7-redux-thunk\" class=\"headerlink\" title=\"7. redux-thunk\"></a>7. <a href=\"https://npm.taobao.org/package/redux-thunk\" target=\"_blank\" rel=\"external\">redux-thunk</a></h3><h3 id=\"8-isomorphic-fetch\"><a href=\"#8-isomorphic-fetch\" class=\"headerlink\" title=\"8. isomorphic-fetch\"></a>8. <a href=\"https://npm.taobao.org/package/isomorphic-fetch\" target=\"_blank\" rel=\"external\">isomorphic-fetch</a></h3><h3 id=\"9-antd\"><a href=\"#9-antd\" class=\"headerlink\" title=\"9. antd\"></a>9. <a href=\"https://npm.taobao.org/package/antd\" target=\"_blank\" rel=\"external\">antd</a></h3><h3 id=\"10-bootstrap\"><a href=\"#10-bootstrap\" class=\"headerlink\" title=\"10.bootstrap\"></a>10.<a href=\"https://npm.taobao.org/package/bootstrap\" target=\"_blank\" rel=\"external\">bootstrap</a></h3><h2 id=\"二、babel相关\"><a href=\"#二、babel相关\" class=\"headerlink\" title=\"二、babel相关\"></a>二、babel相关</h2><h3 id=\"1-命令编译器\"><a href=\"#1-命令编译器\" class=\"headerlink\" title=\"1. 命令编译器\"></a>1. 命令编译器</h3><p><a href=\"https://npm.taobao.org/package/babel-cli\" target=\"_blank\" rel=\"external\">babel-cli</a></p>\n<p>使用 <code>babel script.js</code>   一般全局安装 <code>npm install -g babel-cli</code></p>\n<h3 id=\"2-babel的核心库\"><a href=\"#2-babel的核心库\" class=\"headerlink\" title=\"2. babel的核心库\"></a>2. babel的核心库</h3><p><a href=\"https://npm.taobao.org/package/babel-core\" target=\"_blank\" rel=\"external\">babel-core</a></p>\n<h3 id=\"3-解析器\"><a href=\"#3-解析器\" class=\"headerlink\" title=\"3. 解析器\"></a>3. 解析器</h3><p><a href=\"https://npm.taobao.org/package/babel-preset-es2015\" target=\"_blank\" rel=\"external\">babel-preset-es2015</a> 和<a href=\"https://npm.taobao.org/package/babel-react\" target=\"_blank\" rel=\"external\">babel-preset-react</a></p>\n<p>使用 在项目根目录新建文件<code>.babelrc</code>加上以下代码，可以用babel将es2015和react转成浏览器能够识别的代码</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>,<span class=\"string\">\"react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-es6的stage0转码器\"><a href=\"#4-es6的stage0转码器\" class=\"headerlink\" title=\"4. es6的stage0转码器\"></a>4. es6的stage0转码器</h3><p><a href=\"https://npm.taobao.org/package/babel-preset-stage-0\" target=\"_blank\" rel=\"external\">babel-preset-stage-0</a></p>\n<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"stage-0\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-转码器\"><a href=\"#5-转码器\" class=\"headerlink\" title=\"5. 转码器\"></a>5. 转码器</h3><p> <a href=\"https://npm.taobao.org/package/babel-loader\" target=\"_blank\" rel=\"external\">babel-loader</a></p>\n<p><code>npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</code></p>\n<h3 id=\"6-babel插件\"><a href=\"#6-babel插件\" class=\"headerlink\" title=\"6 babel插件\"></a>6 babel插件</h3><p><a href=\"https://npm.taobao.org/package/babel-runtime\" target=\"_blank\" rel=\"external\">babel-runtime</a> <a href=\"https://npm.taobao.org/package/babel-plugin-transform-runtime\" target=\"_blank\" rel=\"external\">babel-plugin-transform-runtime</a></p>\n<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">plugins</span>: [<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-es6转码垫片\"><a href=\"#7-es6转码垫片\" class=\"headerlink\" title=\"7. es6转码垫片\"></a>7. es6转码垫片</h3><p><a href=\"https://npm.taobao.org/package/babel-polyfill\" target=\"_blank\" rel=\"external\">babel-polyfill</a></p>\n<p>使用： 在入口文件引入 <code>import &#39;babel/polyfill&#39;;</code><br>作用：<br>babel-polyfill Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。然后，在脚本头部，加入如下一行代码。<code>import &#39;babel-polyfill&#39;</code>;Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。</p>\n<h3 id=\"8-react代码优化插件\"><a href=\"#8-react代码优化插件\" class=\"headerlink\" title=\"8. react代码优化插件\"></a>8. react代码优化插件</h3><p><a href=\"https://github.com/thejameskyle/babel-react-optimize\" target=\"_blank\" rel=\"external\">babel-preset-react-optimize</a></p>\n<p>1.下载  <code>npm install --save-dev babel-preset-react-optimize</code></p>\n<p>2.使用 .babelrc</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"production\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>, <span class=\"string\">\"react-optimize\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.具体表现<br>转换常量元素  <a href=\"https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-constant-elements\" target=\"_blank\" rel=\"external\">transform-react-constant-elements</a><br>转换内联元素  <a href=\"https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-inline-elements\" target=\"_blank\" rel=\"external\">transform-react-inline-elements</a><br>移除属性类型  <a href=\"https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types\" target=\"_blank\" rel=\"external\">transform-react-remove-prop-types</a><br>将类转成方法  <a href=\"https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function\" target=\"_blank\" rel=\"external\">transform-react-pure-class-to-function</a></p>\n<h3 id=\"9-babel注册机\"><a href=\"#9-babel注册机\" class=\"headerlink\" title=\"9. babel注册机\"></a>9. babel注册机</h3><p><a href=\"https://github.com/aleclarson/babel-register\" target=\"_blank\" rel=\"external\">babel-register</a></p>\n<p>使用 <code>import &#39;babel-register&#39;</code></p>\n<p>作用： 能够将模块化引入的es和react代码交给babel进行转换</p>\n<h2 id=\"三、webpack\"><a href=\"#三、webpack\" class=\"headerlink\" title=\"三、webpack\"></a>三、webpack</h2><h3 id=\"1-依赖\"><a href=\"#1-依赖\" class=\"headerlink\" title=\"1. 依赖\"></a>1. 依赖</h3><ul>\n<li>webpack</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n<li>webpack-hot-middleware</li>\n<li>extract-text-webpack-plugin</li>\n<li>html-webpack-plugin</li>\n<li>copy-webpack-plugin</li>\n</ul>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h2 id=\"四、loaders\"><a href=\"#四、loaders\" class=\"headerlink\" title=\"四、loaders\"></a>四、loaders</h2><h3 id=\"1-html\"><a href=\"#1-html\" class=\"headerlink\" title=\"1. html\"></a>1. html</h3><ul>\n<li>raw-loader<h3 id=\"2-css\"><a href=\"#2-css\" class=\"headerlink\" title=\"2. css\"></a>2. css</h3></li>\n<li>node-sass</li>\n<li>style-loader</li>\n<li>css-loader</li>\n<li>less-loader</li>\n<li>sass-loader</li>\n<li>postcss-loader<h3 id=\"3-图片、字体\"><a href=\"#3-图片、字体\" class=\"headerlink\" title=\"3. 图片、字体\"></a>3. 图片、字体</h3></li>\n<li>file-loader</li>\n<li>url-loader</li>\n<li>imorts-loader<h3 id=\"4-json\"><a href=\"#4-json\" class=\"headerlink\" title=\"4. json\"></a>4. json</h3></li>\n<li>json-loader</li>\n</ul>\n<h2 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h2><ul>\n<li>normalize</li>\n<li>cssnano</li>\n<li>history</li>\n<li>ip</li>\n<li>yargs</li>\n<li>cheerio</li>\n<li>better-npm-run</li>\n<li>fs-extra</li>\n<li>redbox-react</li>\n<li>autoprefixer</li>\n<li>nodemon</li>\n</ul>\n<h2 id=\"六、后台相关\"><a href=\"#六、后台相关\" class=\"headerlink\" title=\"六、后台相关\"></a>六、后台相关</h2><ul>\n<li>debug</li>\n<li>koa</li>\n<li>koa-connect-history-api-fallback</li>\n<li>koa-convert</li>\n<li>koa-proxy</li>\n<li>koa-static</li>\n<li>mongoose</li>\n<li>moment</li>\n</ul>\n","excerpt":"<p>不知道为什么，就是突然想学一学react。先进的思想，前沿的技术，漂亮的组件。它的魔力就在于能让我一眼就爱上它！源码: <a href=\"https://github.com/nodejs-study/node-koa/tree/master/web/client\">react-detail</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/react.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、核心依赖\"><a href=\"#一、核心依赖\" class=\"headerlink\" title=\"一、核心依赖\"></a>一、核心依赖</h2><h3 id=\"1-react\"><a href=\"#1-react\" class=\"headerlink\" title=\"1. react\"></a>1. <a href=\"https://npm.taobao.org/package/react\">react</a></h3><h3 id=\"2-react-dom\"><a href=\"#2-react-dom\" class=\"headerlink\" title=\"2. react-dom\"></a>2. <a href=\"https://npm.taobao.org/package/react-dom\">react-dom</a></h3><h3 id=\"3-react-redux\"><a href=\"#3-react-redux\" class=\"headerlink\" title=\"3. react-redux\"></a>3. <a href=\"https://npm.taobao.org/package/react-redux\">react-redux</a></h3><h3 id=\"4-react-router\"><a href=\"#4-react-router\" class=\"headerlink\" title=\"4. react-router\"></a>4. <a href=\"https://npm.taobao.org/package/react-router\">react-router</a></h3><h3 id=\"5-redux\"><a href=\"#5-redux\" class=\"headerlink\" title=\"5. redux\"></a>5. <a href=\"https://npm.taobao.org/package/redux\">redux</a></h3><h3 id=\"6-react-router-redux\"><a href=\"#6-react-router-redux\" class=\"headerlink\" title=\"6. react-router-redux\"></a>6. <a href=\"https://npm.taobao.org/package/react-router-redux\">react-router-redux</a></h3><h3 id=\"7-redux-thunk\"><a href=\"#7-redux-thunk\" class=\"headerlink\" title=\"7. redux-thunk\"></a>7. <a href=\"https://npm.taobao.org/package/redux-thunk\">redux-thunk</a></h3><h3 id=\"8-isomorphic-fetch\"><a href=\"#8-isomorphic-fetch\" class=\"headerlink\" title=\"8. isomorphic-fetch\"></a>8. <a href=\"https://npm.taobao.org/package/isomorphic-fetch\">isomorphic-fetch</a></h3><h3 id=\"9-antd\"><a href=\"#9-antd\" class=\"headerlink\" title=\"9. antd\"></a>9. <a href=\"https://npm.taobao.org/package/antd\">antd</a></h3><h3 id=\"10-bootstrap\"><a href=\"#10-bootstrap\" class=\"headerlink\" title=\"10.bootstrap\"></a>10.<a href=\"https://npm.taobao.org/package/bootstrap\">bootstrap</a></h3><h2 id=\"二、babel相关\"><a href=\"#二、babel相关\" class=\"headerlink\" title=\"二、babel相关\"></a>二、babel相关</h2><h3 id=\"1-命令编译器\"><a href=\"#1-命令编译器\" class=\"headerlink\" title=\"1. 命令编译器\"></a>1. 命令编译器</h3><p><a href=\"https://npm.taobao.org/package/babel-cli\">babel-cli</a></p>\n<p>使用 <code>babel script.js</code>   一般全局安装 <code>npm install -g babel-cli</code></p>\n<h3 id=\"2-babel的核心库\"><a href=\"#2-babel的核心库\" class=\"headerlink\" title=\"2. babel的核心库\"></a>2. babel的核心库</h3><p><a href=\"https://npm.taobao.org/package/babel-core\">babel-core</a></p>\n<h3 id=\"3-解析器\"><a href=\"#3-解析器\" class=\"headerlink\" title=\"3. 解析器\"></a>3. 解析器</h3><p><a href=\"https://npm.taobao.org/package/babel-preset-es2015\">babel-preset-es2015</a> 和<a href=\"https://npm.taobao.org/package/babel-react\">babel-preset-react</a></p>\n<p>使用 在项目根目录新建文件<code>.babelrc</code>加上以下代码，可以用babel将es2015和react转成浏览器能够识别的代码</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>,<span class=\"string\">\"react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-es6的stage0转码器\"><a href=\"#4-es6的stage0转码器\" class=\"headerlink\" title=\"4. es6的stage0转码器\"></a>4. es6的stage0转码器</h3><p><a href=\"https://npm.taobao.org/package/babel-preset-stage-0\">babel-preset-stage-0</a></p>\n<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"stage-0\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-转码器\"><a href=\"#5-转码器\" class=\"headerlink\" title=\"5. 转码器\"></a>5. 转码器</h3><p> <a href=\"https://npm.taobao.org/package/babel-loader\">babel-loader</a></p>\n<p><code>npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</code></p>\n<h3 id=\"6-babel插件\"><a href=\"#6-babel插件\" class=\"headerlink\" title=\"6 babel插件\"></a>6 babel插件</h3><p><a href=\"https://npm.taobao.org/package/babel-runtime\">babel-runtime</a> <a href=\"https://npm.taobao.org/package/babel-plugin-transform-runtime\">babel-plugin-transform-runtime</a></p>\n<p>使用 在项目根目录<code>.babelrc</code>加上以下代码，可以转码最新的api</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">plugins</span>: [<span class=\"string\">\"transform-runtime\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-es6转码垫片\"><a href=\"#7-es6转码垫片\" class=\"headerlink\" title=\"7. es6转码垫片\"></a>7. es6转码垫片</h3><p><a href=\"https://npm.taobao.org/package/babel-polyfill\">babel-polyfill</a></p>\n<p>使用： 在入口文件引入 <code>import &#39;babel/polyfill&#39;;</code><br>作用：<br>babel-polyfill Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。然后，在脚本头部，加入如下一行代码。<code>import &#39;babel-polyfill&#39;</code>;Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的definitions.js文件。</p>\n<h3 id=\"8-react代码优化插件\"><a href=\"#8-react代码优化插件\" class=\"headerlink\" title=\"8. react代码优化插件\"></a>8. react代码优化插件</h3><p><a href=\"https://github.com/thejameskyle/babel-react-optimize\">babel-preset-react-optimize</a></p>\n<p>1.下载  <code>npm install --save-dev babel-preset-react-optimize</code></p>\n<p>2.使用 .babelrc</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"production\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>, <span class=\"string\">\"react-optimize\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.具体表现<br>转换常量元素  <a href=\"https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-constant-elements\">transform-react-constant-elements</a><br>转换内联元素  <a href=\"https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-react-inline-elements\">transform-react-inline-elements</a><br>移除属性类型  <a href=\"https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types\">transform-react-remove-prop-types</a><br>将类转成方法  <a href=\"https://github.com/thejameskyle/babel-react-optimize/tree/master/packages/babel-plugin-transform-react-pure-class-to-function\">transform-react-pure-class-to-function</a></p>\n<h3 id=\"9-babel注册机\"><a href=\"#9-babel注册机\" class=\"headerlink\" title=\"9. babel注册机\"></a>9. babel注册机</h3><p><a href=\"https://github.com/aleclarson/babel-register\">babel-register</a></p>\n<p>使用 <code>import &#39;babel-register&#39;</code></p>\n<p>作用： 能够将模块化引入的es和react代码交给babel进行转换</p>\n<h2 id=\"三、webpack\"><a href=\"#三、webpack\" class=\"headerlink\" title=\"三、webpack\"></a>三、webpack</h2><h3 id=\"1-依赖\"><a href=\"#1-依赖\" class=\"headerlink\" title=\"1. 依赖\"></a>1. 依赖</h3><ul>\n<li>webpack</li>\n<li>webpack-dev-server</li>\n<li>webpack-dev-middleware</li>\n<li>webpack-hot-middleware</li>\n<li>extract-text-webpack-plugin</li>\n<li>html-webpack-plugin</li>\n<li>copy-webpack-plugin</li>\n</ul>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><h2 id=\"四、loaders\"><a href=\"#四、loaders\" class=\"headerlink\" title=\"四、loaders\"></a>四、loaders</h2><h3 id=\"1-html\"><a href=\"#1-html\" class=\"headerlink\" title=\"1. html\"></a>1. html</h3><ul>\n<li>raw-loader<h3 id=\"2-css\"><a href=\"#2-css\" class=\"headerlink\" title=\"2. css\"></a>2. css</h3></li>\n<li>node-sass</li>\n<li>style-loader</li>\n<li>css-loader</li>\n<li>less-loader</li>\n<li>sass-loader</li>\n<li>postcss-loader<h3 id=\"3-图片、字体\"><a href=\"#3-图片、字体\" class=\"headerlink\" title=\"3. 图片、字体\"></a>3. 图片、字体</h3></li>\n<li>file-loader</li>\n<li>url-loader</li>\n<li>imorts-loader<h3 id=\"4-json\"><a href=\"#4-json\" class=\"headerlink\" title=\"4. json\"></a>4. json</h3></li>\n<li>json-loader</li>\n</ul>\n<h2 id=\"五、其他\"><a href=\"#五、其他\" class=\"headerlink\" title=\"五、其他\"></a>五、其他</h2><ul>\n<li>normalize</li>\n<li>cssnano</li>\n<li>history</li>\n<li>ip</li>\n<li>yargs</li>\n<li>cheerio</li>\n<li>better-npm-run</li>\n<li>fs-extra</li>\n<li>redbox-react</li>\n<li>autoprefixer</li>\n<li>nodemon</li>\n</ul>\n<h2 id=\"六、后台相关\"><a href=\"#六、后台相关\" class=\"headerlink\" title=\"六、后台相关\"></a>六、后台相关</h2><ul>\n<li>debug</li>\n<li>koa</li>\n<li>koa-connect-history-api-fallback</li>\n<li>koa-convert</li>\n<li>koa-proxy</li>\n<li>koa-static</li>\n<li>mongoose</li>\n<li>moment</li>\n</ul>"},{"author":"小莫","date":"2016-06-23T16:00:00.000Z","title":"angular2学习笔记之事件和多组件","_content":"组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 点击事件\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n\n[代码解读](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/clickEvent)\n\n### 1. [ClickEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts)\n\n```\nimport {Component} from '@angular/core';\nimport {BasicComponent} from './../basic/Basic';\n\n@Component({\n    selector:'click-event',\n    styles:[require('./ClickEvent.scss')],\n    template: require('./ClickEvent.html'),\n    directives:[BasicComponent] //需要引用的组件\n})\n\nexport class ClickEventComponent{\n    showMsg():void{\n        console.log('己经触发点击事件');\n        alert('己经触发点击事件');\n    }\n}\n\n```\n\n### 2. [ClickEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html)\nbasic 就是引用的另一个组件,这个组件源自于上一篇博客[基本组件](http://blog.xiaomo.info/2016/06/22/angular2_study_note_component/)\n```\n<div>\n    <basic></basic>\n    <button class=\"btn btn-success\" (click)=\"showMsg()\">点击事件</button>\n</div>\n```\n\n## 二、键盘按下事件\n\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n\n### 1. [KeyupEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts)\n初始化一个`values`为空字符串，然后当用户按下键盘的时候把值拼给`values`，并且以`|`隔开\n\n```\nimport { Component } from '@angular/core';\n\n@Component({\n    selector:'keyup-event',\n    template: require('./KeyupEvent.html'),\n    styles:[require('./KeyupEvent.scss')]\n})\n\nexport class KeyupEventComponent {\n    values:string = '';\n    onKey(value:any):void {\n        this.values += value + ' | ';\n    }\n}\n\n```\n\n\n### 2. [KeyupEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html)\n当键盘按下的时候调用`onKey`方法\n\n```\n<div>\n    <input #box (keyup)=\"onKey(box.value)\" title=\"\">\n    <p>{{values}}</p>\n</div>\n```\n\n## 三、 enter事件和失焦事件\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n### 1. [EnterBlurEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts)\n定义一个`heroes`数组并给几个初始值，添加英雄方法可以增加一个新的英雄到`heroes`中\n\n```\nimport { Component } from '@angular/core';\n\n@Component({\n    selector:'enter-blur-event',\n    template: require('./EnterBlurEvent.html'),\n    styles:[require('./EnterBlurEvent.scss')]\n})\n\nexport class EnterBlurEventComponent {\n    heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n    addHero(newHero: string) {\n        if (newHero) {\n            this.heroes.push(newHero);\n        }\n    }\n}\n```\n\n\n### 2. [EnterBlurEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html)\n当用户按`enter`或者`Add`或者`blur`失去焦点且不为空的时候调用`newHero`方法，然后循环输出`heroes`\n\n```\n<input #newHero\n       (keyup.enter)=\"addHero(newHero.value)\"\n       (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n<button (click)=addHero(newHero.value) class=\"btn btn-success\">Add</button>\n\n<ul><li *ngFor=\"let hero of heroes\">{{hero}}</li></ul>\n```\n","source":"_posts/2016-06-24.angular2_study_note_click_event.md","raw":"---\nauthor: 小莫\ndate: 2016-06-24\ntitle: angular2学习笔记之事件和多组件\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_note_ng-tag\n---\n组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 点击事件\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n\n[代码解读](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/clickEvent)\n\n### 1. [ClickEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts)\n\n```\nimport {Component} from '@angular/core';\nimport {BasicComponent} from './../basic/Basic';\n\n@Component({\n    selector:'click-event',\n    styles:[require('./ClickEvent.scss')],\n    template: require('./ClickEvent.html'),\n    directives:[BasicComponent] //需要引用的组件\n})\n\nexport class ClickEventComponent{\n    showMsg():void{\n        console.log('己经触发点击事件');\n        alert('己经触发点击事件');\n    }\n}\n\n```\n\n### 2. [ClickEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html)\nbasic 就是引用的另一个组件,这个组件源自于上一篇博客[基本组件](http://blog.xiaomo.info/2016/06/22/angular2_study_note_component/)\n```\n<div>\n    <basic></basic>\n    <button class=\"btn btn-success\" (click)=\"showMsg()\">点击事件</button>\n</div>\n```\n\n## 二、键盘按下事件\n\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n\n### 1. [KeyupEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts)\n初始化一个`values`为空字符串，然后当用户按下键盘的时候把值拼给`values`，并且以`|`隔开\n\n```\nimport { Component } from '@angular/core';\n\n@Component({\n    selector:'keyup-event',\n    template: require('./KeyupEvent.html'),\n    styles:[require('./KeyupEvent.scss')]\n})\n\nexport class KeyupEventComponent {\n    values:string = '';\n    onKey(value:any):void {\n        this.values += value + ' | ';\n    }\n}\n\n```\n\n\n### 2. [KeyupEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html)\n当键盘按下的时候调用`onKey`方法\n\n```\n<div>\n    <input #box (keyup)=\"onKey(box.value)\" title=\"\">\n    <p>{{values}}</p>\n</div>\n```\n\n## 三、 enter事件和失焦事件\n![](http://static.xiaomo.info/images/ClickEvent.gif)\n### 1. [EnterBlurEvent.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts)\n定义一个`heroes`数组并给几个初始值，添加英雄方法可以增加一个新的英雄到`heroes`中\n\n```\nimport { Component } from '@angular/core';\n\n@Component({\n    selector:'enter-blur-event',\n    template: require('./EnterBlurEvent.html'),\n    styles:[require('./EnterBlurEvent.scss')]\n})\n\nexport class EnterBlurEventComponent {\n    heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n    addHero(newHero: string) {\n        if (newHero) {\n            this.heroes.push(newHero);\n        }\n    }\n}\n```\n\n\n### 2. [EnterBlurEvent.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html)\n当用户按`enter`或者`Add`或者`blur`失去焦点且不为空的时候调用`newHero`方法，然后循环输出`heroes`\n\n```\n<input #newHero\n       (keyup.enter)=\"addHero(newHero.value)\"\n       (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n<button (click)=addHero(newHero.value) class=\"btn btn-success\">Add</button>\n\n<ul><li *ngFor=\"let hero of heroes\">{{hero}}</li></ul>\n```\n","slug":"angular2_study_note_ng-tag","published":1,"updated":"2016-06-30T03:26:59.980Z","_id":"cipxpw1iu0000momcdbbvfwu9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-点击事件\"><a href=\"#一、-点击事件\" class=\"headerlink\" title=\"一、 点击事件\"></a>一、 点击事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<p><a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/clickEvent\" target=\"_blank\" rel=\"external\">代码解读</a></p>\n<h3 id=\"1-ClickEvent-ts\"><a href=\"#1-ClickEvent-ts\" class=\"headerlink\" title=\"1. ClickEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts\" target=\"_blank\" rel=\"external\">ClickEvent.ts</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;BasicComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../basic/Basic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'click-event'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./ClickEvent.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./ClickEvent.html'</span>),</span><br><span class=\"line\">    directives:[BasicComponent] <span class=\"comment\">//需要引用的组件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickEventComponent</span></span>&#123;</span><br><span class=\"line\">    showMsg():<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'己经触发点击事件'</span>);</span><br><span class=\"line\">        alert(<span class=\"string\">'己经触发点击事件'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-ClickEvent-html\"><a href=\"#2-ClickEvent-html\" class=\"headerlink\" title=\"2. ClickEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html\" target=\"_blank\" rel=\"external\">ClickEvent.html</a></h3><p>basic 就是引用的另一个组件,这个组件源自于上一篇博客<a href=\"http://blog.xiaomo.info/2016/06/22/angular2_study_note_component/\">基本组件</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">basic</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">basic</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"showMsg()\"</span>&gt;</span>点击事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、键盘按下事件\"><a href=\"#二、键盘按下事件\" class=\"headerlink\" title=\"二、键盘按下事件\"></a>二、键盘按下事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<h3 id=\"1-KeyupEvent-ts\"><a href=\"#1-KeyupEvent-ts\" class=\"headerlink\" title=\"1. KeyupEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts\" target=\"_blank\" rel=\"external\">KeyupEvent.ts</a></h3><p>初始化一个<code>values</code>为空字符串，然后当用户按下键盘的时候把值拼给<code>values</code>，并且以<code>|</code>隔开</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'keyup-event'</span>,</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./KeyupEvent.html'</span>),</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./KeyupEvent.scss'</span>)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyupEventComponent</span> &#123;</span></span><br><span class=\"line\">    values:string = <span class=\"string\">''</span>;</span><br><span class=\"line\">    onKey(value:any):<span class=\"literal\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values += value + <span class=\"string\">' | '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-KeyupEvent-html\"><a href=\"#2-KeyupEvent-html\" class=\"headerlink\" title=\"2. KeyupEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html\" target=\"_blank\" rel=\"external\">KeyupEvent.html</a></h3><p>当键盘按下的时候调用<code>onKey</code>方法</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">box</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey(box.value)\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;values&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、-enter事件和失焦事件\"><a href=\"#三、-enter事件和失焦事件\" class=\"headerlink\" title=\"三、 enter事件和失焦事件\"></a>三、 enter事件和失焦事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<h3 id=\"1-EnterBlurEvent-ts\"><a href=\"#1-EnterBlurEvent-ts\" class=\"headerlink\" title=\"1. EnterBlurEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts\" target=\"_blank\" rel=\"external\">EnterBlurEvent.ts</a></h3><p>定义一个<code>heroes</code>数组并给几个初始值，添加英雄方法可以增加一个新的英雄到<code>heroes</code>中</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'enter-blur-event'</span>,</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./EnterBlurEvent.html'</span>),</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./EnterBlurEvent.scss'</span>)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnterBlurEventComponent</span> &#123;</span></span><br><span class=\"line\">    heroes = [<span class=\"string\">'Windstorm'</span>, <span class=\"string\">'Bombasto'</span>, <span class=\"string\">'Magneta'</span>, <span class=\"string\">'Tornado'</span>];</span><br><span class=\"line\">    addHero(newHero: string) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newHero) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.heroes.push(newHero);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-EnterBlurEvent-html\"><a href=\"#2-EnterBlurEvent-html\" class=\"headerlink\" title=\"2. EnterBlurEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html\" target=\"_blank\" rel=\"external\">EnterBlurEvent.html</a></h3><p>当用户按<code>enter</code>或者<code>Add</code>或者<code>blur</code>失去焦点且不为空的时候调用<code>newHero</code>方法，然后循环输出<code>heroes</code></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">newHero</span></span><br><span class=\"line\">       (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"addHero(newHero.value)\"</span></span><br><span class=\"line\">       (<span class=\"attr\">blur</span>)=<span class=\"string\">\"addHero(newHero.value); newHero.value='' \"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">addHero(newHero.value)</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let hero of heroes\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;hero&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>组件免不了和用户交互，而交互中使用最频繁的莫过于点击事件的交互。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-点击事件\"><a href=\"#一、-点击事件\" class=\"headerlink\" title=\"一、 点击事件\"></a>一、 点击事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<p><a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/clickEvent\">代码解读</a></p>\n<h3 id=\"1-ClickEvent-ts\"><a href=\"#1-ClickEvent-ts\" class=\"headerlink\" title=\"1. ClickEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.ts\">ClickEvent.ts</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;BasicComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../basic/Basic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'click-event'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./ClickEvent.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./ClickEvent.html'</span>),</span><br><span class=\"line\">    directives:[BasicComponent] <span class=\"comment\">//需要引用的组件</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClickEventComponent</span></span>&#123;</span><br><span class=\"line\">    showMsg():<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'己经触发点击事件'</span>);</span><br><span class=\"line\">        alert(<span class=\"string\">'己经触发点击事件'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-ClickEvent-html\"><a href=\"#2-ClickEvent-html\" class=\"headerlink\" title=\"2. ClickEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/clickEvent/ClickEvent.html\">ClickEvent.html</a></h3><p>basic 就是引用的另一个组件,这个组件源自于上一篇博客<a href=\"http://blog.xiaomo.info/2016/06/22/angular2_study_note_component/\">基本组件</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">basic</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">basic</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"showMsg()\"</span>&gt;</span>点击事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、键盘按下事件\"><a href=\"#二、键盘按下事件\" class=\"headerlink\" title=\"二、键盘按下事件\"></a>二、键盘按下事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<h3 id=\"1-KeyupEvent-ts\"><a href=\"#1-KeyupEvent-ts\" class=\"headerlink\" title=\"1. KeyupEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.ts\">KeyupEvent.ts</a></h3><p>初始化一个<code>values</code>为空字符串，然后当用户按下键盘的时候把值拼给<code>values</code>，并且以<code>|</code>隔开</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'keyup-event'</span>,</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./KeyupEvent.html'</span>),</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./KeyupEvent.scss'</span>)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyupEventComponent</span> &#123;</span></span><br><span class=\"line\">    values:string = <span class=\"string\">''</span>;</span><br><span class=\"line\">    onKey(value:any):<span class=\"literal\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.values += value + <span class=\"string\">' | '</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-KeyupEvent-html\"><a href=\"#2-KeyupEvent-html\" class=\"headerlink\" title=\"2. KeyupEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/keyupEvent/KeyupEvent.html\">KeyupEvent.html</a></h3><p>当键盘按下的时候调用<code>onKey</code>方法</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">box</span> (<span class=\"attr\">keyup</span>)=<span class=\"string\">\"onKey(box.value)\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;values&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、-enter事件和失焦事件\"><a href=\"#三、-enter事件和失焦事件\" class=\"headerlink\" title=\"三、 enter事件和失焦事件\"></a>三、 enter事件和失焦事件</h2><p><img src=\"http://static.xiaomo.info/images/ClickEvent.gif\" alt=\"\"></p>\n<h3 id=\"1-EnterBlurEvent-ts\"><a href=\"#1-EnterBlurEvent-ts\" class=\"headerlink\" title=\"1. EnterBlurEvent.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.ts\">EnterBlurEvent.ts</a></h3><p>定义一个<code>heroes</code>数组并给几个初始值，添加英雄方法可以增加一个新的英雄到<code>heroes</code>中</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector:<span class=\"string\">'enter-blur-event'</span>,</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./EnterBlurEvent.html'</span>),</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./EnterBlurEvent.scss'</span>)]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EnterBlurEventComponent</span> &#123;</span></span><br><span class=\"line\">    heroes = [<span class=\"string\">'Windstorm'</span>, <span class=\"string\">'Bombasto'</span>, <span class=\"string\">'Magneta'</span>, <span class=\"string\">'Tornado'</span>];</span><br><span class=\"line\">    addHero(newHero: string) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newHero) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.heroes.push(newHero);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-EnterBlurEvent-html\"><a href=\"#2-EnterBlurEvent-html\" class=\"headerlink\" title=\"2. EnterBlurEvent.html\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/EnterBlurEvent/EnterBlurEvent.html\">EnterBlurEvent.html</a></h3><p>当用户按<code>enter</code>或者<code>Add</code>或者<code>blur</code>失去焦点且不为空的时候调用<code>newHero</code>方法，然后循环输出<code>heroes</code></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> #<span class=\"attr\">newHero</span></span><br><span class=\"line\">       (<span class=\"attr\">keyup.enter</span>)=<span class=\"string\">\"addHero(newHero.value)\"</span></span><br><span class=\"line\">       (<span class=\"attr\">blur</span>)=<span class=\"string\">\"addHero(newHero.value); newHero.value='' \"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">addHero(newHero.value)</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>Add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let hero of heroes\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;hero&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-24T16:00:00.000Z","title":"angular2学习笔记之ng2标签","_content":"angular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 效果图\n![](http://static.xiaomo.info/images/ngTag.png)\n\n## 一、[指令解读](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag)\n\n### 0. [组件](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts)\n主要就是定义了一些数据用于测试\n\n```\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'ng-tag',\n    styles: [require('./NgTag.scss')],\n    template: require('NgTag.html')\n})\n\nexport class NgTagComponent {\n    list:any;\n    ngSwitchList:any;\n    ngStyleList:any;\n\n    constructor() {\n        this.list = [{\n                'name': 'xiaomo'\n            },{\n                'name': 'xiaogang'\n\n            },{\n                'name': 'xiaomoxue'\n            }];\n        this.ngSwitchList=[\n            'xiaomo',\n            'xiaoming'\n        ];\n        this.ngStyleList={\n            'color':'blue',\n            'backgroundColor':'green'\n        };\n    };\n}\n\n```\n\n\n### 1. [ngFor](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n\n\n```\n<ul class=\"list-group\" *ngFor=\"let item of list\">\n  <li class=\"list-group-item\">{{item.name}}</li>\n</ul>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngFor.png)\n\n### 2. [ngIf](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n我在组件中定义了一个list\n\n```\nthis.list = [{\n        'name': 'xiaomo'\n    },{\n        'name': 'xiaogang'\n\n    },{\n        'name': 'xiaomoxue'\n    }];\n```\n\n我在循环这个数组对象的时候去比对item.name 如果是 `xiaomo`,就 出现 ngIf中的内容\n\n```\n<ul *ngFor=\"let item of list\">\n<li *ngIf=\"item.name=='xiaomo'\" class=\"list-group-item\">哇,我在list列表中找到了 <span class=\"label label-info\">{{item.name}}</span></li>\n</ul>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngIf.png)\n\n### 3. [ngSwitch](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n我在组件中定义了一个方法，可以设置选中的值给myVal\n\n```\nmyVal:number = 0;\nchangeValue($event):void{\n    console.log($event.target.value);// 输出选中的值设给myVal\n    this.myVal = $event.target.value;\n}\n```\n\n有一组单选按钮，选中是`myVal`会改变，`ngSwitch`会去循环每个`case`,如果找到了就显示那条`case`中的数据，不然显示`default`中的数据\n\n```\n<div>\n    <h2>ngSwitch</h2>\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"1\" (click)=\"changeValue($event)\">1\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"2\" (click)=\"changeValue($event)\">2\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"3\" (click)=\"changeValue($event)\">3\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"4\" (click)=\"changeValue($event)\">4\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"5\" (click)=\"changeValue($event)\">5\n        <hr>\n       <span [ngSwitch]=\"myVal\">\n          <span *ngSwitchCase=\"'1'\">ONE</span>\n          <span *ngSwitchCase=\"'2'\">TWO</span>\n          <span *ngSwitchCase=\"'3'\">THREE</span>\n          <span *ngSwitchCase=\"'4'\">FOUR</span>\n          <span *ngSwitchCase=\"'5'\">FIVE</span>\n          <span *ngSwitchDefault>other</span>\n\t    </span>\n</div>\n```\n\n效果图\n![](http://static.xiaomo.info/images/NgSwitch.gif)\n\n### 4. [ngStyle](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是`ngClass`\n\n```\n<div [ngStyle]=\"{'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color}\" [style.font-size]=\"30\">\n      背景 :{{ngStyleList.backgroundColor}} <br/>\n      字体颜色: {{ngStyleList.color}}\n  </div>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngStyle.png)\n\n### 5. [ngClass](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html)\n\n左边是class名[要用<code>''</code>包起来]，右边是一个true|false表达式或者是一个方法\n\n在组件中定义了一个fn() 返回封装好的样式\n\n```\nthis.ngStyleList={\n     'color':'blue',\n     'backgroundColor':'green'\n };\n\n    classes:any={};\n    fn():any {\n        return this.classes =  {\n            'btn-primary':true\n        };\n    }\n```\n\n模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制\n\n```\n   <button class=\"btn\" [ngClass]=\"{'btn-danger': ngStyleList}\">测试</button>\n   <button class=\"btn\" [ngClass]=\"fn()\">fn</button>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngClass.png)\n","source":"_posts/2016-06-25.angular2_study_note_ng-tag.md","raw":"---\nauthor: 小莫\ndate: 2016-06-25\ntitle: angular2学习笔记之ng2标签\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_note_ng-tag\n---\nangular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 效果图\n![](http://static.xiaomo.info/images/ngTag.png)\n\n## 一、[指令解读](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag)\n\n### 0. [组件](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts)\n主要就是定义了一些数据用于测试\n\n```\nimport {Component} from '@angular/core';\n\n@Component({\n    selector: 'ng-tag',\n    styles: [require('./NgTag.scss')],\n    template: require('NgTag.html')\n})\n\nexport class NgTagComponent {\n    list:any;\n    ngSwitchList:any;\n    ngStyleList:any;\n\n    constructor() {\n        this.list = [{\n                'name': 'xiaomo'\n            },{\n                'name': 'xiaogang'\n\n            },{\n                'name': 'xiaomoxue'\n            }];\n        this.ngSwitchList=[\n            'xiaomo',\n            'xiaoming'\n        ];\n        this.ngStyleList={\n            'color':'blue',\n            'backgroundColor':'green'\n        };\n    };\n}\n\n```\n\n\n### 1. [ngFor](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n\n\n```\n<ul class=\"list-group\" *ngFor=\"let item of list\">\n  <li class=\"list-group-item\">{{item.name}}</li>\n</ul>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngFor.png)\n\n### 2. [ngIf](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n我在组件中定义了一个list\n\n```\nthis.list = [{\n        'name': 'xiaomo'\n    },{\n        'name': 'xiaogang'\n\n    },{\n        'name': 'xiaomoxue'\n    }];\n```\n\n我在循环这个数组对象的时候去比对item.name 如果是 `xiaomo`,就 出现 ngIf中的内容\n\n```\n<ul *ngFor=\"let item of list\">\n<li *ngIf=\"item.name=='xiaomo'\" class=\"list-group-item\">哇,我在list列表中找到了 <span class=\"label label-info\">{{item.name}}</span></li>\n</ul>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngIf.png)\n\n### 3. [ngSwitch](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n我在组件中定义了一个方法，可以设置选中的值给myVal\n\n```\nmyVal:number = 0;\nchangeValue($event):void{\n    console.log($event.target.value);// 输出选中的值设给myVal\n    this.myVal = $event.target.value;\n}\n```\n\n有一组单选按钮，选中是`myVal`会改变，`ngSwitch`会去循环每个`case`,如果找到了就显示那条`case`中的数据，不然显示`default`中的数据\n\n```\n<div>\n    <h2>ngSwitch</h2>\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"1\" (click)=\"changeValue($event)\">1\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"2\" (click)=\"changeValue($event)\">2\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"3\" (click)=\"changeValue($event)\">3\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"4\" (click)=\"changeValue($event)\">4\n        <input name=\"myVal\" type=\"radio\" title=\"\" value=\"5\" (click)=\"changeValue($event)\">5\n        <hr>\n       <span [ngSwitch]=\"myVal\">\n          <span *ngSwitchCase=\"'1'\">ONE</span>\n          <span *ngSwitchCase=\"'2'\">TWO</span>\n          <span *ngSwitchCase=\"'3'\">THREE</span>\n          <span *ngSwitchCase=\"'4'\">FOUR</span>\n          <span *ngSwitchCase=\"'5'\">FIVE</span>\n          <span *ngSwitchDefault>other</span>\n\t    </span>\n</div>\n```\n\n效果图\n![](http://static.xiaomo.info/images/NgSwitch.gif)\n\n### 4. [ngStyle](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html)\n\n这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是`ngClass`\n\n```\n<div [ngStyle]=\"{'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color}\" [style.font-size]=\"30\">\n      背景 :{{ngStyleList.backgroundColor}} <br/>\n      字体颜色: {{ngStyleList.color}}\n  </div>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngStyle.png)\n\n### 5. [ngClass](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html)\n\n左边是class名[要用<code>''</code>包起来]，右边是一个true|false表达式或者是一个方法\n\n在组件中定义了一个fn() 返回封装好的样式\n\n```\nthis.ngStyleList={\n     'color':'blue',\n     'backgroundColor':'green'\n };\n\n    classes:any={};\n    fn():any {\n        return this.classes =  {\n            'btn-primary':true\n        };\n    }\n```\n\n模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制\n\n```\n   <button class=\"btn\" [ngClass]=\"{'btn-danger': ngStyleList}\">测试</button>\n   <button class=\"btn\" [ngClass]=\"fn()\">fn</button>\n```\n\n效果图\n![](http://static.xiaomo.info/images/ngClass.png)\n","slug":"angular2_study_note_ng-tag","published":1,"updated":"2016-06-30T07:52:15.720Z","_id":"cipxq33mp00007wmc0o90ez0o","comments":1,"layout":"post","photos":[],"link":"","content":"<p>angular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><p><img src=\"http://static.xiaomo.info/images/ngTag.png\" alt=\"\"></p>\n<h2 id=\"一、指令解读\"><a href=\"#一、指令解读\" class=\"headerlink\" title=\"一、指令解读\"></a>一、<a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag\" target=\"_blank\" rel=\"external\">指令解读</a></h2><h3 id=\"0-组件\"><a href=\"#0-组件\" class=\"headerlink\" title=\"0. 组件\"></a>0. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts\" target=\"_blank\" rel=\"external\">组件</a></h3><p>主要就是定义了一些数据用于测试</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'ng-tag'</span>,</span><br><span class=\"line\">    styles: [<span class=\"built_in\">require</span>(<span class=\"string\">'./NgTag.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'NgTag.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NgTagComponent &#123;</span><br><span class=\"line\">    list:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    ngSwitchList:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    ngStyleList:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = [&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaogang'</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomoxue'</span></span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ngSwitchList=[</span><br><span class=\"line\">            <span class=\"string\">'xiaomo'</span>,</span><br><span class=\"line\">            <span class=\"string\">'xiaoming'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ngStyleList=&#123;</span><br><span class=\"line\">            <span class=\"string\">'color'</span>:<span class=\"string\">'blue'</span>,</span><br><span class=\"line\">            <span class=\"string\">'backgroundColor'</span>:<span class=\"string\">'green'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-ngFor\"><a href=\"#1-ngFor\" class=\"headerlink\" title=\"1. ngFor\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\" target=\"_blank\" rel=\"external\">ngFor</a></h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngFor.png\" alt=\"\"></p>\n<h3 id=\"2-ngIf\"><a href=\"#2-ngIf\" class=\"headerlink\" title=\"2. ngIf\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\" target=\"_blank\" rel=\"external\">ngIf</a></h3><p>我在组件中定义了一个list</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.list = [&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaogang'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomoxue'</span></span><br><span class=\"line\">    &#125;];</span><br></pre></td></tr></table></figure>\n<p>我在循环这个数组对象的时候去比对item.name 如果是 <code>xiaomo</code>,就 出现 ngIf中的内容</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of list\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"item.name=='xiaomo'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>哇,我在list列表中找到了 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-info\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngIf.png\" alt=\"\"></p>\n<h3 id=\"3-ngSwitch\"><a href=\"#3-ngSwitch\" class=\"headerlink\" title=\"3. ngSwitch\"></a>3. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\" target=\"_blank\" rel=\"external\">ngSwitch</a></h3><p>我在组件中定义了一个方法，可以设置选中的值给myVal</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myVal:number = <span class=\"number\">0</span>;</span><br><span class=\"line\">changeValue($<span class=\"keyword\">event</span>):<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">    console.log($<span class=\"keyword\">event</span>.target.<span class=\"keyword\">value</span>);<span class=\"comment\">// 输出选中的值设给myVal</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myVal = $<span class=\"keyword\">event</span>.target.<span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一组单选按钮，选中是<code>myVal</code>会改变，<code>ngSwitch</code>会去循环每个<code>case</code>,如果找到了就显示那条<code>case</code>中的数据，不然显示<code>default</code>中的数据</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>ngSwitch<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>1</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>2</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>3</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>4</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>5</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">span</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">\"myVal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'1'\"</span>&gt;</span>ONE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'2'\"</span>&gt;</span>TWO<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'3'\"</span>&gt;</span>THREE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'4'\"</span>&gt;</span>FOUR<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'5'\"</span>&gt;</span>FIVE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/NgSwitch.gif\" alt=\"\"></p>\n<h3 id=\"4-ngStyle\"><a href=\"#4-ngStyle\" class=\"headerlink\" title=\"4. ngStyle\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\" target=\"_blank\" rel=\"external\">ngStyle</a></h3><p>这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是<code>ngClass</code></p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> [<span class=\"attr\">style.font-size</span>]=<span class=\"string\">\"30\"</span>&gt;</span></span><br><span class=\"line\">      背景 :</span><span class=\"template-variable\">&#123;&#123;ngStyleList.backgroundColor&#125;</span><span class=\"xml\">&#125; <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">      字体颜色: </span><span class=\"template-variable\">&#123;&#123;ngStyleList.color&#125;</span><span class=\"xml\">&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngStyle.png\" alt=\"\"></p>\n<h3 id=\"5-ngClass\"><a href=\"#5-ngClass\" class=\"headerlink\" title=\"5. ngClass\"></a>5. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html\" target=\"_blank\" rel=\"external\">ngClass</a></h3><p>左边是class名[要用<code>‘’</code>包起来]，右边是一个true|false表达式或者是一个方法</p>\n<p>在组件中定义了一个fn() 返回封装好的样式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.ngStyleList=&#123;</span><br><span class=\"line\">     <span class=\"string\">'color'</span>:<span class=\"string\">'blue'</span>,</span><br><span class=\"line\">     <span class=\"string\">'backgroundColor'</span>:<span class=\"string\">'green'</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    classes:any=&#123;&#125;;</span><br><span class=\"line\">    fn():any &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.classes =  &#123;</span><br><span class=\"line\">            <span class=\"string\">'btn-primary'</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;'btn-danger': ngStyleList&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"fn()\"</span>&gt;</span>fn<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngClass.png\" alt=\"\"></p>\n","excerpt":"<p>angular2的内值指令和angular2很类似，所有熟悉angular1的朋友看一眼就会了。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><p><img src=\"http://static.xiaomo.info/images/ngTag.png\" alt=\"\"></p>\n<h2 id=\"一、指令解读\"><a href=\"#一、指令解读\" class=\"headerlink\" title=\"一、指令解读\"></a>一、<a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag\">指令解读</a></h2><h3 id=\"0-组件\"><a href=\"#0-组件\" class=\"headerlink\" title=\"0. 组件\"></a>0. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag//NgTag.ts\">组件</a></h3><p>主要就是定义了一些数据用于测试</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'ng-tag'</span>,</span><br><span class=\"line\">    styles: [<span class=\"built_in\">require</span>(<span class=\"string\">'./NgTag.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'NgTag.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NgTagComponent &#123;</span><br><span class=\"line\">    list:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    ngSwitchList:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    ngStyleList:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = [&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaogang'</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomoxue'</span></span><br><span class=\"line\">            &#125;];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ngSwitchList=[</span><br><span class=\"line\">            <span class=\"string\">'xiaomo'</span>,</span><br><span class=\"line\">            <span class=\"string\">'xiaoming'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ngStyleList=&#123;</span><br><span class=\"line\">            <span class=\"string\">'color'</span>:<span class=\"string\">'blue'</span>,</span><br><span class=\"line\">            <span class=\"string\">'backgroundColor'</span>:<span class=\"string\">'green'</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-ngFor\"><a href=\"#1-ngFor\" class=\"headerlink\" title=\"1. ngFor\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\">ngFor</a></h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group\"</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngFor.png\" alt=\"\"></p>\n<h3 id=\"2-ngIf\"><a href=\"#2-ngIf\" class=\"headerlink\" title=\"2. ngIf\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\">ngIf</a></h3><p>我在组件中定义了一个list</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.list = [&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomo'</span></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaogang'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        <span class=\"string\">'name'</span>: <span class=\"string\">'xiaomoxue'</span></span><br><span class=\"line\">    &#125;];</span><br></pre></td></tr></table></figure>\n<p>我在循环这个数组对象的时候去比对item.name 如果是 <code>xiaomo</code>,就 出现 ngIf中的内容</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of list\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"item.name=='xiaomo'\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-group-item\"</span>&gt;</span>哇,我在list列表中找到了 <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label label-info\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngIf.png\" alt=\"\"></p>\n<h3 id=\"3-ngSwitch\"><a href=\"#3-ngSwitch\" class=\"headerlink\" title=\"3. ngSwitch\"></a>3. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\">ngSwitch</a></h3><p>我在组件中定义了一个方法，可以设置选中的值给myVal</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myVal:number = <span class=\"number\">0</span>;</span><br><span class=\"line\">changeValue($<span class=\"keyword\">event</span>):<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">    console.log($<span class=\"keyword\">event</span>.target.<span class=\"keyword\">value</span>);<span class=\"comment\">// 输出选中的值设给myVal</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myVal = $<span class=\"keyword\">event</span>.target.<span class=\"keyword\">value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有一组单选按钮，选中是<code>myVal</code>会改变，<code>ngSwitch</code>会去循环每个<code>case</code>,如果找到了就显示那条<code>case</code>中的数据，不然显示<code>default</code>中的数据</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>ngSwitch<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>1</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>2</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>3</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>4</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myVal\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"changeValue($event)\"</span>&gt;</span>5</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">span</span> [<span class=\"attr\">ngSwitch</span>]=<span class=\"string\">\"myVal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'1'\"</span>&gt;</span>ONE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'2'\"</span>&gt;</span>TWO<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'3'\"</span>&gt;</span>THREE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'4'\"</span>&gt;</span>FOUR<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchCase</span>=<span class=\"string\">\"'5'\"</span>&gt;</span>FIVE<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngSwitchDefault</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/NgSwitch.gif\" alt=\"\"></p>\n<h3 id=\"4-ngStyle\"><a href=\"#4-ngStyle\" class=\"headerlink\" title=\"4. ngStyle\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/ngTag/NgTag.html\">ngStyle</a></h3><p>这里的样式的值都是从组件中取出来的，也就意味着它可以动态，不过建议是封装成class，也就是<code>ngClass</code></p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> [<span class=\"attr\">ngStyle</span>]=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;'background-color': ngStyleList.backgroundColor,'color':ngStyleList.color&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> [<span class=\"attr\">style.font-size</span>]=<span class=\"string\">\"30\"</span>&gt;</span></span><br><span class=\"line\">      背景 :</span><span class=\"template-variable\">&#123;&#123;ngStyleList.backgroundColor&#125;</span><span class=\"xml\">&#125; <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">      字体颜色: </span><span class=\"template-variable\">&#123;&#123;ngStyleList.color&#125;</span><span class=\"xml\">&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngStyle.png\" alt=\"\"></p>\n<h3 id=\"5-ngClass\"><a href=\"#5-ngClass\" class=\"headerlink\" title=\"5. ngClass\"></a>5. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/ngTag/NgTag.html\">ngClass</a></h3><p>左边是class名[要用<code>‘’</code>包起来]，右边是一个true|false表达式或者是一个方法</p>\n<p>在组件中定义了一个fn() 返回封装好的样式</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.ngStyleList=&#123;</span><br><span class=\"line\">     <span class=\"string\">'color'</span>:<span class=\"string\">'blue'</span>,</span><br><span class=\"line\">     <span class=\"string\">'backgroundColor'</span>:<span class=\"string\">'green'</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    classes:any=&#123;&#125;;</span><br><span class=\"line\">    fn():any &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.classes =  &#123;</span><br><span class=\"line\">            <span class=\"string\">'btn-primary'</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>模板中有两个button，我们给他加上样式。至于加什么样式 我们可以用函数控制</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;'btn-danger': ngStyleList&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn\"</span> [<span class=\"attr\">ngClass</span>]=<span class=\"string\">\"fn()\"</span>&gt;</span>fn<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://static.xiaomo.info/images/ngClass.png\" alt=\"\"></p>"},{"author":"小莫","date":"2016-06-26T16:00:00.000Z","title":"angular2学习笔记之服务和http","_content":"现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 效果图\n\n### 1. 展现出来的效果\n![](http://static.xiaomo.info/images/httpService.png)\n\n### 2. mysql的数据\n![](http://static.xiaomo.info/images/mysql.png)\n\n## 二、代码实例\n\n### 1. 服务 [service](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/service/UserService.ts)\n\n```\nimport {Injectable} from '@angular/core';\nimport { Http }from '@angular/http';\nimport * as api from './../api/Api';\nimport {Observable} from 'rxjs/Rx';\n\n@Injectable()\nexport class UserService {\n    data:any;\n\n    constructor(public http:Http) {\n        this.http = http;\n    }\n\n    findAll():Observable<any> {\n        return this.http.get(api.findAll).map((res:any)=> {\n            return res.json();\n        });\n    }\n}\n```\n\n### 2.组件 [HttpService](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts)\n\n```\nimport {Component,OnInit} from '@angular/core';\nimport { UserService } from './../../service/UserService';\n\n\n@Component({\n    selector: 'http-service',\n    styles:[require('./HttpService.scss')],\n    template: require('./HttpService.html'),\n    providers: [UserService]\n})\n\nexport class HttpServiceComponent implements OnInit {\n\n    admins:Object;\n    data:Object;\n\n    constructor(public userService:UserService) {\n        this.userService = userService;\n    }\n\n\n    ngOnInit():void{\n        this.userService.findAll().subscribe((data:any) => {\n            this.admins = data.adminUsers.content;\n            console.log('in component : ',this.admins);\n        });\n        console.log(' HttpServiceComponent ngOnInit :', 'enter');\n    }\n\n}\n\n```\n\n### 3. 模板 [HttpService.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html)\n\n```\n<ul *ngFor=\"let item of admins;let i = index\">\n    <li>{{i+1}}.{{item.userName}}</li>\n</ul>\n```\n","source":"_posts/2016-06-27.angular2_study_service_http.md","raw":"---\nauthor: 小莫\ndate: 2016-06-27\ntitle: angular2学习笔记之服务和http\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_service_http\n---\n现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、 效果图\n\n### 1. 展现出来的效果\n![](http://static.xiaomo.info/images/httpService.png)\n\n### 2. mysql的数据\n![](http://static.xiaomo.info/images/mysql.png)\n\n## 二、代码实例\n\n### 1. 服务 [service](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/service/UserService.ts)\n\n```\nimport {Injectable} from '@angular/core';\nimport { Http }from '@angular/http';\nimport * as api from './../api/Api';\nimport {Observable} from 'rxjs/Rx';\n\n@Injectable()\nexport class UserService {\n    data:any;\n\n    constructor(public http:Http) {\n        this.http = http;\n    }\n\n    findAll():Observable<any> {\n        return this.http.get(api.findAll).map((res:any)=> {\n            return res.json();\n        });\n    }\n}\n```\n\n### 2.组件 [HttpService](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts)\n\n```\nimport {Component,OnInit} from '@angular/core';\nimport { UserService } from './../../service/UserService';\n\n\n@Component({\n    selector: 'http-service',\n    styles:[require('./HttpService.scss')],\n    template: require('./HttpService.html'),\n    providers: [UserService]\n})\n\nexport class HttpServiceComponent implements OnInit {\n\n    admins:Object;\n    data:Object;\n\n    constructor(public userService:UserService) {\n        this.userService = userService;\n    }\n\n\n    ngOnInit():void{\n        this.userService.findAll().subscribe((data:any) => {\n            this.admins = data.adminUsers.content;\n            console.log('in component : ',this.admins);\n        });\n        console.log(' HttpServiceComponent ngOnInit :', 'enter');\n    }\n\n}\n\n```\n\n### 3. 模板 [HttpService.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html)\n\n```\n<ul *ngFor=\"let item of admins;let i = index\">\n    <li>{{i+1}}.{{item.userName}}</li>\n</ul>\n```\n","slug":"angular2_study_service_http","published":1,"updated":"2016-06-28T02:47:23.053Z","_id":"cipxtqv2u00001omchi2ljair","comments":1,"layout":"post","photos":[],"link":"","content":"<p>现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><h3 id=\"1-展现出来的效果\"><a href=\"#1-展现出来的效果\" class=\"headerlink\" title=\"1. 展现出来的效果\"></a>1. 展现出来的效果</h3><p><img src=\"http://static.xiaomo.info/images/httpService.png\" alt=\"\"></p>\n<h3 id=\"2-mysql的数据\"><a href=\"#2-mysql的数据\" class=\"headerlink\" title=\"2. mysql的数据\"></a>2. mysql的数据</h3><p><img src=\"http://static.xiaomo.info/images/mysql.png\" alt=\"\"></p>\n<h2 id=\"二、代码实例\"><a href=\"#二、代码实例\" class=\"headerlink\" title=\"二、代码实例\"></a>二、代码实例</h2><h3 id=\"1-服务-service\"><a href=\"#1-服务-service\" class=\"headerlink\" title=\"1. 服务 service\"></a>1. 服务 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/service/UserService.ts\" target=\"_blank\" rel=\"external\">service</a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125;from <span class=\"string\">'@angular/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api from <span class=\"string\">'./../api/Api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Observable&#125; from <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable()</span></span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">data</span>:any;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"keyword\">public</span> http:Http) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.http = http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findAll():Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.<span class=\"keyword\">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-组件-HttpService\"><a href=\"#2-组件-HttpService\" class=\"headerlink\" title=\"2.组件 HttpService\"></a>2.组件 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts\" target=\"_blank\" rel=\"external\">HttpService</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component,OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../../service/UserService'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'http-service'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./HttpService.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./HttpService.html'</span>),</span><br><span class=\"line\">    providers: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServiceComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    admins:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    data:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(public userService:UserService) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userService = userService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit():<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userService.findAll().subscribe((data:any) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.admins = data.adminUsers.content;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'in component : '</span>,<span class=\"keyword\">this</span>.admins);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' HttpServiceComponent ngOnInit :'</span>, <span class=\"string\">'enter'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-模板-HttpService-html\"><a href=\"#3-模板-HttpService-html\" class=\"headerlink\" title=\"3. 模板 HttpService.html\"></a>3. 模板 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html\" target=\"_blank\" rel=\"external\">HttpService.html</a></h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of admins;let i = index\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;i+1&#125;&#125;</span><span class=\"xml\">.</span><span class=\"template-variable\">&#123;&#123;item.userName&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>现在应用开发多为spa的前后分离,前后端通讯则使用http的接口通过json进行交互。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、-效果图\"><a href=\"#一、-效果图\" class=\"headerlink\" title=\"一、 效果图\"></a>一、 效果图</h2><h3 id=\"1-展现出来的效果\"><a href=\"#1-展现出来的效果\" class=\"headerlink\" title=\"1. 展现出来的效果\"></a>1. 展现出来的效果</h3><p><img src=\"http://static.xiaomo.info/images/httpService.png\" alt=\"\"></p>\n<h3 id=\"2-mysql的数据\"><a href=\"#2-mysql的数据\" class=\"headerlink\" title=\"2. mysql的数据\"></a>2. mysql的数据</h3><p><img src=\"http://static.xiaomo.info/images/mysql.png\" alt=\"\"></p>\n<h2 id=\"二、代码实例\"><a href=\"#二、代码实例\" class=\"headerlink\" title=\"二、代码实例\"></a>二、代码实例</h2><h3 id=\"1-服务-service\"><a href=\"#1-服务-service\" class=\"headerlink\" title=\"1. 服务 service\"></a>1. 服务 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/service/UserService.ts\">service</a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125;from <span class=\"string\">'@angular/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api from <span class=\"string\">'./../api/Api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Observable&#125; from <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable()</span></span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">data</span>:any;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"keyword\">public</span> http:Http) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.http = http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findAll():Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.<span class=\"keyword\">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-组件-HttpService\"><a href=\"#2-组件-HttpService\" class=\"headerlink\" title=\"2.组件 HttpService\"></a>2.组件 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.ts\">HttpService</a></h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component,OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../../service/UserService'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'http-service'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./HttpService.scss'</span>)],</span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./HttpService.html'</span>),</span><br><span class=\"line\">    providers: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServiceComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    admins:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    data:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(public userService:UserService) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userService = userService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    ngOnInit():<span class=\"keyword\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userService.findAll().subscribe((data:any) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.admins = data.adminUsers.content;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'in component : '</span>,<span class=\"keyword\">this</span>.admins);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' HttpServiceComponent ngOnInit :'</span>, <span class=\"string\">'enter'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-模板-HttpService-html\"><a href=\"#3-模板-HttpService-html\" class=\"headerlink\" title=\"3. 模板 HttpService.html\"></a>3. 模板 <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/httpService/HttpService.html\">HttpService.html</a></h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of admins;let i = index\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;i+1&#125;&#125;</span><span class=\"xml\">.</span><span class=\"template-variable\">&#123;&#123;item.userName&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-25T16:00:00.000Z","title":"angular2学习笔记之小技巧","_content":"在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n\n## 前言\n\n### 1. 组件\n\n```\n   @Component({\n   selector: 'reddit-article',\n   inputs: ['article'],\n   template:require('reddit-article.html');\n   })\n\n  class ArticleComponent {\n   article: Article;\n\n   voteUp(): boolean {\n   this.article.voteUp();\n   return false;\n   }\n\n   voteDown(): boolean {\n   this.article.voteDown();\n   return false;\n   }\n ```\n\n### 2. 模型\n\n类似javabean，可以把api封装在模型中\n\n```\n  class Article {\n   title: string;\n   link: string;\n   votes: number;\n\n  constructor(title: string, link: string, votes?: number) {\n   this.title = title;\n   this.link = link;\n   this.votes = votes || 0;\n   }\n\n   voteUp(): void {\n   this.votes += 1;\n   }\n\n   voteDown(): void {\n   this.votes -= 1;\n   }\n\n   sortedArticles(): Article[] {\n    return this.articles.sort((a: Article, b: Article) => b.votes - a.votes);\n    }\n\n```\n\n\n使用排序\n\n```\n<div class=\"ui grid posts\">\n <reddit-article\n *ngFor=\"let article of sortedArticles()\"\n [article]=\"article\">\n </reddit-article>\n </div\n```\n\n### 3.模板\n\n```\n  <div class=\"four wide column center aligned votes\">\n   <div class=\"ui statistic\">\n   <div class=\"value\">\n   {{ article.votes }}\n   </div>\n  writing your First Angular 2 Web Application\n   <div class=\"label\">\n   Points\n   </div>\n   </div>\n   </div>\n   <div class=\"twelve wide column\">\n   <a class=\"ui large header\" href=\"{{ article.link }}\">\n   {{ article.title }}\n   </a>\n\n   <ul class=\"ui big horizontal list voters\">\n   <li class=\"item\">\n   <a href (click)=\"voteUp()\">\n   <i class=\"arrow up icon\"></i>\n   upvote\n   </a>\n  </li>\n   <li class=\"item\">\n   <a href (click)=\"voteDown()\">\n   <i class=\"arrow down icon\"></i>\n   downvote\n   </a>\n   </li>\n   </ul>\n   </div>\n ```\n\n### 4. 服务\n\n```\nimport {Injectable} from '@angular/core';\nimport { Http }from '@angular/http';\nimport * as api from './../api/Api';\nimport {Observable} from 'rxjs/Rx';\n\n@Injectable()\nexport class UserService {\n    constructor(public http:Http) {\n        this.http = http;\n    }\n\n    findAll():Observable<any> {\n        return this.http.get(api.findAll).map((res:any)=> {\n            return res.json();\n        });\n    }\n}\n\n```\n\n### 5. 管道\n\n```\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'trim' })\nexport class TrimPipe implements PipeTransform {\n  transform(value, args) {\n    return value.trim();\n  }\n}\n\n```\n\n\n## 一、 防止页面刷新\n\n如果想阻止页面刷新,在方法的返回值为false。\n\n```\n  voteUp(): boolean {\n    this.article.votes += 1;\n    return false;\n  }\n\n  voteDown(): boolean {\n    this.article.votes -= 1;\n    return false;\n  }\n```\n\n## 二、 不让ng进行解析\n\n`ngNonBindable`\n\n告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译\n\n```\n\t<div>\n\t <span class=\"bordered\">{{ content }}</span>\n\t <span class=\"pre\" ngNonBindable>\n\t &larr; This is what {{ content }} rendered\n\t </span>\n\t</div>\n```\n## 三、 预处理\n在没有编译之前进行处理\n\n```\n\t@Component({\n   selector: 'hello',\n  host: {\n\t class: 'row'\n\t }\n```\n\n具体表现为 `<hello class=\"row\">`\n\n\n## 四. 组件传参\n\n### 1. 组件\n\n```\n@Component({\n selector: 'reddit-article',\n inputs: ['article'],\n })\n class ArticleComponent {\n article: Article;\n```\n\n### 2. 使用\n\n```\n <reddit-article [article]=\"article1\"></reddit-article>\n```\n\n我们可以在Component中得到\n\n## 五. 输出(自定义事件)\n\n在class中 定义一个 `@Output`(EventEmitter)然后在构造函数中实例化\n在class中 定义一个 `@Intput` 输入\n\n```\n\t@Component({\n\t selector: 'single-component',\n   inputs:['titles']\n\t outputs: ['putRingOnIt'],\n\t template: `\n\t <button (click)=\"liked()\">Like it?</button>\n\t `\n\t })\n\t // 自定义一个事件\n\t class SingleComponent {\n\t putRingOnIt: EventEmitter<string>;\n\n\t constructor() {\n\t this.putRingOnIt = new EventEmitter();\n\t }\n\n\t liked(): void {\n\t this.putRingOnIt.emit(\"oh oh oh\");\n\t }\n\t }\n```\n\n[] 输入 inputs  参数\n() 输出 outputs 事件\n\n## 六、 打印日志\n\n可以使用 `${value}`来替换参数\n\n```\naddArticle(title: HTMLInputElement, link: HTMLInputElement): void {\n console.log(`Adding article title: ${title.value} and link: ${link.value}`\\\n );\n  }\n```\n\n## 七、双向绑定\n\n### 1. 模型到视图\n[]  例如 [style.color]\n\n### 2. 视图到模型\n()  例如 (click)\n### 3. 双向绑定\n[()] 例如 [(ngModel)]\n","source":"_posts/2016-06-26.angular2_study_note_other.md","raw":"---\nauthor: 小莫\ndate: 2016-06-26\ntitle: angular2学习笔记之小技巧\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_note_other\n---\n在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n\n## 前言\n\n### 1. 组件\n\n```\n   @Component({\n   selector: 'reddit-article',\n   inputs: ['article'],\n   template:require('reddit-article.html');\n   })\n\n  class ArticleComponent {\n   article: Article;\n\n   voteUp(): boolean {\n   this.article.voteUp();\n   return false;\n   }\n\n   voteDown(): boolean {\n   this.article.voteDown();\n   return false;\n   }\n ```\n\n### 2. 模型\n\n类似javabean，可以把api封装在模型中\n\n```\n  class Article {\n   title: string;\n   link: string;\n   votes: number;\n\n  constructor(title: string, link: string, votes?: number) {\n   this.title = title;\n   this.link = link;\n   this.votes = votes || 0;\n   }\n\n   voteUp(): void {\n   this.votes += 1;\n   }\n\n   voteDown(): void {\n   this.votes -= 1;\n   }\n\n   sortedArticles(): Article[] {\n    return this.articles.sort((a: Article, b: Article) => b.votes - a.votes);\n    }\n\n```\n\n\n使用排序\n\n```\n<div class=\"ui grid posts\">\n <reddit-article\n *ngFor=\"let article of sortedArticles()\"\n [article]=\"article\">\n </reddit-article>\n </div\n```\n\n### 3.模板\n\n```\n  <div class=\"four wide column center aligned votes\">\n   <div class=\"ui statistic\">\n   <div class=\"value\">\n   {{ article.votes }}\n   </div>\n  writing your First Angular 2 Web Application\n   <div class=\"label\">\n   Points\n   </div>\n   </div>\n   </div>\n   <div class=\"twelve wide column\">\n   <a class=\"ui large header\" href=\"{{ article.link }}\">\n   {{ article.title }}\n   </a>\n\n   <ul class=\"ui big horizontal list voters\">\n   <li class=\"item\">\n   <a href (click)=\"voteUp()\">\n   <i class=\"arrow up icon\"></i>\n   upvote\n   </a>\n  </li>\n   <li class=\"item\">\n   <a href (click)=\"voteDown()\">\n   <i class=\"arrow down icon\"></i>\n   downvote\n   </a>\n   </li>\n   </ul>\n   </div>\n ```\n\n### 4. 服务\n\n```\nimport {Injectable} from '@angular/core';\nimport { Http }from '@angular/http';\nimport * as api from './../api/Api';\nimport {Observable} from 'rxjs/Rx';\n\n@Injectable()\nexport class UserService {\n    constructor(public http:Http) {\n        this.http = http;\n    }\n\n    findAll():Observable<any> {\n        return this.http.get(api.findAll).map((res:any)=> {\n            return res.json();\n        });\n    }\n}\n\n```\n\n### 5. 管道\n\n```\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'trim' })\nexport class TrimPipe implements PipeTransform {\n  transform(value, args) {\n    return value.trim();\n  }\n}\n\n```\n\n\n## 一、 防止页面刷新\n\n如果想阻止页面刷新,在方法的返回值为false。\n\n```\n  voteUp(): boolean {\n    this.article.votes += 1;\n    return false;\n  }\n\n  voteDown(): boolean {\n    this.article.votes -= 1;\n    return false;\n  }\n```\n\n## 二、 不让ng进行解析\n\n`ngNonBindable`\n\n告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译\n\n```\n\t<div>\n\t <span class=\"bordered\">{{ content }}</span>\n\t <span class=\"pre\" ngNonBindable>\n\t &larr; This is what {{ content }} rendered\n\t </span>\n\t</div>\n```\n## 三、 预处理\n在没有编译之前进行处理\n\n```\n\t@Component({\n   selector: 'hello',\n  host: {\n\t class: 'row'\n\t }\n```\n\n具体表现为 `<hello class=\"row\">`\n\n\n## 四. 组件传参\n\n### 1. 组件\n\n```\n@Component({\n selector: 'reddit-article',\n inputs: ['article'],\n })\n class ArticleComponent {\n article: Article;\n```\n\n### 2. 使用\n\n```\n <reddit-article [article]=\"article1\"></reddit-article>\n```\n\n我们可以在Component中得到\n\n## 五. 输出(自定义事件)\n\n在class中 定义一个 `@Output`(EventEmitter)然后在构造函数中实例化\n在class中 定义一个 `@Intput` 输入\n\n```\n\t@Component({\n\t selector: 'single-component',\n   inputs:['titles']\n\t outputs: ['putRingOnIt'],\n\t template: `\n\t <button (click)=\"liked()\">Like it?</button>\n\t `\n\t })\n\t // 自定义一个事件\n\t class SingleComponent {\n\t putRingOnIt: EventEmitter<string>;\n\n\t constructor() {\n\t this.putRingOnIt = new EventEmitter();\n\t }\n\n\t liked(): void {\n\t this.putRingOnIt.emit(\"oh oh oh\");\n\t }\n\t }\n```\n\n[] 输入 inputs  参数\n() 输出 outputs 事件\n\n## 六、 打印日志\n\n可以使用 `${value}`来替换参数\n\n```\naddArticle(title: HTMLInputElement, link: HTMLInputElement): void {\n console.log(`Adding article title: ${title.value} and link: ${link.value}`\\\n );\n  }\n```\n\n## 七、双向绑定\n\n### 1. 模型到视图\n[]  例如 [style.color]\n\n### 2. 视图到模型\n()  例如 (click)\n### 3. 双向绑定\n[()] 例如 [(ngModel)]\n","slug":"angular2_study_note_other","published":1,"updated":"2016-06-30T09:27:39.601Z","_id":"cipxtqv3100011omc7fmlai78","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"1-组件\"><a href=\"#1-组件\" class=\"headerlink\" title=\"1. 组件\"></a>1. 组件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'reddit-article'</span>,</span><br><span class=\"line\"> inputs: [<span class=\"meta-string\">'article'</span>],</span><br><span class=\"line\"> template:require(<span class=\"meta-string\">'reddit-article.html'</span>)</span>;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleComponent</span> </span>&#123;</span><br><span class=\"line\"> article: Article;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteUp(): boolean &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.article.voteUp();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteDown(): boolean &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.article.voteDown();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2. 模型\"></a>2. 模型</h3><p>类似javabean，可以把api封装在模型中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span> </span>&#123;</span><br><span class=\"line\"> title: string;</span><br><span class=\"line\"> link: string;</span><br><span class=\"line\"> votes: number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(title: string, link: string, votes?: number) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.link = link;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes = votes || <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteUp(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes += <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteDown(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes -= <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> sortedArticles(): Article[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.articles.sort((a: Article, b: Article) =&gt; b.votes - a.votes);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>使用排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui grid posts\"</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">reddit-article</span></span><br><span class=\"line\"> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let article of sortedArticles()\"</span></span><br><span class=\"line\"> [<span class=\"attr\">article</span>]=<span class=\"string\">\"article\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">reddit-article</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-模板\"><a href=\"#3-模板\" class=\"headerlink\" title=\"3.模板\"></a>3.模板</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"four wide column center aligned votes\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"ui statistic\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"value\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123; <span class=\"selector-tag\">article</span><span class=\"selector-class\">.votes</span> &#125;&#125;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">writing your First Angular <span class=\"number\">2</span> Web Application</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"label\"</span>&gt;</span><br><span class=\"line\"> Points</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"twelve wide column\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> class=<span class=\"string\">\"ui large header\"</span> href=<span class=\"string\">\"&#123;&#123; article.link &#125;&#125;\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123; <span class=\"selector-tag\">article</span><span class=\"selector-class\">.title</span> &#125;&#125;</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">ul</span> class=<span class=\"string\">\"ui big horizontal list voters\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">li</span> class=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> href (click)=<span class=\"string\">\"voteUp()\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"arrow up icon\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\"> upvote</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">li</span> class=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> href (click)=<span class=\"string\">\"voteDown()\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"arrow down icon\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\"> downvote</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\"> &lt;/li&gt;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-服务\"><a href=\"#4-服务\" class=\"headerlink\" title=\"4. 服务\"></a>4. 服务</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125;from <span class=\"string\">'@angular/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api from <span class=\"string\">'./../api/Api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Observable&#125; from <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable()</span></span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"keyword\">public</span> http:Http) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.http = http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findAll():Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.<span class=\"keyword\">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-管道\"><a href=\"#5-管道\" class=\"headerlink\" title=\"5. 管道\"></a>5. 管道</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123; name: <span class=\"string\">'trim'</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrimPipe</span> <span class=\"keyword\">implements</span> <span class=\"title\">PipeTransform</span> </span>&#123;</span><br><span class=\"line\">  transform(value, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.trim();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一、-防止页面刷新\"><a href=\"#一、-防止页面刷新\" class=\"headerlink\" title=\"一、 防止页面刷新\"></a>一、 防止页面刷新</h2><p>如果想阻止页面刷新,在方法的返回值为false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">voteUp(): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.article.votes += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">voteDown(): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.article.votes -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-不让ng进行解析\"><a href=\"#二、-不让ng进行解析\" class=\"headerlink\" title=\"二、 不让ng进行解析\"></a>二、 不让ng进行解析</h2><p><code>ngNonBindable</code></p>\n<p>告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bordered\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; content &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pre\"</span> <span class=\"attr\">ngNonBindable</span>&gt;</span></span><br><span class=\"line\"> &amp;larr; This is what </span><span class=\"template-variable\">&#123;&#123; content &#125;&#125;</span><span class=\"xml\"> rendered</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、-预处理\"><a href=\"#三、-预处理\" class=\"headerlink\" title=\"三、 预处理\"></a>三、 预处理</h2><p>在没有编译之前进行处理</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\"> <span class=\"attribute\">host</span>: &#123;</span><br><span class=\"line\"> <span class=\"attribute\">class</span>: <span class=\"string\">'row'</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>具体表现为 <code>&lt;hello class=&quot;row&quot;&gt;</code></p>\n<h2 id=\"四-组件传参\"><a href=\"#四-组件传参\" class=\"headerlink\" title=\"四. 组件传参\"></a>四. 组件传参</h2><h3 id=\"1-组件-1\"><a href=\"#1-组件-1\" class=\"headerlink\" title=\"1. 组件\"></a>1. 组件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'reddit-article'</span>,</span><br><span class=\"line\"> inputs: [<span class=\"meta-string\">'article'</span>],</span><br><span class=\"line\"> &#125;)</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleComponent</span> </span>&#123;</span><br><span class=\"line\"> article: Article;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reddit-article</span> [<span class=\"attr\">article</span>]=<span class=\"string\">\"article1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reddit-article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以在Component中得到</p>\n<h2 id=\"五-输出-自定义事件\"><a href=\"#五-输出-自定义事件\" class=\"headerlink\" title=\"五. 输出(自定义事件)\"></a>五. 输出(自定义事件)</h2><p>在class中 定义一个 <code>@Output</code>(EventEmitter)然后在构造函数中实例化<br>在class中 定义一个 <code>@Intput</code> 输入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'single-component'</span>,</span><br><span class=\"line\">  inputs:[<span class=\"meta-string\">'titles'</span>]</span><br><span class=\"line\"> outputs: [<span class=\"meta-string\">'putRingOnIt'</span>],</span><br><span class=\"line\"> template: `</span><br><span class=\"line\"> &lt;button (click)</span>=<span class=\"string\">\"liked()\"</span>&gt;Like it?&lt;/button&gt;</span><br><span class=\"line\"> `</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 自定义一个事件</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleComponent</span> </span>&#123;</span><br><span class=\"line\"> putRingOnIt: EventEmitter&lt;string&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.putRingOnIt = new EventEmitter();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> liked(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.putRingOnIt.emit(<span class=\"string\">\"oh oh oh\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>[] 输入 inputs  参数<br>() 输出 outputs 事件</p>\n<h2 id=\"六、-打印日志\"><a href=\"#六、-打印日志\" class=\"headerlink\" title=\"六、 打印日志\"></a>六、 打印日志</h2><p>可以使用 <code>${value}</code>来替换参数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">addArticle</span>(<span class=\"attribute\">title</span>: HTMLInputElement, <span class=\"attribute\">link</span>: HTMLInputElement): <span class=\"selector-tag\">void</span> &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">console</span><span class=\"selector-class\">.log</span>(<span class=\"built_in\">`Adding article title: $&#123;title.value&#125; and link: $&#123;link.value&#125;`</span>\\</span><br><span class=\"line\"> );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、双向绑定\"><a href=\"#七、双向绑定\" class=\"headerlink\" title=\"七、双向绑定\"></a>七、双向绑定</h2><h3 id=\"1-模型到视图\"><a href=\"#1-模型到视图\" class=\"headerlink\" title=\"1. 模型到视图\"></a>1. 模型到视图</h3><p>[]  例如 [style.color]</p>\n<h3 id=\"2-视图到模型\"><a href=\"#2-视图到模型\" class=\"headerlink\" title=\"2. 视图到模型\"></a>2. 视图到模型</h3><p>()  例如 (click)</p>\n<h3 id=\"3-双向绑定\"><a href=\"#3-双向绑定\" class=\"headerlink\" title=\"3. 双向绑定\"></a>3. 双向绑定</h3><p>[()] 例如 [(ngModel)]</p>\n","excerpt":"<p>在angular2的开发中经常会遇到各种各样的问题，我们可以采用一些小技巧来解决这些问题。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"1-组件\"><a href=\"#1-组件\" class=\"headerlink\" title=\"1. 组件\"></a>1. 组件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'reddit-article'</span>,</span><br><span class=\"line\"> inputs: [<span class=\"meta-string\">'article'</span>],</span><br><span class=\"line\"> template:require(<span class=\"meta-string\">'reddit-article.html'</span>)</span>;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleComponent</span> </span>&#123;</span><br><span class=\"line\"> article: Article;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteUp(): boolean &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.article.voteUp();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteDown(): boolean &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.article.voteDown();</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2. 模型\"></a>2. 模型</h3><p>类似javabean，可以把api封装在模型中</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span> </span>&#123;</span><br><span class=\"line\"> title: string;</span><br><span class=\"line\"> link: string;</span><br><span class=\"line\"> votes: number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(title: string, link: string, votes?: number) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.link = link;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes = votes || <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteUp(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes += <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> voteDown(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.votes -= <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> sortedArticles(): Article[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.articles.sort((a: Article, b: Article) =&gt; b.votes - a.votes);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>使用排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ui grid posts\"</span>&gt;</span><br><span class=\"line\"> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">reddit-article</span></span><br><span class=\"line\"> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let article of sortedArticles()\"</span></span><br><span class=\"line\"> [<span class=\"attr\">article</span>]=<span class=\"string\">\"article\"</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">reddit-article</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span></span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-模板\"><a href=\"#3-模板\" class=\"headerlink\" title=\"3.模板\"></a>3.模板</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"four wide column center aligned votes\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"ui statistic\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"value\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123; <span class=\"selector-tag\">article</span><span class=\"selector-class\">.votes</span> &#125;&#125;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">writing your First Angular <span class=\"number\">2</span> Web Application</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"label\"</span>&gt;</span><br><span class=\"line\"> Points</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">div</span> class=<span class=\"string\">\"twelve wide column\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> class=<span class=\"string\">\"ui large header\"</span> href=<span class=\"string\">\"&#123;&#123; article.link &#125;&#125;\"</span>&gt;</span><br><span class=\"line\"> &#123;&#123; <span class=\"selector-tag\">article</span><span class=\"selector-class\">.title</span> &#125;&#125;</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">ul</span> class=<span class=\"string\">\"ui big horizontal list voters\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">li</span> class=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> href (click)=<span class=\"string\">\"voteUp()\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"arrow up icon\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\"> upvote</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">li</span> class=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">a</span> href (click)=<span class=\"string\">\"voteDown()\"</span>&gt;</span><br><span class=\"line\"> &lt;<span class=\"selector-tag\">i</span> class=<span class=\"string\">\"arrow down icon\"</span>&gt;&lt;/i&gt;</span><br><span class=\"line\"> downvote</span><br><span class=\"line\"> &lt;/a&gt;</span><br><span class=\"line\"> &lt;/li&gt;</span><br><span class=\"line\"> &lt;/ul&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-服务\"><a href=\"#4-服务\" class=\"headerlink\" title=\"4. 服务\"></a>4. 服务</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Http &#125;from <span class=\"string\">'@angular/http'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> api from <span class=\"string\">'./../api/Api'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Observable&#125; from <span class=\"string\">'rxjs/Rx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable()</span></span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"keyword\">public</span> http:Http) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.http = http;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    findAll():Observable&lt;any&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.http.<span class=\"keyword\">get</span>(api.findAll).map((res:any)=&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.json();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-管道\"><a href=\"#5-管道\" class=\"headerlink\" title=\"5. 管道\"></a>5. 管道</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; from <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pipe</span>(&#123; name: <span class=\"string\">'trim'</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrimPipe</span> <span class=\"keyword\">implements</span> <span class=\"title\">PipeTransform</span> </span>&#123;</span><br><span class=\"line\">  transform(value, args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.trim();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一、-防止页面刷新\"><a href=\"#一、-防止页面刷新\" class=\"headerlink\" title=\"一、 防止页面刷新\"></a>一、 防止页面刷新</h2><p>如果想阻止页面刷新,在方法的返回值为false。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">voteUp(): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.article.votes += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">voteDown(): boolean &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.article.votes -= <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、-不让ng进行解析\"><a href=\"#二、-不让ng进行解析\" class=\"headerlink\" title=\"二、 不让ng进行解析\"></a>二、 不让ng进行解析</h2><p><code>ngNonBindable</code></p>\n<p>告诉angular 在这个页面上我们不绑定或者不编译的特殊部分。比如我们要展示代码源码的时候不希望它进行编译</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bordered\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; content &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pre\"</span> <span class=\"attr\">ngNonBindable</span>&gt;</span></span><br><span class=\"line\"> &amp;larr; This is what </span><span class=\"template-variable\">&#123;&#123; content &#125;&#125;</span><span class=\"xml\"> rendered</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、-预处理\"><a href=\"#三、-预处理\" class=\"headerlink\" title=\"三、 预处理\"></a>三、 预处理</h2><p>在没有编译之前进行处理</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\"> <span class=\"attribute\">host</span>: &#123;</span><br><span class=\"line\"> <span class=\"attribute\">class</span>: <span class=\"string\">'row'</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>具体表现为 <code>&lt;hello class=&quot;row&quot;&gt;</code></p>\n<h2 id=\"四-组件传参\"><a href=\"#四-组件传参\" class=\"headerlink\" title=\"四. 组件传参\"></a>四. 组件传参</h2><h3 id=\"1-组件-1\"><a href=\"#1-组件-1\" class=\"headerlink\" title=\"1. 组件\"></a>1. 组件</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'reddit-article'</span>,</span><br><span class=\"line\"> inputs: [<span class=\"meta-string\">'article'</span>],</span><br><span class=\"line\"> &#125;)</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleComponent</span> </span>&#123;</span><br><span class=\"line\"> article: Article;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">reddit-article</span> [<span class=\"attr\">article</span>]=<span class=\"string\">\"article1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">reddit-article</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们可以在Component中得到</p>\n<h2 id=\"五-输出-自定义事件\"><a href=\"#五-输出-自定义事件\" class=\"headerlink\" title=\"五. 输出(自定义事件)\"></a>五. 输出(自定义事件)</h2><p>在class中 定义一个 <code>@Output</code>(EventEmitter)然后在构造函数中实例化<br>在class中 定义一个 <code>@Intput</code> 输入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\"> selector: <span class=\"meta-string\">'single-component'</span>,</span><br><span class=\"line\">  inputs:[<span class=\"meta-string\">'titles'</span>]</span><br><span class=\"line\"> outputs: [<span class=\"meta-string\">'putRingOnIt'</span>],</span><br><span class=\"line\"> template: `</span><br><span class=\"line\"> &lt;button (click)</span>=<span class=\"string\">\"liked()\"</span>&gt;Like it?&lt;/button&gt;</span><br><span class=\"line\"> `</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> <span class=\"comment\">// 自定义一个事件</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleComponent</span> </span>&#123;</span><br><span class=\"line\"> putRingOnIt: EventEmitter&lt;string&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.putRingOnIt = new EventEmitter();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> liked(): void &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.putRingOnIt.emit(<span class=\"string\">\"oh oh oh\"</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>[] 输入 inputs  参数<br>() 输出 outputs 事件</p>\n<h2 id=\"六、-打印日志\"><a href=\"#六、-打印日志\" class=\"headerlink\" title=\"六、 打印日志\"></a>六、 打印日志</h2><p>可以使用 <code>${value}</code>来替换参数</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">addArticle</span>(<span class=\"attribute\">title</span>: HTMLInputElement, <span class=\"attribute\">link</span>: HTMLInputElement): <span class=\"selector-tag\">void</span> &#123;</span><br><span class=\"line\"> <span class=\"selector-tag\">console</span><span class=\"selector-class\">.log</span>(<span class=\"built_in\">`Adding article title: $&#123;title.value&#125; and link: $&#123;link.value&#125;`</span>\\</span><br><span class=\"line\"> );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、双向绑定\"><a href=\"#七、双向绑定\" class=\"headerlink\" title=\"七、双向绑定\"></a>七、双向绑定</h2><h3 id=\"1-模型到视图\"><a href=\"#1-模型到视图\" class=\"headerlink\" title=\"1. 模型到视图\"></a>1. 模型到视图</h3><p>[]  例如 [style.color]</p>\n<h3 id=\"2-视图到模型\"><a href=\"#2-视图到模型\" class=\"headerlink\" title=\"2. 视图到模型\"></a>2. 视图到模型</h3><p>()  例如 (click)</p>\n<h3 id=\"3-双向绑定\"><a href=\"#3-双向绑定\" class=\"headerlink\" title=\"3. 双向绑定\"></a>3. 双向绑定</h3><p>[()] 例如 [(ngModel)]</p>"},{"author":"小莫","date":"2016-06-27T16:00:00.000Z","title":"angular2学习笔记之表单和验证","_content":"目前学习的版本是rc2,然而form相关的接口全部废弃掉使用新的了，google就是这么会折腾。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、效果图\n\n![](http://static.xiaomo.info/images/ValidateForm.gif)\n\n## 二、代码解析\n\n### 1. [ValidateForm.ts]()\n\n```\nimport {Component} from \"@angular/core\";\nimport {Hero} from \"./../../model/HeroModel\";\n\n@Component({\n    selector: 'validate-form',\n    template: require('./ValidateForm.html')\n})\nexport class ValidateFormComponent {\n  //准备数据\n    powers = ['Really Smart', 'Super Flexible',\n        'Super Hot', 'Weather Changer'];\n    model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n    //默认是未提交状态(作用是在模板中会根据是否提交的状态显示不同的视图)\n    submitted = false;\n\n    //提交之后将提交状态改为true\n    onSubmit() {\n        this.submitted = true;\n    }\n    //如果是活跃状态，显示提交后的表单(也就是填充了数据的表单)\n    active = true;\n\n    //创建新英雄(清空表单并将填充了数据的表单隐藏)\n    newHero() {\n        this.model = new Hero(42, '', '');\n        this.active = false;\n        setTimeout(() => this.active = true, 0);\n    }\n}\n```\n","source":"_posts/2016-06-28.angular2_study_form.md","raw":"---\nauthor: 小莫\ndate: 2016-06-28\ntitle: angular2学习笔记之表单和验证\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_forms\n---\n目前学习的版本是rc2,然而form相关的接口全部废弃掉使用新的了，google就是这么会折腾。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、效果图\n\n![](http://static.xiaomo.info/images/ValidateForm.gif)\n\n## 二、代码解析\n\n### 1. [ValidateForm.ts]()\n\n```\nimport {Component} from \"@angular/core\";\nimport {Hero} from \"./../../model/HeroModel\";\n\n@Component({\n    selector: 'validate-form',\n    template: require('./ValidateForm.html')\n})\nexport class ValidateFormComponent {\n  //准备数据\n    powers = ['Really Smart', 'Super Flexible',\n        'Super Hot', 'Weather Changer'];\n    model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n    //默认是未提交状态(作用是在模板中会根据是否提交的状态显示不同的视图)\n    submitted = false;\n\n    //提交之后将提交状态改为true\n    onSubmit() {\n        this.submitted = true;\n    }\n    //如果是活跃状态，显示提交后的表单(也就是填充了数据的表单)\n    active = true;\n\n    //创建新英雄(清空表单并将填充了数据的表单隐藏)\n    newHero() {\n        this.model = new Hero(42, '', '');\n        this.active = false;\n        setTimeout(() => this.active = true, 0);\n    }\n}\n```\n","slug":"angular2_study_forms","published":1,"updated":"2016-06-30T09:11:39.051Z","_id":"cipxu8vgf0000pomcmezaudrr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>目前学习的版本是rc2,然而form相关的接口全部废弃掉使用新的了，google就是这么会折腾。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、效果图\"><a href=\"#一、效果图\" class=\"headerlink\" title=\"一、效果图\"></a>一、效果图</h2><p><img src=\"http://static.xiaomo.info/images/ValidateForm.gif\" alt=\"\"></p>\n<h2 id=\"二、代码解析\"><a href=\"#二、代码解析\" class=\"headerlink\" title=\"二、代码解析\"></a>二、代码解析</h2><h3 id=\"1-ValidateForm-ts\"><a href=\"#1-ValidateForm-ts\" class=\"headerlink\" title=\"1. ValidateForm.ts\"></a>1. <a href=\"\">ValidateForm.ts</a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Hero&#125; from <span class=\"string\">\"./../../model/HeroModel\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"meta-string\">'validate-form'</span>,</span><br><span class=\"line\">    template: require(<span class=\"meta-string\">'./ValidateForm.html'</span>)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidateFormComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//准备数据</span></span><br><span class=\"line\">    powers = [<span class=\"string\">'Really Smart'</span>, <span class=\"string\">'Super Flexible'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Super Hot'</span>, <span class=\"string\">'Weather Changer'</span>];</span><br><span class=\"line\">    model = new Hero(<span class=\"number\">18</span>, <span class=\"string\">'Dr IQ'</span>, <span class=\"keyword\">this</span>.powers[<span class=\"number\">0</span>], <span class=\"string\">'Chuck Overstreet'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//默认是未提交状态(作用是在模板中会根据是否提交的状态显示不同的视图)</span></span><br><span class=\"line\">    submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提交之后将提交状态改为true</span></span><br><span class=\"line\">    onSubmit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.submitted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是活跃状态，显示提交后的表单(也就是填充了数据的表单)</span></span><br><span class=\"line\">    active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建新英雄(清空表单并将填充了数据的表单隐藏)</span></span><br><span class=\"line\">    newHero() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model = new Hero(<span class=\"number\">42</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.active = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        setTimeout(() =&gt; <span class=\"keyword\">this</span>.active = <span class=\"literal\">true</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>目前学习的版本是rc2,然而form相关的接口全部废弃掉使用新的了，google就是这么会折腾。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、效果图\"><a href=\"#一、效果图\" class=\"headerlink\" title=\"一、效果图\"></a>一、效果图</h2><p><img src=\"http://static.xiaomo.info/images/ValidateForm.gif\" alt=\"\"></p>\n<h2 id=\"二、代码解析\"><a href=\"#二、代码解析\" class=\"headerlink\" title=\"二、代码解析\"></a>二、代码解析</h2><h3 id=\"1-ValidateForm-ts\"><a href=\"#1-ValidateForm-ts\" class=\"headerlink\" title=\"1. ValidateForm.ts\"></a>1. <a href=\"\">ValidateForm.ts</a></h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; from <span class=\"string\">\"@angular/core\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Hero&#125; from <span class=\"string\">\"./../../model/HeroModel\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"meta-string\">'validate-form'</span>,</span><br><span class=\"line\">    template: require(<span class=\"meta-string\">'./ValidateForm.html'</span>)</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ValidateFormComponent</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//准备数据</span></span><br><span class=\"line\">    powers = [<span class=\"string\">'Really Smart'</span>, <span class=\"string\">'Super Flexible'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Super Hot'</span>, <span class=\"string\">'Weather Changer'</span>];</span><br><span class=\"line\">    model = new Hero(<span class=\"number\">18</span>, <span class=\"string\">'Dr IQ'</span>, <span class=\"keyword\">this</span>.powers[<span class=\"number\">0</span>], <span class=\"string\">'Chuck Overstreet'</span>);</span><br><span class=\"line\">    <span class=\"comment\">//默认是未提交状态(作用是在模板中会根据是否提交的状态显示不同的视图)</span></span><br><span class=\"line\">    submitted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提交之后将提交状态改为true</span></span><br><span class=\"line\">    onSubmit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.submitted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果是活跃状态，显示提交后的表单(也就是填充了数据的表单)</span></span><br><span class=\"line\">    active = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建新英雄(清空表单并将填充了数据的表单隐藏)</span></span><br><span class=\"line\">    newHero() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.model = new Hero(<span class=\"number\">42</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.active = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        setTimeout(() =&gt; <span class=\"keyword\">this</span>.active = <span class=\"literal\">true</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-28T16:00:00.000Z","title":"angular2学习笔记之路由","_content":"既然要做spa，那么router当然是必不可少的。angular1的内置router坑坏了不少人，但是自始自终没有更新路由。好在angular2在路由上做的比较完备，不用再使用第三方router。是不是一大福音呢？[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、笔记整理中\n","source":"_posts/2016-06-29.angular2_study_router.md","raw":"---\nauthor: 小莫\ndate: 2016-06-29\ntitle: angular2学习笔记之路由\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_forms\n---\n既然要做spa，那么router当然是必不可少的。angular1的内置router坑坏了不少人，但是自始自终没有更新路由。好在angular2在路由上做的比较完备，不用再使用第三方router。是不是一大福音呢？[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、笔记整理中\n","slug":"angular2_study_forms","published":1,"updated":"2016-06-28T02:47:31.388Z","_id":"cipxu8vgu0001pomck65xhnnu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>既然要做spa，那么router当然是必不可少的。angular1的内置router坑坏了不少人，但是自始自终没有更新路由。好在angular2在路由上做的比较完备，不用再使用第三方router。是不是一大福音呢？<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、笔记整理中\"><a href=\"#一、笔记整理中\" class=\"headerlink\" title=\"一、笔记整理中\"></a>一、笔记整理中</h2>","excerpt":"<p>既然要做spa，那么router当然是必不可少的。angular1的内置router坑坏了不少人，但是自始自终没有更新路由。好在angular2在路由上做的比较完备，不用再使用第三方router。是不是一大福音呢？<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、笔记整理中\"><a href=\"#一、笔记整理中\" class=\"headerlink\" title=\"一、笔记整理中\"></a>一、笔记整理中</h2>"},{"author":"小莫","date":"2016-06-30T16:00:00.000Z","title":"2016年学习计划","_content":"2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/2016.png)](https://github.com/qq83387856)\n\n## 一、开发工具\n\n### 1. atom\n\nAtom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。\n\n### 2. idea\nIDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。\n\n### 3. webpack\n\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n### 4. gulp\nGulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目...\n### 5. lodash\nlodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。\n### 6. fetch\n对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。\n### 7. Electron\nElectron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。\n\n## 二、javascript框架\n\n### 1. angular2\n\n#### 跨平台开发\n学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。\n#### 速度与性能\n通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。\nAngular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。\n#### 美妙的工具\n使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。\n### 2. react+redux\nReact+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。\n### 3. jquery\nJQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。\n### 4. antd\nAnt Design 是蚂蚁金服开发和正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现。企业级金融产品的交互语言和视觉体系。丰富实用的 React UI 组件。基于 React 的组件化开发模式。背靠 npm 生态圈。基于 webpack 的调试构建方案，支持 ES6。\n## 三、node相关技术\n\n### 1. npm\nNPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。\n### 2. express\nExpress 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n### 3. koa2\nkoa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。\n### 4. rxjs\n是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。\n### 5. zonejs\n在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。\n## 四、设计模式\n### 1. [javascript设计模式](http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/)\n\n## 五、编程语言\n### 1. javascript\nJavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\n### 2. ecmscript6\nES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。\n### 3. typesript\ntypescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。\n\n## 六、数据存储\n### 1. mysql\nMySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。\n### 2. mongodb\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n### 3. redis\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n### 4. cookie\nCookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）\n### 5. access token\nWindows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。\n\n## 七、html5+css3\n### 1. html5\nHTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。\nHTML5的设计目的是为了在移动设备上支持多媒体。\nHTML5 简单易学。\n### 2. ejs\nEJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。引入EJS 创建一个模板 使用视图工具组件 与最初的JavaScript相比较，一些不太了解你的代码的人可以更容易地通过EJS模板代码看得懂你的代码。 让我们放松一下，一起来享受下令人激动的干净简洁的感觉。\n### 3. canvas\nTML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。\n### 4. css3\nCSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。\n### 5. sass\nSASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n### 6. postcss\nPostCSS 是使用 JS 插件来转换 CSS 的工具，支持变量，混入，未来 CSS 语法，内联图像等等。\nPostCSS 已经被许多大公司使用：谷歌，推特，阿里巴巴和 Shopify。 Autoprefixer PostCSS 插件是最流行的 CSS 处理器插件之一。\n### 7. 白鹭引擎\n白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。\n## 八、算法和数据结构\n### 1. 线型查找\n在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。\n### 2. 二分查找\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n### 3. 冒泡排序\n冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n### 4. 选择排序\n选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。\n### 5. 插入排序\n插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。\n### 6. 字符串反转\n\n```\nvar str = '123';\nvar newStr = str.split(\"\").reverse().join(\"\");\nalert(newStr);\n```\n\n### 7. 搜索算法\n搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。\n### 8. 贪心算法\n贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。\n### 9. tween算法\nFlash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。\n### 10. javascript算法库\n - [numbers.js](https://github.com/sjkaliski/numbers.js/)\n - [Numeric Javascript ](http://www.numericjs.com/)\n - [Tangle](http://worrydream.com/Tangle/)\n - [accounting.js](http://josscrowcroft.github.io/accounting.js/)\n## 九、测试框架\n### 1. mocha\nmocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。\n### 2. karma\nKarma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n### 3. jasmine\nJasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。\n### 4. chai\nChai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。\n### 5.Qunit\n该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子\n### 6. should.js:\nTJ的另外一个开源贡献\n### 7. expect.js\nBDD风格的另外一个断言库，基于should.js,是mini版的BDD库\n### 8. assert\nnode自带核心模块: 可以在node中使用的断言模块\n\n## 十、[重构](http://www.raychase.net/138)\n### 1. 命名\n 模块划分和命名空间\n### 2. 加载\njs的动态加载\n### 3. 测试\nJavascript的测试\n### 4. 编码\n Javascript编码规则\n### 5. 闭包\n 利用原型/闭包开发组件\n### 6. 继承\n 利用继承来做事\n### 7. 重用\n 重用老代码\n### 8. 检测\n JSDoc和JSLint\n### 9.  框架\n自定义JavaScript产品框架\n### 10.  强化\n强化对象封装和模块封装\n","source":"_posts/2016-07-01.year_2016_study_plan.md","raw":"---\nauthor: 小莫\ndate: 2016-07-01\ntitle: 2016年学习计划\ntags:\n- 开发工具\ncategory: 生活\npermalink: 2016_study_plan\n---\n2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/2016.png)](https://github.com/qq83387856)\n\n## 一、开发工具\n\n### 1. atom\n\nAtom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。\n\n### 2. idea\nIDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。\n\n### 3. webpack\n\nwebpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。\n### 4. gulp\nGulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目...\n### 5. lodash\nlodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。\n### 6. fetch\n对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。\n### 7. Electron\nElectron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。\n\n## 二、javascript框架\n\n### 1. angular2\n\n#### 跨平台开发\n学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。\n#### 速度与性能\n通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。\nAngular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。\n#### 美妙的工具\n使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。\n### 2. react+redux\nReact+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。\n### 3. jquery\nJQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。\n### 4. antd\nAnt Design 是蚂蚁金服开发和正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现。企业级金融产品的交互语言和视觉体系。丰富实用的 React UI 组件。基于 React 的组件化开发模式。背靠 npm 生态圈。基于 webpack 的调试构建方案，支持 ES6。\n## 三、node相关技术\n\n### 1. npm\nNPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。\n### 2. express\nExpress 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。\n### 3. koa2\nkoa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。\n### 4. rxjs\n是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。\n### 5. zonejs\n在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。\n## 四、设计模式\n### 1. [javascript设计模式](http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/)\n\n## 五、编程语言\n### 1. javascript\nJavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。\n### 2. ecmscript6\nES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。\n### 3. typesript\ntypescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。\n\n## 六、数据存储\n### 1. mysql\nMySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。\n### 2. mongodb\nMongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\n### 3. redis\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n### 4. cookie\nCookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）\n### 5. access token\nWindows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。\n\n## 七、html5+css3\n### 1. html5\nHTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。\nHTML5的设计目的是为了在移动设备上支持多媒体。\nHTML5 简单易学。\n### 2. ejs\nEJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。引入EJS 创建一个模板 使用视图工具组件 与最初的JavaScript相比较，一些不太了解你的代码的人可以更容易地通过EJS模板代码看得懂你的代码。 让我们放松一下，一起来享受下令人激动的干净简洁的感觉。\n### 3. canvas\nTML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。\n### 4. css3\nCSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。\n### 5. sass\nSASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n### 6. postcss\nPostCSS 是使用 JS 插件来转换 CSS 的工具，支持变量，混入，未来 CSS 语法，内联图像等等。\nPostCSS 已经被许多大公司使用：谷歌，推特，阿里巴巴和 Shopify。 Autoprefixer PostCSS 插件是最流行的 CSS 处理器插件之一。\n### 7. 白鹭引擎\n白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。\n## 八、算法和数据结构\n### 1. 线型查找\n在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。\n### 2. 二分查找\n二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。\n### 3. 冒泡排序\n冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。\n### 4. 选择排序\n选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。\n### 5. 插入排序\n插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。\n### 6. 字符串反转\n\n```\nvar str = '123';\nvar newStr = str.split(\"\").reverse().join(\"\");\nalert(newStr);\n```\n\n### 7. 搜索算法\n搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。\n### 8. 贪心算法\n贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。\n### 9. tween算法\nFlash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。\n### 10. javascript算法库\n - [numbers.js](https://github.com/sjkaliski/numbers.js/)\n - [Numeric Javascript ](http://www.numericjs.com/)\n - [Tangle](http://worrydream.com/Tangle/)\n - [accounting.js](http://josscrowcroft.github.io/accounting.js/)\n## 九、测试框架\n### 1. mocha\nmocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。\n### 2. karma\nKarma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。\n### 3. jasmine\nJasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。\n### 4. chai\nChai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。\n### 5.Qunit\n该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子\n### 6. should.js:\nTJ的另外一个开源贡献\n### 7. expect.js\nBDD风格的另外一个断言库，基于should.js,是mini版的BDD库\n### 8. assert\nnode自带核心模块: 可以在node中使用的断言模块\n\n## 十、[重构](http://www.raychase.net/138)\n### 1. 命名\n 模块划分和命名空间\n### 2. 加载\njs的动态加载\n### 3. 测试\nJavascript的测试\n### 4. 编码\n Javascript编码规则\n### 5. 闭包\n 利用原型/闭包开发组件\n### 6. 继承\n 利用继承来做事\n### 7. 重用\n 重用老代码\n### 8. 检测\n JSDoc和JSLint\n### 9.  框架\n自定义JavaScript产品框架\n### 10.  强化\n强化对象封装和模块封装\n","slug":"2016_study_plan","published":1,"updated":"2016-06-30T04:28:07.355Z","_id":"cipxux8to0000jomc0a3jdau8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/2016.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、开发工具\"><a href=\"#一、开发工具\" class=\"headerlink\" title=\"一、开发工具\"></a>一、开发工具</h2><h3 id=\"1-atom\"><a href=\"#1-atom\" class=\"headerlink\" title=\"1. atom\"></a>1. atom</h3><p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</p>\n<h3 id=\"2-idea\"><a href=\"#2-idea\" class=\"headerlink\" title=\"2. idea\"></a>2. idea</h3><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p>\n<h3 id=\"3-webpack\"><a href=\"#3-webpack\" class=\"headerlink\" title=\"3. webpack\"></a>3. webpack</h3><p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>\n<h3 id=\"4-gulp\"><a href=\"#4-gulp\" class=\"headerlink\" title=\"4. gulp\"></a>4. gulp</h3><p>Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目…</p>\n<h3 id=\"5-lodash\"><a href=\"#5-lodash\" class=\"headerlink\" title=\"5. lodash\"></a>5. lodash</h3><p>lodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。</p>\n<h3 id=\"6-fetch\"><a href=\"#6-fetch\" class=\"headerlink\" title=\"6. fetch\"></a>6. fetch</h3><p>对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。</p>\n<h3 id=\"7-Electron\"><a href=\"#7-Electron\" class=\"headerlink\" title=\"7. Electron\"></a>7. Electron</h3><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p>\n<h2 id=\"二、javascript框架\"><a href=\"#二、javascript框架\" class=\"headerlink\" title=\"二、javascript框架\"></a>二、javascript框架</h2><h3 id=\"1-angular2\"><a href=\"#1-angular2\" class=\"headerlink\" title=\"1. angular2\"></a>1. angular2</h3><h4 id=\"跨平台开发\"><a href=\"#跨平台开发\" class=\"headerlink\" title=\"跨平台开发\"></a>跨平台开发</h4><p>学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。</p>\n<h4 id=\"速度与性能\"><a href=\"#速度与性能\" class=\"headerlink\" title=\"速度与性能\"></a>速度与性能</h4><p>通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。<br>Angular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。</p>\n<h4 id=\"美妙的工具\"><a href=\"#美妙的工具\" class=\"headerlink\" title=\"美妙的工具\"></a>美妙的工具</h4><p>使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。</p>\n<h3 id=\"2-react-redux\"><a href=\"#2-react-redux\" class=\"headerlink\" title=\"2. react+redux\"></a>2. react+redux</h3><p>React+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。</p>\n<h3 id=\"3-jquery\"><a href=\"#3-jquery\" class=\"headerlink\" title=\"3. jquery\"></a>3. jquery</h3><p>JQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。</p>\n<h3 id=\"4-antd\"><a href=\"#4-antd\" class=\"headerlink\" title=\"4. antd\"></a>4. antd</h3><p>Ant Design 是蚂蚁金服开发和正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现。企业级金融产品的交互语言和视觉体系。丰富实用的 React UI 组件。基于 React 的组件化开发模式。背靠 npm 生态圈。基于 webpack 的调试构建方案，支持 ES6。</p>\n<h2 id=\"三、node相关技术\"><a href=\"#三、node相关技术\" class=\"headerlink\" title=\"三、node相关技术\"></a>三、node相关技术</h2><h3 id=\"1-npm\"><a href=\"#1-npm\" class=\"headerlink\" title=\"1. npm\"></a>1. npm</h3><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>\n<h3 id=\"2-express\"><a href=\"#2-express\" class=\"headerlink\" title=\"2. express\"></a>2. express</h3><p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<h3 id=\"3-koa2\"><a href=\"#3-koa2\" class=\"headerlink\" title=\"3. koa2\"></a>3. koa2</h3><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>\n<h3 id=\"4-rxjs\"><a href=\"#4-rxjs\" class=\"headerlink\" title=\"4. rxjs\"></a>4. rxjs</h3><p>是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。</p>\n<h3 id=\"5-zonejs\"><a href=\"#5-zonejs\" class=\"headerlink\" title=\"5. zonejs\"></a>5. zonejs</h3><p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p>\n<h2 id=\"四、设计模式\"><a href=\"#四、设计模式\" class=\"headerlink\" title=\"四、设计模式\"></a>四、设计模式</h2><h3 id=\"1-javascript设计模式\"><a href=\"#1-javascript设计模式\" class=\"headerlink\" title=\"1. javascript设计模式\"></a>1. <a href=\"http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/\">javascript设计模式</a></h3><h2 id=\"五、编程语言\"><a href=\"#五、编程语言\" class=\"headerlink\" title=\"五、编程语言\"></a>五、编程语言</h2><h3 id=\"1-javascript\"><a href=\"#1-javascript\" class=\"headerlink\" title=\"1. javascript\"></a>1. javascript</h3><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>\n<h3 id=\"2-ecmscript6\"><a href=\"#2-ecmscript6\" class=\"headerlink\" title=\"2. ecmscript6\"></a>2. ecmscript6</h3><p>ES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p>\n<h3 id=\"3-typesript\"><a href=\"#3-typesript\" class=\"headerlink\" title=\"3. typesript\"></a>3. typesript</h3><p>typescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p>\n<h2 id=\"六、数据存储\"><a href=\"#六、数据存储\" class=\"headerlink\" title=\"六、数据存储\"></a>六、数据存储</h2><h3 id=\"1-mysql\"><a href=\"#1-mysql\" class=\"headerlink\" title=\"1. mysql\"></a>1. mysql</h3><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>\n<h3 id=\"2-mongodb\"><a href=\"#2-mongodb\" class=\"headerlink\" title=\"2. mongodb\"></a>2. mongodb</h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<h3 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3. redis\"></a>3. redis</h3><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<h3 id=\"4-cookie\"><a href=\"#4-cookie\" class=\"headerlink\" title=\"4. cookie\"></a>4. cookie</h3><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</p>\n<h3 id=\"5-access-token\"><a href=\"#5-access-token\" class=\"headerlink\" title=\"5. access token\"></a>5. access token</h3><p>Windows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。</p>\n<h2 id=\"七、html5-css3\"><a href=\"#七、html5-css3\" class=\"headerlink\" title=\"七、html5+css3\"></a>七、html5+css3</h2><h3 id=\"1-html5\"><a href=\"#1-html5\" class=\"headerlink\" title=\"1. html5\"></a>1. html5</h3><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。<br>HTML5的设计目的是为了在移动设备上支持多媒体。<br>HTML5 简单易学。</p>\n<h3 id=\"2-ejs\"><a href=\"#2-ejs\" class=\"headerlink\" title=\"2. ejs\"></a>2. ejs</h3><p>EJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。引入EJS 创建一个模板 使用视图工具组件 与最初的JavaScript相比较，一些不太了解你的代码的人可以更容易地通过EJS模板代码看得懂你的代码。 让我们放松一下，一起来享受下令人激动的干净简洁的感觉。</p>\n<h3 id=\"3-canvas\"><a href=\"#3-canvas\" class=\"headerlink\" title=\"3. canvas\"></a>3. canvas</h3><p>TML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</canvas></canvas></p>\n<h3 id=\"4-css3\"><a href=\"#4-css3\" class=\"headerlink\" title=\"4. css3\"></a>4. css3</h3><p>CSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。</p>\n<h3 id=\"5-sass\"><a href=\"#5-sass\" class=\"headerlink\" title=\"5. sass\"></a>5. sass</h3><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>\n<h3 id=\"6-postcss\"><a href=\"#6-postcss\" class=\"headerlink\" title=\"6. postcss\"></a>6. postcss</h3><p>PostCSS 是使用 JS 插件来转换 CSS 的工具，支持变量，混入，未来 CSS 语法，内联图像等等。<br>PostCSS 已经被许多大公司使用：谷歌，推特，阿里巴巴和 Shopify。 Autoprefixer PostCSS 插件是最流行的 CSS 处理器插件之一。</p>\n<h3 id=\"7-白鹭引擎\"><a href=\"#7-白鹭引擎\" class=\"headerlink\" title=\"7. 白鹭引擎\"></a>7. 白鹭引擎</h3><p>白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。</p>\n<h2 id=\"八、算法和数据结构\"><a href=\"#八、算法和数据结构\" class=\"headerlink\" title=\"八、算法和数据结构\"></a>八、算法和数据结构</h2><h3 id=\"1-线型查找\"><a href=\"#1-线型查找\" class=\"headerlink\" title=\"1. 线型查找\"></a>1. 线型查找</h3><p>在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。</p>\n<h3 id=\"2-二分查找\"><a href=\"#2-二分查找\" class=\"headerlink\" title=\"2. 二分查找\"></a>2. 二分查找</h3><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>\n<h3 id=\"3-冒泡排序\"><a href=\"#3-冒泡排序\" class=\"headerlink\" title=\"3. 冒泡排序\"></a>3. 冒泡排序</h3><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4. 选择排序\"></a>4. 选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>\n<h3 id=\"5-插入排序\"><a href=\"#5-插入排序\" class=\"headerlink\" title=\"5. 插入排序\"></a>5. 插入排序</h3><p>插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>\n<h3 id=\"6-字符串反转\"><a href=\"#6-字符串反转\" class=\"headerlink\" title=\"6. 字符串反转\"></a>6. 字符串反转</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"built_in\">str</span> = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">var newStr = <span class=\"built_in\">str</span>.<span class=\"built_in\">split</span>(<span class=\"string\">\"\"</span>).<span class=\"built_in\">reverse</span>().<span class=\"built_in\">join</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">alert(newStr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-搜索算法\"><a href=\"#7-搜索算法\" class=\"headerlink\" title=\"7. 搜索算法\"></a>7. 搜索算法</h3><p>搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。</p>\n<h3 id=\"8-贪心算法\"><a href=\"#8-贪心算法\" class=\"headerlink\" title=\"8. 贪心算法\"></a>8. 贪心算法</h3><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p>\n<h3 id=\"9-tween算法\"><a href=\"#9-tween算法\" class=\"headerlink\" title=\"9. tween算法\"></a>9. tween算法</h3><p>Flash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。</p>\n<h3 id=\"10-javascript算法库\"><a href=\"#10-javascript算法库\" class=\"headerlink\" title=\"10. javascript算法库\"></a>10. javascript算法库</h3><ul>\n<li><a href=\"https://github.com/sjkaliski/numbers.js/\" target=\"_blank\" rel=\"external\">numbers.js</a></li>\n<li><a href=\"http://www.numericjs.com/\" target=\"_blank\" rel=\"external\">Numeric Javascript </a></li>\n<li><a href=\"http://worrydream.com/Tangle/\" target=\"_blank\" rel=\"external\">Tangle</a></li>\n<li><a href=\"http://josscrowcroft.github.io/accounting.js/\" target=\"_blank\" rel=\"external\">accounting.js</a><h2 id=\"九、测试框架\"><a href=\"#九、测试框架\" class=\"headerlink\" title=\"九、测试框架\"></a>九、测试框架</h2><h3 id=\"1-mocha\"><a href=\"#1-mocha\" class=\"headerlink\" title=\"1. mocha\"></a>1. mocha</h3>mocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。<h3 id=\"2-karma\"><a href=\"#2-karma\" class=\"headerlink\" title=\"2. karma\"></a>2. karma</h3>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。<h3 id=\"3-jasmine\"><a href=\"#3-jasmine\" class=\"headerlink\" title=\"3. jasmine\"></a>3. jasmine</h3>Jasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。<h3 id=\"4-chai\"><a href=\"#4-chai\" class=\"headerlink\" title=\"4. chai\"></a>4. chai</h3>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<h3 id=\"5-Qunit\"><a href=\"#5-Qunit\" class=\"headerlink\" title=\"5.Qunit\"></a>5.Qunit</h3>该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子<h3 id=\"6-should-js\"><a href=\"#6-should-js\" class=\"headerlink\" title=\"6. should.js:\"></a>6. should.js:</h3>TJ的另外一个开源贡献<h3 id=\"7-expect-js\"><a href=\"#7-expect-js\" class=\"headerlink\" title=\"7. expect.js\"></a>7. expect.js</h3>BDD风格的另外一个断言库，基于should.js,是mini版的BDD库<h3 id=\"8-assert\"><a href=\"#8-assert\" class=\"headerlink\" title=\"8. assert\"></a>8. assert</h3>node自带核心模块: 可以在node中使用的断言模块</li>\n</ul>\n<h2 id=\"十、重构\"><a href=\"#十、重构\" class=\"headerlink\" title=\"十、重构\"></a>十、<a href=\"http://www.raychase.net/138\" target=\"_blank\" rel=\"external\">重构</a></h2><h3 id=\"1-命名\"><a href=\"#1-命名\" class=\"headerlink\" title=\"1. 命名\"></a>1. 命名</h3><p> 模块划分和命名空间</p>\n<h3 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2. 加载\"></a>2. 加载</h3><p>js的动态加载</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h3><p>Javascript的测试</p>\n<h3 id=\"4-编码\"><a href=\"#4-编码\" class=\"headerlink\" title=\"4. 编码\"></a>4. 编码</h3><p> Javascript编码规则</p>\n<h3 id=\"5-闭包\"><a href=\"#5-闭包\" class=\"headerlink\" title=\"5. 闭包\"></a>5. 闭包</h3><p> 利用原型/闭包开发组件</p>\n<h3 id=\"6-继承\"><a href=\"#6-继承\" class=\"headerlink\" title=\"6. 继承\"></a>6. 继承</h3><p> 利用继承来做事</p>\n<h3 id=\"7-重用\"><a href=\"#7-重用\" class=\"headerlink\" title=\"7. 重用\"></a>7. 重用</h3><p> 重用老代码</p>\n<h3 id=\"8-检测\"><a href=\"#8-检测\" class=\"headerlink\" title=\"8. 检测\"></a>8. 检测</h3><p> JSDoc和JSLint</p>\n<h3 id=\"9-框架\"><a href=\"#9-框架\" class=\"headerlink\" title=\"9.  框架\"></a>9.  框架</h3><p>自定义JavaScript产品框架</p>\n<h3 id=\"10-强化\"><a href=\"#10-强化\" class=\"headerlink\" title=\"10.  强化\"></a>10.  强化</h3><p>强化对象封装和模块封装</p>\n","excerpt":"<p>2015年，软件开发界发生了很多变化。有很多流行的新语言发布了，也有很多重要的框架和工具发布了新版本。下面有一个我们觉得最重要的简短清单，同时也有我们觉得值得你在2016年花时间精力去学习的新事物的一些建议。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/2016.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、开发工具\"><a href=\"#一、开发工具\" class=\"headerlink\" title=\"一、开发工具\"></a>一、开发工具</h2><h3 id=\"1-atom\"><a href=\"#1-atom\" class=\"headerlink\" title=\"1. atom\"></a>1. atom</h3><p>Atom 代码编辑器支持 Windows、Mac、Linux 三大桌面平台，完全免费，并且已经在 GitHub 上开放了全部的源代码。在经过一段长时间的迭代开发和不断改进后，Atom 终于从早期的测试版达到了 1.0 正式版了！相比之前的版本，在性能和稳定性方面都有着显著的改善。</p>\n<h3 id=\"2-idea\"><a href=\"#2-idea\" class=\"headerlink\" title=\"2. idea\"></a>2. idea</h3><p>IDEA 全称IntelliJ IDEA，是java语言开发的集成环境，IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p>\n<h3 id=\"3-webpack\"><a href=\"#3-webpack\" class=\"headerlink\" title=\"3. webpack\"></a>3. webpack</h3><p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>\n<h3 id=\"4-gulp\"><a href=\"#4-gulp\" class=\"headerlink\" title=\"4. gulp\"></a>4. gulp</h3><p>Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目…</p>\n<h3 id=\"5-lodash\"><a href=\"#5-lodash\" class=\"headerlink\" title=\"5. lodash\"></a>5. lodash</h3><p>lodash一开始是Underscore.js库的一个fork，因为和其他(Underscore.js的)贡献者意见相左。John-David Dalton的最初目标，是提供更多“一致的跨浏览器行为……，并改善性能”。之后，该项目在现有成功的基础之上取得了更大的成果。最近lodash也发布了3.5版，成为了npm包仓库中依赖最多的库。它正在摆脱屌丝身份，成为开发者的常规的选择之一。</p>\n<h3 id=\"6-fetch\"><a href=\"#6-fetch\" class=\"headerlink\" title=\"6. fetch\"></a>6. fetch</h3><p>对于 AJAX，现在一般都是使用各种框架实现，其本质是 XMLHttpRequest。使用过原生XMLHttpRequest的人都知道，这种方法实现起来不太方便。现在，我们有了新的选择：Fetch API。</p>\n<h3 id=\"7-Electron\"><a href=\"#7-Electron\" class=\"headerlink\" title=\"7. Electron\"></a>7. Electron</h3><p>Electron 框架的前身是 Atom Shell，可以让你写使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序。它是基于io.js 和 Chromium 开源项目，并用于在 Atom 编辑器中。Electron 是开源的，由 GitHub 维护，有一个活跃的社区。最重要的是，Electron 应用服务构建和运行在 Mac，Windows 和 Linux。</p>\n<h2 id=\"二、javascript框架\"><a href=\"#二、javascript框架\" class=\"headerlink\" title=\"二、javascript框架\"></a>二、javascript框架</h2><h3 id=\"1-angular2\"><a href=\"#1-angular2\" class=\"headerlink\" title=\"1. angular2\"></a>1. angular2</h3><h4 id=\"跨平台开发\"><a href=\"#跨平台开发\" class=\"headerlink\" title=\"跨平台开发\"></a>跨平台开发</h4><p>学习如何基于 Angular 构建应用程序，并复用代码和技能来构建适用于所有平台的应用。比如： Web 应用、移动 Web 应用、原生移动应用和原生桌面应用等。</p>\n<h4 id=\"速度与性能\"><a href=\"#速度与性能\" class=\"headerlink\" title=\"速度与性能\"></a>速度与性能</h4><p>通过 Web Worker 和服务端渲染，达到在如今 ( 以及未来）的 Web 平台上所能达到的最高速度。<br>Angular 让你有效掌控可伸缩性。基于 RxJS 、 Immutable.js 和其它推送模型，能适应海量数据需求。</p>\n<h4 id=\"美妙的工具\"><a href=\"#美妙的工具\" class=\"headerlink\" title=\"美妙的工具\"></a>美妙的工具</h4><p>使用简单的声明式模板，快速实现各种特性。使用自定义组件和大量现有组件，扩展模板语言。在几乎所有的 IDE 中获得针对 Angular 的即时帮助和反馈。所有这一切，都是为了帮助你编写漂亮的应用，而不是绞尽脑汁的让代码“能用”。</p>\n<h3 id=\"2-react-redux\"><a href=\"#2-react-redux\" class=\"headerlink\" title=\"2. react+redux\"></a>2. react+redux</h3><p>React+Redux非常精炼，良好运用将发挥出极强劲的生产力。但最大的挑战来自于函数式编程（FP）范式。在工程化过程中，架构（顶层）设计将是一个巨大的挑战。要不然做出来的东西可能是一团乱麻。说到底，传统框架与react+redux就是OO与FP编程范式的对决。</p>\n<h3 id=\"3-jquery\"><a href=\"#3-jquery\" class=\"headerlink\" title=\"3. jquery\"></a>3. jquery</h3><p>JQuery是继prototype之后又一个优秀的Javascript库。它是轻量级的js库 ，它兼容CSS3，还兼容各种浏览器（IE 6.0+, FF 1.5+, Safari 2.0+, Opera 9.0+），jQuery2.0及后续版本将不再支持IE6/7/8浏览器。</p>\n<h3 id=\"4-antd\"><a href=\"#4-antd\" class=\"headerlink\" title=\"4. antd\"></a>4. antd</h3><p>Ant Design 是蚂蚁金服开发和正在使用的一套企业级的前端设计语言和基于 React 的前端框架实现。企业级金融产品的交互语言和视觉体系。丰富实用的 React UI 组件。基于 React 的组件化开发模式。背靠 npm 生态圈。基于 webpack 的调试构建方案，支持 ES6。</p>\n<h2 id=\"三、node相关技术\"><a href=\"#三、node相关技术\" class=\"headerlink\" title=\"三、node相关技术\"></a>三、node相关技术</h2><h3 id=\"1-npm\"><a href=\"#1-npm\" class=\"headerlink\" title=\"1. npm\"></a>1. npm</h3><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。</p>\n<h3 id=\"2-express\"><a href=\"#2-express\" class=\"headerlink\" title=\"2. express\"></a>2. express</h3><p>Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用。</p>\n<h3 id=\"3-koa2\"><a href=\"#3-koa2\" class=\"headerlink\" title=\"3. koa2\"></a>3. koa2</h3><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>\n<h3 id=\"4-rxjs\"><a href=\"#4-rxjs\" class=\"headerlink\" title=\"4. rxjs\"></a>4. rxjs</h3><p>是一组库使用可观察到的集合和阵列、演员风格组成，组成异步和基于事件的程序。</p>\n<h3 id=\"5-zonejs\"><a href=\"#5-zonejs\" class=\"headerlink\" title=\"5. zonejs\"></a>5. zonejs</h3><p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 – zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（thread-local storage: 线程本地存储）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p>\n<h2 id=\"四、设计模式\"><a href=\"#四、设计模式\" class=\"headerlink\" title=\"四、设计模式\"></a>四、设计模式</h2><h3 id=\"1-javascript设计模式\"><a href=\"#1-javascript设计模式\" class=\"headerlink\" title=\"1. javascript设计模式\"></a>1. <a href=\"http://blog.xiaomo.info/2016/07/02/javascript_design_pattern/\">javascript设计模式</a></h3><h2 id=\"五、编程语言\"><a href=\"#五、编程语言\" class=\"headerlink\" title=\"五、编程语言\"></a>五、编程语言</h2><h3 id=\"1-javascript\"><a href=\"#1-javascript\" class=\"headerlink\" title=\"1. javascript\"></a>1. javascript</h3><p>JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p>\n<h3 id=\"2-ecmscript6\"><a href=\"#2-ecmscript6\" class=\"headerlink\" title=\"2. ecmscript6\"></a>2. ecmscript6</h3><p>ES6是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p>\n<h3 id=\"3-typesript\"><a href=\"#3-typesript\" class=\"headerlink\" title=\"3. typesript\"></a>3. typesript</h3><p>typescript是JavaScript的超集。TypeScript是JavaScript类型的超集，它可以编译成纯JavaScript。TypeScript可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。</p>\n<h2 id=\"六、数据存储\"><a href=\"#六、数据存储\" class=\"headerlink\" title=\"六、数据存储\"></a>六、数据存储</h2><h3 id=\"1-mysql\"><a href=\"#1-mysql\" class=\"headerlink\" title=\"1. mysql\"></a>1. mysql</h3><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下公司。MySQL 最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p>\n<h3 id=\"2-mongodb\"><a href=\"#2-mongodb\" class=\"headerlink\" title=\"2. mongodb\"></a>2. mongodb</h3><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>\n<h3 id=\"3-redis\"><a href=\"#3-redis\" class=\"headerlink\" title=\"3. redis\"></a>3. redis</h3><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<h3 id=\"4-cookie\"><a href=\"#4-cookie\" class=\"headerlink\" title=\"4. cookie\"></a>4. cookie</h3><p>Cookie，有时也用其复数形式Cookies，指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</p>\n<h3 id=\"5-access-token\"><a href=\"#5-access-token\" class=\"headerlink\" title=\"5. access token\"></a>5. access token</h3><p>Windows操作系统安全性的一个概念。一个访问令牌包含了此登陆会话的安全信息。当用户登陆时，系统创建一个访问令牌，然后以该用户身份运行的的所有进程都拥有该令牌的一个拷贝。该令牌唯一表示该用户、用户的组和用户的特权。系统使用令牌控制用户可以访问哪些安全对象，并控制用户执行相关系统操作的能力。有两种令牌：主令牌和模拟的令牌。主令牌是与进程相关的；模拟的令牌是与模拟令牌的线程相关的。</p>\n<h2 id=\"七、html5-css3\"><a href=\"#七、html5-css3\" class=\"headerlink\" title=\"七、html5+css3\"></a>七、html5+css3</h2><h3 id=\"1-html5\"><a href=\"#1-html5\" class=\"headerlink\" title=\"1. html5\"></a>1. html5</h3><p>HTML5是HTML最新的修订版本，2014年10月由万维网联盟（W3C）完成标准制定。<br>HTML5的设计目的是为了在移动设备上支持多媒体。<br>HTML5 简单易学。</p>\n<h3 id=\"2-ejs\"><a href=\"#2-ejs\" class=\"headerlink\" title=\"2. ejs\"></a>2. ejs</h3><p>EJS是一个JavaScript模板库，用来从JSON数据中生成HTML字符串。引入EJS 创建一个模板 使用视图工具组件 与最初的JavaScript相比较，一些不太了解你的代码的人可以更容易地通过EJS模板代码看得懂你的代码。 让我们放松一下，一起来享受下令人激动的干净简洁的感觉。</p>\n<h3 id=\"3-canvas\"><a href=\"#3-canvas\" class=\"headerlink\" title=\"3. canvas\"></a>3. canvas</h3><p>TML5 <canvas> 标签用于绘制图像（通过脚本，通常是 JavaScript）。不过，<canvas> 元素本身并没有绘制能力（它仅仅是图形的容器） - 您必须使用脚本来完成实际的绘图任务。getContext() 方法可返回一个对象，该对象提供了用于在画布上绘图的方法和属性。</p>\n<h3 id=\"4-css3\"><a href=\"#4-css3\" class=\"headerlink\" title=\"4. css3\"></a>4. css3</h3><p>CSS3是CSS技术的一个升级版本，是由Adobe、Systems、Apple、Google、HP、IBM、Microsoft、Mozilla、Opera、Sun Microsystems 等许多WEB界的巨头联合组织的一个名为 “CSS Working Group” 的组织共同协商策划的。虽然目前很多细节还在讨论之中，但它还是不断地朝前发展着。2010年在HTML5成为IT界人士关注的焦点的同时，它也开始慢慢地普及开来。</p>\n<h3 id=\"5-sass\"><a href=\"#5-sass\" class=\"headerlink\" title=\"5. sass\"></a>5. sass</h3><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p>\n<h3 id=\"6-postcss\"><a href=\"#6-postcss\" class=\"headerlink\" title=\"6. postcss\"></a>6. postcss</h3><p>PostCSS 是使用 JS 插件来转换 CSS 的工具，支持变量，混入，未来 CSS 语法，内联图像等等。<br>PostCSS 已经被许多大公司使用：谷歌，推特，阿里巴巴和 Shopify。 Autoprefixer PostCSS 插件是最流行的 CSS 处理器插件之一。</p>\n<h3 id=\"7-白鹭引擎\"><a href=\"#7-白鹭引擎\" class=\"headerlink\" title=\"7. 白鹭引擎\"></a>7. 白鹭引擎</h3><p>白鹭引擎是一个开源的、跨平台的手机游戏开发引擎,你可以快速地创建HTML5类型的移动游戏,也可以将游戏项目编译输出成为目标移动平台的原生游戏应用。</p>\n<h2 id=\"八、算法和数据结构\"><a href=\"#八、算法和数据结构\" class=\"headerlink\" title=\"八、算法和数据结构\"></a>八、算法和数据结构</h2><h3 id=\"1-线型查找\"><a href=\"#1-线型查找\" class=\"headerlink\" title=\"1. 线型查找\"></a>1. 线型查找</h3><p>在一列给定的值中进行搜索，从一端开始逐一检查每个元素，直到找到所需元素的过程。线性查找又称为顺序查找·如果查找池是某种类型的一个表，比如一个数组，简单的查找方法是从表头开始，一次将每一个值与目标元素进行比较，最后，或者查找到目标，或者达到表尾，而目标不存在于组中，这个方法称为线性查找。</p>\n<h3 id=\"2-二分查找\"><a href=\"#2-二分查找\" class=\"headerlink\" title=\"2. 二分查找\"></a>2. 二分查找</h3><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>\n<h3 id=\"3-冒泡排序\"><a href=\"#3-冒泡排序\" class=\"headerlink\" title=\"3. 冒泡排序\"></a>3. 冒泡排序</h3><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>\n<h3 id=\"4-选择排序\"><a href=\"#4-选择排序\" class=\"headerlink\" title=\"4. 选择排序\"></a>4. 选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列[5， 5， 3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>\n<h3 id=\"5-插入排序\"><a href=\"#5-插入排序\" class=\"headerlink\" title=\"5. 插入排序\"></a>5. 插入排序</h3><p>插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>\n<h3 id=\"6-字符串反转\"><a href=\"#6-字符串反转\" class=\"headerlink\" title=\"6. 字符串反转\"></a>6. 字符串反转</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"built_in\">str</span> = <span class=\"string\">'123'</span>;</span><br><span class=\"line\">var newStr = <span class=\"built_in\">str</span>.<span class=\"built_in\">split</span>(<span class=\"string\">\"\"</span>).<span class=\"built_in\">reverse</span>().<span class=\"built_in\">join</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">alert(newStr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-搜索算法\"><a href=\"#7-搜索算法\" class=\"headerlink\" title=\"7. 搜索算法\"></a>7. 搜索算法</h3><p>搜索算法是利用计算机的高性能来有目的的穷举一个问题解空间的部分或所有的可能情况，从而求出问题的解的一种方法。搜索算法实际上是根据初始条件和扩展规则构造一棵“解答树”并寻找符合目标状态的节点的过程。</p>\n<h3 id=\"8-贪心算法\"><a href=\"#8-贪心算法\" class=\"headerlink\" title=\"8. 贪心算法\"></a>8. 贪心算法</h3><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p>\n<h3 id=\"9-tween算法\"><a href=\"#9-tween算法\" class=\"headerlink\" title=\"9. tween算法\"></a>9. tween算法</h3><p>Flash做动画时会用到Tween类，利用它可以做很多动画效果，例如缓动、弹簧等等。</p>\n<h3 id=\"10-javascript算法库\"><a href=\"#10-javascript算法库\" class=\"headerlink\" title=\"10. javascript算法库\"></a>10. javascript算法库</h3><ul>\n<li><a href=\"https://github.com/sjkaliski/numbers.js/\">numbers.js</a></li>\n<li><a href=\"http://www.numericjs.com/\">Numeric Javascript </a></li>\n<li><a href=\"http://worrydream.com/Tangle/\">Tangle</a></li>\n<li><a href=\"http://josscrowcroft.github.io/accounting.js/\">accounting.js</a><h2 id=\"九、测试框架\"><a href=\"#九、测试框架\" class=\"headerlink\" title=\"九、测试框架\"></a>九、测试框架</h2><h3 id=\"1-mocha\"><a href=\"#1-mocha\" class=\"headerlink\" title=\"1. mocha\"></a>1. mocha</h3>mocha 是一个简单、灵活有趣的 JavaScript 测试框架，用于 Node.js 和浏览器上的 JavaScript 应用测试。Mocha 是具有丰富特性的 JavaScript 测试框架，可以运行在 Node.js 和浏览器中，使得异步测试更简单更有趣。Mocha 可以持续运行测试，支持灵活又准确的报告，当映射到未捕获异常时转到正确的测试示例。<h3 id=\"2-karma\"><a href=\"#2-karma\" class=\"headerlink\" title=\"2. karma\"></a>2. karma</h3>Karma是Testacular的新名字，在2012年google开源了Testacular，2013年Testacular改名为Karma。Karma是一个让人感到非常神秘的名字，表示佛教中的缘分，因果报应，比Cassandra这种名字更让人猜不透！Karma是一个基于Node.js的JavaScript测试执行过程管理工具（Test Runner）。该工具可用于测试所有主流Web浏览器，也可集成到CI（Continuous integration）工具，也可和其他代码编辑器一起使用。这个测试工具的一个强大特性就是，它可以监控(Watch)文件的变化，然后自行执行，通过console.log显示测试结果。<h3 id=\"3-jasmine\"><a href=\"#3-jasmine\" class=\"headerlink\" title=\"3. jasmine\"></a>3. jasmine</h3>Jasmine （茉莉）是一款 JavaScript BDD（行为驱动开发）测试框架，它不依赖于其他任何 JavaScript 组件。它有干净清晰的语法，让您可以很简单的写出测试代码。对基于 JavaScript 的开发来说，它是一款不错的测试框架选择。<h3 id=\"4-chai\"><a href=\"#4-chai\" class=\"headerlink\" title=\"4. chai\"></a>4. chai</h3>Chai 是一个针对 Node.js 和浏览器的行为驱动测试和测试驱动测试的诊断库，可与任何 JavaScript 测试框架集成。<h3 id=\"5-Qunit\"><a href=\"#5-Qunit\" class=\"headerlink\" title=\"5.Qunit\"></a>5.Qunit</h3>该框架诞生之初是为了jquery的单元测试，后来独立出来不再依赖于jquery本身，但是其身上还是脱离不开jquery的影子<h3 id=\"6-should-js\"><a href=\"#6-should-js\" class=\"headerlink\" title=\"6. should.js:\"></a>6. should.js:</h3>TJ的另外一个开源贡献<h3 id=\"7-expect-js\"><a href=\"#7-expect-js\" class=\"headerlink\" title=\"7. expect.js\"></a>7. expect.js</h3>BDD风格的另外一个断言库，基于should.js,是mini版的BDD库<h3 id=\"8-assert\"><a href=\"#8-assert\" class=\"headerlink\" title=\"8. assert\"></a>8. assert</h3>node自带核心模块: 可以在node中使用的断言模块</li>\n</ul>\n<h2 id=\"十、重构\"><a href=\"#十、重构\" class=\"headerlink\" title=\"十、重构\"></a>十、<a href=\"http://www.raychase.net/138\">重构</a></h2><h3 id=\"1-命名\"><a href=\"#1-命名\" class=\"headerlink\" title=\"1. 命名\"></a>1. 命名</h3><p> 模块划分和命名空间</p>\n<h3 id=\"2-加载\"><a href=\"#2-加载\" class=\"headerlink\" title=\"2. 加载\"></a>2. 加载</h3><p>js的动态加载</p>\n<h3 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h3><p>Javascript的测试</p>\n<h3 id=\"4-编码\"><a href=\"#4-编码\" class=\"headerlink\" title=\"4. 编码\"></a>4. 编码</h3><p> Javascript编码规则</p>\n<h3 id=\"5-闭包\"><a href=\"#5-闭包\" class=\"headerlink\" title=\"5. 闭包\"></a>5. 闭包</h3><p> 利用原型/闭包开发组件</p>\n<h3 id=\"6-继承\"><a href=\"#6-继承\" class=\"headerlink\" title=\"6. 继承\"></a>6. 继承</h3><p> 利用继承来做事</p>\n<h3 id=\"7-重用\"><a href=\"#7-重用\" class=\"headerlink\" title=\"7. 重用\"></a>7. 重用</h3><p> 重用老代码</p>\n<h3 id=\"8-检测\"><a href=\"#8-检测\" class=\"headerlink\" title=\"8. 检测\"></a>8. 检测</h3><p> JSDoc和JSLint</p>\n<h3 id=\"9-框架\"><a href=\"#9-框架\" class=\"headerlink\" title=\"9.  框架\"></a>9.  框架</h3><p>自定义JavaScript产品框架</p>\n<h3 id=\"10-强化\"><a href=\"#10-强化\" class=\"headerlink\" title=\"10.  强化\"></a>10.  强化</h3><p>强化对象封装和模块封装</p>"},{"author":"小莫","date":"2016-07-01T16:00:00.000Z","title":"javascript设计模式","_content":"设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/javascript.png)](https://github.com/qq83387856)\n\n## 一、设计原则\n\n### 1. 开闭原则\n对扩展开发，对修改关闭。\n### 2.  里氏替换原则\n子类继承父类，但单独调用完全可以运行。\n### 3. 依赖倒转原则\n引用一个对象，如果这个对象有低层类型，直接引用低层。\n### 4. 接口隔离原则\n每一个接口应该是一种角色。\n### 5. 合成/聚合复用原则\n新的对象应使用一些己有的对象，使之成为新对象的一部分。\n### 6. 迪米特原则\n一个对象在对其他对象尽可能少的了解。\n\n## 二、 设计模式\n### 1. 原型模式\n概念：和javascript的prototype不同\nprototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆\n\n作用：\n原型对象本身就是有效的利用了每个构造器创建的对象\n\n注意事项：\n注意深拷贝和浅拷贝，以免出现引用问题。\n\n代码实战和总结：\n\n```\n//声明一个对象\n  var myObj = {\n    str:'myStr',\n    num:1,\n    myArr:[1,2,3],\n    myObj:{\n      innerObj:{\n        test:25\n      },\n      innerStr:'innerStr'\n    }\n  }\n\n//拷贝对象的方法（浅拷贝）会影响原型\n  function clone (obj){\n    var ret = {};\n      for(var k in obj){\n        ret[k]= obj[k];\n      }\n      return ret;\n  }\n\n  //深拷贝  使用Object.create\n  function result(){}\n  result.prototype = Object.create(myObj);\n  var _result = new result();\n\n  //执行\n  var result = clone(myObj);\n  result.myObj.innerStr = 'outStr';\n  console.log(result);\n\n\n```\n\nObject.create(prototype,optionalDescriptorObjects)\n\n\n### 2. 策略模式\n概念：\n策略模式定义了算法家族，\b分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）\n\n作用：\n所有的这些算法都是做相同的事情，只是实现不同。\n以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。\n单独定义了算法类，也方便单元测试。\n\n注意事项：\n不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式\n\n\n代码实战和总结\n\n```\n  //普通的验证\n  var $input = $('input').val();\n  var val = {\n    isEmpty:function(argument){\n      // code\n    }\n    isTel:function(argument){\n      // code\n    }\n  }\n  var ise = val.isEmpty($input);\n  var isTel = val.isTel($input)\n  if(ise && isTel){\n    alert('ok');\n  }\n\n// 挂载到$fn.val上   典型的策略模式验证\n  $input({\n    isEmpty:false,\n    isTel:True\n    })\n\n```\n\n### 3. 组合模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结：\n### 4. 外观模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 5. 迭代器模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n\n### 6. 命令模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 7. 代理模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 8. 适配器模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 9. 责任链模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 10. 工厂模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 11. 单例模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 12. 观察者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 13. 中介者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 14. 装饰者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 15. 建造者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 16. 构造函数模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n","source":"_posts/2016-07-02.javascript_design_pattern.md","raw":"---\nauthor: 小莫\ndate: 2016-07-02\ntitle: javascript设计模式\ntags:\n- javascript\ncategory: 生活\npermalink: javascript_design_pattern\n---\n设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/javascript.png)](https://github.com/qq83387856)\n\n## 一、设计原则\n\n### 1. 开闭原则\n对扩展开发，对修改关闭。\n### 2.  里氏替换原则\n子类继承父类，但单独调用完全可以运行。\n### 3. 依赖倒转原则\n引用一个对象，如果这个对象有低层类型，直接引用低层。\n### 4. 接口隔离原则\n每一个接口应该是一种角色。\n### 5. 合成/聚合复用原则\n新的对象应使用一些己有的对象，使之成为新对象的一部分。\n### 6. 迪米特原则\n一个对象在对其他对象尽可能少的了解。\n\n## 二、 设计模式\n### 1. 原型模式\n概念：和javascript的prototype不同\nprototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆\n\n作用：\n原型对象本身就是有效的利用了每个构造器创建的对象\n\n注意事项：\n注意深拷贝和浅拷贝，以免出现引用问题。\n\n代码实战和总结：\n\n```\n//声明一个对象\n  var myObj = {\n    str:'myStr',\n    num:1,\n    myArr:[1,2,3],\n    myObj:{\n      innerObj:{\n        test:25\n      },\n      innerStr:'innerStr'\n    }\n  }\n\n//拷贝对象的方法（浅拷贝）会影响原型\n  function clone (obj){\n    var ret = {};\n      for(var k in obj){\n        ret[k]= obj[k];\n      }\n      return ret;\n  }\n\n  //深拷贝  使用Object.create\n  function result(){}\n  result.prototype = Object.create(myObj);\n  var _result = new result();\n\n  //执行\n  var result = clone(myObj);\n  result.myObj.innerStr = 'outStr';\n  console.log(result);\n\n\n```\n\nObject.create(prototype,optionalDescriptorObjects)\n\n\n### 2. 策略模式\n概念：\n策略模式定义了算法家族，\b分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）\n\n作用：\n所有的这些算法都是做相同的事情，只是实现不同。\n以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。\n单独定义了算法类，也方便单元测试。\n\n注意事项：\n不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式\n\n\n代码实战和总结\n\n```\n  //普通的验证\n  var $input = $('input').val();\n  var val = {\n    isEmpty:function(argument){\n      // code\n    }\n    isTel:function(argument){\n      // code\n    }\n  }\n  var ise = val.isEmpty($input);\n  var isTel = val.isTel($input)\n  if(ise && isTel){\n    alert('ok');\n  }\n\n// 挂载到$fn.val上   典型的策略模式验证\n  $input({\n    isEmpty:false,\n    isTel:True\n    })\n\n```\n\n### 3. 组合模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结：\n### 4. 外观模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 5. 迭代器模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n\n### 6. 命令模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 7. 代理模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 8. 适配器模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 9. 责任链模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 10. 工厂模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 11. 单例模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 12. 观察者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 13. 中介者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 14. 装饰者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 15. 建造者模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n\n### 16. 构造函数模式\n概念：\n\n作用：\n\n注意事项：\n\n代码实战和总结\n","slug":"javascript_design_pattern","published":1,"updated":"2016-06-28T02:47:40.745Z","_id":"cipy4kfh90000nvwxzexhvgqp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/javascript.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、设计原则\"><a href=\"#一、设计原则\" class=\"headerlink\" title=\"一、设计原则\"></a>一、设计原则</h2><h3 id=\"1-开闭原则\"><a href=\"#1-开闭原则\" class=\"headerlink\" title=\"1. 开闭原则\"></a>1. 开闭原则</h3><p>对扩展开发，对修改关闭。</p>\n<h3 id=\"2-里氏替换原则\"><a href=\"#2-里氏替换原则\" class=\"headerlink\" title=\"2.  里氏替换原则\"></a>2.  里氏替换原则</h3><p>子类继承父类，但单独调用完全可以运行。</p>\n<h3 id=\"3-依赖倒转原则\"><a href=\"#3-依赖倒转原则\" class=\"headerlink\" title=\"3. 依赖倒转原则\"></a>3. 依赖倒转原则</h3><p>引用一个对象，如果这个对象有低层类型，直接引用低层。</p>\n<h3 id=\"4-接口隔离原则\"><a href=\"#4-接口隔离原则\" class=\"headerlink\" title=\"4. 接口隔离原则\"></a>4. 接口隔离原则</h3><p>每一个接口应该是一种角色。</p>\n<h3 id=\"5-合成-聚合复用原则\"><a href=\"#5-合成-聚合复用原则\" class=\"headerlink\" title=\"5. 合成/聚合复用原则\"></a>5. 合成/聚合复用原则</h3><p>新的对象应使用一些己有的对象，使之成为新对象的一部分。</p>\n<h3 id=\"6-迪米特原则\"><a href=\"#6-迪米特原则\" class=\"headerlink\" title=\"6. 迪米特原则\"></a>6. 迪米特原则</h3><p>一个对象在对其他对象尽可能少的了解。</p>\n<h2 id=\"二、-设计模式\"><a href=\"#二、-设计模式\" class=\"headerlink\" title=\"二、 设计模式\"></a>二、 设计模式</h2><h3 id=\"1-原型模式\"><a href=\"#1-原型模式\" class=\"headerlink\" title=\"1. 原型模式\"></a>1. 原型模式</h3><p>概念：和javascript的prototype不同<br>prototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆</p>\n<p>作用：<br>原型对象本身就是有效的利用了每个构造器创建的对象</p>\n<p>注意事项：<br>注意深拷贝和浅拷贝，以免出现引用问题。</p>\n<p>代码实战和总结：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myObj = &#123;</span><br><span class=\"line\">    str:<span class=\"string\">'myStr'</span>,</span><br><span class=\"line\">    num:<span class=\"number\">1</span>,</span><br><span class=\"line\">    myArr:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    myObj:&#123;</span><br><span class=\"line\">      innerObj:&#123;</span><br><span class=\"line\">        test:<span class=\"number\">25</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      innerStr:<span class=\"string\">'innerStr'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拷贝对象的方法（浅拷贝）会影响原型</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        ret[k]= obj[k];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//深拷贝  使用Object.create</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  result.prototype = <span class=\"built_in\">Object</span>.create(myObj);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _result = <span class=\"keyword\">new</span> result();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//执行</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = clone(myObj);</span><br><span class=\"line\">  result.myObj.innerStr = <span class=\"string\">'outStr'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<p>Object.create(prototype,optionalDescriptorObjects)</p>\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2. 策略模式\"></a>2. 策略模式</h3><p>概念：<br>策略模式定义了算法家族，\b分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）</p>\n<p>作用：<br>所有的这些算法都是做相同的事情，只是实现不同。<br>以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。<br>单独定义了算法类，也方便单元测试。</p>\n<p>注意事项：<br>不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式</p>\n<p>代码实战和总结</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//普通的验证</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $input = $(<span class=\"string\">'input'</span>).val();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> val = &#123;</span><br><span class=\"line\">    isEmpty:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(argument)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// code</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    isTel:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(argument)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// code</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ise = val.isEmpty($input);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isTel = val.isTel($input)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ise &amp;&amp; isTel)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载到$fn.val上   典型的策略模式验证</span></span><br><span class=\"line\">  $input(&#123;</span><br><span class=\"line\">    isEmpty:<span class=\"keyword\">false</span>,</span><br><span class=\"line\">    isTel:<span class=\"keyword\">True</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-组合模式\"><a href=\"#3-组合模式\" class=\"headerlink\" title=\"3. 组合模式\"></a>3. 组合模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结：</p>\n<h3 id=\"4-外观模式\"><a href=\"#4-外观模式\" class=\"headerlink\" title=\"4. 外观模式\"></a>4. 外观模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"5-迭代器模式\"><a href=\"#5-迭代器模式\" class=\"headerlink\" title=\"5. 迭代器模式\"></a>5. 迭代器模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"6-命令模式\"><a href=\"#6-命令模式\" class=\"headerlink\" title=\"6. 命令模式\"></a>6. 命令模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"7-代理模式\"><a href=\"#7-代理模式\" class=\"headerlink\" title=\"7. 代理模式\"></a>7. 代理模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"8-适配器模式\"><a href=\"#8-适配器模式\" class=\"headerlink\" title=\"8. 适配器模式\"></a>8. 适配器模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"9-责任链模式\"><a href=\"#9-责任链模式\" class=\"headerlink\" title=\"9. 责任链模式\"></a>9. 责任链模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"10-工厂模式\"><a href=\"#10-工厂模式\" class=\"headerlink\" title=\"10. 工厂模式\"></a>10. 工厂模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"11-单例模式\"><a href=\"#11-单例模式\" class=\"headerlink\" title=\"11. 单例模式\"></a>11. 单例模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"12-观察者模式\"><a href=\"#12-观察者模式\" class=\"headerlink\" title=\"12. 观察者模式\"></a>12. 观察者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"13-中介者模式\"><a href=\"#13-中介者模式\" class=\"headerlink\" title=\"13. 中介者模式\"></a>13. 中介者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"14-装饰者模式\"><a href=\"#14-装饰者模式\" class=\"headerlink\" title=\"14. 装饰者模式\"></a>14. 装饰者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"15-建造者模式\"><a href=\"#15-建造者模式\" class=\"headerlink\" title=\"15. 建造者模式\"></a>15. 建造者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"16-构造函数模式\"><a href=\"#16-构造函数模式\" class=\"headerlink\" title=\"16. 构造函数模式\"></a>16. 构造函数模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n","excerpt":"<p>设计模式是一套反复使用的、思想成熟、经过分类和无数实战总结出来的。使用设计模式是为了让代码可重用、可扩展、可解藕、更容易让人理解并且有保证代码的可靠性。设计模式能够真正工程化，设计模式是软件工程的基石脉络，如同大厦的结构一样。只有夯实基础结构，才能盖好健壮的大楼。 也是我们迈向高级开发人员必经的一步。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/javascript.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、设计原则\"><a href=\"#一、设计原则\" class=\"headerlink\" title=\"一、设计原则\"></a>一、设计原则</h2><h3 id=\"1-开闭原则\"><a href=\"#1-开闭原则\" class=\"headerlink\" title=\"1. 开闭原则\"></a>1. 开闭原则</h3><p>对扩展开发，对修改关闭。</p>\n<h3 id=\"2-里氏替换原则\"><a href=\"#2-里氏替换原则\" class=\"headerlink\" title=\"2.  里氏替换原则\"></a>2.  里氏替换原则</h3><p>子类继承父类，但单独调用完全可以运行。</p>\n<h3 id=\"3-依赖倒转原则\"><a href=\"#3-依赖倒转原则\" class=\"headerlink\" title=\"3. 依赖倒转原则\"></a>3. 依赖倒转原则</h3><p>引用一个对象，如果这个对象有低层类型，直接引用低层。</p>\n<h3 id=\"4-接口隔离原则\"><a href=\"#4-接口隔离原则\" class=\"headerlink\" title=\"4. 接口隔离原则\"></a>4. 接口隔离原则</h3><p>每一个接口应该是一种角色。</p>\n<h3 id=\"5-合成-聚合复用原则\"><a href=\"#5-合成-聚合复用原则\" class=\"headerlink\" title=\"5. 合成/聚合复用原则\"></a>5. 合成/聚合复用原则</h3><p>新的对象应使用一些己有的对象，使之成为新对象的一部分。</p>\n<h3 id=\"6-迪米特原则\"><a href=\"#6-迪米特原则\" class=\"headerlink\" title=\"6. 迪米特原则\"></a>6. 迪米特原则</h3><p>一个对象在对其他对象尽可能少的了解。</p>\n<h2 id=\"二、-设计模式\"><a href=\"#二、-设计模式\" class=\"headerlink\" title=\"二、 设计模式\"></a>二、 设计模式</h2><h3 id=\"1-原型模式\"><a href=\"#1-原型模式\" class=\"headerlink\" title=\"1. 原型模式\"></a>1. 原型模式</h3><p>概念：和javascript的prototype不同<br>prototype是指原型实例(new)指向创建对象的种类，并且通过拷贝这些原型创建新的对象。如克隆</p>\n<p>作用：<br>原型对象本身就是有效的利用了每个构造器创建的对象</p>\n<p>注意事项：<br>注意深拷贝和浅拷贝，以免出现引用问题。</p>\n<p>代码实战和总结：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> myObj = &#123;</span><br><span class=\"line\">    str:<span class=\"string\">'myStr'</span>,</span><br><span class=\"line\">    num:<span class=\"number\">1</span>,</span><br><span class=\"line\">    myArr:[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">    myObj:&#123;</span><br><span class=\"line\">      innerObj:&#123;</span><br><span class=\"line\">        test:<span class=\"number\">25</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      innerStr:<span class=\"string\">'innerStr'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拷贝对象的方法（浅拷贝）会影响原型</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span> (<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">        ret[k]= obj[k];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//深拷贝  使用Object.create</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">result</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  result.prototype = <span class=\"built_in\">Object</span>.create(myObj);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _result = <span class=\"keyword\">new</span> result();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//执行</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = clone(myObj);</span><br><span class=\"line\">  result.myObj.innerStr = <span class=\"string\">'outStr'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br></pre></td></tr></table></figure>\n<p>Object.create(prototype,optionalDescriptorObjects)</p>\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2. 策略模式\"></a>2. 策略模式</h3><p>概念：<br>策略模式定义了算法家族，\b分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的客户。（目标一致，顺序不同，例如：田忌赛马）</p>\n<p>作用：<br>所有的这些算法都是做相同的事情，只是实现不同。<br>以相同的方法调用所有的方法，减少了各种算法在和使用算法类之间的耦合。<br>单独定义了算法类，也方便单元测试。</p>\n<p>注意事项：<br>不仅可以封装算法，也可以封装几乎任何类型的规则，是要在分析过程中需要在不同时间应用不同的规则， 可以考虑使用策略模式</p>\n<p>代码实战和总结</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//普通的验证</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $input = $(<span class=\"string\">'input'</span>).val();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> val = &#123;</span><br><span class=\"line\">    isEmpty:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(argument)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// code</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    isTel:<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(argument)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// code</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ise = val.isEmpty($input);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isTel = val.isTel($input)</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ise &amp;&amp; isTel)&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载到$fn.val上   典型的策略模式验证</span></span><br><span class=\"line\">  $input(&#123;</span><br><span class=\"line\">    isEmpty:<span class=\"keyword\">false</span>,</span><br><span class=\"line\">    isTel:<span class=\"keyword\">True</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-组合模式\"><a href=\"#3-组合模式\" class=\"headerlink\" title=\"3. 组合模式\"></a>3. 组合模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结：</p>\n<h3 id=\"4-外观模式\"><a href=\"#4-外观模式\" class=\"headerlink\" title=\"4. 外观模式\"></a>4. 外观模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"5-迭代器模式\"><a href=\"#5-迭代器模式\" class=\"headerlink\" title=\"5. 迭代器模式\"></a>5. 迭代器模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"6-命令模式\"><a href=\"#6-命令模式\" class=\"headerlink\" title=\"6. 命令模式\"></a>6. 命令模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"7-代理模式\"><a href=\"#7-代理模式\" class=\"headerlink\" title=\"7. 代理模式\"></a>7. 代理模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"8-适配器模式\"><a href=\"#8-适配器模式\" class=\"headerlink\" title=\"8. 适配器模式\"></a>8. 适配器模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"9-责任链模式\"><a href=\"#9-责任链模式\" class=\"headerlink\" title=\"9. 责任链模式\"></a>9. 责任链模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"10-工厂模式\"><a href=\"#10-工厂模式\" class=\"headerlink\" title=\"10. 工厂模式\"></a>10. 工厂模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"11-单例模式\"><a href=\"#11-单例模式\" class=\"headerlink\" title=\"11. 单例模式\"></a>11. 单例模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"12-观察者模式\"><a href=\"#12-观察者模式\" class=\"headerlink\" title=\"12. 观察者模式\"></a>12. 观察者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"13-中介者模式\"><a href=\"#13-中介者模式\" class=\"headerlink\" title=\"13. 中介者模式\"></a>13. 中介者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"14-装饰者模式\"><a href=\"#14-装饰者模式\" class=\"headerlink\" title=\"14. 装饰者模式\"></a>14. 装饰者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"15-建造者模式\"><a href=\"#15-建造者模式\" class=\"headerlink\" title=\"15. 建造者模式\"></a>15. 建造者模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>\n<h3 id=\"16-构造函数模式\"><a href=\"#16-构造函数模式\" class=\"headerlink\" title=\"16. 构造函数模式\"></a>16. 构造函数模式</h3><p>概念：</p>\n<p>作用：</p>\n<p>注意事项：</p>\n<p>代码实战和总结</p>"},{"author":"小莫","date":"2016-06-22T16:00:00.000Z","title":"angular2学习笔记之基本组件和ngFor","_content":"angular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、简介\n\n### 1. 目录结构\n\n![](http://static.xiaomo.info/images/jiegou.png)\n\n- `.ts`   组件代码\n- `.scss`   样式\n- `.png`   效果图\n- `.html`   模板文件\n\n### 2. 效果图\n\n![](http://static.xiaomo.info/images/Basic.png)\n\n## 二、代码实例\n\n[https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic)\n\n### 三、 详细解读\n\n###  1. [Basic.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.ts)\n一个基本的组件就长个样子，并没有那么神秘\n\n```\nimport {Component} from '@angular/core';\nimport {UserModel} from './../../model/UserModel';\n\n// 创建模拟数据\nlet xiaomo:UserModel = new UserModel( 'xiaomo');\nlet xiaoming:UserModel = new UserModel('xiaoming');\n\n@Component({\n\tselector: 'basic',\n\tstyles:[require('./Basic.scss')], //内联样式,注意使用row-loader\n\ttemplate: require('./Basic.html')\n})\n\nexport class BasicComponent {\n\n\tusers:Object;\n\t// 在构造函数中赋值\n\tconstructor() {\n\t\t\tthis.users= [ xiaomo,xiaoming];\n\t};\n}\n\n```\n\n### 2. [UserModel.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/model/UserModel.ts)\n这里使用了uuid来创建一个随机的id作为唯一标识符\n使用 `public` 可以不用再 `this.name = name`\n```\nimport { uuid } from './../util/uuid';\n\nexport class UserModel{\n\tid :string;\n\tconstructor(public name:string){\n\t\t\tthis.id = uuid();\n\t}\n}\n\n```\n\n### 3. [Basic.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.html)\n使用ngFor 循环,index可以取到索引值(从0开始)\n\n```\n<div>\n    <ul *ngFor=\"let item of users; let i = index\">\n        <li>{{i+1}} Hello {{item.name}}</li>\n    </ul>\n</div>\n```\n","source":"_posts/2016-06-23.angular2_study_note_component.md","raw":"---\nauthor: 小莫\ndate: 2016-06-23\ntitle: angular2学习笔记之基本组件和ngFor\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_note_component\n---\nangular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、简介\n\n### 1. 目录结构\n\n![](http://static.xiaomo.info/images/jiegou.png)\n\n- `.ts`   组件代码\n- `.scss`   样式\n- `.png`   效果图\n- `.html`   模板文件\n\n### 2. 效果图\n\n![](http://static.xiaomo.info/images/Basic.png)\n\n## 二、代码实例\n\n[https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic](https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic)\n\n### 三、 详细解读\n\n###  1. [Basic.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.ts)\n一个基本的组件就长个样子，并没有那么神秘\n\n```\nimport {Component} from '@angular/core';\nimport {UserModel} from './../../model/UserModel';\n\n// 创建模拟数据\nlet xiaomo:UserModel = new UserModel( 'xiaomo');\nlet xiaoming:UserModel = new UserModel('xiaoming');\n\n@Component({\n\tselector: 'basic',\n\tstyles:[require('./Basic.scss')], //内联样式,注意使用row-loader\n\ttemplate: require('./Basic.html')\n})\n\nexport class BasicComponent {\n\n\tusers:Object;\n\t// 在构造函数中赋值\n\tconstructor() {\n\t\t\tthis.users= [ xiaomo,xiaoming];\n\t};\n}\n\n```\n\n### 2. [UserModel.ts](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/model/UserModel.ts)\n这里使用了uuid来创建一个随机的id作为唯一标识符\n使用 `public` 可以不用再 `this.name = name`\n```\nimport { uuid } from './../util/uuid';\n\nexport class UserModel{\n\tid :string;\n\tconstructor(public name:string){\n\t\t\tthis.id = uuid();\n\t}\n}\n\n```\n\n### 3. [Basic.html](https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.html)\n使用ngFor 循环,index可以取到索引值(从0开始)\n\n```\n<div>\n    <ul *ngFor=\"let item of users; let i = index\">\n        <li>{{i+1}} Hello {{item.name}}</li>\n    </ul>\n</div>\n```\n","slug":"angular2_study_note_component","published":1,"updated":"2016-06-28T02:47:03.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipyxgvxh0000t0mcsbxwfuqi","content":"<p>angular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><h3 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h3><p><img src=\"http://static.xiaomo.info/images/jiegou.png\" alt=\"\"></p>\n<ul>\n<li><code>.ts</code>   组件代码</li>\n<li><code>.scss</code>   样式</li>\n<li><code>.png</code>   效果图</li>\n<li><code>.html</code>   模板文件</li>\n</ul>\n<h3 id=\"2-效果图\"><a href=\"#2-效果图\" class=\"headerlink\" title=\"2. 效果图\"></a>2. 效果图</h3><p><img src=\"http://static.xiaomo.info/images/Basic.png\" alt=\"\"></p>\n<h2 id=\"二、代码实例\"><a href=\"#二、代码实例\" class=\"headerlink\" title=\"二、代码实例\"></a>二、代码实例</h2><p><a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic\" target=\"_blank\" rel=\"external\">https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic</a></p>\n<h3 id=\"三、-详细解读\"><a href=\"#三、-详细解读\" class=\"headerlink\" title=\"三、 详细解读\"></a>三、 详细解读</h3><h3 id=\"1-Basic-ts\"><a href=\"#1-Basic-ts\" class=\"headerlink\" title=\"1. Basic.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.ts\" target=\"_blank\" rel=\"external\">Basic.ts</a></h3><p>一个基本的组件就长个样子，并没有那么神秘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;UserModel&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../../model/UserModel'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建模拟数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaomo:UserModel = <span class=\"keyword\">new</span> UserModel( <span class=\"string\">'xiaomo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoming:UserModel = <span class=\"keyword\">new</span> UserModel(<span class=\"string\">'xiaoming'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'basic'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./Basic.scss'</span>)], <span class=\"comment\">//内联样式,注意使用row-loader</span></span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./Basic.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    users:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在构造函数中赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.users= [ xiaomo,xiaoming];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-UserModel-ts\"><a href=\"#2-UserModel-ts\" class=\"headerlink\" title=\"2. UserModel.ts\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/model/UserModel.ts\" target=\"_blank\" rel=\"external\">UserModel.ts</a></h3><p>这里使用了uuid来创建一个随机的id作为唯一标识符<br>使用 <code>public</code> 可以不用再 <code>this.name = name</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; uuid &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../util/uuid'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span>&#123;</span><br><span class=\"line\">    id :string;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(public name:string)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = uuid();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Basic-html\"><a href=\"#3-Basic-html\" class=\"headerlink\" title=\"3. Basic.html\"></a>3. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.html\" target=\"_blank\" rel=\"external\">Basic.html</a></h3><p>使用ngFor 循环,index可以取到索引值(从0开始)</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of users; let i = index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;i+1&#125;&#125;</span><span class=\"xml\"> Hello </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>angular2的思想非常先进，摒弃了angular1那种复杂的构建模式，采用了组件化开方的方，那我们一起来看一看，一个基础的组件是什么样子的呢。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h2><h3 id=\"1-目录结构\"><a href=\"#1-目录结构\" class=\"headerlink\" title=\"1. 目录结构\"></a>1. 目录结构</h3><p><img src=\"http://static.xiaomo.info/images/jiegou.png\" alt=\"\"></p>\n<ul>\n<li><code>.ts</code>   组件代码</li>\n<li><code>.scss</code>   样式</li>\n<li><code>.png</code>   效果图</li>\n<li><code>.html</code>   模板文件</li>\n</ul>\n<h3 id=\"2-效果图\"><a href=\"#2-效果图\" class=\"headerlink\" title=\"2. 效果图\"></a>2. 效果图</h3><p><img src=\"http://static.xiaomo.info/images/Basic.png\" alt=\"\"></p>\n<h2 id=\"二、代码实例\"><a href=\"#二、代码实例\" class=\"headerlink\" title=\"二、代码实例\"></a>二、代码实例</h2><p><a href=\"https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic\">https://github.com/qq83387856/angular2-demo/tree/master/src/ts/component/basic</a></p>\n<h3 id=\"三、-详细解读\"><a href=\"#三、-详细解读\" class=\"headerlink\" title=\"三、 详细解读\"></a>三、 详细解读</h3><h3 id=\"1-Basic-ts\"><a href=\"#1-Basic-ts\" class=\"headerlink\" title=\"1. Basic.ts\"></a>1. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.ts\">Basic.ts</a></h3><p>一个基本的组件就长个样子，并没有那么神秘</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;UserModel&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../../model/UserModel'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建模拟数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaomo:UserModel = <span class=\"keyword\">new</span> UserModel( <span class=\"string\">'xiaomo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoming:UserModel = <span class=\"keyword\">new</span> UserModel(<span class=\"string\">'xiaoming'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">    selector: <span class=\"string\">'basic'</span>,</span><br><span class=\"line\">    styles:[<span class=\"built_in\">require</span>(<span class=\"string\">'./Basic.scss'</span>)], <span class=\"comment\">//内联样式,注意使用row-loader</span></span><br><span class=\"line\">    template: <span class=\"built_in\">require</span>(<span class=\"string\">'./Basic.html'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    users:<span class=\"built_in\">Object</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在构造函数中赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.users= [ xiaomo,xiaoming];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-UserModel-ts\"><a href=\"#2-UserModel-ts\" class=\"headerlink\" title=\"2. UserModel.ts\"></a>2. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/model/UserModel.ts\">UserModel.ts</a></h3><p>这里使用了uuid来创建一个随机的id作为唯一标识符<br>使用 <code>public</code> 可以不用再 <code>this.name = name</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; uuid &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./../util/uuid'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserModel</span></span>&#123;</span><br><span class=\"line\">    id :string;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(public name:string)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.id = uuid();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-Basic-html\"><a href=\"#3-Basic-html\" class=\"headerlink\" title=\"3. Basic.html\"></a>3. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/src/ts/component/basic/Basic.html\">Basic.html</a></h3><p>使用ngFor 循环,index可以取到索引值(从0开始)</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of users; let i = index\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;i+1&#125;&#125;</span><span class=\"xml\"> Hello </span><span class=\"template-variable\">&#123;&#123;item.name&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-21T16:00:00.000Z","title":"angular2学习笔记之基础环境搭建","_content":"俗话说万事开头难，对于一个项目的开发，准备工作其实是一件很很头大的事。尤其是像angular2这种前沿基础，搭建环境这一步就让很多人望而却步。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、angular2基础依赖\n\n### 1.angular模块\n\n- @angular/common\n- @angular/compiler\n- @angular/core\n- @angular/http\n- @angular/platform-browser\n- @angular/platform-browser-dynamic\n- @angular/router\n- @angular/deprecated\n\n### 2. 其他依赖\n\n- core-js\n- es6-shim\n- reflect-metadata\n- systemjs\n- ts-helpers\n- tslint\n- typescript\n- typings\n- zone.js\n- concurrently\n- live-server\n- lodash\n- moment\n- uuid\n- base64id\n- optimist\n- uuid\n- [rxjs](#) 非常重要\n\n### 3. typings依赖\n\ndt源\n- angular-protractor\n- core-js\n- hammerjs\n- jasmine\n- node\n- selenium-webdriver\n- source-map\n- uglify-js\n- webpack\n\n\nnpm源\n- lodash\n\n\ngithub源\n暂无\n\n### 4. [typings.json](https://github.com/qq83387856/angular2-demo/blob/master/typings.json)\n```\n{\n  \"globalDependencies\": {\n    \"angular-protractor\": \"registry:dt/angular-protractor#1.5.0+20160425143459\",\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160317120654\",\n    \"hammerjs\": \"registry:dt/hammerjs#2.0.4+20160417130828\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160505161446\",\n    \"node\": \"registry:dt/node#6.0.0+20160514165920\",\n    \"selenium-webdriver\": \"registry:dt/selenium-webdriver#2.44.0+20160317120654\",\n    \"source-map\": \"registry:dt/source-map#0.0.0+20160317120654\",\n    \"uglify-js\": \"registry:dt/uglify-js#2.6.1+20160316155526\",\n    \"webpack\": \"registry:dt/webpack#1.12.9+20160321060707\"\n  },\n  \"dependencies\": {\n    \"lodash\": \"registry:npm/lodash#4.0.0+20160416211519\"\n  }\n}\n```\n\n### 4. [webpack的配置](https://github.com/qq83387856/angular2-demo/blob/master/webpack.config.js)\n\n```\nvar webpack               = require('webpack'),\n    ReloadPlugin          = require('webpack-reload-plugin'),\n    path                  = require('path'),\n    HtmlWebpackPlugin     = require('html-webpack-plugin'),\n    WebpackNotifierPlugin = require('webpack-notifier'),\n    ExtractTextPlugin     = require('extract-text-webpack-plugin');\n\n/**\n * Support for extra commandline arguments\n */\nvar argv = require('optimist').argv;\n\n/**\n * Useful variables\n */\nvar cwd = process.cwd();\nvar DEBUG = !argv.release;\nvar isDevServer = process.argv.join('').indexOf('webpack-dev-server') > -1;\nvar version = require(path.resolve(cwd,'package.json')).version;\nvar reloadHost = 'localhost';\nvar npmRoot = __dirname + '/node_modules';\nvar appDir = __dirname + '/src';\n\nvar entry = ['app.ts'];\n\nif (isDevServer) {\n  entry.unshift('webpack-dev-server/client?http://'+reloadHost+':8080');\n}\n\nfunction makeConfig(options) {\n  return {\n    cache: true,\n    debug: true,\n    verbose: true,\n    displayErrorDetails: true,\n    context: appDir,\n\n    entry: {\n      vendor: 'vendor.ts',\n      bundle: entry\n    },\n\n    stats: {\n      colors: true,\n      reasons: DEBUG\n    },\n\n    devtool: 'source-map',\n\n    recordsPath: path.resolve('.webpack.json'),\n\n    devServer: {\n      inline: true,\n      colors: true,\n      header:{\n        \"Access-Control-Allow-Origin\":\"*\"\n      },\n      contentBase: path.resolve(cwd, 'dist'),\n      publicPath: '/'\n    },\n\n    output: {\n      path: path.resolve(cwd, 'dist'),\n      filename: '[name].js',\n      publicPath: '/',\n      chunkFilename: '[id].bundle.js',\n\n      // Hot Module Replacement settings:\n      hotUpdateMainFilename: 'updates/[hash].update.json',\n      hotUpdateChunkFilename: 'updates/[hash].[id].update.js'\n    },\n\n    plugins: [\n      new webpack.IgnorePlugin(/spec\\.js$/),\n      new webpack.optimize.CommonsChunkPlugin('common.js'),\n      new ExtractTextPlugin('styles.css'),\n      new webpack.DefinePlugin({\n        VERSION: JSON.stringify(version),\n        ENV: JSON.stringify(options.env)\n      }),\n      new HtmlWebpackPlugin({\n        template: path.join(appDir, 'index.html')\n      }),\n      new ReloadPlugin( isDevServer ? 'localhost' : ''),\n      new WebpackNotifierPlugin({\n        title: 'ng-book',\n        contentImage: path.join(appDir, 'images', 'favicon.ico')\n      })\n    ],\n    resolveLoader: {\n      root: path.join(__dirname, 'node_modules'),\n      modulesDirectories: ['node_modules'],\n      fallback: path.join(__dirname, 'node_modules')\n    },\n    resolve: {\n      root: [path.resolve(cwd)],\n      modulesDirectories: [\n        'node_modules', 'src', 'src/ts', '.'\n      ],\n      extensions: ['', '.ts', '.js', '.json', '.css','.scss'],\n      alias: {\n        'src': 'src',\n        'scripts': npmRoot\n      }\n    },\n    module: {\n      preLoaders: [\n        { test: /\\.ts$/, loader: 'tslint' }\n      ],\n\n      loaders: [\n        { test: /\\.(png|jpg|gif|ico)$/,   loader: 'file-loader?limit=50000&name=[path][name].[ext]' },\n        { test: /\\.json$/, loader: 'json' },\n        { test: /^.*\\.css$/, loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap')},\n        { test: /\\.scss$/, loaders: [\n                                     'raw-loader',\n                                     'style-loader',\n                                     ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap'),\n                                     'sass-loader' +\n                                     '?outputStyle=expanded&' +\n                                     'root='+appDir+'&' +\n                                     '&includePaths[]'+npmRoot + '&' +\n                                     '&includePaths[]'+appDir\n                                    ]},\n        { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'url-loader' },\n        { test: /\\.html$/,    loader: 'raw' },\n        { test: /^index\\.html$/, loader: 'file-loader?name=[path][name].[ext]' },\n        { test: /\\.ts$/, loader: 'ts', exclude: [ /test/, /node_modules/]},\n        { test: /\\.woff(2)?(\\?v=\\d+\\.\\d+\\.\\d+)?$/,    loader: 'file-loader?mimetype=application/font-woff&name=[path][name].[ext]' },\n        { test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'file-loader?mimetype=application/x-font-ttf&name=[path][name].[ext]' },\n        { test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?\\??$/,      loader: 'file-loader?mimetype=application/vnd.ms-fontobject&name=[path][name].[ext]' },\n        { test: /\\.otf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'file-loader?mimetype=application/font-otf&name=[path][name].[ext]' },\n        { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'url-loader'   }\n      ],\n      noParse: [\n        /\\.min\\.js/,\n        /vendor\\/.*?\\.(js|css)$/\n      ]\n    },\n    tslint: {\n        emitErrors: false,\n        failOnHint: false\n    }\n  }\n}\n\nvar config = makeConfig(argv);\n\nmodule.exports = config;\n\n```\n\n\n### 5. ts转码\n\n[tsconfig.json](https://github.com/qq83387856/angular2-demo/blob/master/tsconfig.json)\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"declaration\": false,\n    \"noImplicitAny\": false,\n    \"removeComments\": true,\n    \"noLib\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  },\n  \"filesGlob\": [\n    \"./**/*.ts\",\n    \"./test/**/*.ts\",\n    \"!./node_modules/**/*.ts\",\n    \"!./tmp/*.ts\"\n  ],\n  \"compileOnSave\": true,\n  \"buildOnSave\": true,\n  \"atom\": { \"rewriteTsconfig\": false },\n  \"exclude\": [\n    \"typings/main.d.ts\",\n    \"typings/main\",\n    \"node_modules\",\n    \"tmp\"\n  ]\n}\n\n```\n\n\n### 6.基础依赖引入\n\n[vendor.ts](https://github.com/qq83387856/angular2-demo/blob/master/vendor.ts)\n\n```\n// Polyfills\nimport 'core-js/es6';\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\n\nimport 'zone.js/dist/zone';\nimport 'zone.js/dist/long-stack-trace-zone';\n\n// Angular 2\nimport '@angular/platform-browser-dynamic';\nimport '@angular/common';\nimport '@angular/core';\nimport '@angular/router';\nimport '@angular/http';\n\n// RxJS\nimport 'rxjs';\n\n```\n","source":"_posts/2016-06-22.angular2_study_note_environment.md","raw":"---\nauthor: 小莫\ndate: 2016-06-22\ntitle: angular2学习笔记之基础环境搭建\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_note_environment\n---\n俗话说万事开头难，对于一个项目的开发，准备工作其实是一件很很头大的事。尤其是像angular2这种前沿基础，搭建环境这一步就让很多人望而却步。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、angular2基础依赖\n\n### 1.angular模块\n\n- @angular/common\n- @angular/compiler\n- @angular/core\n- @angular/http\n- @angular/platform-browser\n- @angular/platform-browser-dynamic\n- @angular/router\n- @angular/deprecated\n\n### 2. 其他依赖\n\n- core-js\n- es6-shim\n- reflect-metadata\n- systemjs\n- ts-helpers\n- tslint\n- typescript\n- typings\n- zone.js\n- concurrently\n- live-server\n- lodash\n- moment\n- uuid\n- base64id\n- optimist\n- uuid\n- [rxjs](#) 非常重要\n\n### 3. typings依赖\n\ndt源\n- angular-protractor\n- core-js\n- hammerjs\n- jasmine\n- node\n- selenium-webdriver\n- source-map\n- uglify-js\n- webpack\n\n\nnpm源\n- lodash\n\n\ngithub源\n暂无\n\n### 4. [typings.json](https://github.com/qq83387856/angular2-demo/blob/master/typings.json)\n```\n{\n  \"globalDependencies\": {\n    \"angular-protractor\": \"registry:dt/angular-protractor#1.5.0+20160425143459\",\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160317120654\",\n    \"hammerjs\": \"registry:dt/hammerjs#2.0.4+20160417130828\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160505161446\",\n    \"node\": \"registry:dt/node#6.0.0+20160514165920\",\n    \"selenium-webdriver\": \"registry:dt/selenium-webdriver#2.44.0+20160317120654\",\n    \"source-map\": \"registry:dt/source-map#0.0.0+20160317120654\",\n    \"uglify-js\": \"registry:dt/uglify-js#2.6.1+20160316155526\",\n    \"webpack\": \"registry:dt/webpack#1.12.9+20160321060707\"\n  },\n  \"dependencies\": {\n    \"lodash\": \"registry:npm/lodash#4.0.0+20160416211519\"\n  }\n}\n```\n\n### 4. [webpack的配置](https://github.com/qq83387856/angular2-demo/blob/master/webpack.config.js)\n\n```\nvar webpack               = require('webpack'),\n    ReloadPlugin          = require('webpack-reload-plugin'),\n    path                  = require('path'),\n    HtmlWebpackPlugin     = require('html-webpack-plugin'),\n    WebpackNotifierPlugin = require('webpack-notifier'),\n    ExtractTextPlugin     = require('extract-text-webpack-plugin');\n\n/**\n * Support for extra commandline arguments\n */\nvar argv = require('optimist').argv;\n\n/**\n * Useful variables\n */\nvar cwd = process.cwd();\nvar DEBUG = !argv.release;\nvar isDevServer = process.argv.join('').indexOf('webpack-dev-server') > -1;\nvar version = require(path.resolve(cwd,'package.json')).version;\nvar reloadHost = 'localhost';\nvar npmRoot = __dirname + '/node_modules';\nvar appDir = __dirname + '/src';\n\nvar entry = ['app.ts'];\n\nif (isDevServer) {\n  entry.unshift('webpack-dev-server/client?http://'+reloadHost+':8080');\n}\n\nfunction makeConfig(options) {\n  return {\n    cache: true,\n    debug: true,\n    verbose: true,\n    displayErrorDetails: true,\n    context: appDir,\n\n    entry: {\n      vendor: 'vendor.ts',\n      bundle: entry\n    },\n\n    stats: {\n      colors: true,\n      reasons: DEBUG\n    },\n\n    devtool: 'source-map',\n\n    recordsPath: path.resolve('.webpack.json'),\n\n    devServer: {\n      inline: true,\n      colors: true,\n      header:{\n        \"Access-Control-Allow-Origin\":\"*\"\n      },\n      contentBase: path.resolve(cwd, 'dist'),\n      publicPath: '/'\n    },\n\n    output: {\n      path: path.resolve(cwd, 'dist'),\n      filename: '[name].js',\n      publicPath: '/',\n      chunkFilename: '[id].bundle.js',\n\n      // Hot Module Replacement settings:\n      hotUpdateMainFilename: 'updates/[hash].update.json',\n      hotUpdateChunkFilename: 'updates/[hash].[id].update.js'\n    },\n\n    plugins: [\n      new webpack.IgnorePlugin(/spec\\.js$/),\n      new webpack.optimize.CommonsChunkPlugin('common.js'),\n      new ExtractTextPlugin('styles.css'),\n      new webpack.DefinePlugin({\n        VERSION: JSON.stringify(version),\n        ENV: JSON.stringify(options.env)\n      }),\n      new HtmlWebpackPlugin({\n        template: path.join(appDir, 'index.html')\n      }),\n      new ReloadPlugin( isDevServer ? 'localhost' : ''),\n      new WebpackNotifierPlugin({\n        title: 'ng-book',\n        contentImage: path.join(appDir, 'images', 'favicon.ico')\n      })\n    ],\n    resolveLoader: {\n      root: path.join(__dirname, 'node_modules'),\n      modulesDirectories: ['node_modules'],\n      fallback: path.join(__dirname, 'node_modules')\n    },\n    resolve: {\n      root: [path.resolve(cwd)],\n      modulesDirectories: [\n        'node_modules', 'src', 'src/ts', '.'\n      ],\n      extensions: ['', '.ts', '.js', '.json', '.css','.scss'],\n      alias: {\n        'src': 'src',\n        'scripts': npmRoot\n      }\n    },\n    module: {\n      preLoaders: [\n        { test: /\\.ts$/, loader: 'tslint' }\n      ],\n\n      loaders: [\n        { test: /\\.(png|jpg|gif|ico)$/,   loader: 'file-loader?limit=50000&name=[path][name].[ext]' },\n        { test: /\\.json$/, loader: 'json' },\n        { test: /^.*\\.css$/, loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap')},\n        { test: /\\.scss$/, loaders: [\n                                     'raw-loader',\n                                     'style-loader',\n                                     ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap'),\n                                     'sass-loader' +\n                                     '?outputStyle=expanded&' +\n                                     'root='+appDir+'&' +\n                                     '&includePaths[]'+npmRoot + '&' +\n                                     '&includePaths[]'+appDir\n                                    ]},\n        { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'url-loader' },\n        { test: /\\.html$/,    loader: 'raw' },\n        { test: /^index\\.html$/, loader: 'file-loader?name=[path][name].[ext]' },\n        { test: /\\.ts$/, loader: 'ts', exclude: [ /test/, /node_modules/]},\n        { test: /\\.woff(2)?(\\?v=\\d+\\.\\d+\\.\\d+)?$/,    loader: 'file-loader?mimetype=application/font-woff&name=[path][name].[ext]' },\n        { test: /\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'file-loader?mimetype=application/x-font-ttf&name=[path][name].[ext]' },\n        { test: /\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?\\??$/,      loader: 'file-loader?mimetype=application/vnd.ms-fontobject&name=[path][name].[ext]' },\n        { test: /\\.otf(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'file-loader?mimetype=application/font-otf&name=[path][name].[ext]' },\n        { test: /\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/,         loader: 'url-loader'   }\n      ],\n      noParse: [\n        /\\.min\\.js/,\n        /vendor\\/.*?\\.(js|css)$/\n      ]\n    },\n    tslint: {\n        emitErrors: false,\n        failOnHint: false\n    }\n  }\n}\n\nvar config = makeConfig(argv);\n\nmodule.exports = config;\n\n```\n\n\n### 5. ts转码\n\n[tsconfig.json](https://github.com/qq83387856/angular2-demo/blob/master/tsconfig.json)\n\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"declaration\": false,\n    \"noImplicitAny\": false,\n    \"removeComments\": true,\n    \"noLib\": false,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true\n  },\n  \"filesGlob\": [\n    \"./**/*.ts\",\n    \"./test/**/*.ts\",\n    \"!./node_modules/**/*.ts\",\n    \"!./tmp/*.ts\"\n  ],\n  \"compileOnSave\": true,\n  \"buildOnSave\": true,\n  \"atom\": { \"rewriteTsconfig\": false },\n  \"exclude\": [\n    \"typings/main.d.ts\",\n    \"typings/main\",\n    \"node_modules\",\n    \"tmp\"\n  ]\n}\n\n```\n\n\n### 6.基础依赖引入\n\n[vendor.ts](https://github.com/qq83387856/angular2-demo/blob/master/vendor.ts)\n\n```\n// Polyfills\nimport 'core-js/es6';\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\n\nimport 'zone.js/dist/zone';\nimport 'zone.js/dist/long-stack-trace-zone';\n\n// Angular 2\nimport '@angular/platform-browser-dynamic';\nimport '@angular/common';\nimport '@angular/core';\nimport '@angular/router';\nimport '@angular/http';\n\n// RxJS\nimport 'rxjs';\n\n```\n","slug":"angular2_study_note_environment","published":1,"updated":"2016-06-28T02:47:03.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipyxgvzz0007t0mc4y8uu7i2","content":"<p>俗话说万事开头难，对于一个项目的开发，准备工作其实是一件很很头大的事。尤其是像angular2这种前沿基础，搭建环境这一步就让很多人望而却步。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、angular2基础依赖\"><a href=\"#一、angular2基础依赖\" class=\"headerlink\" title=\"一、angular2基础依赖\"></a>一、angular2基础依赖</h2><h3 id=\"1-angular模块\"><a href=\"#1-angular模块\" class=\"headerlink\" title=\"1.angular模块\"></a>1.angular模块</h3><ul>\n<li>@angular/common</li>\n<li>@angular/compiler</li>\n<li>@angular/core</li>\n<li>@angular/http</li>\n<li>@angular/platform-browser</li>\n<li>@angular/platform-browser-dynamic</li>\n<li>@angular/router</li>\n<li>@angular/deprecated</li>\n</ul>\n<h3 id=\"2-其他依赖\"><a href=\"#2-其他依赖\" class=\"headerlink\" title=\"2. 其他依赖\"></a>2. 其他依赖</h3><ul>\n<li>core-js</li>\n<li>es6-shim</li>\n<li>reflect-metadata</li>\n<li>systemjs</li>\n<li>ts-helpers</li>\n<li>tslint</li>\n<li>typescript</li>\n<li>typings</li>\n<li>zone.js</li>\n<li>concurrently</li>\n<li>live-server</li>\n<li>lodash</li>\n<li>moment</li>\n<li>uuid</li>\n<li>base64id</li>\n<li>optimist</li>\n<li>uuid</li>\n<li><a href=\"#\">rxjs</a> 非常重要</li>\n</ul>\n<h3 id=\"3-typings依赖\"><a href=\"#3-typings依赖\" class=\"headerlink\" title=\"3. typings依赖\"></a>3. typings依赖</h3><p>dt源</p>\n<ul>\n<li>angular-protractor</li>\n<li>core-js</li>\n<li>hammerjs</li>\n<li>jasmine</li>\n<li>node</li>\n<li>selenium-webdriver</li>\n<li>source-map</li>\n<li>uglify-js</li>\n<li>webpack</li>\n</ul>\n<p>npm源</p>\n<ul>\n<li>lodash</li>\n</ul>\n<p>github源<br>暂无</p>\n<h3 id=\"4-typings-json\"><a href=\"#4-typings-json\" class=\"headerlink\" title=\"4. typings.json\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/typings.json\" target=\"_blank\" rel=\"external\">typings.json</a></h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"globalDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"angular-protractor\"</span>: <span class=\"string\">\"registry:dt/angular-protractor#1.5.0+20160425143459\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"core-js\"</span>: <span class=\"string\">\"registry:dt/core-js#0.0.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hammerjs\"</span>: <span class=\"string\">\"registry:dt/hammerjs#2.0.4+20160417130828\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"jasmine\"</span>: <span class=\"string\">\"registry:dt/jasmine#2.2.0+20160505161446\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"registry:dt/node#6.0.0+20160514165920\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"selenium-webdriver\"</span>: <span class=\"string\">\"registry:dt/selenium-webdriver#2.44.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map\"</span>: <span class=\"string\">\"registry:dt/source-map#0.0.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"uglify-js\"</span>: <span class=\"string\">\"registry:dt/uglify-js#2.6.1+20160316155526\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"registry:dt/webpack#1.12.9+20160321060707\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"lodash\"</span>: <span class=\"string\">\"registry:npm/lodash#4.0.0+20160416211519\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-webpack的配置\"><a href=\"#4-webpack的配置\" class=\"headerlink\" title=\"4. webpack的配置\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/webpack.config.js\" target=\"_blank\" rel=\"external\">webpack的配置</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack               = require(<span class=\"string\">'webpack'</span>),</span><br><span class=\"line\">    ReloadPlugin          = require(<span class=\"string\">'webpack-reload-plugin'</span>),</span><br><span class=\"line\">    path                  = require(<span class=\"string\">'path'</span>),</span><br><span class=\"line\">    HtmlWebpackPlugin     = require(<span class=\"string\">'html-webpack-plugin'</span>),</span><br><span class=\"line\">    WebpackNotifierPlugin = require(<span class=\"string\">'webpack-notifier'</span>),</span><br><span class=\"line\">    ExtractTextPlugin     = require(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Support for extra commandline arguments</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">var argv = require(<span class=\"string\">'optimist'</span>).argv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Useful variables</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">var cwd = process.cwd();</span><br><span class=\"line\">var DEBUG = !argv.release;</span><br><span class=\"line\">var isDevServer = process.argv.join(<span class=\"string\">''</span>).indexOf(<span class=\"string\">'webpack-dev-server'</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">var version = require(path.resolve(cwd,<span class=\"string\">'package.json'</span>)).version;</span><br><span class=\"line\">var reloadHost = <span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">var npmRoot = __dirname + <span class=\"string\">'/node_modules'</span>;</span><br><span class=\"line\">var appDir = __dirname + <span class=\"string\">'/src'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">var entry = [<span class=\"string\">'app.ts'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isDevServer) &#123;</span><br><span class=\"line\">  entry.unshift(<span class=\"string\">'webpack-dev-server/client?http://'</span>+reloadHost+<span class=\"string\">':8080'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function makeConfig(options) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">    cache:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    debug:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    verbose:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    displayErrorDetails:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    context:</span> appDir,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    entry:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      vendor:</span> <span class=\"string\">'vendor.ts'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      bundle:</span> entry</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    stats:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      colors:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      reasons:</span> DEBUG</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    devtool:</span> <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    recordsPath:</span> path.resolve(<span class=\"string\">'.webpack.json'</span>),</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    devServer:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      inline:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      colors:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      header:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Access-Control-Allow-Origin\"</span>:<span class=\"string\">\"*\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"symbol\">      contentBase:</span> path.resolve(cwd, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      publicPath:</span> <span class=\"string\">'/'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    output:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      path:</span> path.resolve(cwd, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      filename:</span> <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      publicPath:</span> <span class=\"string\">'/'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      chunkFilename:</span> <span class=\"string\">'[id].bundle.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Hot Module Replacement settings:</span></span><br><span class=\"line\"><span class=\"symbol\">      hotUpdateMainFilename:</span> <span class=\"string\">'updates/[hash].update.json'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      hotUpdateChunkFilename:</span> <span class=\"string\">'updates/[hash].[id].update.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    plugins:</span> [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/spec\\.js$/</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'styles.css'</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        VERSION:</span> JSON.stringify(version),</span><br><span class=\"line\"><span class=\"symbol\">        ENV:</span> JSON.stringify(options.env)</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        template:</span> path.join(appDir, <span class=\"string\">'index.html'</span>)</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> ReloadPlugin( isDevServer ? 'localhost' : <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> WebpackNotifierPlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        title:</span> <span class=\"string\">'ng-book'</span>,</span><br><span class=\"line\"><span class=\"symbol\">        contentImage:</span> path.join(appDir, <span class=\"string\">'images'</span>, <span class=\"string\">'favicon.ico'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"><span class=\"symbol\">    resolveLoader:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      root:</span> path.join(__dirname, <span class=\"string\">'node_modules'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      modulesDirectories:</span> [<span class=\"string\">'node_modules'</span>],</span><br><span class=\"line\"><span class=\"symbol\">      fallback:</span> path.join(__dirname, <span class=\"string\">'node_modules'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\">    resolve:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      root:</span> [path.resolve(cwd)],</span><br><span class=\"line\"><span class=\"symbol\">      modulesDirectories:</span> [</span><br><span class=\"line\">        <span class=\"string\">'node_modules'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'src/ts'</span>, <span class=\"string\">'.'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\">      extensions:</span> [<span class=\"string\">''</span>, <span class=\"string\">'.ts'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.css'</span>,<span class=\"string\">'.scss'</span>],</span><br><span class=\"line\"><span class=\"symbol\">      alias:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'src'</span>: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">        <span class=\"string\">'scripts'</span>: npmRoot</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\">    module:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      preLoaders:</span> [</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ts$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'tslint'</span> &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">      loaders:</span> [</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.(png|jpg|gif|ico)$/</span>,   <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?limit=50000&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.json$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'json'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/^.*\\.css$/</span>, <span class=\"string\">loader:</span> ExtractTextPlugin.extract(<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader?sourceMap'</span>)&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.scss$/</span>, <span class=\"string\">loaders:</span> [</span><br><span class=\"line\">                                     <span class=\"string\">'raw-loader'</span>,</span><br><span class=\"line\">                                     <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">                                     ExtractTextPlugin.extract(<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader?sourceMap'</span>),</span><br><span class=\"line\">                                     <span class=\"string\">'sass-loader'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'?outputStyle=expanded&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'root='</span>+appDir+<span class=\"string\">'&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'&amp;includePaths[]'</span>+npmRoot + <span class=\"string\">'&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'&amp;includePaths[]'</span>+appDir</span><br><span class=\"line\">                                    ]&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'url-loader'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.html$/</span>,    <span class=\"string\">loader:</span> <span class=\"string\">'raw'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/^index\\.html$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ts$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'ts'</span>, <span class=\"string\">exclude:</span> [ <span class=\"regexp\">/test/</span>, <span class=\"regexp\">/node_modules/</span>]&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.woff(2)?(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,    <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/font-woff&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/x-font-ttf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?\\??$/</span>,      <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/vnd.ms-fontobject&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.otf(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/font-otf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'url-loader'</span>   &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\">      noParse:</span> [</span><br><span class=\"line\">        <span class=\"regexp\">/\\.min\\.js/</span>,</span><br><span class=\"line\">        <span class=\"regexp\">/vendor\\/</span>.*?\\.(js|css)$/</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tslint: &#123;</span><br><span class=\"line\"><span class=\"symbol\">        emitErrors:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"symbol\">        failOnHint:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var config = makeConfig(argv);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-ts转码\"><a href=\"#5-ts转码\" class=\"headerlink\" title=\"5. ts转码\"></a>5. ts转码</h3><p><a href=\"https://github.com/qq83387856/angular2-demo/blob/master/tsconfig.json\" target=\"_blank\" rel=\"external\">tsconfig.json</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"declaration\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"noImplicitAny\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"noLib\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"filesGlob\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./test/**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!./node_modules/**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!./tmp/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"compileOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"buildOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"atom\"</span>: &#123; <span class=\"attr\">\"rewriteTsconfig\"</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"typings/main.d.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"typings/main\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tmp\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-基础依赖引入\"><a href=\"#6-基础依赖引入\" class=\"headerlink\" title=\"6.基础依赖引入\"></a>6.基础依赖引入</h3><p><a href=\"https://github.com/qq83387856/angular2-demo/blob/master/vendor.ts\" target=\"_blank\" rel=\"external\">vendor.ts</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Polyfills</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es6';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es6';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es7/reflect';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'zone.js/dist/zone';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'zone.js/dist/long-stack-trace-zone';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/platform-browser-dynamic';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/common';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/core';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/router';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/http';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RxJS</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'rxjs';</span></span><br></pre></td></tr></table></figure>\n","excerpt":"<p>俗话说万事开头难，对于一个项目的开发，准备工作其实是一件很很头大的事。尤其是像angular2这种前沿基础，搭建环境这一步就让很多人望而却步。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、angular2基础依赖\"><a href=\"#一、angular2基础依赖\" class=\"headerlink\" title=\"一、angular2基础依赖\"></a>一、angular2基础依赖</h2><h3 id=\"1-angular模块\"><a href=\"#1-angular模块\" class=\"headerlink\" title=\"1.angular模块\"></a>1.angular模块</h3><ul>\n<li>@angular/common</li>\n<li>@angular/compiler</li>\n<li>@angular/core</li>\n<li>@angular/http</li>\n<li>@angular/platform-browser</li>\n<li>@angular/platform-browser-dynamic</li>\n<li>@angular/router</li>\n<li>@angular/deprecated</li>\n</ul>\n<h3 id=\"2-其他依赖\"><a href=\"#2-其他依赖\" class=\"headerlink\" title=\"2. 其他依赖\"></a>2. 其他依赖</h3><ul>\n<li>core-js</li>\n<li>es6-shim</li>\n<li>reflect-metadata</li>\n<li>systemjs</li>\n<li>ts-helpers</li>\n<li>tslint</li>\n<li>typescript</li>\n<li>typings</li>\n<li>zone.js</li>\n<li>concurrently</li>\n<li>live-server</li>\n<li>lodash</li>\n<li>moment</li>\n<li>uuid</li>\n<li>base64id</li>\n<li>optimist</li>\n<li>uuid</li>\n<li><a href=\"#\">rxjs</a> 非常重要</li>\n</ul>\n<h3 id=\"3-typings依赖\"><a href=\"#3-typings依赖\" class=\"headerlink\" title=\"3. typings依赖\"></a>3. typings依赖</h3><p>dt源</p>\n<ul>\n<li>angular-protractor</li>\n<li>core-js</li>\n<li>hammerjs</li>\n<li>jasmine</li>\n<li>node</li>\n<li>selenium-webdriver</li>\n<li>source-map</li>\n<li>uglify-js</li>\n<li>webpack</li>\n</ul>\n<p>npm源</p>\n<ul>\n<li>lodash</li>\n</ul>\n<p>github源<br>暂无</p>\n<h3 id=\"4-typings-json\"><a href=\"#4-typings-json\" class=\"headerlink\" title=\"4. typings.json\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/typings.json\">typings.json</a></h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"globalDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"angular-protractor\"</span>: <span class=\"string\">\"registry:dt/angular-protractor#1.5.0+20160425143459\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"core-js\"</span>: <span class=\"string\">\"registry:dt/core-js#0.0.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hammerjs\"</span>: <span class=\"string\">\"registry:dt/hammerjs#2.0.4+20160417130828\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"jasmine\"</span>: <span class=\"string\">\"registry:dt/jasmine#2.2.0+20160505161446\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"registry:dt/node#6.0.0+20160514165920\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"selenium-webdriver\"</span>: <span class=\"string\">\"registry:dt/selenium-webdriver#2.44.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map\"</span>: <span class=\"string\">\"registry:dt/source-map#0.0.0+20160317120654\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"uglify-js\"</span>: <span class=\"string\">\"registry:dt/uglify-js#2.6.1+20160316155526\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"registry:dt/webpack#1.12.9+20160321060707\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"lodash\"</span>: <span class=\"string\">\"registry:npm/lodash#4.0.0+20160416211519\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-webpack的配置\"><a href=\"#4-webpack的配置\" class=\"headerlink\" title=\"4. webpack的配置\"></a>4. <a href=\"https://github.com/qq83387856/angular2-demo/blob/master/webpack.config.js\">webpack的配置</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var webpack               = require(<span class=\"string\">'webpack'</span>),</span><br><span class=\"line\">    ReloadPlugin          = require(<span class=\"string\">'webpack-reload-plugin'</span>),</span><br><span class=\"line\">    path                  = require(<span class=\"string\">'path'</span>),</span><br><span class=\"line\">    HtmlWebpackPlugin     = require(<span class=\"string\">'html-webpack-plugin'</span>),</span><br><span class=\"line\">    WebpackNotifierPlugin = require(<span class=\"string\">'webpack-notifier'</span>),</span><br><span class=\"line\">    ExtractTextPlugin     = require(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Support for extra commandline arguments</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">var argv = require(<span class=\"string\">'optimist'</span>).argv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Useful variables</span><br><span class=\"line\"> */</span></span><br><span class=\"line\">var cwd = process.cwd();</span><br><span class=\"line\">var DEBUG = !argv.release;</span><br><span class=\"line\">var isDevServer = process.argv.join(<span class=\"string\">''</span>).indexOf(<span class=\"string\">'webpack-dev-server'</span>) &gt; <span class=\"number\">-1</span>;</span><br><span class=\"line\">var version = require(path.resolve(cwd,<span class=\"string\">'package.json'</span>)).version;</span><br><span class=\"line\">var reloadHost = <span class=\"string\">'localhost'</span>;</span><br><span class=\"line\">var npmRoot = __dirname + <span class=\"string\">'/node_modules'</span>;</span><br><span class=\"line\">var appDir = __dirname + <span class=\"string\">'/src'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">var entry = [<span class=\"string\">'app.ts'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isDevServer) &#123;</span><br><span class=\"line\">  entry.unshift(<span class=\"string\">'webpack-dev-server/client?http://'</span>+reloadHost+<span class=\"string\">':8080'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function makeConfig(options) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">    cache:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    debug:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    verbose:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    displayErrorDetails:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">    context:</span> appDir,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    entry:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      vendor:</span> <span class=\"string\">'vendor.ts'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      bundle:</span> entry</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    stats:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      colors:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      reasons:</span> DEBUG</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    devtool:</span> <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    recordsPath:</span> path.resolve(<span class=\"string\">'.webpack.json'</span>),</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    devServer:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      inline:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      colors:</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"symbol\">      header:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">\"Access-Control-Allow-Origin\"</span>:<span class=\"string\">\"*\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"symbol\">      contentBase:</span> path.resolve(cwd, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      publicPath:</span> <span class=\"string\">'/'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    output:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      path:</span> path.resolve(cwd, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      filename:</span> <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      publicPath:</span> <span class=\"string\">'/'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      chunkFilename:</span> <span class=\"string\">'[id].bundle.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Hot Module Replacement settings:</span></span><br><span class=\"line\"><span class=\"symbol\">      hotUpdateMainFilename:</span> <span class=\"string\">'updates/[hash].update.json'</span>,</span><br><span class=\"line\"><span class=\"symbol\">      hotUpdateChunkFilename:</span> <span class=\"string\">'updates/[hash].[id].update.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">    plugins:</span> [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.IgnorePlugin(<span class=\"regexp\">/spec\\.js$/</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"string\">'common.js'</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">'styles.css'</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> webpack.DefinePlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        VERSION:</span> JSON.stringify(version),</span><br><span class=\"line\"><span class=\"symbol\">        ENV:</span> JSON.stringify(options.env)</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        template:</span> path.join(appDir, <span class=\"string\">'index.html'</span>)</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> ReloadPlugin( isDevServer ? 'localhost' : <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"keyword\">new</span> WebpackNotifierPlugin(&#123;</span><br><span class=\"line\"><span class=\"symbol\">        title:</span> <span class=\"string\">'ng-book'</span>,</span><br><span class=\"line\"><span class=\"symbol\">        contentImage:</span> path.join(appDir, <span class=\"string\">'images'</span>, <span class=\"string\">'favicon.ico'</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\"><span class=\"symbol\">    resolveLoader:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      root:</span> path.join(__dirname, <span class=\"string\">'node_modules'</span>),</span><br><span class=\"line\"><span class=\"symbol\">      modulesDirectories:</span> [<span class=\"string\">'node_modules'</span>],</span><br><span class=\"line\"><span class=\"symbol\">      fallback:</span> path.join(__dirname, <span class=\"string\">'node_modules'</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\">    resolve:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      root:</span> [path.resolve(cwd)],</span><br><span class=\"line\"><span class=\"symbol\">      modulesDirectories:</span> [</span><br><span class=\"line\">        <span class=\"string\">'node_modules'</span>, <span class=\"string\">'src'</span>, <span class=\"string\">'src/ts'</span>, <span class=\"string\">'.'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\">      extensions:</span> [<span class=\"string\">''</span>, <span class=\"string\">'.ts'</span>, <span class=\"string\">'.js'</span>, <span class=\"string\">'.json'</span>, <span class=\"string\">'.css'</span>,<span class=\"string\">'.scss'</span>],</span><br><span class=\"line\"><span class=\"symbol\">      alias:</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'src'</span>: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">        <span class=\"string\">'scripts'</span>: npmRoot</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"symbol\">    module:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      preLoaders:</span> [</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ts$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'tslint'</span> &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\"></span><br><span class=\"line\">      loaders:</span> [</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.(png|jpg|gif|ico)$/</span>,   <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?limit=50000&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.json$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'json'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/^.*\\.css$/</span>, <span class=\"string\">loader:</span> ExtractTextPlugin.extract(<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader?sourceMap'</span>)&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.scss$/</span>, <span class=\"string\">loaders:</span> [</span><br><span class=\"line\">                                     <span class=\"string\">'raw-loader'</span>,</span><br><span class=\"line\">                                     <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">                                     ExtractTextPlugin.extract(<span class=\"string\">'style-loader'</span>, <span class=\"string\">'css-loader?sourceMap'</span>),</span><br><span class=\"line\">                                     <span class=\"string\">'sass-loader'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'?outputStyle=expanded&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'root='</span>+appDir+<span class=\"string\">'&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'&amp;includePaths[]'</span>+npmRoot + <span class=\"string\">'&amp;'</span> +</span><br><span class=\"line\">                                     <span class=\"string\">'&amp;includePaths[]'</span>+appDir</span><br><span class=\"line\">                                    ]&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'url-loader'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.html$/</span>,    <span class=\"string\">loader:</span> <span class=\"string\">'raw'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/^index\\.html$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ts$/</span>, <span class=\"string\">loader:</span> <span class=\"string\">'ts'</span>, <span class=\"string\">exclude:</span> [ <span class=\"regexp\">/test/</span>, <span class=\"regexp\">/node_modules/</span>]&#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.woff(2)?(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,    <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/font-woff&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.ttf(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/x-font-ttf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.eot(\\?v=\\d+\\.\\d+\\.\\d+)?\\??$/</span>,      <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/vnd.ms-fontobject&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.otf(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'file-loader?mimetype=application/font-otf&amp;name=[path][name].[ext]'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">test:</span> <span class=\"regexp\">/\\.svg(\\?v=\\d+\\.\\d+\\.\\d+)?$/</span>,         <span class=\"string\">loader:</span> <span class=\"string\">'url-loader'</span>   &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\"><span class=\"symbol\">      noParse:</span> [</span><br><span class=\"line\">        <span class=\"regexp\">/\\.min\\.js/</span>,</span><br><span class=\"line\">        <span class=\"regexp\">/vendor\\/</span>.*?\\.(js|css)$/</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tslint: &#123;</span><br><span class=\"line\"><span class=\"symbol\">        emitErrors:</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"symbol\">        failOnHint:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var config = makeConfig(argv);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = config;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-ts转码\"><a href=\"#5-ts转码\" class=\"headerlink\" title=\"5. ts转码\"></a>5. ts转码</h3><p><a href=\"https://github.com/qq83387856/angular2-demo/blob/master/tsconfig.json\">tsconfig.json</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: <span class=\"string\">\"es5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"module\"</span>: <span class=\"string\">\"commonjs\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"declaration\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"noImplicitAny\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"noLib\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"emitDecoratorMetadata\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"experimentalDecorators\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"filesGlob\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"./**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"./test/**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!./node_modules/**/*.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"!./tmp/*.ts\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"compileOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"buildOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"atom\"</span>: &#123; <span class=\"attr\">\"rewriteTsconfig\"</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"exclude\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"typings/main.d.ts\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"typings/main\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"node_modules\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"tmp\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-基础依赖引入\"><a href=\"#6-基础依赖引入\" class=\"headerlink\" title=\"6.基础依赖引入\"></a>6.基础依赖引入</h3><p><a href=\"https://github.com/qq83387856/angular2-demo/blob/master/vendor.ts\">vendor.ts</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Polyfills</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es6';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es6';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'core-js/es7/reflect';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'zone.js/dist/zone';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'zone.js/dist/long-stack-trace-zone';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Angular 2</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/platform-browser-dynamic';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/common';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/core';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/router';</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> '@angular/http';</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RxJS</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> 'rxjs';</span></span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-06-29T16:00:00.000Z","title":"angular2学习笔记之动画效果","_content":"动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、在两个状态间转场\n### 1. 构建一个动画\n它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 `@Component` 元数据中。在添加动画之前，先引入一些与动画有关的函数\n\n```\nimport {\n  Component,\n  Input,\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/core';\n//通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。\nimport { Heroes } from './hero.service';\n@Component({\n  moduleId: module.id,\n  selector: 'hero-list-basic',\n  template: `\n    <ul>\n      <li *ngFor=\"let hero of heroes\"\n          @heroState=\"hero.state\"\n          (click)=\"hero.toggleState()\">\n        {{hero.name}}\n      </li>\n    </ul>\n  `,\n  styleUrls: ['hero-list.component.css'],\n  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      state('active',   style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      transition('inactive => active', animate('100ms ease-in')),\n      transition('active => inactive', animate('100ms ease-out'))\n    ])\n  ]\n})\nexport class HeroListBasicComponent {\n  @Input() heroes: Heroes;\n}\n//我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。\n```\n","source":"_posts/2016-06-30.angular2_study_animate.md","raw":"---\nauthor: 小莫\ndate: 2016-06-30\ntitle: angular2学习笔记之动画效果\ntags:\n- webpack\n- javascript\n- angular2\n- sass\n- typescript\ncategory: angular2\npermalink: angular2_study_animate\n---\n动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。[angular2-demo](https://github.com/qq83387856/angular2-demo)\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、在两个状态间转场\n### 1. 构建一个动画\n它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 `@Component` 元数据中。在添加动画之前，先引入一些与动画有关的函数\n\n```\nimport {\n  Component,\n  Input,\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/core';\n//通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。\nimport { Heroes } from './hero.service';\n@Component({\n  moduleId: module.id,\n  selector: 'hero-list-basic',\n  template: `\n    <ul>\n      <li *ngFor=\"let hero of heroes\"\n          @heroState=\"hero.state\"\n          (click)=\"hero.toggleState()\">\n        {{hero.name}}\n      </li>\n    </ul>\n  `,\n  styleUrls: ['hero-list.component.css'],\n  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      state('active',   style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      transition('inactive => active', animate('100ms ease-in')),\n      transition('active => inactive', animate('100ms ease-out'))\n    ])\n  ]\n})\nexport class HeroListBasicComponent {\n  @Input() heroes: Heroes;\n}\n//我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。\n```\n","slug":"angular2_study_animate","published":1,"updated":"2016-06-30T04:20:42.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciq1t0f350000rkmcdyzunnke","content":"<p>动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。<a href=\"https://github.com/qq83387856/angular2-demo\" target=\"_blank\" rel=\"external\">angular2-demo</a><br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、在两个状态间转场\"><a href=\"#一、在两个状态间转场\" class=\"headerlink\" title=\"一、在两个状态间转场\"></a>一、在两个状态间转场</h2><h3 id=\"1-构建一个动画\"><a href=\"#1-构建一个动画\" class=\"headerlink\" title=\"1. 构建一个动画\"></a>1. 构建一个动画</h3><p>它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 <code>@Component</code> 元数据中。在添加动画之前，先引入一些与动画有关的函数</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Component,</span><br><span class=\"line\">  Input,</span><br><span class=\"line\">  trigger,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  style,</span><br><span class=\"line\">  transition,</span><br><span class=\"line\">  animate</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\">//通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Heroes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./hero.service'</span>;</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  <span class=\"name\">moduleId</span>: <span class=\"built_in\">module</span>.id,</span><br><span class=\"line\">  <span class=\"name\">selector</span>: <span class=\"string\">'hero-list-basic'</span>,</span><br><span class=\"line\">  <span class=\"name\">template</span>: `</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li *ngFor=<span class=\"string\">\"let hero of heroes\"</span></span><br><span class=\"line\">          @heroState=<span class=\"string\">\"hero.state\"</span></span><br><span class=\"line\">          (click)=<span class=\"string\">\"hero.toggleState()\"</span>&gt;</span><br><span class=\"line\">        &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  <span class=\"name\">styleUrls</span>: [<span class=\"string\">'hero-list.component.css'</span>],</span><br><span class=\"line\">  <span class=\"name\">animations</span>: [</span><br><span class=\"line\">    trigger(<span class=\"string\">'heroState'</span>, [</span><br><span class=\"line\">      state(<span class=\"string\">'inactive'</span>, style(&#123;</span><br><span class=\"line\">        <span class=\"name\">backgroundColor</span>: <span class=\"string\">'#eee'</span>,</span><br><span class=\"line\">        <span class=\"name\">transform</span>: <span class=\"string\">'scale(1)'</span></span><br><span class=\"line\">      &#125;)),</span><br><span class=\"line\">      state(<span class=\"string\">'active'</span>,   style(&#123;</span><br><span class=\"line\">        <span class=\"name\">backgroundColor</span>: <span class=\"string\">'#cfd8dc'</span>,</span><br><span class=\"line\">        <span class=\"name\">transform</span>: <span class=\"string\">'scale(1.1)'</span></span><br><span class=\"line\">      &#125;)),</span><br><span class=\"line\">      transition(<span class=\"string\">'inactive =&gt; active'</span>, animate(<span class=\"string\">'100ms ease-in'</span>)),</span><br><span class=\"line\">      transition(<span class=\"string\">'active =&gt; inactive'</span>, animate(<span class=\"string\">'100ms ease-out'</span>))</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListBasicComponent</span> &#123;</span></span><br><span class=\"line\">  @Input() <span class=\"name\">heroes</span>: Heroes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>动画是现代 Web 应用设计中一个很重要的方面。我们希望用户界面能在不同的状态之间更平滑的转场。如果需要，还可以用适当的动画来吸引注意力。 设计良好的动画不但会让 UI 更有趣，还会让它更容易使用。Angular 的动画系统赋予了制作各种动画效果的能力，以构建出与原生 CSS 动画性能相同的动画。 我们也获得了额外的让动画逻辑与其它应用代码紧紧集成在一起的能力，这让动画可以被更容易的触发与控制。<a href=\"https://github.com/qq83387856/angular2-demo\">angular2-demo</a><br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、在两个状态间转场\"><a href=\"#一、在两个状态间转场\" class=\"headerlink\" title=\"一、在两个状态间转场\"></a>一、在两个状态间转场</h2><h3 id=\"1-构建一个动画\"><a href=\"#1-构建一个动画\" class=\"headerlink\" title=\"1. 构建一个动画\"></a>1. 构建一个动画</h3><p>它会让一个元素用模型驱动的方式在两个状态之间转场。动画会被定义在 <code>@Component</code> 元数据中。在添加动画之前，先引入一些与动画有关的函数</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  Component,</span><br><span class=\"line\">  Input,</span><br><span class=\"line\">  trigger,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  style,</span><br><span class=\"line\">  transition,</span><br><span class=\"line\">  animate</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\">//通过这些，可以在组件元数据中定义一个名叫 heroState 的 动画触发器 。它在两个状态 active 和 inactive 之间进行转场。 当英雄处于激活状态时，它会把该元素显示得稍微大一点、亮一点。</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Heroes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./hero.service'</span>;</span><br><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  <span class=\"name\">moduleId</span>: <span class=\"built_in\">module</span>.id,</span><br><span class=\"line\">  <span class=\"name\">selector</span>: <span class=\"string\">'hero-list-basic'</span>,</span><br><span class=\"line\">  <span class=\"name\">template</span>: `</span><br><span class=\"line\">    &lt;ul&gt;</span><br><span class=\"line\">      &lt;li *ngFor=<span class=\"string\">\"let hero of heroes\"</span></span><br><span class=\"line\">          @heroState=<span class=\"string\">\"hero.state\"</span></span><br><span class=\"line\">          (click)=<span class=\"string\">\"hero.toggleState()\"</span>&gt;</span><br><span class=\"line\">        &#123;&#123;hero.name&#125;&#125;</span><br><span class=\"line\">      &lt;/li&gt;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  `,</span><br><span class=\"line\">  <span class=\"name\">styleUrls</span>: [<span class=\"string\">'hero-list.component.css'</span>],</span><br><span class=\"line\">  <span class=\"name\">animations</span>: [</span><br><span class=\"line\">    trigger(<span class=\"string\">'heroState'</span>, [</span><br><span class=\"line\">      state(<span class=\"string\">'inactive'</span>, style(&#123;</span><br><span class=\"line\">        <span class=\"name\">backgroundColor</span>: <span class=\"string\">'#eee'</span>,</span><br><span class=\"line\">        <span class=\"name\">transform</span>: <span class=\"string\">'scale(1)'</span></span><br><span class=\"line\">      &#125;)),</span><br><span class=\"line\">      state(<span class=\"string\">'active'</span>,   style(&#123;</span><br><span class=\"line\">        <span class=\"name\">backgroundColor</span>: <span class=\"string\">'#cfd8dc'</span>,</span><br><span class=\"line\">        <span class=\"name\">transform</span>: <span class=\"string\">'scale(1.1)'</span></span><br><span class=\"line\">      &#125;)),</span><br><span class=\"line\">      transition(<span class=\"string\">'inactive =&gt; active'</span>, animate(<span class=\"string\">'100ms ease-in'</span>)),</span><br><span class=\"line\">      transition(<span class=\"string\">'active =&gt; inactive'</span>, animate(<span class=\"string\">'100ms ease-out'</span>))</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListBasicComponent</span> &#123;</span></span><br><span class=\"line\">  @Input() <span class=\"name\">heroes</span>: Heroes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//我们刚刚定义了一个动画，但它还没有被用到任何地方。要想使用它，可以在模板中用 @triggerName 语法来把它附加到一个或多个元素上。</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-07-11T16:00:00.000Z","title":"rxjs全接触","_content":"RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——[Observable](http://reactivex.io/rxjs/manual/overview.html#observable)（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、rxjs内容\nReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。\n\n在RxJS其中解决异步事件管理的基本概念是：\n### 1. Observable\n可观察对象，代表未来值或事件的可调用集合的想法.\nobserver是一个由回调函数组成的对象，键名分别为`next`、`error` 和 `complete`，以此接受Observable推送的不同类型的通知。\n\n```\n  var observer = {\n    next: x => console.log('Observer got a next value: ' + x),\n    error: err => console.error('Observer got an error: ' + err),\n    complete: () => console.log('Observer got a complete notification'),\n  };\n```\n\n调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：`observable.subscribe(observer);`\n### 2. Observer\n观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值\n### 3. Subscription\nSubscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。\n### 4. Operators\n操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等\n### 5. Subject\n在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。\n每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。\n每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。\n### 6. Schedulers\n调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。\n\n\n### 7、推和拉\n拉和推是两个不同的协议如何数据生产者可以与数据消费者。\n\n拉\n数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。\n每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。\n\n推\n在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。\n在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。\n\n## 二、相关api\n\n### 1. scan()\n使用RxJS您隔离的状态。\n\n```\n  var button = document . querySelector ( 'button' );\n  Rx . Observable . fromEvent ( button ,  'click' )\n    . scan ( count => count +  1 ,  0 )\n    . subscribe ( count => console . log ( 'Clicked {$ count}次' ））;\n```\n### 2. subscribe()\n异步函数，可以使用一个回调\n\n```\nvar button = document . querySelector ( 'button' );\nRx . Observable . fromEvent ( button ,  'click' )\n  . subscribe (()  => console . log ( 'Clicked!' ));\n```\n\n### 3. throttle()\n### 4. map()\n每秒最多点击次数\n\n```\n  var button = document . querySelector ( 'button' );\n  Rx . Observable . fromEvent ( button ,  'click' )\n    . throttle ( 1000 )\n    . map ( event  =>  event . clientX )\n    . scan (( count , clientX )  => count + clientX ,  0 )\n    . subscribe ( count => console . log ( count ));\n```\n\n## 三、具体使用\n\n### 1. Observable\n我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。\n```\n  var observable =  Rx . Observable . create ( function  ( observer )  {\n    observer . next ( 1 );\n    observer . next ( 2 );\n    observer . next ( 3 );\n    setTimeout (()  =>  {\n      observer . next ( 4 );\n      observer . complete ();\n    },  1000 );\n  });\n```\n\n### 2.subscribe\n为了能够看到这些值，我们需要订阅(subscribe)它。\n\n```\n  console.log('just before subscribe');\n  observable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n  });\n  console.log('just after subscribe');\n```\n\n结果如下\n\n```\n  just before subscribe\n  got value 1\n  got value 2\n  got value 3\n  just after subscribe\n  got value 4\n  done\n```\n\n通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。\n\n\n### 3、amb方法\n`方法定义`\n`[Rx.Observable.amb(...args)]`\n`作用`\n从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。\n`参数`\nargs (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。\n`返回值`\n(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。\n`总结`\n简单的说，`amb()`像一个多路电闸，一次仅能构建一条通路：\n\n```\n| | | | | | | |\nA B C D E F G H\n| | | | | | | |\n     \\\n      \\   开关臂\n       \\   \n       |\n      主线\n       |\n```\n\n实例\n\nHTML\n```\n<body>\n  <input id=\"input1\" type=\"text\">\n  <input id=\"input2\" type=\"text\">\n</body>\n```\n\nJS\n```\n// 取元素\nvar input1 = $('#input1');\nvar input2 = $('#input2');\n// 定义事件流\nvar event1 = Rx.Observable.fromEvent(input1, 'click').map(()=>'one')\nvar event2 = Rx.Observable.fromEvent(input2, 'click').map(()=>'two');\n//传入事件流\nvar source = Rx.Observable.amb(event1,event2);\n```\n\n上面例子中\n`amb()`中传入了两个点击事件流。\n事件流1，会在点击后发射字符串one；\n事件流2，会在点击后发射字符串two；\n初始情况下，产生事件流1之后，事件流2不会再被输出；\n反之亦然，我们可以订阅`amb()`产生的结果流：[amb()操作符演示](http://jsbin.com/pitayi/edit?html,js,console,output)\n\n```\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(x);\n    },\n    function (err) {\n        console.log('Error: ' + err);   \n    },\n    function () {\n        console.log('Completed');   \n    });\n```\n\n使用场景 1：秒杀\n\n```\nObservable.amb(\n    用户A的拍下请求,\n    用户B的拍下请求,\n    用户C的拍下请求,\n    ...\n).subscribe(function(user) {\n    执行购买逻辑，创建订单，打开支付工具\n})\n```\n\n使用场景 1：通话\n\n```\nObservable.amb(\n    A来电,\n    B来电,\n    C来电,\n    ...\n).subscribe(function(call) {\n    通话\n})\n```\n\n### 4. case方法\n\n`方法定义`\n`[Rx.Observable.case(selector, sources, [elseSource|scheduler])]`\n\n`作用`\n选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。\n\n`参数`\n`selector (Function)`: 返回键的字符串的函数，键用以与sources中的键名进行比较。\n`sources (Object)`: 一个包含可观察对象的Javascript对象。\n`[elseSource|scheduler] (Observable | Scheduler)`:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的`Rx.Observabe.empty` 对象。\n\n`返回值`\n(Observable): 返回值为经过选择后的Observable（可观察对象）。\n\n`实例`\n\n```\n  var sources = {\n    hello: Rx.Observable.just('clx'),\n    world: Rx.Observable.just('wxq')\n  };\n  var subscription = Rx.Observable.case(()=>\"hello\", sources, Rx.Observable.empty())\n\n  subscription.subscribe(function(x) {\n    console.log(x)\n  })\n```\n实例中，匿名函数()=>\"hello\"指定需要在sources中返回的可观察对象的键名为\"hello\"，命令行最终输出\"clx\"，[点击进入case()实例](https://jsbin.com/kodije/edit?js,console,output)。\n\n适用场景\n针对表单进行校验，校验用户的`手机号`和`邮箱`是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：\n\n```\n  var validate = {\n      \"mobile\": Observable.return('123-566-789-01'),\n      \"email\": Observable.return('JonSnow@company.com')\n  };\n  var emptyObserable = Observable.empty();\n  validate.case(()=>'mobile', validate, empty)\n      .subscribe(function(mobile){\n          // 验证手机号码是否重复\n      })\n  validate.case(()=>'email', validate, empty)\n      .subscribe(function(email){\n          // 验证用户邮箱是否重复\n      })\n```\n\n### 4. catch()方法\n\n`方法定义`\nRx.Observable.catch(...args)\n\n`作用`\n序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。\n\n`参数`\nargs (Array | arguments): 可观察对象序列。\n\n`返回值`\n(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。\n\n实例\n\n```\n  var obs1 = Rx.Observable.throw(new Error('error'));\n  var obs2 = Rx.Observable.return(42);\n\n  var source = Rx.Observable.catch(obs1, obs2);\n\n  var subscription = source.subscribe(\n    x => console.log(`onNext: ${x}`),\n    e => console.log(`onError: ${e}`),\n    () => console.log('onCompleted'));\n```\n\n手机验证码实例\n这样，用户能够收到验证码并成功验证的几率大大增加。\n\n```\n  var service1 = Observable.create(\"服务提供商#1\");\n  var service2 = Observable.create(\"服务提供商#1\");\n\n  Observable.catch(service1, service2).subscribe({\n      ()=>console.log('succeed'),\n      ()=>console.log('所有验证服务均不可用')\n      ()=>console.log('completed')\n  })\n```\n\n### 5. combineLatest方法\n\n`方法定义`\nRx.Observable.combineLatest(...args, [resultSelector])\n\n`作用`\n通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。\n\n`参数`\n`args (arguments | Array)`: 一系列可观察对象或可观察对象的数组。\n`[resultSelector] (Function)`: 在所有可观察对象都发射值后调用的处理函数。\n\n`返回值`\n(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。\n\n实例\n\n```\n  var colors = [\"紫色\",\"黄色\",\"蓝色\",\"黑色\"];\n  var shapes = [\"小星星\",\"圆形\",\"三角形\",\"正方形\",\"心形\",\"五边形\"];\n  var source1 = Rx.Observable.interval(3000)\n    .map(()=>colors.pop());\n  var source2 = Rx.Observable.interval(2000)\n    .map(()=>shapes.pop());\n\n  var combined = Rx.Observable.combineLatest(source1, source2, function(x, y){\n    return x + \"的\" + y;\n  }).take(8);\n\n  combined.subscribe((shaped)=>console.log(shaped));\n```\n","source":"_posts/2016-07-12.rxjs_study.md","raw":"---\nauthor: 小莫\ndate: 2016-07-12\ntitle: rxjs全接触\ntags:\n- rxjs\n- angular2\ncategory: angular2\npermalink: javascript_rxjs_study_1\n---\nRxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——[Observable](http://reactivex.io/rxjs/manual/overview.html#observable)（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、rxjs内容\nReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。\n\n在RxJS其中解决异步事件管理的基本概念是：\n### 1. Observable\n可观察对象，代表未来值或事件的可调用集合的想法.\nobserver是一个由回调函数组成的对象，键名分别为`next`、`error` 和 `complete`，以此接受Observable推送的不同类型的通知。\n\n```\n  var observer = {\n    next: x => console.log('Observer got a next value: ' + x),\n    error: err => console.error('Observer got an error: ' + err),\n    complete: () => console.log('Observer got a complete notification'),\n  };\n```\n\n调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：`observable.subscribe(observer);`\n### 2. Observer\n观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值\n### 3. Subscription\nSubscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。\n### 4. Operators\n操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等\n### 5. Subject\n在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。\n每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。\n每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。\n### 6. Schedulers\n调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。\n\n\n### 7、推和拉\n拉和推是两个不同的协议如何数据生产者可以与数据消费者。\n\n拉\n数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。\n每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。\n\n推\n在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。\n在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。\n\n## 二、相关api\n\n### 1. scan()\n使用RxJS您隔离的状态。\n\n```\n  var button = document . querySelector ( 'button' );\n  Rx . Observable . fromEvent ( button ,  'click' )\n    . scan ( count => count +  1 ,  0 )\n    . subscribe ( count => console . log ( 'Clicked {$ count}次' ））;\n```\n### 2. subscribe()\n异步函数，可以使用一个回调\n\n```\nvar button = document . querySelector ( 'button' );\nRx . Observable . fromEvent ( button ,  'click' )\n  . subscribe (()  => console . log ( 'Clicked!' ));\n```\n\n### 3. throttle()\n### 4. map()\n每秒最多点击次数\n\n```\n  var button = document . querySelector ( 'button' );\n  Rx . Observable . fromEvent ( button ,  'click' )\n    . throttle ( 1000 )\n    . map ( event  =>  event . clientX )\n    . scan (( count , clientX )  => count + clientX ,  0 )\n    . subscribe ( count => console . log ( count ));\n```\n\n## 三、具体使用\n\n### 1. Observable\n我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。\n```\n  var observable =  Rx . Observable . create ( function  ( observer )  {\n    observer . next ( 1 );\n    observer . next ( 2 );\n    observer . next ( 3 );\n    setTimeout (()  =>  {\n      observer . next ( 4 );\n      observer . complete ();\n    },  1000 );\n  });\n```\n\n### 2.subscribe\n为了能够看到这些值，我们需要订阅(subscribe)它。\n\n```\n  console.log('just before subscribe');\n  observable.subscribe({\n    next: x => console.log('got value ' + x),\n    error: err => console.error('something wrong occurred: ' + err),\n    complete: () => console.log('done'),\n  });\n  console.log('just after subscribe');\n```\n\n结果如下\n\n```\n  just before subscribe\n  got value 1\n  got value 2\n  got value 3\n  just after subscribe\n  got value 4\n  done\n```\n\n通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。\n\n\n### 3、amb方法\n`方法定义`\n`[Rx.Observable.amb(...args)]`\n`作用`\n从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。\n`参数`\nargs (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。\n`返回值`\n(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。\n`总结`\n简单的说，`amb()`像一个多路电闸，一次仅能构建一条通路：\n\n```\n| | | | | | | |\nA B C D E F G H\n| | | | | | | |\n     \\\n      \\   开关臂\n       \\   \n       |\n      主线\n       |\n```\n\n实例\n\nHTML\n```\n<body>\n  <input id=\"input1\" type=\"text\">\n  <input id=\"input2\" type=\"text\">\n</body>\n```\n\nJS\n```\n// 取元素\nvar input1 = $('#input1');\nvar input2 = $('#input2');\n// 定义事件流\nvar event1 = Rx.Observable.fromEvent(input1, 'click').map(()=>'one')\nvar event2 = Rx.Observable.fromEvent(input2, 'click').map(()=>'two');\n//传入事件流\nvar source = Rx.Observable.amb(event1,event2);\n```\n\n上面例子中\n`amb()`中传入了两个点击事件流。\n事件流1，会在点击后发射字符串one；\n事件流2，会在点击后发射字符串two；\n初始情况下，产生事件流1之后，事件流2不会再被输出；\n反之亦然，我们可以订阅`amb()`产生的结果流：[amb()操作符演示](http://jsbin.com/pitayi/edit?html,js,console,output)\n\n```\nvar subscription = source.subscribe(\n    function (x) {\n        console.log(x);\n    },\n    function (err) {\n        console.log('Error: ' + err);   \n    },\n    function () {\n        console.log('Completed');   \n    });\n```\n\n使用场景 1：秒杀\n\n```\nObservable.amb(\n    用户A的拍下请求,\n    用户B的拍下请求,\n    用户C的拍下请求,\n    ...\n).subscribe(function(user) {\n    执行购买逻辑，创建订单，打开支付工具\n})\n```\n\n使用场景 1：通话\n\n```\nObservable.amb(\n    A来电,\n    B来电,\n    C来电,\n    ...\n).subscribe(function(call) {\n    通话\n})\n```\n\n### 4. case方法\n\n`方法定义`\n`[Rx.Observable.case(selector, sources, [elseSource|scheduler])]`\n\n`作用`\n选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。\n\n`参数`\n`selector (Function)`: 返回键的字符串的函数，键用以与sources中的键名进行比较。\n`sources (Object)`: 一个包含可观察对象的Javascript对象。\n`[elseSource|scheduler] (Observable | Scheduler)`:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的`Rx.Observabe.empty` 对象。\n\n`返回值`\n(Observable): 返回值为经过选择后的Observable（可观察对象）。\n\n`实例`\n\n```\n  var sources = {\n    hello: Rx.Observable.just('clx'),\n    world: Rx.Observable.just('wxq')\n  };\n  var subscription = Rx.Observable.case(()=>\"hello\", sources, Rx.Observable.empty())\n\n  subscription.subscribe(function(x) {\n    console.log(x)\n  })\n```\n实例中，匿名函数()=>\"hello\"指定需要在sources中返回的可观察对象的键名为\"hello\"，命令行最终输出\"clx\"，[点击进入case()实例](https://jsbin.com/kodije/edit?js,console,output)。\n\n适用场景\n针对表单进行校验，校验用户的`手机号`和`邮箱`是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：\n\n```\n  var validate = {\n      \"mobile\": Observable.return('123-566-789-01'),\n      \"email\": Observable.return('JonSnow@company.com')\n  };\n  var emptyObserable = Observable.empty();\n  validate.case(()=>'mobile', validate, empty)\n      .subscribe(function(mobile){\n          // 验证手机号码是否重复\n      })\n  validate.case(()=>'email', validate, empty)\n      .subscribe(function(email){\n          // 验证用户邮箱是否重复\n      })\n```\n\n### 4. catch()方法\n\n`方法定义`\nRx.Observable.catch(...args)\n\n`作用`\n序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。\n\n`参数`\nargs (Array | arguments): 可观察对象序列。\n\n`返回值`\n(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。\n\n实例\n\n```\n  var obs1 = Rx.Observable.throw(new Error('error'));\n  var obs2 = Rx.Observable.return(42);\n\n  var source = Rx.Observable.catch(obs1, obs2);\n\n  var subscription = source.subscribe(\n    x => console.log(`onNext: ${x}`),\n    e => console.log(`onError: ${e}`),\n    () => console.log('onCompleted'));\n```\n\n手机验证码实例\n这样，用户能够收到验证码并成功验证的几率大大增加。\n\n```\n  var service1 = Observable.create(\"服务提供商#1\");\n  var service2 = Observable.create(\"服务提供商#1\");\n\n  Observable.catch(service1, service2).subscribe({\n      ()=>console.log('succeed'),\n      ()=>console.log('所有验证服务均不可用')\n      ()=>console.log('completed')\n  })\n```\n\n### 5. combineLatest方法\n\n`方法定义`\nRx.Observable.combineLatest(...args, [resultSelector])\n\n`作用`\n通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。\n\n`参数`\n`args (arguments | Array)`: 一系列可观察对象或可观察对象的数组。\n`[resultSelector] (Function)`: 在所有可观察对象都发射值后调用的处理函数。\n\n`返回值`\n(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。\n\n实例\n\n```\n  var colors = [\"紫色\",\"黄色\",\"蓝色\",\"黑色\"];\n  var shapes = [\"小星星\",\"圆形\",\"三角形\",\"正方形\",\"心形\",\"五边形\"];\n  var source1 = Rx.Observable.interval(3000)\n    .map(()=>colors.pop());\n  var source2 = Rx.Observable.interval(2000)\n    .map(()=>shapes.pop());\n\n  var combined = Rx.Observable.combineLatest(source1, source2, function(x, y){\n    return x + \"的\" + y;\n  }).take(8);\n\n  combined.subscribe((shaped)=>console.log(shaped));\n```\n","slug":"javascript_rxjs_study_1","published":1,"updated":"2016-07-12T07:54:20.090Z","_id":"ciqj4jcan0000ssmcamk0ccb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——<a href=\"http://reactivex.io/rxjs/manual/overview.html#observable\" target=\"_blank\" rel=\"external\">Observable</a>（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、rxjs内容\"><a href=\"#一、rxjs内容\" class=\"headerlink\" title=\"一、rxjs内容\"></a>一、rxjs内容</h2><p>ReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。</p>\n<p>在RxJS其中解决异步事件管理的基本概念是：</p>\n<h3 id=\"1-Observable\"><a href=\"#1-Observable\" class=\"headerlink\" title=\"1. Observable\"></a>1. Observable</h3><p>可观察对象，代表未来值或事件的可调用集合的想法.<br>observer是一个由回调函数组成的对象，键名分别为<code>next</code>、<code>error</code> 和 <code>complete</code>，以此接受Observable推送的不同类型的通知。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observer = &#123;</span><br><span class=\"line\">  next: x =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer got a next value: '</span> + x),</span><br><span class=\"line\">  error: err =&gt; <span class=\"built_in\">console</span>.error(<span class=\"string\">'Observer got an error: '</span> + err),</span><br><span class=\"line\">  complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer got a complete notification'</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：<code>observable.subscribe(observer);</code></p>\n<h3 id=\"2-Observer\"><a href=\"#2-Observer\" class=\"headerlink\" title=\"2. Observer\"></a>2. Observer</h3><p>观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值</p>\n<h3 id=\"3-Subscription\"><a href=\"#3-Subscription\" class=\"headerlink\" title=\"3. Subscription\"></a>3. Subscription</h3><p>Subscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。</p>\n<h3 id=\"4-Operators\"><a href=\"#4-Operators\" class=\"headerlink\" title=\"4. Operators\"></a>4. Operators</h3><p>操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等</p>\n<h3 id=\"5-Subject\"><a href=\"#5-Subject\" class=\"headerlink\" title=\"5. Subject\"></a>5. Subject</h3><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。<br>每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。<br>每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>\n<h3 id=\"6-Schedulers\"><a href=\"#6-Schedulers\" class=\"headerlink\" title=\"6. Schedulers\"></a>6. Schedulers</h3><p>调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。</p>\n<h3 id=\"7、推和拉\"><a href=\"#7、推和拉\" class=\"headerlink\" title=\"7、推和拉\"></a>7、推和拉</h3><p>拉和推是两个不同的协议如何数据生产者可以与数据消费者。</p>\n<p>拉<br>数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。<br>每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。</p>\n<p>推<br>在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。<br>在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。</p>\n<h2 id=\"二、相关api\"><a href=\"#二、相关api\" class=\"headerlink\" title=\"二、相关api\"></a>二、相关api</h2><h3 id=\"1-scan\"><a href=\"#1-scan\" class=\"headerlink\" title=\"1. scan()\"></a>1. scan()</h3><p>使用RxJS您隔离的状态。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">button </span>= document . querySelector ( <span class=\"string\">'button'</span> )<span class=\"comment\">;</span></span><br><span class=\"line\">Rx . Observable . fromEvent ( <span class=\"keyword\">button </span>,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">scan </span>( <span class=\"built_in\">count</span> =&gt; <span class=\"built_in\">count</span> +  <span class=\"number\">1</span> ,  <span class=\"number\">0</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">subscribe </span>( <span class=\"built_in\">count</span> =&gt; console . log ( <span class=\"string\">'Clicked &#123;$ count&#125;次'</span> ））<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-subscribe\"><a href=\"#2-subscribe\" class=\"headerlink\" title=\"2. subscribe()\"></a>2. subscribe()</h3><p>异步函数，可以使用一个回调</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var button = <span class=\"built_in\">document</span> . querySelector ( <span class=\"string\">'button'</span> );</span><br><span class=\"line\">Rx . Observable . fromEvent ( button ,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . subscribe (<span class=\"function\"><span class=\"params\">()</span>  =&gt;</span> <span class=\"built_in\">console</span> . log ( <span class=\"string\">'Clicked!'</span> ));</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-throttle\"><a href=\"#3-throttle\" class=\"headerlink\" title=\"3. throttle()\"></a>3. throttle()</h3><h3 id=\"4-map\"><a href=\"#4-map\" class=\"headerlink\" title=\"4. map()\"></a>4. map()</h3><p>每秒最多点击次数</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">button </span>= document . querySelector ( <span class=\"string\">'button'</span> )<span class=\"comment\">;</span></span><br><span class=\"line\">Rx . Observable . fromEvent ( <span class=\"keyword\">button </span>,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . throttle ( <span class=\"number\">1000</span> )</span><br><span class=\"line\">  . map ( event  =&gt;  event . clientX )</span><br><span class=\"line\">  . <span class=\"keyword\">scan </span>(( <span class=\"built_in\">count</span> , clientX )  =&gt; <span class=\"built_in\">count</span> + clientX ,  <span class=\"number\">0</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">subscribe </span>( <span class=\"built_in\">count</span> =&gt; console . log ( <span class=\"built_in\">count</span> ))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、具体使用\"><a href=\"#三、具体使用\" class=\"headerlink\" title=\"三、具体使用\"></a>三、具体使用</h2><h3 id=\"1-Observable-1\"><a href=\"#1-Observable-1\" class=\"headerlink\" title=\"1. Observable\"></a>1. Observable</h3><p>我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observable =  Rx . Observable . create ( <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">( observer )</span></span>  &#123;</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">1</span> );</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">2</span> );</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">3</span> );</span><br><span class=\"line\">  setTimeout (()  =&gt;  &#123;</span><br><span class=\"line\">    observer . <span class=\"built_in\">next</span> ( <span class=\"number\">4</span> );</span><br><span class=\"line\">    observer . complete ();</span><br><span class=\"line\">  &#125;,  <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-subscribe-1\"><a href=\"#2-subscribe-1\" class=\"headerlink\" title=\"2.subscribe\"></a>2.subscribe</h3><p>为了能够看到这些值，我们需要订阅(subscribe)它。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'just before subscribe'</span>);</span><br><span class=\"line\">observable.subscribe(&#123;</span><br><span class=\"line\">  next: x =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'got value '</span> + x),</span><br><span class=\"line\">  error: err =&gt; <span class=\"built_in\">console</span>.error(<span class=\"string\">'something wrong occurred: '</span> + err),</span><br><span class=\"line\">  complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>),</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'just after subscribe'</span>);</span><br></pre></td></tr></table></figure>\n<p>结果如下</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">just <span class=\"keyword\">before</span> subscribe</span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">1</span></span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">2</span></span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">3</span></span><br><span class=\"line\">just <span class=\"keyword\">after</span> subscribe</span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">4</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。</p>\n<h3 id=\"3、amb方法\"><a href=\"#3、amb方法\" class=\"headerlink\" title=\"3、amb方法\"></a>3、amb方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.amb(...args)]</code><br><code>作用</code><br>从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。<br><code>参数</code><br>args (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。<br><code>返回值</code><br>(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。<br><code>总结</code><br>简单的说，<code>amb()</code>像一个多路电闸，一次仅能构建一条通路：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|</span><br><span class=\"line\">A B C D E F G H</span><br><span class=\"line\">|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\   开关臂</span><br><span class=\"line\">       \\   </span><br><span class=\"line\">       |<span class=\"string\"></span><br><span class=\"line\">      主线</span><br><span class=\"line\">       </span>|</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<p>HTML<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&lt;body&gt;</span></span><br><span class=\"line\">  &lt;<span class=\"built_in\">input</span> id=<span class=\"string\">\"input1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">input</span> id=<span class=\"string\">\"input2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取元素</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> input1 = $(<span class=\"string\">'#input1'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> input2 = $(<span class=\"string\">'#input2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 定义事件流</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> event1 = <span class=\"literal\">Rx</span>.Observable.fromEvent(input1, <span class=\"string\">'click'</span>).<span class=\"built_in\">map</span>(()=&gt;<span class=\"string\">'one'</span>)</span><br><span class=\"line\"><span class=\"built_in\">var</span> event2 = <span class=\"literal\">Rx</span>.Observable.fromEvent(input2, <span class=\"string\">'click'</span>).<span class=\"built_in\">map</span>(()=&gt;<span class=\"string\">'two'</span>);</span><br><span class=\"line\"><span class=\"comment\">//传入事件流</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> source = <span class=\"literal\">Rx</span>.Observable.amb(event1,event2);</span><br></pre></td></tr></table></figure></p>\n<p>上面例子中<br><code>amb()</code>中传入了两个点击事件流。<br>事件流1，会在点击后发射字符串one；<br>事件流2，会在点击后发射字符串two；<br>初始情况下，产生事件流1之后，事件流2不会再被输出；<br>反之亦然，我们可以订阅<code>amb()</code>产生的结果流：<a href=\"http://jsbin.com/pitayi/edit?html,js,console,output\" target=\"_blank\" rel=\"external\">amb()操作符演示</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subscription = source.subscribe(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error: '</span> + err);   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Completed'</span>);   </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用场景 1：秒杀</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.amb(</span><br><span class=\"line\">    用户A的拍下请求,</span><br><span class=\"line\">    用户B的拍下请求,</span><br><span class=\"line\">    用户C的拍下请求,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(user)</span> </span>&#123;</span><br><span class=\"line\">    执行购买逻辑，创建订单，打开支付工具</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用场景 1：通话</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.amb(</span><br><span class=\"line\">    A来电,</span><br><span class=\"line\">    B来电,</span><br><span class=\"line\">    C来电,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(call)</span> </span>&#123;</span><br><span class=\"line\">    通话</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-case方法\"><a href=\"#4-case方法\" class=\"headerlink\" title=\"4. case方法\"></a>4. case方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.case(selector, sources, [elseSource|scheduler])]</code></p>\n<p><code>作用</code><br>选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。</p>\n<p><code>参数</code><br><code>selector (Function)</code>: 返回键的字符串的函数，键用以与sources中的键名进行比较。<br><code>sources (Object)</code>: 一个包含可观察对象的Javascript对象。<br><code>[elseSource|scheduler] (Observable | Scheduler)</code>:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的<code>Rx.Observabe.empty</code> 对象。</p>\n<p><code>返回值</code><br>(Observable): 返回值为经过选择后的Observable（可观察对象）。</p>\n<p><code>实例</code></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> sources = &#123;</span><br><span class=\"line\">  hello: <span class=\"literal\">Rx</span>.Observable.just(<span class=\"string\">'clx'</span>),</span><br><span class=\"line\">  world: <span class=\"literal\">Rx</span>.Observable.just(<span class=\"string\">'wxq'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">var</span> subscription = <span class=\"literal\">Rx</span>.Observable.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">\"hello\"</span>, sources, <span class=\"literal\">Rx</span>.Observable.empty())</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.subscribe(function(x) &#123;</span><br><span class=\"line\">  console.<span class=\"keyword\">log</span>(x)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实例中，匿名函数()=&gt;”hello”指定需要在sources中返回的可观察对象的键名为”hello”，命令行最终输出”clx”，<a href=\"https://jsbin.com/kodije/edit?js,console,output\" target=\"_blank\" rel=\"external\">点击进入case()实例</a>。</p>\n<p>适用场景<br>针对表单进行校验，校验用户的<code>手机号</code>和<code>邮箱</code>是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> validate = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"mobile\"</span>: Observable.<span class=\"keyword\">return</span>(<span class=\"string\">'123-566-789-01'</span>),</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: Observable.<span class=\"keyword\">return</span>(<span class=\"string\">'JonSnow@company.com'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyObserable = Observable.<span class=\"keyword\">empty</span>();</span><br><span class=\"line\">validate.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">'mobile'</span>, validate, <span class=\"keyword\">empty</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mobile)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证手机号码是否重复</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">validate.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">'email'</span>, validate, <span class=\"keyword\">empty</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(email)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证用户邮箱是否重复</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-catch-方法\"><a href=\"#4-catch-方法\" class=\"headerlink\" title=\"4. catch()方法\"></a>4. catch()方法</h3><p><code>方法定义</code><br>Rx.Observable.catch(…args)</p>\n<p><code>作用</code><br>序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。</p>\n<p><code>参数</code><br>args (Array | arguments): 可观察对象序列。</p>\n<p><code>返回值</code><br>(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。</p>\n<p>实例</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> obs1 = <span class=\"literal\">Rx</span>.Observable.throw(<span class=\"literal\">new</span> Error(<span class=\"string\">'error'</span>));</span><br><span class=\"line\"><span class=\"built_in\">var</span> obs2 = <span class=\"literal\">Rx</span>.Observable.<span class=\"keyword\">return</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> source = <span class=\"literal\">Rx</span>.Observable.catch(obs1, obs2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> subscription = source.subscribe(</span><br><span class=\"line\">  x =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">`onNext: $&#123;x&#125;`</span>),</span><br><span class=\"line\">  e =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">`onError: $&#123;e&#125;`</span>),</span><br><span class=\"line\">  () =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">'onCompleted'</span>));</span><br></pre></td></tr></table></figure>\n<p>手机验证码实例<br>这样，用户能够收到验证码并成功验证的几率大大增加。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var service1 = Observable.create(<span class=\"string\">\"服务提供商#1\"</span>);</span><br><span class=\"line\">var service2 = Observable.create(<span class=\"string\">\"服务提供商#1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable.<span class=\"keyword\">catch</span>(service1, service2).subscribe(&#123;</span><br><span class=\"line\">    ()=&gt;<span class=\"built_in\">console</span>.log(<span class=\"string\">'succeed'</span>),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'所有验证服务均不可用'</span>)</span><br><span class=\"line\">    ()=&gt;<span class=\"built_in\">console</span>.log(<span class=\"string\">'completed'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-combineLatest方法\"><a href=\"#5-combineLatest方法\" class=\"headerlink\" title=\"5. combineLatest方法\"></a>5. combineLatest方法</h3><p><code>方法定义</code><br>Rx.Observable.combineLatest(…args, [resultSelector])</p>\n<p><code>作用</code><br>通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。</p>\n<p><code>参数</code><br><code>args (arguments | Array)</code>: 一系列可观察对象或可观察对象的数组。<br><code>[resultSelector] (Function)</code>: 在所有可观察对象都发射值后调用的处理函数。</p>\n<p><code>返回值</code><br>(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。</p>\n<p>实例</p>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">\"紫色\"</span>,<span class=\"string\">\"黄色\"</span>,<span class=\"string\">\"蓝色\"</span>,<span class=\"string\">\"黑色\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> shapes = [<span class=\"string\">\"小星星\"</span>,<span class=\"string\">\"圆形\"</span>,<span class=\"string\">\"三角形\"</span>,<span class=\"string\">\"正方形\"</span>,<span class=\"string\">\"心形\"</span>,<span class=\"string\">\"五边形\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = Rx.<span class=\"keyword\">Observable</span>.interval(<span class=\"number\">3000</span>)</span><br><span class=\"line\">  .<span class=\"keyword\">map</span>(()=&gt;colors.pop());</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.<span class=\"keyword\">Observable</span>.interval(<span class=\"number\">2000</span>)</span><br><span class=\"line\">  .<span class=\"keyword\">map</span>(()=&gt;shapes.pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> combined = Rx.<span class=\"keyword\">Observable</span>.combineLatest(source1, source2, <span class=\"keyword\">function</span>(x, y)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">\"的\"</span> + y;</span><br><span class=\"line\">&#125;).take(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">combined.subscribe((shaped)=&gt;console.log(shaped));</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>RxJS是用于通过使用观察序列构成异步和基于事件的程序库。它提供了一个核心类型——<a href=\"http://reactivex.io/rxjs/manual/overview.html#observable\">Observable</a>（Observer, Schedulers, Subjects）和数组＃其他（map, filter, reduce, every, etc），以允许处理异步事件集合。<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、rxjs内容\"><a href=\"#一、rxjs内容\" class=\"headerlink\" title=\"一、rxjs内容\"></a>一、rxjs内容</h2><p>ReactiveX结合观察者模式与迭代器模式和函数式编程与收藏，以填补管理事件序列的理想方法的需要。</p>\n<p>在RxJS其中解决异步事件管理的基本概念是：</p>\n<h3 id=\"1-Observable\"><a href=\"#1-Observable\" class=\"headerlink\" title=\"1. Observable\"></a>1. Observable</h3><p>可观察对象，代表未来值或事件的可调用集合的想法.<br>observer是一个由回调函数组成的对象，键名分别为<code>next</code>、<code>error</code> 和 <code>complete</code>，以此接受Observable推送的不同类型的通知。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observer = &#123;</span><br><span class=\"line\">  next: x =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer got a next value: '</span> + x),</span><br><span class=\"line\">  error: err =&gt; <span class=\"built_in\">console</span>.error(<span class=\"string\">'Observer got an error: '</span> + err),</span><br><span class=\"line\">  complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer got a complete notification'</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用Observer逻辑，只需在subscribe（订阅）Observable后将Observer传入：<code>observable.subscribe(observer);</code></p>\n<h3 id=\"2-Observer\"><a href=\"#2-Observer\" class=\"headerlink\" title=\"2. Observer\"></a>2. Observer</h3><p>观察者，也被称为称为消费者，是回调的集合，它知道如何监听由观测交付价值</p>\n<h3 id=\"3-Subscription\"><a href=\"#3-Subscription\" class=\"headerlink\" title=\"3. Subscription\"></a>3. Subscription</h3><p>Subscription是一个代表可以终止资源的对象，表示一个Observable的执行过程。Subscription有一个重要的方法：unsubscribe。这个方法不需要传入参数，调用后便会终止相应的资源。</p>\n<h3 id=\"4-Operators\"><a href=\"#4-Operators\" class=\"headerlink\" title=\"4. Operators\"></a>4. Operators</h3><p>操作者，是一种纯函数，能够使用函数式编程风格处理集合，具体操作有map, filter, concat, flatMap,等</p>\n<h3 id=\"5-Subject\"><a href=\"#5-Subject\" class=\"headerlink\" title=\"5. Subject\"></a>5. Subject</h3><p>在RxJS中，Subject是一类特殊的Observable，它可以向多个Observer多路推送数值。普通的Observable并不具备多路推送的能力（每一个Observer都有自己独立的执行环境），而Subject可以共享一个执行环境。Subject是一种可以多路推送的可观察对象。与EventEmitter类似，Subject维护着自己的Observer。<br>每一个Subject都是一个Observable（可观察对象） 对于一个Subject，你可以订阅（subscribe）它，Observer会和往常一样接收到数据。从Observer的视角看，它并不能区分自己的执行环境是普通Observable的单路推送还是基于Subject的多路推送。<br>每一个Subject也可以作为Observer（观察者） Subject同样也是一个由next(v)，error(e)，和 complete()这些方法组成的对象。调用next(theValue)方法后，Subject会向所有已经在其上注册的Observer多路推送theValue。</p>\n<h3 id=\"6-Schedulers\"><a href=\"#6-Schedulers\" class=\"headerlink\" title=\"6. Schedulers\"></a>6. Schedulers</h3><p>调度器，是用于控制并发的中心分发器，当计算发生在setTimeout or requestAnimationFrame 时，允许我们来进行协调。</p>\n<h3 id=\"7、推和拉\"><a href=\"#7、推和拉\" class=\"headerlink\" title=\"7、推和拉\"></a>7、推和拉</h3><p>拉和推是两个不同的协议如何数据生产者可以与数据消费者。</p>\n<p>拉<br>数据消费者可以决定什么时候去接收数据提供者的数据。数据提供者自身并不知道什么时候把数据交给数据消费者。<br>每个JavaScript函数是一个拉式系统。该功能是数据的生产者，而调用该函数的代码由“揪”出了消费它单从它调用的返回值。</p>\n<p>推<br>在推送系统，生产者确定何时发送数据到消费者。消费者是不知道什么时候会收到的数据。<br>在JavaScript中目前Promises是最常用的推系统类型。 一个Promises(提供者)传递了一个处理好的值然后注册一个回调(消费者)。但是跟方法不同，它是应许，负责确定正是当值被“推”到了回调。</p>\n<h2 id=\"二、相关api\"><a href=\"#二、相关api\" class=\"headerlink\" title=\"二、相关api\"></a>二、相关api</h2><h3 id=\"1-scan\"><a href=\"#1-scan\" class=\"headerlink\" title=\"1. scan()\"></a>1. scan()</h3><p>使用RxJS您隔离的状态。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">button </span>= document . querySelector ( <span class=\"string\">'button'</span> )<span class=\"comment\">;</span></span><br><span class=\"line\">Rx . Observable . fromEvent ( <span class=\"keyword\">button </span>,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">scan </span>( <span class=\"built_in\">count</span> =&gt; <span class=\"built_in\">count</span> +  <span class=\"number\">1</span> ,  <span class=\"number\">0</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">subscribe </span>( <span class=\"built_in\">count</span> =&gt; console . log ( <span class=\"string\">'Clicked &#123;$ count&#125;次'</span> ））<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-subscribe\"><a href=\"#2-subscribe\" class=\"headerlink\" title=\"2. subscribe()\"></a>2. subscribe()</h3><p>异步函数，可以使用一个回调</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var button = <span class=\"built_in\">document</span> . querySelector ( <span class=\"string\">'button'</span> );</span><br><span class=\"line\">Rx . Observable . fromEvent ( button ,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . subscribe (<span class=\"function\"><span class=\"params\">()</span>  =&gt;</span> <span class=\"built_in\">console</span> . log ( <span class=\"string\">'Clicked!'</span> ));</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-throttle\"><a href=\"#3-throttle\" class=\"headerlink\" title=\"3. throttle()\"></a>3. throttle()</h3><h3 id=\"4-map\"><a href=\"#4-map\" class=\"headerlink\" title=\"4. map()\"></a>4. map()</h3><p>每秒最多点击次数</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">button </span>= document . querySelector ( <span class=\"string\">'button'</span> )<span class=\"comment\">;</span></span><br><span class=\"line\">Rx . Observable . fromEvent ( <span class=\"keyword\">button </span>,  <span class=\"string\">'click'</span> )</span><br><span class=\"line\">  . throttle ( <span class=\"number\">1000</span> )</span><br><span class=\"line\">  . map ( event  =&gt;  event . clientX )</span><br><span class=\"line\">  . <span class=\"keyword\">scan </span>(( <span class=\"built_in\">count</span> , clientX )  =&gt; <span class=\"built_in\">count</span> + clientX ,  <span class=\"number\">0</span> )</span><br><span class=\"line\">  . <span class=\"keyword\">subscribe </span>( <span class=\"built_in\">count</span> =&gt; console . log ( <span class=\"built_in\">count</span> ))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、具体使用\"><a href=\"#三、具体使用\" class=\"headerlink\" title=\"三、具体使用\"></a>三、具体使用</h2><h3 id=\"1-Observable-1\"><a href=\"#1-Observable-1\" class=\"headerlink\" title=\"1. Observable\"></a>1. Observable</h3><p>我们定义一个observable，前3个是步同执行。第四个是1秒后执行(异步)，执行完4之后整个observable才算完成。<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var observable =  Rx . Observable . create ( <span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"params\">( observer )</span></span>  &#123;</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">1</span> );</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">2</span> );</span><br><span class=\"line\">  observer . <span class=\"built_in\">next</span> ( <span class=\"number\">3</span> );</span><br><span class=\"line\">  setTimeout (()  =&gt;  &#123;</span><br><span class=\"line\">    observer . <span class=\"built_in\">next</span> ( <span class=\"number\">4</span> );</span><br><span class=\"line\">    observer . complete ();</span><br><span class=\"line\">  &#125;,  <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-subscribe-1\"><a href=\"#2-subscribe-1\" class=\"headerlink\" title=\"2.subscribe\"></a>2.subscribe</h3><p>为了能够看到这些值，我们需要订阅(subscribe)它。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'just before subscribe'</span>);</span><br><span class=\"line\">observable.subscribe(&#123;</span><br><span class=\"line\">  next: x =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'got value '</span> + x),</span><br><span class=\"line\">  error: err =&gt; <span class=\"built_in\">console</span>.error(<span class=\"string\">'something wrong occurred: '</span> + err),</span><br><span class=\"line\">  complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>),</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'just after subscribe'</span>);</span><br></pre></td></tr></table></figure>\n<p>结果如下</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">just <span class=\"keyword\">before</span> subscribe</span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">1</span></span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">2</span></span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">3</span></span><br><span class=\"line\">just <span class=\"keyword\">after</span> subscribe</span><br><span class=\"line\">got <span class=\"built_in\">value</span> <span class=\"number\">4</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>通过结果我们可以观察到，前三个执行之后就直接跳出订阅范围，等1秒钟之后才执行4，然后才完成。</p>\n<h3 id=\"3、amb方法\"><a href=\"#3、amb方法\" class=\"headerlink\" title=\"3、amb方法\"></a>3、amb方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.amb(...args)]</code><br><code>作用</code><br>从一系列流中，订阅最先发射的值的可观察对象并忽略其他的可观察对象。<br><code>参数</code><br>args (Array|arguments)：方法参数为多个可观察对象（流），或者是Promise对象，对象间存在竞争关系。<br><code>返回值</code><br>(Observable) ：方法返回呈竞争态的多个可观察对象中，首先发射的可观察对象。<br><code>总结</code><br>简单的说，<code>amb()</code>像一个多路电闸，一次仅能构建一条通路：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|</span><br><span class=\"line\">A B C D E F G H</span><br><span class=\"line\">|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|<span class=\"string\"> </span>|</span><br><span class=\"line\">     \\</span><br><span class=\"line\">      \\   开关臂</span><br><span class=\"line\">       \\   </span><br><span class=\"line\">       |<span class=\"string\"></span><br><span class=\"line\">      主线</span><br><span class=\"line\">       </span>|</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<p>HTML<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&lt;body&gt;</span></span><br><span class=\"line\">  &lt;<span class=\"built_in\">input</span> id=<span class=\"string\">\"input1\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"built_in\">input</span> id=<span class=\"string\">\"input2\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 取元素</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> input1 = $(<span class=\"string\">'#input1'</span>);</span><br><span class=\"line\"><span class=\"built_in\">var</span> input2 = $(<span class=\"string\">'#input2'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 定义事件流</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> event1 = <span class=\"literal\">Rx</span>.Observable.fromEvent(input1, <span class=\"string\">'click'</span>).<span class=\"built_in\">map</span>(()=&gt;<span class=\"string\">'one'</span>)</span><br><span class=\"line\"><span class=\"built_in\">var</span> event2 = <span class=\"literal\">Rx</span>.Observable.fromEvent(input2, <span class=\"string\">'click'</span>).<span class=\"built_in\">map</span>(()=&gt;<span class=\"string\">'two'</span>);</span><br><span class=\"line\"><span class=\"comment\">//传入事件流</span></span><br><span class=\"line\"><span class=\"built_in\">var</span> source = <span class=\"literal\">Rx</span>.Observable.amb(event1,event2);</span><br></pre></td></tr></table></figure></p>\n<p>上面例子中<br><code>amb()</code>中传入了两个点击事件流。<br>事件流1，会在点击后发射字符串one；<br>事件流2，会在点击后发射字符串two；<br>初始情况下，产生事件流1之后，事件流2不会再被输出；<br>反之亦然，我们可以订阅<code>amb()</code>产生的结果流：<a href=\"http://jsbin.com/pitayi/edit?html,js,console,output\">amb()操作符演示</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subscription = source.subscribe(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error: '</span> + err);   </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Completed'</span>);   </span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用场景 1：秒杀</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.amb(</span><br><span class=\"line\">    用户A的拍下请求,</span><br><span class=\"line\">    用户B的拍下请求,</span><br><span class=\"line\">    用户C的拍下请求,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(user)</span> </span>&#123;</span><br><span class=\"line\">    执行购买逻辑，创建订单，打开支付工具</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用场景 1：通话</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.amb(</span><br><span class=\"line\">    A来电,</span><br><span class=\"line\">    B来电,</span><br><span class=\"line\">    C来电,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">).subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(call)</span> </span>&#123;</span><br><span class=\"line\">    通话</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-case方法\"><a href=\"#4-case方法\" class=\"headerlink\" title=\"4. case方法\"></a>4. case方法</h3><p><code>方法定义</code><br><code>[Rx.Observable.case(selector, sources, [elseSource|scheduler])]</code></p>\n<p><code>作用</code><br>选择序列中特定可观察对象进行订阅，在特定可观察对象不存在的情况下，返回传入的默认可观察对象。</p>\n<p><code>参数</code><br><code>selector (Function)</code>: 返回键的字符串的函数，键用以与sources中的键名进行比较。<br><code>sources (Object)</code>: 一个包含可观察对象的Javascript对象。<br><code>[elseSource|scheduler] (Observable | Scheduler)</code>:当selector无法匹配sources时，该对象被默认返回。 如果没有明确指定，将返回附加了指定scheduler的<code>Rx.Observabe.empty</code> 对象。</p>\n<p><code>返回值</code><br>(Observable): 返回值为经过选择后的Observable（可观察对象）。</p>\n<p><code>实例</code></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> sources = &#123;</span><br><span class=\"line\">  hello: <span class=\"literal\">Rx</span>.Observable.just(<span class=\"string\">'clx'</span>),</span><br><span class=\"line\">  world: <span class=\"literal\">Rx</span>.Observable.just(<span class=\"string\">'wxq'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">var</span> subscription = <span class=\"literal\">Rx</span>.Observable.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">\"hello\"</span>, sources, <span class=\"literal\">Rx</span>.Observable.empty())</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.subscribe(function(x) &#123;</span><br><span class=\"line\">  console.<span class=\"keyword\">log</span>(x)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>实例中，匿名函数()=&gt;”hello”指定需要在sources中返回的可观察对象的键名为”hello”，命令行最终输出”clx”，<a href=\"https://jsbin.com/kodije/edit?js,console,output\">点击进入case()实例</a>。</p>\n<p>适用场景<br>针对表单进行校验，校验用户的<code>手机号</code>和<code>邮箱</code>是否和服务器记录重复，将所有校验封装在validate对象中结构更为合理：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> validate = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"mobile\"</span>: Observable.<span class=\"keyword\">return</span>(<span class=\"string\">'123-566-789-01'</span>),</span><br><span class=\"line\">    <span class=\"string\">\"email\"</span>: Observable.<span class=\"keyword\">return</span>(<span class=\"string\">'JonSnow@company.com'</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> emptyObserable = Observable.<span class=\"keyword\">empty</span>();</span><br><span class=\"line\">validate.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">'mobile'</span>, validate, <span class=\"keyword\">empty</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(mobile)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证手机号码是否重复</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">validate.<span class=\"keyword\">case</span>(()=&gt;<span class=\"string\">'email'</span>, validate, <span class=\"keyword\">empty</span>)</span><br><span class=\"line\">    .subscribe(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(email)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 验证用户邮箱是否重复</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-catch-方法\"><a href=\"#4-catch-方法\" class=\"headerlink\" title=\"4. catch()方法\"></a>4. catch()方法</h3><p><code>方法定义</code><br>Rx.Observable.catch(…args)</p>\n<p><code>作用</code><br>序列中可观察对象因为异常而被终止后，继续订阅序列中的其他可观察对象。</p>\n<p><code>参数</code><br>args (Array | arguments): 可观察对象序列。</p>\n<p><code>返回值</code><br>(Observable): 可观察对象序列中能够正确终止，不抛出异常的第一个可观察对象。</p>\n<p>实例</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> obs1 = <span class=\"literal\">Rx</span>.Observable.throw(<span class=\"literal\">new</span> Error(<span class=\"string\">'error'</span>));</span><br><span class=\"line\"><span class=\"built_in\">var</span> obs2 = <span class=\"literal\">Rx</span>.Observable.<span class=\"keyword\">return</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> source = <span class=\"literal\">Rx</span>.Observable.catch(obs1, obs2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> subscription = source.subscribe(</span><br><span class=\"line\">  x =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">`onNext: $&#123;x&#125;`</span>),</span><br><span class=\"line\">  e =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">`onError: $&#123;e&#125;`</span>),</span><br><span class=\"line\">  () =&gt; console.<span class=\"keyword\">log</span>(<span class=\"string\">'onCompleted'</span>));</span><br></pre></td></tr></table></figure>\n<p>手机验证码实例<br>这样，用户能够收到验证码并成功验证的几率大大增加。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var service1 = Observable.create(<span class=\"string\">\"服务提供商#1\"</span>);</span><br><span class=\"line\">var service2 = Observable.create(<span class=\"string\">\"服务提供商#1\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Observable.<span class=\"keyword\">catch</span>(service1, service2).subscribe(&#123;</span><br><span class=\"line\">    ()=&gt;<span class=\"built_in\">console</span>.log(<span class=\"string\">'succeed'</span>),</span><br><span class=\"line\">    <span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'所有验证服务均不可用'</span>)</span><br><span class=\"line\">    ()=&gt;<span class=\"built_in\">console</span>.log(<span class=\"string\">'completed'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-combineLatest方法\"><a href=\"#5-combineLatest方法\" class=\"headerlink\" title=\"5. combineLatest方法\"></a>5. combineLatest方法</h3><p><code>方法定义</code><br>Rx.Observable.combineLatest(…args, [resultSelector])</p>\n<p><code>作用</code><br>通过处理函数总是将指定的可观察对象序列中最新发射的值合并为一个可观察对象。</p>\n<p><code>参数</code><br><code>args (arguments | Array)</code>: 一系列可观察对象或可观察对象的数组。<br><code>[resultSelector] (Function)</code>: 在所有可观察对象都发射值后调用的处理函数。</p>\n<p><code>返回值</code><br>(Observable): 由传入的可观察序列经过处理函数合并后的结果组成的可观察序列。</p>\n<p>实例</p>\n<figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> colors = [<span class=\"string\">\"紫色\"</span>,<span class=\"string\">\"黄色\"</span>,<span class=\"string\">\"蓝色\"</span>,<span class=\"string\">\"黑色\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> shapes = [<span class=\"string\">\"小星星\"</span>,<span class=\"string\">\"圆形\"</span>,<span class=\"string\">\"三角形\"</span>,<span class=\"string\">\"正方形\"</span>,<span class=\"string\">\"心形\"</span>,<span class=\"string\">\"五边形\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = Rx.<span class=\"keyword\">Observable</span>.interval(<span class=\"number\">3000</span>)</span><br><span class=\"line\">  .<span class=\"keyword\">map</span>(()=&gt;colors.pop());</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = Rx.<span class=\"keyword\">Observable</span>.interval(<span class=\"number\">2000</span>)</span><br><span class=\"line\">  .<span class=\"keyword\">map</span>(()=&gt;shapes.pop());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> combined = Rx.<span class=\"keyword\">Observable</span>.combineLatest(source1, source2, <span class=\"keyword\">function</span>(x, y)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"string\">\"的\"</span> + y;</span><br><span class=\"line\">&#125;).take(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">combined.subscribe((shaped)=&gt;console.log(shaped));</span><br></pre></td></tr></table></figure>"},{"author":"小莫","date":"2016-07-20T16:00:00.000Z","title":"angular2 api整理之通用模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、通用包\n\n## 1. 常量类\n\n### 1.1 根路径 [APP_BASE_HREF](https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html)   \n主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下\n\n```\n  bootstrap(AppCmp, [\n    ROUTER_PROVIDERS,\n    {provide: APP_BASE_HREF, useValue: '/my/app'}\n  ]);\n```\n\n### 1.2 指令常量 [COMMON_DIRECTIVES](https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html)\n主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。\nCORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。\n单个引入\n\n```\nimport {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from\n'@angular/common';\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,\nOtherDirective]\n})\n```\n\n使用常量引入\n\n```\nimport {COMMON_DIRECTIVES} from '@angular/common';\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [COMMON_DIRECTIVES, OtherDirective]\n})\n```\n\n### 1.3 管道常量 [COMMON_PIPES](https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html)\n目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等\n\n### 1.4 表单指令常量 [FORM_DIRECTIVES](https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html)\n试验阶段。所有有关表常的指令礼盒\n\n### 1.5 表单提供者常量 [FORM_PROVIDERS](https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html)\n在bootsrap的时候注入进去\n\n### 1.6 异步验证常量 [NG_ASYNC_VALIDATORS](https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html)\n为了控制一个表单的异步验证，要在验证中添加  `multi: true`,当然也少不了`NG_VALIDATORS`\n\n```\nbootstrap(MyApp, [{provide: NG_VALIDATORS, useValue: myValidator, multi: true}]);\n```\n\n### 1.7 值存储器常量 [NG_VALUE_ACCESSOR](https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html)\n具体作用和使用方法不明确\n\n\n## 2、 接口\n### 2.1 控制值存储器[ControlValueAccessor](https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html)\n具体作用和使用方法不明确\n### 2.2 表单 [Form](https://angular.cn/docs/js/latest/api/common/index/Form-interface.html)\n NgFormModel 和 NgForm实现在这个接口，只在form模块使用\n### 2.3 路径变化事件 [UrlChangeEvent](https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html)\n当监听到URL变化的时候触发此事件\n### 2.4 路径变化监听器 [UrlChangeListener](https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html)\n监听URL的变化\n### 2.5 验证[Validator](https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html)\n在写验证指令的时候实现这个接口\n\n```\n@Directive({\n  selector: '[custom-validator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n})\nclass CustomValidatorDirective implements Validator {\n  validate(c: Control): {[key: string]: any} {\n    return {\"custom\": true};\n  }\n}\n```\n\n## 3. 类\n### 3.1 抽象控制 [AbstractControl](https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html)\n","source":"_posts/2016-07-21.angular_api_common.md","raw":"---\nauthor: 小莫\ndate: 2016-07-21\ntitle: angular2 api整理之通用模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_common\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、通用包\n\n## 1. 常量类\n\n### 1.1 根路径 [APP_BASE_HREF](https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html)   \n主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下\n\n```\n  bootstrap(AppCmp, [\n    ROUTER_PROVIDERS,\n    {provide: APP_BASE_HREF, useValue: '/my/app'}\n  ]);\n```\n\n### 1.2 指令常量 [COMMON_DIRECTIVES](https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html)\n主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。\nCORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。\n单个引入\n\n```\nimport {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from\n'@angular/common';\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,\nOtherDirective]\n})\n```\n\n使用常量引入\n\n```\nimport {COMMON_DIRECTIVES} from '@angular/common';\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [COMMON_DIRECTIVES, OtherDirective]\n})\n```\n\n### 1.3 管道常量 [COMMON_PIPES](https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html)\n目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等\n\n### 1.4 表单指令常量 [FORM_DIRECTIVES](https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html)\n试验阶段。所有有关表常的指令礼盒\n\n### 1.5 表单提供者常量 [FORM_PROVIDERS](https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html)\n在bootsrap的时候注入进去\n\n### 1.6 异步验证常量 [NG_ASYNC_VALIDATORS](https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html)\n为了控制一个表单的异步验证，要在验证中添加  `multi: true`,当然也少不了`NG_VALIDATORS`\n\n```\nbootstrap(MyApp, [{provide: NG_VALIDATORS, useValue: myValidator, multi: true}]);\n```\n\n### 1.7 值存储器常量 [NG_VALUE_ACCESSOR](https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html)\n具体作用和使用方法不明确\n\n\n## 2、 接口\n### 2.1 控制值存储器[ControlValueAccessor](https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html)\n具体作用和使用方法不明确\n### 2.2 表单 [Form](https://angular.cn/docs/js/latest/api/common/index/Form-interface.html)\n NgFormModel 和 NgForm实现在这个接口，只在form模块使用\n### 2.3 路径变化事件 [UrlChangeEvent](https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html)\n当监听到URL变化的时候触发此事件\n### 2.4 路径变化监听器 [UrlChangeListener](https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html)\n监听URL的变化\n### 2.5 验证[Validator](https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html)\n在写验证指令的时候实现这个接口\n\n```\n@Directive({\n  selector: '[custom-validator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n})\nclass CustomValidatorDirective implements Validator {\n  validate(c: Control): {[key: string]: any} {\n    return {\"custom\": true};\n  }\n}\n```\n\n## 3. 类\n### 3.1 抽象控制 [AbstractControl](https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html)\n","slug":"angular2_api_common","published":1,"updated":"2016-07-21T08:41:11.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztwi00005gmcug7xr451","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、通用包\"><a href=\"#一、通用包\" class=\"headerlink\" title=\"一、通用包\"></a>一、通用包</h1><h2 id=\"1-常量类\"><a href=\"#1-常量类\" class=\"headerlink\" title=\"1. 常量类\"></a>1. 常量类</h2><h3 id=\"1-1-根路径-APP-BASE-HREF\"><a href=\"#1-1-根路径-APP-BASE-HREF\" class=\"headerlink\" title=\"1.1 根路径 APP_BASE_HREF\"></a>1.1 根路径 <a href=\"https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html\" target=\"_blank\" rel=\"external\">APP_BASE_HREF</a></h3><p>主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap(AppCmp, [</span><br><span class=\"line\">  ROUTER_PROVIDERS,</span><br><span class=\"line\">  &#123;<span class=\"string\">provide:</span> APP_BASE_HREF, <span class=\"string\">useValue:</span> <span class=\"string\">'/my/app'</span>&#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-指令常量-COMMON-DIRECTIVES\"><a href=\"#1-2-指令常量-COMMON-DIRECTIVES\" class=\"headerlink\" title=\"1.2 指令常量 COMMON_DIRECTIVES\"></a>1.2 指令常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html\" target=\"_blank\" rel=\"external\">COMMON_DIRECTIVES</a></h3><p>主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。<br>CORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。<br>单个引入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm&#125; from</span><br><span class=\"line\"><span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"meta-string\">'my-component'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"meta-string\">'myComponent.html'</span>,</span><br><span class=\"line\">  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,</span><br><span class=\"line\">OtherDirective]</span><br><span class=\"line\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<p>使用常量引入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;COMMON_DIRECTIVES&#125; from <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"meta-string\">'my-component'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"meta-string\">'myComponent.html'</span>,</span><br><span class=\"line\">  directives: [COMMON_DIRECTIVES, OtherDirective]</span><br><span class=\"line\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-管道常量-COMMON-PIPES\"><a href=\"#1-3-管道常量-COMMON-PIPES\" class=\"headerlink\" title=\"1.3 管道常量 COMMON_PIPES\"></a>1.3 管道常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html\" target=\"_blank\" rel=\"external\">COMMON_PIPES</a></h3><p>目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等</p>\n<h3 id=\"1-4-表单指令常量-FORM-DIRECTIVES\"><a href=\"#1-4-表单指令常量-FORM-DIRECTIVES\" class=\"headerlink\" title=\"1.4 表单指令常量 FORM_DIRECTIVES\"></a>1.4 表单指令常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html\" target=\"_blank\" rel=\"external\">FORM_DIRECTIVES</a></h3><p>试验阶段。所有有关表常的指令礼盒</p>\n<h3 id=\"1-5-表单提供者常量-FORM-PROVIDERS\"><a href=\"#1-5-表单提供者常量-FORM-PROVIDERS\" class=\"headerlink\" title=\"1.5 表单提供者常量 FORM_PROVIDERS\"></a>1.5 表单提供者常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html\" target=\"_blank\" rel=\"external\">FORM_PROVIDERS</a></h3><p>在bootsrap的时候注入进去</p>\n<h3 id=\"1-6-异步验证常量-NG-ASYNC-VALIDATORS\"><a href=\"#1-6-异步验证常量-NG-ASYNC-VALIDATORS\" class=\"headerlink\" title=\"1.6 异步验证常量 NG_ASYNC_VALIDATORS\"></a>1.6 异步验证常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html\" target=\"_blank\" rel=\"external\">NG_ASYNC_VALIDATORS</a></h3><p>为了控制一个表单的异步验证，要在验证中添加  <code>multi: true</code>,当然也少不了<code>NG_VALIDATORS</code></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap(MyApp, [&#123;<span class=\"string\">provide:</span> NG_VALIDATORS, <span class=\"string\">useValue:</span> myValidator, <span class=\"string\">multi:</span> <span class=\"literal\">true</span>&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-7-值存储器常量-NG-VALUE-ACCESSOR\"><a href=\"#1-7-值存储器常量-NG-VALUE-ACCESSOR\" class=\"headerlink\" title=\"1.7 值存储器常量 NG_VALUE_ACCESSOR\"></a>1.7 值存储器常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html\" target=\"_blank\" rel=\"external\">NG_VALUE_ACCESSOR</a></h3><p>具体作用和使用方法不明确</p>\n<h2 id=\"2、-接口\"><a href=\"#2、-接口\" class=\"headerlink\" title=\"2、 接口\"></a>2、 接口</h2><h3 id=\"2-1-控制值存储器ControlValueAccessor\"><a href=\"#2-1-控制值存储器ControlValueAccessor\" class=\"headerlink\" title=\"2.1 控制值存储器ControlValueAccessor\"></a>2.1 控制值存储器<a href=\"https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html\" target=\"_blank\" rel=\"external\">ControlValueAccessor</a></h3><p>具体作用和使用方法不明确</p>\n<h3 id=\"2-2-表单-Form\"><a href=\"#2-2-表单-Form\" class=\"headerlink\" title=\"2.2 表单 Form\"></a>2.2 表单 <a href=\"https://angular.cn/docs/js/latest/api/common/index/Form-interface.html\" target=\"_blank\" rel=\"external\">Form</a></h3><p> NgFormModel 和 NgForm实现在这个接口，只在form模块使用</p>\n<h3 id=\"2-3-路径变化事件-UrlChangeEvent\"><a href=\"#2-3-路径变化事件-UrlChangeEvent\" class=\"headerlink\" title=\"2.3 路径变化事件 UrlChangeEvent\"></a>2.3 路径变化事件 <a href=\"https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html\" target=\"_blank\" rel=\"external\">UrlChangeEvent</a></h3><p>当监听到URL变化的时候触发此事件</p>\n<h3 id=\"2-4-路径变化监听器-UrlChangeListener\"><a href=\"#2-4-路径变化监听器-UrlChangeListener\" class=\"headerlink\" title=\"2.4 路径变化监听器 UrlChangeListener\"></a>2.4 路径变化监听器 <a href=\"https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html\" target=\"_blank\" rel=\"external\">UrlChangeListener</a></h3><p>监听URL的变化</p>\n<h3 id=\"2-5-验证Validator\"><a href=\"#2-5-验证Validator\" class=\"headerlink\" title=\"2.5 验证Validator\"></a>2.5 验证<a href=\"https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html\" target=\"_blank\" rel=\"external\">Validator</a></h3><p>在写验证指令的时候实现这个接口</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'[custom-validator]'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">providers</span>: [&#123;<span class=\"attribute\">provide</span>: NG_VALIDATORS, <span class=\"attribute\">useExisting</span>: CustomValidatorDirective, <span class=\"attribute\">multi</span>: true&#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class CustomValidatorDirective implements Validator &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">validate</span>(<span class=\"attribute\">c</span>: Control): &#123;<span class=\"selector-attr\">[key: string]</span>: <span class=\"selector-tag\">any</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> &#123;\"custom\": <span class=\"selector-tag\">true</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-类\"><a href=\"#3-类\" class=\"headerlink\" title=\"3. 类\"></a>3. 类</h2><h3 id=\"3-1-抽象控制-AbstractControl\"><a href=\"#3-1-抽象控制-AbstractControl\" class=\"headerlink\" title=\"3.1 抽象控制 AbstractControl\"></a>3.1 抽象控制 <a href=\"https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html\" target=\"_blank\" rel=\"external\">AbstractControl</a></h3>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、通用包\"><a href=\"#一、通用包\" class=\"headerlink\" title=\"一、通用包\"></a>一、通用包</h1><h2 id=\"1-常量类\"><a href=\"#1-常量类\" class=\"headerlink\" title=\"1. 常量类\"></a>1. 常量类</h2><h3 id=\"1-1-根路径-APP-BASE-HREF\"><a href=\"#1-1-根路径-APP-BASE-HREF\" class=\"headerlink\" title=\"1.1 根路径 APP_BASE_HREF\"></a>1.1 根路径 <a href=\"https://angular.cn/docs/js/latest/api/common/index/APP_BASE_HREF-let.html\">APP_BASE_HREF</a></h3><p>主要作用：在顶层组件中使用bootstrap启动整个app的时候设置根url,格式如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap(AppCmp, [</span><br><span class=\"line\">  ROUTER_PROVIDERS,</span><br><span class=\"line\">  &#123;<span class=\"string\">provide:</span> APP_BASE_HREF, <span class=\"string\">useValue:</span> <span class=\"string\">'/my/app'</span>&#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-指令常量-COMMON-DIRECTIVES\"><a href=\"#1-2-指令常量-COMMON-DIRECTIVES\" class=\"headerlink\" title=\"1.2 指令常量 COMMON_DIRECTIVES\"></a>1.2 指令常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/COMMON_DIRECTIVES-let.html\">COMMON_DIRECTIVES</a></h3><p>主要作用：所有核心内置指令的集合：包含NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm等。<br>CORE_DIRECTIVES少了NgModel和NgForm，不过它是稳定的。COMMON_DIRECTIVES还是试验性阶段。<br>单个引入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm&#125; from</span><br><span class=\"line\"><span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"meta-string\">'my-component'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"meta-string\">'myComponent.html'</span>,</span><br><span class=\"line\">  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,</span><br><span class=\"line\">OtherDirective]</span><br><span class=\"line\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<p>使用常量引入</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;COMMON_DIRECTIVES&#125; from <span class=\"string\">'@angular/common'</span>;</span><br><span class=\"line\"><span class=\"meta\">@Component(&#123;</span><br><span class=\"line\">  selector: <span class=\"meta-string\">'my-component'</span>,</span><br><span class=\"line\">  templateUrl: <span class=\"meta-string\">'myComponent.html'</span>,</span><br><span class=\"line\">  directives: [COMMON_DIRECTIVES, OtherDirective]</span><br><span class=\"line\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-管道常量-COMMON-PIPES\"><a href=\"#1-3-管道常量-COMMON-PIPES\" class=\"headerlink\" title=\"1.3 管道常量 COMMON_PIPES\"></a>1.3 管道常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/COMMON_PIPES-let.html\">COMMON_PIPES</a></h3><p>目前还是试验性的。功能同上，是所有 管道的合集 包含 AsyncPipe、I18nPluralPipe、I18nSelectPipe、SlicePipe等</p>\n<h3 id=\"1-4-表单指令常量-FORM-DIRECTIVES\"><a href=\"#1-4-表单指令常量-FORM-DIRECTIVES\" class=\"headerlink\" title=\"1.4 表单指令常量 FORM_DIRECTIVES\"></a>1.4 表单指令常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/FORM_DIRECTIVES-let.html\">FORM_DIRECTIVES</a></h3><p>试验阶段。所有有关表常的指令礼盒</p>\n<h3 id=\"1-5-表单提供者常量-FORM-PROVIDERS\"><a href=\"#1-5-表单提供者常量-FORM-PROVIDERS\" class=\"headerlink\" title=\"1.5 表单提供者常量 FORM_PROVIDERS\"></a>1.5 表单提供者常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/FORM_PROVIDERS-let.html\">FORM_PROVIDERS</a></h3><p>在bootsrap的时候注入进去</p>\n<h3 id=\"1-6-异步验证常量-NG-ASYNC-VALIDATORS\"><a href=\"#1-6-异步验证常量-NG-ASYNC-VALIDATORS\" class=\"headerlink\" title=\"1.6 异步验证常量 NG_ASYNC_VALIDATORS\"></a>1.6 异步验证常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html\">NG_ASYNC_VALIDATORS</a></h3><p>为了控制一个表单的异步验证，要在验证中添加  <code>multi: true</code>,当然也少不了<code>NG_VALIDATORS</code></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bootstrap(MyApp, [&#123;<span class=\"string\">provide:</span> NG_VALIDATORS, <span class=\"string\">useValue:</span> myValidator, <span class=\"string\">multi:</span> <span class=\"literal\">true</span>&#125;]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-7-值存储器常量-NG-VALUE-ACCESSOR\"><a href=\"#1-7-值存储器常量-NG-VALUE-ACCESSOR\" class=\"headerlink\" title=\"1.7 值存储器常量 NG_VALUE_ACCESSOR\"></a>1.7 值存储器常量 <a href=\"https://angular.cn/docs/js/latest/api/common/index/NG_VALUE_ACCESSOR-let.html\">NG_VALUE_ACCESSOR</a></h3><p>具体作用和使用方法不明确</p>\n<h2 id=\"2、-接口\"><a href=\"#2、-接口\" class=\"headerlink\" title=\"2、 接口\"></a>2、 接口</h2><h3 id=\"2-1-控制值存储器ControlValueAccessor\"><a href=\"#2-1-控制值存储器ControlValueAccessor\" class=\"headerlink\" title=\"2.1 控制值存储器ControlValueAccessor\"></a>2.1 控制值存储器<a href=\"https://angular.cn/docs/js/latest/api/common/index/ControlValueAccessor-interface.html\">ControlValueAccessor</a></h3><p>具体作用和使用方法不明确</p>\n<h3 id=\"2-2-表单-Form\"><a href=\"#2-2-表单-Form\" class=\"headerlink\" title=\"2.2 表单 Form\"></a>2.2 表单 <a href=\"https://angular.cn/docs/js/latest/api/common/index/Form-interface.html\">Form</a></h3><p> NgFormModel 和 NgForm实现在这个接口，只在form模块使用</p>\n<h3 id=\"2-3-路径变化事件-UrlChangeEvent\"><a href=\"#2-3-路径变化事件-UrlChangeEvent\" class=\"headerlink\" title=\"2.3 路径变化事件 UrlChangeEvent\"></a>2.3 路径变化事件 <a href=\"https://angular.cn/docs/js/latest/api/common/index/UrlChangeEvent-interface.html\">UrlChangeEvent</a></h3><p>当监听到URL变化的时候触发此事件</p>\n<h3 id=\"2-4-路径变化监听器-UrlChangeListener\"><a href=\"#2-4-路径变化监听器-UrlChangeListener\" class=\"headerlink\" title=\"2.4 路径变化监听器 UrlChangeListener\"></a>2.4 路径变化监听器 <a href=\"https://angular.cn/docs/js/latest/api/common/index/UrlChangeListener-interface.html\">UrlChangeListener</a></h3><p>监听URL的变化</p>\n<h3 id=\"2-5-验证Validator\"><a href=\"#2-5-验证Validator\" class=\"headerlink\" title=\"2.5 验证Validator\"></a>2.5 验证<a href=\"https://angular.cn/docs/js/latest/api/common/index/Validator-interface.html\">Validator</a></h3><p>在写验证指令的时候实现这个接口</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'[custom-validator]'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">providers</span>: [&#123;<span class=\"attribute\">provide</span>: NG_VALIDATORS, <span class=\"attribute\">useExisting</span>: CustomValidatorDirective, <span class=\"attribute\">multi</span>: true&#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class CustomValidatorDirective implements Validator &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">validate</span>(<span class=\"attribute\">c</span>: Control): &#123;<span class=\"selector-attr\">[key: string]</span>: <span class=\"selector-tag\">any</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> &#123;\"custom\": <span class=\"selector-tag\">true</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-类\"><a href=\"#3-类\" class=\"headerlink\" title=\"3. 类\"></a>3. 类</h2><h3 id=\"3-1-抽象控制-AbstractControl\"><a href=\"#3-1-抽象控制-AbstractControl\" class=\"headerlink\" title=\"3.1 抽象控制 AbstractControl\"></a>3.1 抽象控制 <a href=\"https://angular.cn/docs/js/latest/api/common/index/AbstractControl-class.html\">AbstractControl</a></h3>"},{"author":"小莫","date":"2016-07-21T16:00:00.000Z","title":"angular2 api整理之核心模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、常量类\n### 1.1 平台通用provider\n[APPLICATION_COMMON_PROVIDERS](https://angular.cn/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html)\n其中应包括在任何角度应用提供商的默认设置，不管是什么平台的运行上。\n### 1.2 应用唯一标识符\n[APP_ID](https://angular.cn/docs/ts/latest/api/core/index/APP_ID-let.html)\n应用的唯一标识符，默认随机成。如果你需要避免随机生成的值用作应用程序ID，您可以提供通过DI提供商配置使用此令牌根注射器自定义值。\n### 1.3 应用初始化\n[APP_INITIALIZER](https://angular.cn/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html)\n当应用启动就会执行的方法\n### 1.4 自动样式 [AUTO_STYLE](https://angular.cn/docs/ts/latest/api/core/index/AUTO_STYLE-let.html)\n暂时没有任何文档\n### 1.5 属性[Attribute](https://angular.cn/docs/ts/latest/api/core/index/Attribute-var.html)\n假设我们有一个input框，我们想知道它的类型，我们可以写一个指令\n\n```\n  @Directive({selector: 'input'})\n  class InputAttrDirective {\n    constructor(@Attribute('type') type: string) {\n      // type would be 'text' in this example\n    }\n  }\n```\n\n### 1.6 子内容[ContentChild](https://angular.cn/docs/ts/latest/api/core/index/ContentChild-var.html)\n配置内容查询\n\n### 1.7 子内容列表 [ContentChildren](https://angular.cn/docs/ts/latest/api/core/index/ContentChildren-var.html)\n配置内容查询的集合\n\n### 1.8  主机 [Host](https://angular.cn/docs/ts/latest/api/core/index/Host-var.html)\n具体作用不明\n\n### 1.9 主机绑定 [HostBinding](https://angular.cn/docs/ts/latest/api/core/index/HostBinding-var.html)\n声明主机属性绑定。HostBindingMetadata采用指定主机元素将被更新的属性名的可选参数。如果没有提供，则使用类属性的名称。\n\n下面的示例创建一个指令，设置在其上有ngModel指令的DOM元素的有效和无效的类。class属性中的valid和invlid控制\n\n```\n@Directive({selector: '[ngModel]'})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  @HostBinding('class.valid') get valid() { return this.control.valid; }\n  @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n}\n@Component({\n  selector: 'app',\n  template: `<input [(ngModel)]=\"prop\">`,\n  directives: [FORM_DIRECTIVES, NgModelStatus]\n})\nclass App {\n  prop;\n}\nbootstrap(App);\n```\n\n### 1.10 主机监听 [HostListener](https://angular.cn/docs/ts/latest/api/core/index/HostListener-var.html)\n声明主机监听。当主机元件发出指定的事件角将调用的方法装饰。 如果该装饰方法返回假，则的preventDefault施加在DOM事件。\n\n下面的示例表示监听点击事件并计数。\n\n```\n@Directive({selector: 'button[counting]'})\nclass CountClicks {\n  numberOfClicks = 0;\n  @HostListener('click', ['$event.target'])\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n@Component({\n  selector: 'app',\n  template: `<button counting>增加</button>`,\n  directives: [CountClicks]\n})\nclass App {}\nbootstrap(App);\n```\n\n### 1.11 注入 [Inject](https://angular.cn/docs/ts/latest/api/core/index/InjectMetadata-class.html)\n当@Inject不存在的时候，注入器会采用参数的注解。意思就是说 在class上写 @Injectable()和在构造函数中写@Inject作用是一样的。\n\n### 1.12 [Input](https://angular.cn/docs/ts/latest/api/core/index/Input-var.html)\n声明一个数据绑定的输入特性。用于组件之间的通讯。\n\n### 1.13 可选 [Optional](https://angular.cn/docs/ts/latest/api/core/index/Optional-var.html)\n在构造函数中创建实例的时候加上@Optional代码可选内容，传不传参都不会报错\n\n### 1.14 输出 [Output](https://angular.cn/docs/ts/latest/api/core/index/Output-var.html)\n自定义事件，用于交互。\n\n### 1.16 包根路径 [PACKAGE_ROOT_URL](https://angular.cn/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html)\n表明应用程序的根目录\n\n### 1.17 平台公共提供者 [PLATFORM_COMMON_PROVIDERS](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html)\n供应商的默认设置应该被包含在任何angular平台\n\n### 1.18 平台初始化 [PLATFORM_INITIALIZER](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html)\n当一个平台初始化将要执行的功能。\n\n### 1.19 平台管道 [PLATFORM_PIPES](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html)\n可以为应用的每个组件提供一个启动程序时让一个管道数组可用的令牌。\n\n### 1.20 查询 [Query](https://angular.cn/docs/ts/latest/api/core/index/Query-var.html)\n查询可以通过传递与所需结合符号的字符串寻找变量绑定。在这种情况下，被注入的对象依赖于可变结合的类型。它可以是一个ElementRef，一个指令或组件\n\n```\n<seeker>\n  <div #findMe>...</div>\n  <div #findMeToo>...</div>\n</seeker>\n\n @Component({\n  selector: 'seeker'\n})\nclass Seeker {\n  constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}\n}\n```\n\n### 1.21 自己 [Self](https://angular.cn/docs/ts/latest/api/core/index/Self-var.html)\nSelfMetadataFactory类型。\n\n### 1.22 [SkipSelf](https://angular.cn/docs/ts/latest/api/core/index/SkipSelf-var.html)\n暂不明确\n\n### 1.23 子视图 [ViewChild](https://angular.cn/docs/ts/latest/api/core/index/ViewChild-var.html)\nViewChildMetadataFactory类型  作用尚不明确\n\n### 1.24 子视图列表 [ViewChildren](https://angular.cn/docs/ts/latest/api/core/index/ViewChildren-var.html)\nViewChildrenMetadataFactory类型  作用尚不明确\n\n### 1.25 创建跟踪范围 [wtfCreateScope](https://angular.cn/docs/ts/latest/api/core/index/wtfCreateScope-var.html)\n作用域必须严格嵌套和类似于堆栈帧，但不必遵循堆栈帧。相反，我们建议他们遵循的逻辑嵌套。您可能需要像在WTF中定义的那样使用事件签名。\n\n### 1.26 结束时间范围[wtfEndTimeRange](https://angular.cn/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html)\n暂无文档\n\n### 1.27 [wtfLeave](https://angular.cn/docs/ts/latest/api/core/index/wtfLeave-var.html)\n用于标记范围的结束\n\n### 1.28 开始时间范围 [wtfStartTimeRange](https://angular.cn/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html)\n用来标记异步启动。异步类似于范围，但它们不必须严格嵌套。返回值是在调用[endAsync]使用。如果WTF已启用异步范围只工作。\n\n\n## 2. 枚举类型\n### 2.1 改变发现策略 [ChangeDetectionStrategy](https://angular.cn/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html)\n有OnPush、Default两个选项， OnPush会在水化期间将模式设置为 CheckOnce ,Default会将模式设置为CheckAlways\n\n### 2.1 [ViewEncapsulation](https://angular.cn/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html)\n定义可用的组件的视图模板和样式的封装选项。有Emulated、Native、None三个选项\n\n## 3. 方法类\n### 3.1 类 [Class](https://angular.cn/docs/ts/latest/api/core/index/Class-function.html)\n提供了一个在es5中写Class的方法，用typescipt的话我不想不出它存在的意义在哪。\n\n### 3.2 动画 [animate](https://angular.cn/docs/ts/latest/api/#!?apiType=Function)\n接收两个参数 ：延时和样式  animate(延时,style(...))\n\n### 3.3 作为原生元素[asNativeElements](https://angular.cn/docs/ts/latest/api/core/index/asNativeElements-function.html)\n暂无资料\n\n### 3.4 平台断言 [assertPlatform](https://angular.cn/docs/ts/latest/api/core/index/assertPlatform-function.html)\n检查是否存在目前是包含给定令牌作为一个供应商的平台。\n\n### 3.5 核心启动器 [coreBootstrap](https://angular.cn/docs/ts/latest/api/core/index/coreBootstrap-function.html)\nApplicationRef.bootstrap的快捷方式。需要先创建一个平台。\n\n### 3.6 核心载入和启动工具 [coreLoadAndBootstrap](https://angular.cn/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html)\n解析给定组件的componentFactory，等待异步初始化和引导程序的组件。需要先创建一个平台。\n\n### 3.7 创建ng空间 [createNgZone](https://angular.cn/docs/ts/latest/api/core/index/createNgZone-function.html)\n创建一个angular的空间。\n\n### 3.8 创建平台 [createPlatform](https://angular.cn/docs/ts/latest/api/core/index/createPlatform-function.html)\n创建了一个平台。平台已经通过这个功能来创建热切。\n\n### 3.9 处置平台 [disposePlatform](https://angular.cn/docs/ts/latest/api/core/index/disposePlatform-function.html)\n处置一个现有的平台\n\n### 3.10 [enableProdMode](https://angular.cn/docs/ts/latest/api/core/index/enableProdMode-function.html)\n禁用angular的开发模式，从而关闭断言和其他检查的范围。这种禁用一个重要断言验证一个变化检测通不会导致任何绑定（也称为单向数据流）的附加的变化。\n\n### 3.11  指向[forwardRef](https://angular.cn/docs/ts/latest/api/core/index/forwardRef-function.html)\n允许指向那些尚未定义的对象。例如，当这是我们需要参考为DI的目的令牌被声明，forwardRef被使用，但还没有定义。我们创建查询时所使用的令牌时，它也被使用。\n\n### 3.12 获取Debug模式 [getDebugNode](https://angular.cn/docs/ts/latest/api/core/index/getDebugNode-function.html)\n暂无说明\n\n### 3.13 获取平台 [getPlatform](https://angular.cn/docs/ts/latest/api/core/index/getPlatform-function.html)\n返回当前使用的平台\n\n### 3.14 组 [group](https://angular.cn/docs/ts/latest/api/core/index/group-function.html)\ngroup(steps: AnimationMetadata[]) 接收一个animate数组\n\n### 3.15 是否是开发模式 [isDevMode](https://angular.cn/docs/ts/latest/api/core/index/isDevMode-function.html)\n返回一个布尔值，判断是否是开发模式。\n\n### 3.16 动画框架 [keyframes](https://angular.cn/docs/ts/latest/api/core/index/keyframes-function.html)\nanimate的第二个参数可以用一个keyframes\n\n```\nanimate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\", offset: 0 }),\n  style({ backgroundColor: \"blue\", offset: 0.2 }),\n]))\n```\n\n### 3.16 锁定运行模式[lockRunMode](https://angular.cn/docs/ts/latest/api/core/index/lockRunMode-function.html)\n暂无说明\n\n### 3.17 解决面向指向 [resolveForwardRef](https://angular.cn/docs/ts/latest/api/core/index/resolveForwardRef-function.html)\n暂无说明\n\n### 3.18 顺序 [sequence](https://angular.cn/docs/ts/latest/api/core/index/sequence-function.html)\n接收一个动画数组 steps: AnimationMetadata[]\n\n```\nsequence([\n  style({ opacity: 0 })),\n  animate(\"1s\", { opacity: 1 }))\n])\n```\n\n### 3.19 设置测试能力获取 [setTestabilityGetter](https://angular.cn/docs/ts/latest/api/core/index/setTestabilityGetter-function.html)\n用于设置测试框架\n\n### 3.20 状态 [state](https://angular.cn/docs/ts/latest/api/core/index/state-function.html)\n动画相关 export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata 接受 状态 和样式两个参数，返回动画样式。\n\n### 3.21 转换 [transition](https://angular.cn/docs/ts/latest/api/core/index/transition-function.html)\n动画相关\n\n### 3.22 [tigger](https://angular.cn/docs/ts/latest/api/core/index/trigger-function.html)\n动画相关\n\n## 4. 接口类\n### 4.1 属性元数据工厂[AttributeMetadataFactory](https://angular.cn/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html)\n用来创建注解和装饰器\n\n### 4.2 [ClassDefinition](https://angular.cn/docs/ts/latest/api/core/index/ClassDefinition-interface.html)\n为Class 声明一个接口\n\n### 4.3 组建装饰器[ComponentDecorator](https://angular.cn/docs/ts/latest/api/core/index/ComponentDecorator-interface.html)\n\n### 4.4 组建元数据工厂 [ComponentMetadataFactory](https://angular.cn/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html)\n用来创建注解和装饰器\n\n\n## 5. 类\n暂略\n\n## 6. 装饰器\n### 6.1 组件 [Component](https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html)\n\n### 6.2 指令 [Directive](https://angular.cn/docs/ts/latest/api/core/index/Directive-decorator.html)\n\n### 6.3 注入器 [Injectable](https://angular.cn/docs/ts/latest/api/core/index/Injectable-decorator.html)\n\n### 6.4 管道 [Pipe](https://angular.cn/docs/ts/latest/api/core/index/Pipe-decorator.html)\n","source":"_posts/2016-07-22.angular_api_core.md","raw":"---\nauthor: 小莫\ndate: 2016-07-22\ntitle: angular2 api整理之核心模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_core\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n## 一、常量类\n### 1.1 平台通用provider\n[APPLICATION_COMMON_PROVIDERS](https://angular.cn/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html)\n其中应包括在任何角度应用提供商的默认设置，不管是什么平台的运行上。\n### 1.2 应用唯一标识符\n[APP_ID](https://angular.cn/docs/ts/latest/api/core/index/APP_ID-let.html)\n应用的唯一标识符，默认随机成。如果你需要避免随机生成的值用作应用程序ID，您可以提供通过DI提供商配置使用此令牌根注射器自定义值。\n### 1.3 应用初始化\n[APP_INITIALIZER](https://angular.cn/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html)\n当应用启动就会执行的方法\n### 1.4 自动样式 [AUTO_STYLE](https://angular.cn/docs/ts/latest/api/core/index/AUTO_STYLE-let.html)\n暂时没有任何文档\n### 1.5 属性[Attribute](https://angular.cn/docs/ts/latest/api/core/index/Attribute-var.html)\n假设我们有一个input框，我们想知道它的类型，我们可以写一个指令\n\n```\n  @Directive({selector: 'input'})\n  class InputAttrDirective {\n    constructor(@Attribute('type') type: string) {\n      // type would be 'text' in this example\n    }\n  }\n```\n\n### 1.6 子内容[ContentChild](https://angular.cn/docs/ts/latest/api/core/index/ContentChild-var.html)\n配置内容查询\n\n### 1.7 子内容列表 [ContentChildren](https://angular.cn/docs/ts/latest/api/core/index/ContentChildren-var.html)\n配置内容查询的集合\n\n### 1.8  主机 [Host](https://angular.cn/docs/ts/latest/api/core/index/Host-var.html)\n具体作用不明\n\n### 1.9 主机绑定 [HostBinding](https://angular.cn/docs/ts/latest/api/core/index/HostBinding-var.html)\n声明主机属性绑定。HostBindingMetadata采用指定主机元素将被更新的属性名的可选参数。如果没有提供，则使用类属性的名称。\n\n下面的示例创建一个指令，设置在其上有ngModel指令的DOM元素的有效和无效的类。class属性中的valid和invlid控制\n\n```\n@Directive({selector: '[ngModel]'})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  @HostBinding('class.valid') get valid() { return this.control.valid; }\n  @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n}\n@Component({\n  selector: 'app',\n  template: `<input [(ngModel)]=\"prop\">`,\n  directives: [FORM_DIRECTIVES, NgModelStatus]\n})\nclass App {\n  prop;\n}\nbootstrap(App);\n```\n\n### 1.10 主机监听 [HostListener](https://angular.cn/docs/ts/latest/api/core/index/HostListener-var.html)\n声明主机监听。当主机元件发出指定的事件角将调用的方法装饰。 如果该装饰方法返回假，则的preventDefault施加在DOM事件。\n\n下面的示例表示监听点击事件并计数。\n\n```\n@Directive({selector: 'button[counting]'})\nclass CountClicks {\n  numberOfClicks = 0;\n  @HostListener('click', ['$event.target'])\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n@Component({\n  selector: 'app',\n  template: `<button counting>增加</button>`,\n  directives: [CountClicks]\n})\nclass App {}\nbootstrap(App);\n```\n\n### 1.11 注入 [Inject](https://angular.cn/docs/ts/latest/api/core/index/InjectMetadata-class.html)\n当@Inject不存在的时候，注入器会采用参数的注解。意思就是说 在class上写 @Injectable()和在构造函数中写@Inject作用是一样的。\n\n### 1.12 [Input](https://angular.cn/docs/ts/latest/api/core/index/Input-var.html)\n声明一个数据绑定的输入特性。用于组件之间的通讯。\n\n### 1.13 可选 [Optional](https://angular.cn/docs/ts/latest/api/core/index/Optional-var.html)\n在构造函数中创建实例的时候加上@Optional代码可选内容，传不传参都不会报错\n\n### 1.14 输出 [Output](https://angular.cn/docs/ts/latest/api/core/index/Output-var.html)\n自定义事件，用于交互。\n\n### 1.16 包根路径 [PACKAGE_ROOT_URL](https://angular.cn/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html)\n表明应用程序的根目录\n\n### 1.17 平台公共提供者 [PLATFORM_COMMON_PROVIDERS](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html)\n供应商的默认设置应该被包含在任何angular平台\n\n### 1.18 平台初始化 [PLATFORM_INITIALIZER](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html)\n当一个平台初始化将要执行的功能。\n\n### 1.19 平台管道 [PLATFORM_PIPES](https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html)\n可以为应用的每个组件提供一个启动程序时让一个管道数组可用的令牌。\n\n### 1.20 查询 [Query](https://angular.cn/docs/ts/latest/api/core/index/Query-var.html)\n查询可以通过传递与所需结合符号的字符串寻找变量绑定。在这种情况下，被注入的对象依赖于可变结合的类型。它可以是一个ElementRef，一个指令或组件\n\n```\n<seeker>\n  <div #findMe>...</div>\n  <div #findMeToo>...</div>\n</seeker>\n\n @Component({\n  selector: 'seeker'\n})\nclass Seeker {\n  constructor(@Query('findMe, findMeToo') elList: QueryList<ElementRef>) {...}\n}\n```\n\n### 1.21 自己 [Self](https://angular.cn/docs/ts/latest/api/core/index/Self-var.html)\nSelfMetadataFactory类型。\n\n### 1.22 [SkipSelf](https://angular.cn/docs/ts/latest/api/core/index/SkipSelf-var.html)\n暂不明确\n\n### 1.23 子视图 [ViewChild](https://angular.cn/docs/ts/latest/api/core/index/ViewChild-var.html)\nViewChildMetadataFactory类型  作用尚不明确\n\n### 1.24 子视图列表 [ViewChildren](https://angular.cn/docs/ts/latest/api/core/index/ViewChildren-var.html)\nViewChildrenMetadataFactory类型  作用尚不明确\n\n### 1.25 创建跟踪范围 [wtfCreateScope](https://angular.cn/docs/ts/latest/api/core/index/wtfCreateScope-var.html)\n作用域必须严格嵌套和类似于堆栈帧，但不必遵循堆栈帧。相反，我们建议他们遵循的逻辑嵌套。您可能需要像在WTF中定义的那样使用事件签名。\n\n### 1.26 结束时间范围[wtfEndTimeRange](https://angular.cn/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html)\n暂无文档\n\n### 1.27 [wtfLeave](https://angular.cn/docs/ts/latest/api/core/index/wtfLeave-var.html)\n用于标记范围的结束\n\n### 1.28 开始时间范围 [wtfStartTimeRange](https://angular.cn/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html)\n用来标记异步启动。异步类似于范围，但它们不必须严格嵌套。返回值是在调用[endAsync]使用。如果WTF已启用异步范围只工作。\n\n\n## 2. 枚举类型\n### 2.1 改变发现策略 [ChangeDetectionStrategy](https://angular.cn/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html)\n有OnPush、Default两个选项， OnPush会在水化期间将模式设置为 CheckOnce ,Default会将模式设置为CheckAlways\n\n### 2.1 [ViewEncapsulation](https://angular.cn/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html)\n定义可用的组件的视图模板和样式的封装选项。有Emulated、Native、None三个选项\n\n## 3. 方法类\n### 3.1 类 [Class](https://angular.cn/docs/ts/latest/api/core/index/Class-function.html)\n提供了一个在es5中写Class的方法，用typescipt的话我不想不出它存在的意义在哪。\n\n### 3.2 动画 [animate](https://angular.cn/docs/ts/latest/api/#!?apiType=Function)\n接收两个参数 ：延时和样式  animate(延时,style(...))\n\n### 3.3 作为原生元素[asNativeElements](https://angular.cn/docs/ts/latest/api/core/index/asNativeElements-function.html)\n暂无资料\n\n### 3.4 平台断言 [assertPlatform](https://angular.cn/docs/ts/latest/api/core/index/assertPlatform-function.html)\n检查是否存在目前是包含给定令牌作为一个供应商的平台。\n\n### 3.5 核心启动器 [coreBootstrap](https://angular.cn/docs/ts/latest/api/core/index/coreBootstrap-function.html)\nApplicationRef.bootstrap的快捷方式。需要先创建一个平台。\n\n### 3.6 核心载入和启动工具 [coreLoadAndBootstrap](https://angular.cn/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html)\n解析给定组件的componentFactory，等待异步初始化和引导程序的组件。需要先创建一个平台。\n\n### 3.7 创建ng空间 [createNgZone](https://angular.cn/docs/ts/latest/api/core/index/createNgZone-function.html)\n创建一个angular的空间。\n\n### 3.8 创建平台 [createPlatform](https://angular.cn/docs/ts/latest/api/core/index/createPlatform-function.html)\n创建了一个平台。平台已经通过这个功能来创建热切。\n\n### 3.9 处置平台 [disposePlatform](https://angular.cn/docs/ts/latest/api/core/index/disposePlatform-function.html)\n处置一个现有的平台\n\n### 3.10 [enableProdMode](https://angular.cn/docs/ts/latest/api/core/index/enableProdMode-function.html)\n禁用angular的开发模式，从而关闭断言和其他检查的范围。这种禁用一个重要断言验证一个变化检测通不会导致任何绑定（也称为单向数据流）的附加的变化。\n\n### 3.11  指向[forwardRef](https://angular.cn/docs/ts/latest/api/core/index/forwardRef-function.html)\n允许指向那些尚未定义的对象。例如，当这是我们需要参考为DI的目的令牌被声明，forwardRef被使用，但还没有定义。我们创建查询时所使用的令牌时，它也被使用。\n\n### 3.12 获取Debug模式 [getDebugNode](https://angular.cn/docs/ts/latest/api/core/index/getDebugNode-function.html)\n暂无说明\n\n### 3.13 获取平台 [getPlatform](https://angular.cn/docs/ts/latest/api/core/index/getPlatform-function.html)\n返回当前使用的平台\n\n### 3.14 组 [group](https://angular.cn/docs/ts/latest/api/core/index/group-function.html)\ngroup(steps: AnimationMetadata[]) 接收一个animate数组\n\n### 3.15 是否是开发模式 [isDevMode](https://angular.cn/docs/ts/latest/api/core/index/isDevMode-function.html)\n返回一个布尔值，判断是否是开发模式。\n\n### 3.16 动画框架 [keyframes](https://angular.cn/docs/ts/latest/api/core/index/keyframes-function.html)\nanimate的第二个参数可以用一个keyframes\n\n```\nanimate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\", offset: 0 }),\n  style({ backgroundColor: \"blue\", offset: 0.2 }),\n]))\n```\n\n### 3.16 锁定运行模式[lockRunMode](https://angular.cn/docs/ts/latest/api/core/index/lockRunMode-function.html)\n暂无说明\n\n### 3.17 解决面向指向 [resolveForwardRef](https://angular.cn/docs/ts/latest/api/core/index/resolveForwardRef-function.html)\n暂无说明\n\n### 3.18 顺序 [sequence](https://angular.cn/docs/ts/latest/api/core/index/sequence-function.html)\n接收一个动画数组 steps: AnimationMetadata[]\n\n```\nsequence([\n  style({ opacity: 0 })),\n  animate(\"1s\", { opacity: 1 }))\n])\n```\n\n### 3.19 设置测试能力获取 [setTestabilityGetter](https://angular.cn/docs/ts/latest/api/core/index/setTestabilityGetter-function.html)\n用于设置测试框架\n\n### 3.20 状态 [state](https://angular.cn/docs/ts/latest/api/core/index/state-function.html)\n动画相关 export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata 接受 状态 和样式两个参数，返回动画样式。\n\n### 3.21 转换 [transition](https://angular.cn/docs/ts/latest/api/core/index/transition-function.html)\n动画相关\n\n### 3.22 [tigger](https://angular.cn/docs/ts/latest/api/core/index/trigger-function.html)\n动画相关\n\n## 4. 接口类\n### 4.1 属性元数据工厂[AttributeMetadataFactory](https://angular.cn/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html)\n用来创建注解和装饰器\n\n### 4.2 [ClassDefinition](https://angular.cn/docs/ts/latest/api/core/index/ClassDefinition-interface.html)\n为Class 声明一个接口\n\n### 4.3 组建装饰器[ComponentDecorator](https://angular.cn/docs/ts/latest/api/core/index/ComponentDecorator-interface.html)\n\n### 4.4 组建元数据工厂 [ComponentMetadataFactory](https://angular.cn/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html)\n用来创建注解和装饰器\n\n\n## 5. 类\n暂略\n\n## 6. 装饰器\n### 6.1 组件 [Component](https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html)\n\n### 6.2 指令 [Directive](https://angular.cn/docs/ts/latest/api/core/index/Directive-decorator.html)\n\n### 6.3 注入器 [Injectable](https://angular.cn/docs/ts/latest/api/core/index/Injectable-decorator.html)\n\n### 6.4 管道 [Pipe](https://angular.cn/docs/ts/latest/api/core/index/Pipe-decorator.html)\n","slug":"angular2_api_core","published":1,"updated":"2016-07-23T03:12:38.846Z","_id":"ciqw2ztwr00015gmc8clmyx08","comments":1,"layout":"post","photos":[],"link":"","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、常量类\"><a href=\"#一、常量类\" class=\"headerlink\" title=\"一、常量类\"></a>一、常量类</h2><h3 id=\"1-1-平台通用provider\"><a href=\"#1-1-平台通用provider\" class=\"headerlink\" title=\"1.1 平台通用provider\"></a>1.1 平台通用provider</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html\" target=\"_blank\" rel=\"external\">APPLICATION_COMMON_PROVIDERS</a><br>其中应包括在任何角度应用提供商的默认设置，不管是什么平台的运行上。</p>\n<h3 id=\"1-2-应用唯一标识符\"><a href=\"#1-2-应用唯一标识符\" class=\"headerlink\" title=\"1.2 应用唯一标识符\"></a>1.2 应用唯一标识符</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APP_ID-let.html\" target=\"_blank\" rel=\"external\">APP_ID</a><br>应用的唯一标识符，默认随机成。如果你需要避免随机生成的值用作应用程序ID，您可以提供通过DI提供商配置使用此令牌根注射器自定义值。</p>\n<h3 id=\"1-3-应用初始化\"><a href=\"#1-3-应用初始化\" class=\"headerlink\" title=\"1.3 应用初始化\"></a>1.3 应用初始化</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html\" target=\"_blank\" rel=\"external\">APP_INITIALIZER</a><br>当应用启动就会执行的方法</p>\n<h3 id=\"1-4-自动样式-AUTO-STYLE\"><a href=\"#1-4-自动样式-AUTO-STYLE\" class=\"headerlink\" title=\"1.4 自动样式 AUTO_STYLE\"></a>1.4 自动样式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/AUTO_STYLE-let.html\" target=\"_blank\" rel=\"external\">AUTO_STYLE</a></h3><p>暂时没有任何文档</p>\n<h3 id=\"1-5-属性Attribute\"><a href=\"#1-5-属性Attribute\" class=\"headerlink\" title=\"1.5 属性Attribute\"></a>1.5 属性<a href=\"https://angular.cn/docs/ts/latest/api/core/index/Attribute-var.html\" target=\"_blank\" rel=\"external\">Attribute</a></h3><p>假设我们有一个input框，我们想知道它的类型，我们可以写一个指令</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'input'</span>&#125;)</span><br><span class=\"line\">class InputAttrDirective &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">constructor</span>(<span class=\"variable\">@Attribute</span>(<span class=\"string\">'type'</span>) <span class=\"attribute\">type</span>: string) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// type would be 'text' in this example</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-6-子内容ContentChild\"><a href=\"#1-6-子内容ContentChild\" class=\"headerlink\" title=\"1.6 子内容ContentChild\"></a>1.6 子内容<a href=\"https://angular.cn/docs/ts/latest/api/core/index/ContentChild-var.html\" target=\"_blank\" rel=\"external\">ContentChild</a></h3><p>配置内容查询</p>\n<h3 id=\"1-7-子内容列表-ContentChildren\"><a href=\"#1-7-子内容列表-ContentChildren\" class=\"headerlink\" title=\"1.7 子内容列表 ContentChildren\"></a>1.7 子内容列表 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ContentChildren-var.html\" target=\"_blank\" rel=\"external\">ContentChildren</a></h3><p>配置内容查询的集合</p>\n<h3 id=\"1-8-主机-Host\"><a href=\"#1-8-主机-Host\" class=\"headerlink\" title=\"1.8  主机 Host\"></a>1.8  主机 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Host-var.html\" target=\"_blank\" rel=\"external\">Host</a></h3><p>具体作用不明</p>\n<h3 id=\"1-9-主机绑定-HostBinding\"><a href=\"#1-9-主机绑定-HostBinding\" class=\"headerlink\" title=\"1.9 主机绑定 HostBinding\"></a>1.9 主机绑定 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/HostBinding-var.html\" target=\"_blank\" rel=\"external\">HostBinding</a></h3><p>声明主机属性绑定。HostBindingMetadata采用指定主机元素将被更新的属性名的可选参数。如果没有提供，则使用类属性的名称。</p>\n<p>下面的示例创建一个指令，设置在其上有ngModel指令的DOM元素的有效和无效的类。class属性中的valid和invlid控制</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'[ngModel]'</span>&#125;)</span><br><span class=\"line\">class NgModelStatus &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">constructor</span>(public <span class=\"attribute\">control</span>:NgModel) &#123;&#125;</span><br><span class=\"line\">  <span class=\"variable\">@HostBinding</span>(<span class=\"string\">'class.valid'</span>) get valid() &#123; return this<span class=\"selector-class\">.control</span><span class=\"selector-class\">.valid</span>; &#125;</span><br><span class=\"line\">  <span class=\"variable\">@HostBinding</span>(<span class=\"string\">'class.invalid'</span>) get invalid() &#123; return this<span class=\"selector-class\">.control</span><span class=\"selector-class\">.invalid</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"built_in\">`&lt;input [(ngModel)]=\"prop\"&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attribute\">directives</span>: [FORM_DIRECTIVES, NgModelStatus]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class App &#123;</span><br><span class=\"line\">  prop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(App);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-10-主机监听-HostListener\"><a href=\"#1-10-主机监听-HostListener\" class=\"headerlink\" title=\"1.10 主机监听 HostListener\"></a>1.10 主机监听 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/HostListener-var.html\" target=\"_blank\" rel=\"external\">HostListener</a></h3><p>声明主机监听。当主机元件发出指定的事件角将调用的方法装饰。 如果该装饰方法返回假，则的preventDefault施加在DOM事件。</p>\n<p>下面的示例表示监听点击事件并计数。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'button[counting]'</span>&#125;)</span><br><span class=\"line\">class CountClicks &#123;</span><br><span class=\"line\">  numberOfClicks = 0;</span><br><span class=\"line\">  <span class=\"variable\">@HostListener</span>(<span class=\"string\">'click'</span>, [<span class=\"string\">'$event.target'</span>])</span><br><span class=\"line\">  onClick(btn) &#123;</span><br><span class=\"line\">    console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"button\"</span>, btn, <span class=\"string\">\"number of clicks:\"</span>, this.numberOfClicks++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"built_in\">`&lt;button counting&gt;增加&lt;/button&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attribute\">directives</span>: [CountClicks]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class App &#123;&#125;</span><br><span class=\"line\">bootstrap(App);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-11-注入-Inject\"><a href=\"#1-11-注入-Inject\" class=\"headerlink\" title=\"1.11 注入 Inject\"></a>1.11 注入 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/InjectMetadata-class.html\" target=\"_blank\" rel=\"external\">Inject</a></h3><p>当@Inject不存在的时候，注入器会采用参数的注解。意思就是说 在class上写 @Injectable()和在构造函数中写@Inject作用是一样的。</p>\n<h3 id=\"1-12-Input\"><a href=\"#1-12-Input\" class=\"headerlink\" title=\"1.12 Input\"></a>1.12 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Input-var.html\" target=\"_blank\" rel=\"external\">Input</a></h3><p>声明一个数据绑定的输入特性。用于组件之间的通讯。</p>\n<h3 id=\"1-13-可选-Optional\"><a href=\"#1-13-可选-Optional\" class=\"headerlink\" title=\"1.13 可选 Optional\"></a>1.13 可选 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Optional-var.html\" target=\"_blank\" rel=\"external\">Optional</a></h3><p>在构造函数中创建实例的时候加上@Optional代码可选内容，传不传参都不会报错</p>\n<h3 id=\"1-14-输出-Output\"><a href=\"#1-14-输出-Output\" class=\"headerlink\" title=\"1.14 输出 Output\"></a>1.14 输出 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Output-var.html\" target=\"_blank\" rel=\"external\">Output</a></h3><p>自定义事件，用于交互。</p>\n<h3 id=\"1-16-包根路径-PACKAGE-ROOT-URL\"><a href=\"#1-16-包根路径-PACKAGE-ROOT-URL\" class=\"headerlink\" title=\"1.16 包根路径 PACKAGE_ROOT_URL\"></a>1.16 包根路径 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html\" target=\"_blank\" rel=\"external\">PACKAGE_ROOT_URL</a></h3><p>表明应用程序的根目录</p>\n<h3 id=\"1-17-平台公共提供者-PLATFORM-COMMON-PROVIDERS\"><a href=\"#1-17-平台公共提供者-PLATFORM-COMMON-PROVIDERS\" class=\"headerlink\" title=\"1.17 平台公共提供者 PLATFORM_COMMON_PROVIDERS\"></a>1.17 平台公共提供者 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html\" target=\"_blank\" rel=\"external\">PLATFORM_COMMON_PROVIDERS</a></h3><p>供应商的默认设置应该被包含在任何angular平台</p>\n<h3 id=\"1-18-平台初始化-PLATFORM-INITIALIZER\"><a href=\"#1-18-平台初始化-PLATFORM-INITIALIZER\" class=\"headerlink\" title=\"1.18 平台初始化 PLATFORM_INITIALIZER\"></a>1.18 平台初始化 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html\" target=\"_blank\" rel=\"external\">PLATFORM_INITIALIZER</a></h3><p>当一个平台初始化将要执行的功能。</p>\n<h3 id=\"1-19-平台管道-PLATFORM-PIPES\"><a href=\"#1-19-平台管道-PLATFORM-PIPES\" class=\"headerlink\" title=\"1.19 平台管道 PLATFORM_PIPES\"></a>1.19 平台管道 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html\" target=\"_blank\" rel=\"external\">PLATFORM_PIPES</a></h3><p>可以为应用的每个组件提供一个启动程序时让一个管道数组可用的令牌。</p>\n<h3 id=\"1-20-查询-Query\"><a href=\"#1-20-查询-Query\" class=\"headerlink\" title=\"1.20 查询 Query\"></a>1.20 查询 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Query-var.html\" target=\"_blank\" rel=\"external\">Query</a></h3><p>查询可以通过传递与所需结合符号的字符串寻找变量绑定。在这种情况下，被注入的对象依赖于可变结合的类型。它可以是一个ElementRef，一个指令或组件</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;seeker&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"comment\">#findMe&gt;...&lt;/div&gt;</span></span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"comment\">#findMeToo&gt;...&lt;/div&gt;</span></span><br><span class=\"line\">&lt;/seeker&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> @<span class=\"type\">Component</span>(&#123;</span><br><span class=\"line\">  selector: 'seeker'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class <span class=\"type\">Seeker</span> &#123;</span><br><span class=\"line\">  constructor(@<span class=\"type\">Query</span>('findMe, findMeToo') elList: <span class=\"type\">QueryList</span>&lt;<span class=\"type\">ElementRef</span>&gt;) <span class=\"meta\">&#123;...&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-21-自己-Self\"><a href=\"#1-21-自己-Self\" class=\"headerlink\" title=\"1.21 自己 Self\"></a>1.21 自己 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Self-var.html\" target=\"_blank\" rel=\"external\">Self</a></h3><p>SelfMetadataFactory类型。</p>\n<h3 id=\"1-22-SkipSelf\"><a href=\"#1-22-SkipSelf\" class=\"headerlink\" title=\"1.22 SkipSelf\"></a>1.22 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/SkipSelf-var.html\" target=\"_blank\" rel=\"external\">SkipSelf</a></h3><p>暂不明确</p>\n<h3 id=\"1-23-子视图-ViewChild\"><a href=\"#1-23-子视图-ViewChild\" class=\"headerlink\" title=\"1.23 子视图 ViewChild\"></a>1.23 子视图 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewChild-var.html\" target=\"_blank\" rel=\"external\">ViewChild</a></h3><p>ViewChildMetadataFactory类型  作用尚不明确</p>\n<h3 id=\"1-24-子视图列表-ViewChildren\"><a href=\"#1-24-子视图列表-ViewChildren\" class=\"headerlink\" title=\"1.24 子视图列表 ViewChildren\"></a>1.24 子视图列表 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewChildren-var.html\" target=\"_blank\" rel=\"external\">ViewChildren</a></h3><p>ViewChildrenMetadataFactory类型  作用尚不明确</p>\n<h3 id=\"1-25-创建跟踪范围-wtfCreateScope\"><a href=\"#1-25-创建跟踪范围-wtfCreateScope\" class=\"headerlink\" title=\"1.25 创建跟踪范围 wtfCreateScope\"></a>1.25 创建跟踪范围 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfCreateScope-var.html\" target=\"_blank\" rel=\"external\">wtfCreateScope</a></h3><p>作用域必须严格嵌套和类似于堆栈帧，但不必遵循堆栈帧。相反，我们建议他们遵循的逻辑嵌套。您可能需要像在WTF中定义的那样使用事件签名。</p>\n<h3 id=\"1-26-结束时间范围wtfEndTimeRange\"><a href=\"#1-26-结束时间范围wtfEndTimeRange\" class=\"headerlink\" title=\"1.26 结束时间范围wtfEndTimeRange\"></a>1.26 结束时间范围<a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html\" target=\"_blank\" rel=\"external\">wtfEndTimeRange</a></h3><p>暂无文档</p>\n<h3 id=\"1-27-wtfLeave\"><a href=\"#1-27-wtfLeave\" class=\"headerlink\" title=\"1.27 wtfLeave\"></a>1.27 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfLeave-var.html\" target=\"_blank\" rel=\"external\">wtfLeave</a></h3><p>用于标记范围的结束</p>\n<h3 id=\"1-28-开始时间范围-wtfStartTimeRange\"><a href=\"#1-28-开始时间范围-wtfStartTimeRange\" class=\"headerlink\" title=\"1.28 开始时间范围 wtfStartTimeRange\"></a>1.28 开始时间范围 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html\" target=\"_blank\" rel=\"external\">wtfStartTimeRange</a></h3><p>用来标记异步启动。异步类似于范围，但它们不必须严格嵌套。返回值是在调用[endAsync]使用。如果WTF已启用异步范围只工作。</p>\n<h2 id=\"2-枚举类型\"><a href=\"#2-枚举类型\" class=\"headerlink\" title=\"2. 枚举类型\"></a>2. 枚举类型</h2><h3 id=\"2-1-改变发现策略-ChangeDetectionStrategy\"><a href=\"#2-1-改变发现策略-ChangeDetectionStrategy\" class=\"headerlink\" title=\"2.1 改变发现策略 ChangeDetectionStrategy\"></a>2.1 改变发现策略 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html\" target=\"_blank\" rel=\"external\">ChangeDetectionStrategy</a></h3><p>有OnPush、Default两个选项， OnPush会在水化期间将模式设置为 CheckOnce ,Default会将模式设置为CheckAlways</p>\n<h3 id=\"2-1-ViewEncapsulation\"><a href=\"#2-1-ViewEncapsulation\" class=\"headerlink\" title=\"2.1 ViewEncapsulation\"></a>2.1 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html\" target=\"_blank\" rel=\"external\">ViewEncapsulation</a></h3><p>定义可用的组件的视图模板和样式的封装选项。有Emulated、Native、None三个选项</p>\n<h2 id=\"3-方法类\"><a href=\"#3-方法类\" class=\"headerlink\" title=\"3. 方法类\"></a>3. 方法类</h2><h3 id=\"3-1-类-Class\"><a href=\"#3-1-类-Class\" class=\"headerlink\" title=\"3.1 类 Class\"></a>3.1 类 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Class-function.html\" target=\"_blank\" rel=\"external\">Class</a></h3><p>提供了一个在es5中写Class的方法，用typescipt的话我不想不出它存在的意义在哪。</p>\n<h3 id=\"3-2-动画-animate\"><a href=\"#3-2-动画-animate\" class=\"headerlink\" title=\"3.2 动画 animate\"></a>3.2 动画 <a href=\"https://angular.cn/docs/ts/latest/api/#!?apiType=Function\" target=\"_blank\" rel=\"external\">animate</a></h3><p>接收两个参数 ：延时和样式  animate(延时,style(…))</p>\n<h3 id=\"3-3-作为原生元素asNativeElements\"><a href=\"#3-3-作为原生元素asNativeElements\" class=\"headerlink\" title=\"3.3 作为原生元素asNativeElements\"></a>3.3 作为原生元素<a href=\"https://angular.cn/docs/ts/latest/api/core/index/asNativeElements-function.html\" target=\"_blank\" rel=\"external\">asNativeElements</a></h3><p>暂无资料</p>\n<h3 id=\"3-4-平台断言-assertPlatform\"><a href=\"#3-4-平台断言-assertPlatform\" class=\"headerlink\" title=\"3.4 平台断言 assertPlatform\"></a>3.4 平台断言 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/assertPlatform-function.html\" target=\"_blank\" rel=\"external\">assertPlatform</a></h3><p>检查是否存在目前是包含给定令牌作为一个供应商的平台。</p>\n<h3 id=\"3-5-核心启动器-coreBootstrap\"><a href=\"#3-5-核心启动器-coreBootstrap\" class=\"headerlink\" title=\"3.5 核心启动器 coreBootstrap\"></a>3.5 核心启动器 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/coreBootstrap-function.html\" target=\"_blank\" rel=\"external\">coreBootstrap</a></h3><p>ApplicationRef.bootstrap的快捷方式。需要先创建一个平台。</p>\n<h3 id=\"3-6-核心载入和启动工具-coreLoadAndBootstrap\"><a href=\"#3-6-核心载入和启动工具-coreLoadAndBootstrap\" class=\"headerlink\" title=\"3.6 核心载入和启动工具 coreLoadAndBootstrap\"></a>3.6 核心载入和启动工具 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html\" target=\"_blank\" rel=\"external\">coreLoadAndBootstrap</a></h3><p>解析给定组件的componentFactory，等待异步初始化和引导程序的组件。需要先创建一个平台。</p>\n<h3 id=\"3-7-创建ng空间-createNgZone\"><a href=\"#3-7-创建ng空间-createNgZone\" class=\"headerlink\" title=\"3.7 创建ng空间 createNgZone\"></a>3.7 创建ng空间 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/createNgZone-function.html\" target=\"_blank\" rel=\"external\">createNgZone</a></h3><p>创建一个angular的空间。</p>\n<h3 id=\"3-8-创建平台-createPlatform\"><a href=\"#3-8-创建平台-createPlatform\" class=\"headerlink\" title=\"3.8 创建平台 createPlatform\"></a>3.8 创建平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/createPlatform-function.html\" target=\"_blank\" rel=\"external\">createPlatform</a></h3><p>创建了一个平台。平台已经通过这个功能来创建热切。</p>\n<h3 id=\"3-9-处置平台-disposePlatform\"><a href=\"#3-9-处置平台-disposePlatform\" class=\"headerlink\" title=\"3.9 处置平台 disposePlatform\"></a>3.9 处置平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/disposePlatform-function.html\" target=\"_blank\" rel=\"external\">disposePlatform</a></h3><p>处置一个现有的平台</p>\n<h3 id=\"3-10-enableProdMode\"><a href=\"#3-10-enableProdMode\" class=\"headerlink\" title=\"3.10 enableProdMode\"></a>3.10 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/enableProdMode-function.html\" target=\"_blank\" rel=\"external\">enableProdMode</a></h3><p>禁用angular的开发模式，从而关闭断言和其他检查的范围。这种禁用一个重要断言验证一个变化检测通不会导致任何绑定（也称为单向数据流）的附加的变化。</p>\n<h3 id=\"3-11-指向forwardRef\"><a href=\"#3-11-指向forwardRef\" class=\"headerlink\" title=\"3.11  指向forwardRef\"></a>3.11  指向<a href=\"https://angular.cn/docs/ts/latest/api/core/index/forwardRef-function.html\" target=\"_blank\" rel=\"external\">forwardRef</a></h3><p>允许指向那些尚未定义的对象。例如，当这是我们需要参考为DI的目的令牌被声明，forwardRef被使用，但还没有定义。我们创建查询时所使用的令牌时，它也被使用。</p>\n<h3 id=\"3-12-获取Debug模式-getDebugNode\"><a href=\"#3-12-获取Debug模式-getDebugNode\" class=\"headerlink\" title=\"3.12 获取Debug模式 getDebugNode\"></a>3.12 获取Debug模式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/getDebugNode-function.html\" target=\"_blank\" rel=\"external\">getDebugNode</a></h3><p>暂无说明</p>\n<h3 id=\"3-13-获取平台-getPlatform\"><a href=\"#3-13-获取平台-getPlatform\" class=\"headerlink\" title=\"3.13 获取平台 getPlatform\"></a>3.13 获取平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/getPlatform-function.html\" target=\"_blank\" rel=\"external\">getPlatform</a></h3><p>返回当前使用的平台</p>\n<h3 id=\"3-14-组-group\"><a href=\"#3-14-组-group\" class=\"headerlink\" title=\"3.14 组 group\"></a>3.14 组 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/group-function.html\" target=\"_blank\" rel=\"external\">group</a></h3><p>group(steps: AnimationMetadata[]) 接收一个animate数组</p>\n<h3 id=\"3-15-是否是开发模式-isDevMode\"><a href=\"#3-15-是否是开发模式-isDevMode\" class=\"headerlink\" title=\"3.15 是否是开发模式 isDevMode\"></a>3.15 是否是开发模式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/isDevMode-function.html\" target=\"_blank\" rel=\"external\">isDevMode</a></h3><p>返回一个布尔值，判断是否是开发模式。</p>\n<h3 id=\"3-16-动画框架-keyframes\"><a href=\"#3-16-动画框架-keyframes\" class=\"headerlink\" title=\"3.16 动画框架 keyframes\"></a>3.16 动画框架 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/keyframes-function.html\" target=\"_blank\" rel=\"external\">keyframes</a></h3><p>animate的第二个参数可以用一个keyframes</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animate</span>(<span class=\"string\">\"5s\"</span>, keyframes([</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">backgroundColor</span>: <span class=\"string\">\"red\"</span>, <span class=\"attribute\">offset</span>: <span class=\"number\">0</span> &#125;),</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">backgroundColor</span>: <span class=\"string\">\"blue\"</span>, <span class=\"attribute\">offset</span>: <span class=\"number\">0.2</span> &#125;),</span><br><span class=\"line\">]))</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-16-锁定运行模式lockRunMode\"><a href=\"#3-16-锁定运行模式lockRunMode\" class=\"headerlink\" title=\"3.16 锁定运行模式lockRunMode\"></a>3.16 锁定运行模式<a href=\"https://angular.cn/docs/ts/latest/api/core/index/lockRunMode-function.html\" target=\"_blank\" rel=\"external\">lockRunMode</a></h3><p>暂无说明</p>\n<h3 id=\"3-17-解决面向指向-resolveForwardRef\"><a href=\"#3-17-解决面向指向-resolveForwardRef\" class=\"headerlink\" title=\"3.17 解决面向指向 resolveForwardRef\"></a>3.17 解决面向指向 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/resolveForwardRef-function.html\" target=\"_blank\" rel=\"external\">resolveForwardRef</a></h3><p>暂无说明</p>\n<h3 id=\"3-18-顺序-sequence\"><a href=\"#3-18-顺序-sequence\" class=\"headerlink\" title=\"3.18 顺序 sequence\"></a>3.18 顺序 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/sequence-function.html\" target=\"_blank\" rel=\"external\">sequence</a></h3><p>接收一个动画数组 steps: AnimationMetadata[]</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sequence</span>([</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span> &#125;)),</span><br><span class=\"line\">  <span class=\"selector-tag\">animate</span>(<span class=\"string\">\"1s\"</span>, &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span> &#125;))</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-19-设置测试能力获取-setTestabilityGetter\"><a href=\"#3-19-设置测试能力获取-setTestabilityGetter\" class=\"headerlink\" title=\"3.19 设置测试能力获取 setTestabilityGetter\"></a>3.19 设置测试能力获取 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/setTestabilityGetter-function.html\" target=\"_blank\" rel=\"external\">setTestabilityGetter</a></h3><p>用于设置测试框架</p>\n<h3 id=\"3-20-状态-state\"><a href=\"#3-20-状态-state\" class=\"headerlink\" title=\"3.20 状态 state\"></a>3.20 状态 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/state-function.html\" target=\"_blank\" rel=\"external\">state</a></h3><p>动画相关 export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata 接受 状态 和样式两个参数，返回动画样式。</p>\n<h3 id=\"3-21-转换-transition\"><a href=\"#3-21-转换-transition\" class=\"headerlink\" title=\"3.21 转换 transition\"></a>3.21 转换 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/transition-function.html\" target=\"_blank\" rel=\"external\">transition</a></h3><p>动画相关</p>\n<h3 id=\"3-22-tigger\"><a href=\"#3-22-tigger\" class=\"headerlink\" title=\"3.22 tigger\"></a>3.22 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/trigger-function.html\" target=\"_blank\" rel=\"external\">tigger</a></h3><p>动画相关</p>\n<h2 id=\"4-接口类\"><a href=\"#4-接口类\" class=\"headerlink\" title=\"4. 接口类\"></a>4. 接口类</h2><h3 id=\"4-1-属性元数据工厂AttributeMetadataFactory\"><a href=\"#4-1-属性元数据工厂AttributeMetadataFactory\" class=\"headerlink\" title=\"4.1 属性元数据工厂AttributeMetadataFactory\"></a>4.1 属性元数据工厂<a href=\"https://angular.cn/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html\" target=\"_blank\" rel=\"external\">AttributeMetadataFactory</a></h3><p>用来创建注解和装饰器</p>\n<h3 id=\"4-2-ClassDefinition\"><a href=\"#4-2-ClassDefinition\" class=\"headerlink\" title=\"4.2 ClassDefinition\"></a>4.2 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ClassDefinition-interface.html\" target=\"_blank\" rel=\"external\">ClassDefinition</a></h3><p>为Class 声明一个接口</p>\n<h3 id=\"4-3-组建装饰器ComponentDecorator\"><a href=\"#4-3-组建装饰器ComponentDecorator\" class=\"headerlink\" title=\"4.3 组建装饰器ComponentDecorator\"></a>4.3 组建装饰器<a href=\"https://angular.cn/docs/ts/latest/api/core/index/ComponentDecorator-interface.html\" target=\"_blank\" rel=\"external\">ComponentDecorator</a></h3><h3 id=\"4-4-组建元数据工厂-ComponentMetadataFactory\"><a href=\"#4-4-组建元数据工厂-ComponentMetadataFactory\" class=\"headerlink\" title=\"4.4 组建元数据工厂 ComponentMetadataFactory\"></a>4.4 组建元数据工厂 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html\" target=\"_blank\" rel=\"external\">ComponentMetadataFactory</a></h3><p>用来创建注解和装饰器</p>\n<h2 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5. 类\"></a>5. 类</h2><p>暂略</p>\n<h2 id=\"6-装饰器\"><a href=\"#6-装饰器\" class=\"headerlink\" title=\"6. 装饰器\"></a>6. 装饰器</h2><h3 id=\"6-1-组件-Component\"><a href=\"#6-1-组件-Component\" class=\"headerlink\" title=\"6.1 组件 Component\"></a>6.1 组件 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html\" target=\"_blank\" rel=\"external\">Component</a></h3><h3 id=\"6-2-指令-Directive\"><a href=\"#6-2-指令-Directive\" class=\"headerlink\" title=\"6.2 指令 Directive\"></a>6.2 指令 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Directive-decorator.html\" target=\"_blank\" rel=\"external\">Directive</a></h3><h3 id=\"6-3-注入器-Injectable\"><a href=\"#6-3-注入器-Injectable\" class=\"headerlink\" title=\"6.3 注入器 Injectable\"></a>6.3 注入器 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Injectable-decorator.html\" target=\"_blank\" rel=\"external\">Injectable</a></h3><h3 id=\"6-4-管道-Pipe\"><a href=\"#6-4-管道-Pipe\" class=\"headerlink\" title=\"6.4 管道 Pipe\"></a>6.4 管道 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Pipe-decorator.html\" target=\"_blank\" rel=\"external\">Pipe</a></h3>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、常量类\"><a href=\"#一、常量类\" class=\"headerlink\" title=\"一、常量类\"></a>一、常量类</h2><h3 id=\"1-1-平台通用provider\"><a href=\"#1-1-平台通用provider\" class=\"headerlink\" title=\"1.1 平台通用provider\"></a>1.1 平台通用provider</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html\">APPLICATION_COMMON_PROVIDERS</a><br>其中应包括在任何角度应用提供商的默认设置，不管是什么平台的运行上。</p>\n<h3 id=\"1-2-应用唯一标识符\"><a href=\"#1-2-应用唯一标识符\" class=\"headerlink\" title=\"1.2 应用唯一标识符\"></a>1.2 应用唯一标识符</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APP_ID-let.html\">APP_ID</a><br>应用的唯一标识符，默认随机成。如果你需要避免随机生成的值用作应用程序ID，您可以提供通过DI提供商配置使用此令牌根注射器自定义值。</p>\n<h3 id=\"1-3-应用初始化\"><a href=\"#1-3-应用初始化\" class=\"headerlink\" title=\"1.3 应用初始化\"></a>1.3 应用初始化</h3><p><a href=\"https://angular.cn/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html\">APP_INITIALIZER</a><br>当应用启动就会执行的方法</p>\n<h3 id=\"1-4-自动样式-AUTO-STYLE\"><a href=\"#1-4-自动样式-AUTO-STYLE\" class=\"headerlink\" title=\"1.4 自动样式 AUTO_STYLE\"></a>1.4 自动样式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/AUTO_STYLE-let.html\">AUTO_STYLE</a></h3><p>暂时没有任何文档</p>\n<h3 id=\"1-5-属性Attribute\"><a href=\"#1-5-属性Attribute\" class=\"headerlink\" title=\"1.5 属性Attribute\"></a>1.5 属性<a href=\"https://angular.cn/docs/ts/latest/api/core/index/Attribute-var.html\">Attribute</a></h3><p>假设我们有一个input框，我们想知道它的类型，我们可以写一个指令</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'input'</span>&#125;)</span><br><span class=\"line\">class InputAttrDirective &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">constructor</span>(<span class=\"variable\">@Attribute</span>(<span class=\"string\">'type'</span>) <span class=\"attribute\">type</span>: string) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// type would be 'text' in this example</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-6-子内容ContentChild\"><a href=\"#1-6-子内容ContentChild\" class=\"headerlink\" title=\"1.6 子内容ContentChild\"></a>1.6 子内容<a href=\"https://angular.cn/docs/ts/latest/api/core/index/ContentChild-var.html\">ContentChild</a></h3><p>配置内容查询</p>\n<h3 id=\"1-7-子内容列表-ContentChildren\"><a href=\"#1-7-子内容列表-ContentChildren\" class=\"headerlink\" title=\"1.7 子内容列表 ContentChildren\"></a>1.7 子内容列表 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ContentChildren-var.html\">ContentChildren</a></h3><p>配置内容查询的集合</p>\n<h3 id=\"1-8-主机-Host\"><a href=\"#1-8-主机-Host\" class=\"headerlink\" title=\"1.8  主机 Host\"></a>1.8  主机 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Host-var.html\">Host</a></h3><p>具体作用不明</p>\n<h3 id=\"1-9-主机绑定-HostBinding\"><a href=\"#1-9-主机绑定-HostBinding\" class=\"headerlink\" title=\"1.9 主机绑定 HostBinding\"></a>1.9 主机绑定 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/HostBinding-var.html\">HostBinding</a></h3><p>声明主机属性绑定。HostBindingMetadata采用指定主机元素将被更新的属性名的可选参数。如果没有提供，则使用类属性的名称。</p>\n<p>下面的示例创建一个指令，设置在其上有ngModel指令的DOM元素的有效和无效的类。class属性中的valid和invlid控制</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'[ngModel]'</span>&#125;)</span><br><span class=\"line\">class NgModelStatus &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">constructor</span>(public <span class=\"attribute\">control</span>:NgModel) &#123;&#125;</span><br><span class=\"line\">  <span class=\"variable\">@HostBinding</span>(<span class=\"string\">'class.valid'</span>) get valid() &#123; return this<span class=\"selector-class\">.control</span><span class=\"selector-class\">.valid</span>; &#125;</span><br><span class=\"line\">  <span class=\"variable\">@HostBinding</span>(<span class=\"string\">'class.invalid'</span>) get invalid() &#123; return this<span class=\"selector-class\">.control</span><span class=\"selector-class\">.invalid</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"built_in\">`&lt;input [(ngModel)]=\"prop\"&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attribute\">directives</span>: [FORM_DIRECTIVES, NgModelStatus]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class App &#123;</span><br><span class=\"line\">  prop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(App);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-10-主机监听-HostListener\"><a href=\"#1-10-主机监听-HostListener\" class=\"headerlink\" title=\"1.10 主机监听 HostListener\"></a>1.10 主机监听 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/HostListener-var.html\">HostListener</a></h3><p>声明主机监听。当主机元件发出指定的事件角将调用的方法装饰。 如果该装饰方法返回假，则的preventDefault施加在DOM事件。</p>\n<p>下面的示例表示监听点击事件并计数。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Directive</span>(&#123;<span class=\"attribute\">selector</span>: <span class=\"string\">'button[counting]'</span>&#125;)</span><br><span class=\"line\">class CountClicks &#123;</span><br><span class=\"line\">  numberOfClicks = 0;</span><br><span class=\"line\">  <span class=\"variable\">@HostListener</span>(<span class=\"string\">'click'</span>, [<span class=\"string\">'$event.target'</span>])</span><br><span class=\"line\">  onClick(btn) &#123;</span><br><span class=\"line\">    console<span class=\"selector-class\">.log</span>(<span class=\"string\">\"button\"</span>, btn, <span class=\"string\">\"number of clicks:\"</span>, this.numberOfClicks++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">@Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">selector</span>: <span class=\"string\">'app'</span>,</span><br><span class=\"line\">  <span class=\"attribute\">template</span>: <span class=\"built_in\">`&lt;button counting&gt;增加&lt;/button&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attribute\">directives</span>: [CountClicks]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class App &#123;&#125;</span><br><span class=\"line\">bootstrap(App);</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-11-注入-Inject\"><a href=\"#1-11-注入-Inject\" class=\"headerlink\" title=\"1.11 注入 Inject\"></a>1.11 注入 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/InjectMetadata-class.html\">Inject</a></h3><p>当@Inject不存在的时候，注入器会采用参数的注解。意思就是说 在class上写 @Injectable()和在构造函数中写@Inject作用是一样的。</p>\n<h3 id=\"1-12-Input\"><a href=\"#1-12-Input\" class=\"headerlink\" title=\"1.12 Input\"></a>1.12 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Input-var.html\">Input</a></h3><p>声明一个数据绑定的输入特性。用于组件之间的通讯。</p>\n<h3 id=\"1-13-可选-Optional\"><a href=\"#1-13-可选-Optional\" class=\"headerlink\" title=\"1.13 可选 Optional\"></a>1.13 可选 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Optional-var.html\">Optional</a></h3><p>在构造函数中创建实例的时候加上@Optional代码可选内容，传不传参都不会报错</p>\n<h3 id=\"1-14-输出-Output\"><a href=\"#1-14-输出-Output\" class=\"headerlink\" title=\"1.14 输出 Output\"></a>1.14 输出 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Output-var.html\">Output</a></h3><p>自定义事件，用于交互。</p>\n<h3 id=\"1-16-包根路径-PACKAGE-ROOT-URL\"><a href=\"#1-16-包根路径-PACKAGE-ROOT-URL\" class=\"headerlink\" title=\"1.16 包根路径 PACKAGE_ROOT_URL\"></a>1.16 包根路径 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html\">PACKAGE_ROOT_URL</a></h3><p>表明应用程序的根目录</p>\n<h3 id=\"1-17-平台公共提供者-PLATFORM-COMMON-PROVIDERS\"><a href=\"#1-17-平台公共提供者-PLATFORM-COMMON-PROVIDERS\" class=\"headerlink\" title=\"1.17 平台公共提供者 PLATFORM_COMMON_PROVIDERS\"></a>1.17 平台公共提供者 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html\">PLATFORM_COMMON_PROVIDERS</a></h3><p>供应商的默认设置应该被包含在任何angular平台</p>\n<h3 id=\"1-18-平台初始化-PLATFORM-INITIALIZER\"><a href=\"#1-18-平台初始化-PLATFORM-INITIALIZER\" class=\"headerlink\" title=\"1.18 平台初始化 PLATFORM_INITIALIZER\"></a>1.18 平台初始化 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html\">PLATFORM_INITIALIZER</a></h3><p>当一个平台初始化将要执行的功能。</p>\n<h3 id=\"1-19-平台管道-PLATFORM-PIPES\"><a href=\"#1-19-平台管道-PLATFORM-PIPES\" class=\"headerlink\" title=\"1.19 平台管道 PLATFORM_PIPES\"></a>1.19 平台管道 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html\">PLATFORM_PIPES</a></h3><p>可以为应用的每个组件提供一个启动程序时让一个管道数组可用的令牌。</p>\n<h3 id=\"1-20-查询-Query\"><a href=\"#1-20-查询-Query\" class=\"headerlink\" title=\"1.20 查询 Query\"></a>1.20 查询 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Query-var.html\">Query</a></h3><p>查询可以通过传递与所需结合符号的字符串寻找变量绑定。在这种情况下，被注入的对象依赖于可变结合的类型。它可以是一个ElementRef，一个指令或组件</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;seeker&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"comment\">#findMe&gt;...&lt;/div&gt;</span></span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"comment\">#findMeToo&gt;...&lt;/div&gt;</span></span><br><span class=\"line\">&lt;/seeker&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> @<span class=\"type\">Component</span>(&#123;</span><br><span class=\"line\">  selector: 'seeker'</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class <span class=\"type\">Seeker</span> &#123;</span><br><span class=\"line\">  constructor(@<span class=\"type\">Query</span>('findMe, findMeToo') elList: <span class=\"type\">QueryList</span>&lt;<span class=\"type\">ElementRef</span>&gt;) <span class=\"meta\">&#123;...&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-21-自己-Self\"><a href=\"#1-21-自己-Self\" class=\"headerlink\" title=\"1.21 自己 Self\"></a>1.21 自己 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Self-var.html\">Self</a></h3><p>SelfMetadataFactory类型。</p>\n<h3 id=\"1-22-SkipSelf\"><a href=\"#1-22-SkipSelf\" class=\"headerlink\" title=\"1.22 SkipSelf\"></a>1.22 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/SkipSelf-var.html\">SkipSelf</a></h3><p>暂不明确</p>\n<h3 id=\"1-23-子视图-ViewChild\"><a href=\"#1-23-子视图-ViewChild\" class=\"headerlink\" title=\"1.23 子视图 ViewChild\"></a>1.23 子视图 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewChild-var.html\">ViewChild</a></h3><p>ViewChildMetadataFactory类型  作用尚不明确</p>\n<h3 id=\"1-24-子视图列表-ViewChildren\"><a href=\"#1-24-子视图列表-ViewChildren\" class=\"headerlink\" title=\"1.24 子视图列表 ViewChildren\"></a>1.24 子视图列表 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewChildren-var.html\">ViewChildren</a></h3><p>ViewChildrenMetadataFactory类型  作用尚不明确</p>\n<h3 id=\"1-25-创建跟踪范围-wtfCreateScope\"><a href=\"#1-25-创建跟踪范围-wtfCreateScope\" class=\"headerlink\" title=\"1.25 创建跟踪范围 wtfCreateScope\"></a>1.25 创建跟踪范围 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfCreateScope-var.html\">wtfCreateScope</a></h3><p>作用域必须严格嵌套和类似于堆栈帧，但不必遵循堆栈帧。相反，我们建议他们遵循的逻辑嵌套。您可能需要像在WTF中定义的那样使用事件签名。</p>\n<h3 id=\"1-26-结束时间范围wtfEndTimeRange\"><a href=\"#1-26-结束时间范围wtfEndTimeRange\" class=\"headerlink\" title=\"1.26 结束时间范围wtfEndTimeRange\"></a>1.26 结束时间范围<a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html\">wtfEndTimeRange</a></h3><p>暂无文档</p>\n<h3 id=\"1-27-wtfLeave\"><a href=\"#1-27-wtfLeave\" class=\"headerlink\" title=\"1.27 wtfLeave\"></a>1.27 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfLeave-var.html\">wtfLeave</a></h3><p>用于标记范围的结束</p>\n<h3 id=\"1-28-开始时间范围-wtfStartTimeRange\"><a href=\"#1-28-开始时间范围-wtfStartTimeRange\" class=\"headerlink\" title=\"1.28 开始时间范围 wtfStartTimeRange\"></a>1.28 开始时间范围 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html\">wtfStartTimeRange</a></h3><p>用来标记异步启动。异步类似于范围，但它们不必须严格嵌套。返回值是在调用[endAsync]使用。如果WTF已启用异步范围只工作。</p>\n<h2 id=\"2-枚举类型\"><a href=\"#2-枚举类型\" class=\"headerlink\" title=\"2. 枚举类型\"></a>2. 枚举类型</h2><h3 id=\"2-1-改变发现策略-ChangeDetectionStrategy\"><a href=\"#2-1-改变发现策略-ChangeDetectionStrategy\" class=\"headerlink\" title=\"2.1 改变发现策略 ChangeDetectionStrategy\"></a>2.1 改变发现策略 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html\">ChangeDetectionStrategy</a></h3><p>有OnPush、Default两个选项， OnPush会在水化期间将模式设置为 CheckOnce ,Default会将模式设置为CheckAlways</p>\n<h3 id=\"2-1-ViewEncapsulation\"><a href=\"#2-1-ViewEncapsulation\" class=\"headerlink\" title=\"2.1 ViewEncapsulation\"></a>2.1 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html\">ViewEncapsulation</a></h3><p>定义可用的组件的视图模板和样式的封装选项。有Emulated、Native、None三个选项</p>\n<h2 id=\"3-方法类\"><a href=\"#3-方法类\" class=\"headerlink\" title=\"3. 方法类\"></a>3. 方法类</h2><h3 id=\"3-1-类-Class\"><a href=\"#3-1-类-Class\" class=\"headerlink\" title=\"3.1 类 Class\"></a>3.1 类 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Class-function.html\">Class</a></h3><p>提供了一个在es5中写Class的方法，用typescipt的话我不想不出它存在的意义在哪。</p>\n<h3 id=\"3-2-动画-animate\"><a href=\"#3-2-动画-animate\" class=\"headerlink\" title=\"3.2 动画 animate\"></a>3.2 动画 <a href=\"https://angular.cn/docs/ts/latest/api/#!?apiType=Function\">animate</a></h3><p>接收两个参数 ：延时和样式  animate(延时,style(…))</p>\n<h3 id=\"3-3-作为原生元素asNativeElements\"><a href=\"#3-3-作为原生元素asNativeElements\" class=\"headerlink\" title=\"3.3 作为原生元素asNativeElements\"></a>3.3 作为原生元素<a href=\"https://angular.cn/docs/ts/latest/api/core/index/asNativeElements-function.html\">asNativeElements</a></h3><p>暂无资料</p>\n<h3 id=\"3-4-平台断言-assertPlatform\"><a href=\"#3-4-平台断言-assertPlatform\" class=\"headerlink\" title=\"3.4 平台断言 assertPlatform\"></a>3.4 平台断言 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/assertPlatform-function.html\">assertPlatform</a></h3><p>检查是否存在目前是包含给定令牌作为一个供应商的平台。</p>\n<h3 id=\"3-5-核心启动器-coreBootstrap\"><a href=\"#3-5-核心启动器-coreBootstrap\" class=\"headerlink\" title=\"3.5 核心启动器 coreBootstrap\"></a>3.5 核心启动器 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/coreBootstrap-function.html\">coreBootstrap</a></h3><p>ApplicationRef.bootstrap的快捷方式。需要先创建一个平台。</p>\n<h3 id=\"3-6-核心载入和启动工具-coreLoadAndBootstrap\"><a href=\"#3-6-核心载入和启动工具-coreLoadAndBootstrap\" class=\"headerlink\" title=\"3.6 核心载入和启动工具 coreLoadAndBootstrap\"></a>3.6 核心载入和启动工具 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html\">coreLoadAndBootstrap</a></h3><p>解析给定组件的componentFactory，等待异步初始化和引导程序的组件。需要先创建一个平台。</p>\n<h3 id=\"3-7-创建ng空间-createNgZone\"><a href=\"#3-7-创建ng空间-createNgZone\" class=\"headerlink\" title=\"3.7 创建ng空间 createNgZone\"></a>3.7 创建ng空间 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/createNgZone-function.html\">createNgZone</a></h3><p>创建一个angular的空间。</p>\n<h3 id=\"3-8-创建平台-createPlatform\"><a href=\"#3-8-创建平台-createPlatform\" class=\"headerlink\" title=\"3.8 创建平台 createPlatform\"></a>3.8 创建平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/createPlatform-function.html\">createPlatform</a></h3><p>创建了一个平台。平台已经通过这个功能来创建热切。</p>\n<h3 id=\"3-9-处置平台-disposePlatform\"><a href=\"#3-9-处置平台-disposePlatform\" class=\"headerlink\" title=\"3.9 处置平台 disposePlatform\"></a>3.9 处置平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/disposePlatform-function.html\">disposePlatform</a></h3><p>处置一个现有的平台</p>\n<h3 id=\"3-10-enableProdMode\"><a href=\"#3-10-enableProdMode\" class=\"headerlink\" title=\"3.10 enableProdMode\"></a>3.10 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/enableProdMode-function.html\">enableProdMode</a></h3><p>禁用angular的开发模式，从而关闭断言和其他检查的范围。这种禁用一个重要断言验证一个变化检测通不会导致任何绑定（也称为单向数据流）的附加的变化。</p>\n<h3 id=\"3-11-指向forwardRef\"><a href=\"#3-11-指向forwardRef\" class=\"headerlink\" title=\"3.11  指向forwardRef\"></a>3.11  指向<a href=\"https://angular.cn/docs/ts/latest/api/core/index/forwardRef-function.html\">forwardRef</a></h3><p>允许指向那些尚未定义的对象。例如，当这是我们需要参考为DI的目的令牌被声明，forwardRef被使用，但还没有定义。我们创建查询时所使用的令牌时，它也被使用。</p>\n<h3 id=\"3-12-获取Debug模式-getDebugNode\"><a href=\"#3-12-获取Debug模式-getDebugNode\" class=\"headerlink\" title=\"3.12 获取Debug模式 getDebugNode\"></a>3.12 获取Debug模式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/getDebugNode-function.html\">getDebugNode</a></h3><p>暂无说明</p>\n<h3 id=\"3-13-获取平台-getPlatform\"><a href=\"#3-13-获取平台-getPlatform\" class=\"headerlink\" title=\"3.13 获取平台 getPlatform\"></a>3.13 获取平台 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/getPlatform-function.html\">getPlatform</a></h3><p>返回当前使用的平台</p>\n<h3 id=\"3-14-组-group\"><a href=\"#3-14-组-group\" class=\"headerlink\" title=\"3.14 组 group\"></a>3.14 组 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/group-function.html\">group</a></h3><p>group(steps: AnimationMetadata[]) 接收一个animate数组</p>\n<h3 id=\"3-15-是否是开发模式-isDevMode\"><a href=\"#3-15-是否是开发模式-isDevMode\" class=\"headerlink\" title=\"3.15 是否是开发模式 isDevMode\"></a>3.15 是否是开发模式 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/isDevMode-function.html\">isDevMode</a></h3><p>返回一个布尔值，判断是否是开发模式。</p>\n<h3 id=\"3-16-动画框架-keyframes\"><a href=\"#3-16-动画框架-keyframes\" class=\"headerlink\" title=\"3.16 动画框架 keyframes\"></a>3.16 动画框架 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/keyframes-function.html\">keyframes</a></h3><p>animate的第二个参数可以用一个keyframes</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animate</span>(<span class=\"string\">\"5s\"</span>, keyframes([</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">backgroundColor</span>: <span class=\"string\">\"red\"</span>, <span class=\"attribute\">offset</span>: <span class=\"number\">0</span> &#125;),</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">backgroundColor</span>: <span class=\"string\">\"blue\"</span>, <span class=\"attribute\">offset</span>: <span class=\"number\">0.2</span> &#125;),</span><br><span class=\"line\">]))</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-16-锁定运行模式lockRunMode\"><a href=\"#3-16-锁定运行模式lockRunMode\" class=\"headerlink\" title=\"3.16 锁定运行模式lockRunMode\"></a>3.16 锁定运行模式<a href=\"https://angular.cn/docs/ts/latest/api/core/index/lockRunMode-function.html\">lockRunMode</a></h3><p>暂无说明</p>\n<h3 id=\"3-17-解决面向指向-resolveForwardRef\"><a href=\"#3-17-解决面向指向-resolveForwardRef\" class=\"headerlink\" title=\"3.17 解决面向指向 resolveForwardRef\"></a>3.17 解决面向指向 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/resolveForwardRef-function.html\">resolveForwardRef</a></h3><p>暂无说明</p>\n<h3 id=\"3-18-顺序-sequence\"><a href=\"#3-18-顺序-sequence\" class=\"headerlink\" title=\"3.18 顺序 sequence\"></a>3.18 顺序 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/sequence-function.html\">sequence</a></h3><p>接收一个动画数组 steps: AnimationMetadata[]</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sequence</span>([</span><br><span class=\"line\">  style(&#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span> &#125;)),</span><br><span class=\"line\">  <span class=\"selector-tag\">animate</span>(<span class=\"string\">\"1s\"</span>, &#123; <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span> &#125;))</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-19-设置测试能力获取-setTestabilityGetter\"><a href=\"#3-19-设置测试能力获取-setTestabilityGetter\" class=\"headerlink\" title=\"3.19 设置测试能力获取 setTestabilityGetter\"></a>3.19 设置测试能力获取 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/setTestabilityGetter-function.html\">setTestabilityGetter</a></h3><p>用于设置测试框架</p>\n<h3 id=\"3-20-状态-state\"><a href=\"#3-20-状态-state\" class=\"headerlink\" title=\"3.20 状态 state\"></a>3.20 状态 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/state-function.html\">state</a></h3><p>动画相关 export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata 接受 状态 和样式两个参数，返回动画样式。</p>\n<h3 id=\"3-21-转换-transition\"><a href=\"#3-21-转换-transition\" class=\"headerlink\" title=\"3.21 转换 transition\"></a>3.21 转换 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/transition-function.html\">transition</a></h3><p>动画相关</p>\n<h3 id=\"3-22-tigger\"><a href=\"#3-22-tigger\" class=\"headerlink\" title=\"3.22 tigger\"></a>3.22 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/trigger-function.html\">tigger</a></h3><p>动画相关</p>\n<h2 id=\"4-接口类\"><a href=\"#4-接口类\" class=\"headerlink\" title=\"4. 接口类\"></a>4. 接口类</h2><h3 id=\"4-1-属性元数据工厂AttributeMetadataFactory\"><a href=\"#4-1-属性元数据工厂AttributeMetadataFactory\" class=\"headerlink\" title=\"4.1 属性元数据工厂AttributeMetadataFactory\"></a>4.1 属性元数据工厂<a href=\"https://angular.cn/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html\">AttributeMetadataFactory</a></h3><p>用来创建注解和装饰器</p>\n<h3 id=\"4-2-ClassDefinition\"><a href=\"#4-2-ClassDefinition\" class=\"headerlink\" title=\"4.2 ClassDefinition\"></a>4.2 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ClassDefinition-interface.html\">ClassDefinition</a></h3><p>为Class 声明一个接口</p>\n<h3 id=\"4-3-组建装饰器ComponentDecorator\"><a href=\"#4-3-组建装饰器ComponentDecorator\" class=\"headerlink\" title=\"4.3 组建装饰器ComponentDecorator\"></a>4.3 组建装饰器<a href=\"https://angular.cn/docs/ts/latest/api/core/index/ComponentDecorator-interface.html\">ComponentDecorator</a></h3><h3 id=\"4-4-组建元数据工厂-ComponentMetadataFactory\"><a href=\"#4-4-组建元数据工厂-ComponentMetadataFactory\" class=\"headerlink\" title=\"4.4 组建元数据工厂 ComponentMetadataFactory\"></a>4.4 组建元数据工厂 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html\">ComponentMetadataFactory</a></h3><p>用来创建注解和装饰器</p>\n<h2 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5. 类\"></a>5. 类</h2><p>暂略</p>\n<h2 id=\"6-装饰器\"><a href=\"#6-装饰器\" class=\"headerlink\" title=\"6. 装饰器\"></a>6. 装饰器</h2><h3 id=\"6-1-组件-Component\"><a href=\"#6-1-组件-Component\" class=\"headerlink\" title=\"6.1 组件 Component\"></a>6.1 组件 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Component-decorator.html\">Component</a></h3><h3 id=\"6-2-指令-Directive\"><a href=\"#6-2-指令-Directive\" class=\"headerlink\" title=\"6.2 指令 Directive\"></a>6.2 指令 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Directive-decorator.html\">Directive</a></h3><h3 id=\"6-3-注入器-Injectable\"><a href=\"#6-3-注入器-Injectable\" class=\"headerlink\" title=\"6.3 注入器 Injectable\"></a>6.3 注入器 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Injectable-decorator.html\">Injectable</a></h3><h3 id=\"6-4-管道-Pipe\"><a href=\"#6-4-管道-Pipe\" class=\"headerlink\" title=\"6.4 管道 Pipe\"></a>6.4 管道 <a href=\"https://angular.cn/docs/ts/latest/api/core/index/Pipe-decorator.html\">Pipe</a></h3>"},{"author":"小莫","date":"2016-07-22T16:00:00.000Z","title":"angular2 api整理之http模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","source":"_posts/2016-07-23.angular_api_http.md","raw":"---\nauthor: 小莫\ndate: 2016-07-23\ntitle: angular2 api整理之http模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_http\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","slug":"angular2_api_http","published":1,"updated":"2016-07-21T08:52:24.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztwx00035gmcguoa3byd","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>"},{"author":"小莫","date":"2016-07-24T16:00:00.000Z","title":"angular2 api整理之编译模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","source":"_posts/2016-07-25.angular_api_compiler.md","raw":"---\nauthor: 小莫\ndate: 2016-07-25\ntitle: angular2 api整理之编译模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_compiler\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","slug":"angular2_api_compiler","published":1,"updated":"2016-07-21T08:52:17.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztx000065gmcdl8j6ei7","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>"},{"author":"小莫","date":"2016-07-23T16:00:00.000Z","title":"angular2 api整理之表单模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","source":"_posts/2016-07-24.angular_api_forms.md","raw":"---\nauthor: 小莫\ndate: 2016-07-24\ntitle: angular2 api整理之表单模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_forms\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n# 一、学习中\n","slug":"angular2_api_forms","published":1,"updated":"2016-07-21T08:52:20.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztx800095gmch6mp8do7","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了.<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>"},{"author":"小莫","date":"2016-07-25T16:00:00.000Z","title":"angular2 api整理之平台浏览器模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、学习中\n","source":"_posts/2016-07-26.angular_api_platform-browser.md","raw":"---\nauthor: 小莫\ndate: 2016-07-26\ntitle: angular2 api整理之平台浏览器模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_platform-browser\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、学习中\n","slug":"angular2_api_platform-browser","published":1,"updated":"2016-07-21T08:51:53.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztxb000c5gmc17z5qziw","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>"},{"author":"小莫","date":"2016-07-26T16:00:00.000Z","title":"angular2 api整理之平台浏览器模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、学习中\n","source":"_posts/2016-07-27.angular_api_platform-browser-dynamic.md","raw":"---\nauthor: 小莫\ndate: 2016-07-27\ntitle: angular2 api整理之平台浏览器模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_platform-browser-dynamic\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n\n# 一、学习中\n","slug":"angular2_api_platform-browser-dynamic","published":1,"updated":"2016-07-21T08:52:12.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqw2ztxe000f5gmcigl3myus","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h1 id=\"一、学习中\"><a href=\"#一、学习中\" class=\"headerlink\" title=\"一、学习中\"></a>一、学习中</h1>"},{"author":"小莫","date":"2016-07-27T16:00:00.000Z","title":"angular2 api整理之路由模块","_content":"不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、常量\n### 1. [PRIMARY_OUTLET](https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html)\n\n### 2. [ROUTER_DIRECTIVES](https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html)\n路由指令集合常量\n\n## 二、接口\n### 1. 活跃路由[ActivatedRoute](https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html)\n可以获取当前路由的参数和数据\n\n\n```\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: Observable<string> = route.params.map(p => p.id);\n    const data = route.data.map(d => d.user); //includes `data` and `resolve`\n  }\n}\n```\n\n### 2. 活跃路由快照[ActivatedRouteSnapshot](https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html)\n具体功能不明\n\n```\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: string = route.snapshot.params.id;\n    const data = route.snapshot.data;\n  }\n}\n```\n\n### 3. 可激活[CanActivate](https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html)\n实现此接口并重写`canActivate`方法。\n\n```\nclass CanActivateTeam implements CanActivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<boolean> {\n    return this.permissions.canActivate(this.currentUser, this.route.params.id);\n  }\n}\nbootstrap(AppComponent, [\n  CanActivateTeam,\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canActivate: [CanActivateTeam]\n  }])\n);\n```\n### 4. [CanDeactivate](https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html)\n\n### 5. 其他选项[ExtraOptions](https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html)\n\n### 6. 解决 [Resolve](https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html)\n实现此接口并重写`Resolve`方法。\n\n```\nclass TeamResolver implements Resolve {\n  constructor(private backend: Backend) {}\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<any> {\n    return this.backend.fetchTeam(this.route.params.id);\n  }\n}\nbootstrap(AppComponent, [\n  TeamResolver,\n  provideRouter([{\n    path: 'team/:id',\n    component: TeamCmp,\n    resolve: {\n      team: TeamResolver\n    }\n  }])\n);\n```\n### 7. 路由 [Route](https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html)\n\n```\n\nclass Route {\npath : string\nterminal : boolean\npathMatch : 'full'|'prefix'\ncomponent : Type|string\nredirectTo : string\noutlet : string\ncanActivate : any[]\ncanDeactivate : any[]\ndata : Data\nresolve : ResolveData\nchildren : Route[]\n}\n```\n\n### 8. 路由状态 [RouterState](https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html)\n\n```\nclass MyComponent {\n  constructor(router: Router) {\n    const state = router.routerState;\n    const id: Observable<string> = state.firstChild(state.root).params.map(p => p.id);\n    const isDebug: Observable<string> = state.queryParams.map(q => q.debug);\n  }\n}\n```\n\n### 9. 路由状态快照[RouterStateSnapshot](https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html)\n\n```\nconstructor(router: Router) {\n  const snapshot = router.routerState.snapshot;\n}\n}\n```\n\n### 10. 路径树 [UrlTree](https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html)\n\n```\nclass UrlTree {\nroot : UrlSegment\nqueryParams : {[key: string]: string}\nfragment : string\ntoString() : string\n}\n```\n\n## 三、类\n### 1. 默认路径初始化 [DefaultUrlSerializer](https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html)\n\n```\n  class DefaultUrlSerializer {\n  parse(url: string) : UrlTree\n  serialize(tree: UrlTree) : string\n  }\n```\n\n### 2. 取消导航[NavigationCancel](https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html)\n\n```\nconstructor(id: number, url: string)\nid : number\nurl : string\ntoString() : string\n}\n```\n\n### 3. 结束导航 [NavigationEnd](https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html)\n\n```\n\nclass NavigationEnd {\nconstructor(id: number, url: string, urlAfterRedirects: string)\nid : number\nurl : string\nurlAfterRedirects : string\ntoString() : string\n}\n```\n\n### 4. 导航错误[NavigationError](https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html)\n\n```\nclass NavigationError {\nconstructor(id: number, url: string, error: any)\nid : number\nurl : string\nerror : any\ntoString() : string\n}\n```\n\n### 5. 根路由 [RootRouter](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html)\n\n```\n  class RootRouter {\n  constructor(registry: RouteRegistry, location: Location, primaryComponent: Type)\n  commit(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  dispose() : void\n  }\n```\n\n### 6. 路由数据 [RouteData](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html)\n\n```\nclass RouteData {\nconstructor(data?: {[key: string]: any})\ndata : {[key: string]: any}\nget(key: string) : any\n}\n```\n\n### 7. 路由参数 [RouteParams](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html)\n\n```\nclass RouteParams {\nconstructor(params: {[key: string]: string})\nparams : {[key: string]: string}\nget(param: string) : string\n}\n```\n\n### 8. 注册路由 [RouteRegistry](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html)\n\n```\n  class RouteRegistry {\n  constructor(_rootComponent: Type)\n  config(parentComponent: any, config: RouteDefinition) : void\n  configFromComponent(component: any) : void\n  recognize(url: string, ancestorInstructions: Instruction[]) : Promise<Instruction>\n  generate(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any) : Instruction\n  hasRoute(name: string, parentComponent: any) : boolean\n  generateDefault(componentCursor: Type) : Instruction\n  }\n```\n\n### 9. 路由 [Router](https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html)\n\n```\n  class Router {\n  constructor(registry: RouteRegistry, parent: Router, hostComponent: any, root?: Router)\n  navigating : boolean\n  lastNavigationAttempt : string\n  currentInstruction : Instruction\n  registry : RouteRegistry\n  parent : Router\n  hostComponent : any\n  root : Router\n  childRouter(hostComponent: any) : Router\n  auxRouter(hostComponent: any) : Router\n  registerPrimaryOutlet(outlet: RouterOutlet) : Promise<any>\n  unregisterPrimaryOutlet(outlet: RouterOutlet) : void\n  registerAuxOutlet(outlet: RouterOutlet) : Promise<any>\n  isRouteActive(instruction: Instruction) : boolean\n  config(definitions: RouteDefinition[]) : Promise<any>\n  navigate(linkParams: any[]) : Promise<any>\n  navigateByUrl(url: string, _skipLocationChange?: boolean) : Promise<any>\n  navigateByInstruction(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  commit(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  subscribe(onNext: (value: any) => void, onError?: (value: any) => void) : Object\n  deactivate(instruction: Instruction) : Promise<any>\n  recognize(url: string) : Promise<Instruction>\n  renavigate() : Promise<any>\n  generate(linkParams: any[]) : Instruction\n  }\n```\n\n## 四、 指令\n\n### 1. [RouterLink](https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html)\n\n```\nclass RouterLink {\ncommands : any[]\nqueryParams : {[k: string]: any}\nfragment : string\nurlTree : UrlTree\nrouter : Router\nroute : ActivatedRoute\nlocationStrategy : LocationStrategy\nrouterLink\nonClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\n}\n```\n\n### 2. [RouterLinkActive](https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html)\n\n```\nclass RouterLinkActive {\nlinks : QueryList<RouterLink>\nlinksWithHrefs : QueryList<RouterLinkWithHref>\nclasses : string[]\nsubscription : Subscription\nrouterLinkActiveOptions : {exact: boolean}\nrouter : Router\nelement : ElementRef\nrenderer : Renderer\nngAfterContentInit() : void\nrouterLinkActive\nngOnChanges(changes: {}) : any\nngOnDestroy() : any\nupdate() : void\nreduceList(currentUrlTree: UrlTree, q: QueryList<any>) : boolean\n}\n```\n\n### 3. [RouterLinkWithHref](https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html)\n\n```\nclass RouterLinkWithHref {\ntarget : string\ncommands : any[]\nqueryParams : {[k: string]: any}\nfragment : string\nhref : string\nurlTree : UrlTree\nrouter : Router\nroute : ActivatedRoute\nlocationStrategy : LocationStrategy\nrouterLink\nngOnChanges(changes: {}) : any\nonClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\nupdateTargetUrlAndHref() : void\n}\n```\n\n### 4. [RouterOutlet](https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html)\n\n```\nclass RouterOutlet {\nactivated : ComponentRef<any>\noutletMap : RouterOutletMap\nlocation : ViewContainerRef\ncomponentFactoryResolver : ComponentFactoryResolver\nisActivated : boolean\ncomponent : Object\nactivatedRoute : ActivatedRoute\ndeactivate() : void\nactivate(activatedRoute: ActivatedRoute, providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap) : void\n}\n```\n","source":"_posts/2016-07-28.angular_api_router.md","raw":"---\nauthor: 小莫\ndate: 2016-07-28\ntitle: angular2 api整理之路由模块\ntags:\n- angular2\ncategory: angular2\npermalink: angular2_api_roter\n---\n不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了\n<!-- more -->\n[![点击访问小莫的github](http://static.xiaomo.info/images/angular.png)](https://github.com/qq83387856)\n## 一、常量\n### 1. [PRIMARY_OUTLET](https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html)\n\n### 2. [ROUTER_DIRECTIVES](https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html)\n路由指令集合常量\n\n## 二、接口\n### 1. 活跃路由[ActivatedRoute](https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html)\n可以获取当前路由的参数和数据\n\n\n```\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: Observable<string> = route.params.map(p => p.id);\n    const data = route.data.map(d => d.user); //includes `data` and `resolve`\n  }\n}\n```\n\n### 2. 活跃路由快照[ActivatedRouteSnapshot](https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html)\n具体功能不明\n\n```\nclass MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: string = route.snapshot.params.id;\n    const data = route.snapshot.data;\n  }\n}\n```\n\n### 3. 可激活[CanActivate](https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html)\n实现此接口并重写`canActivate`方法。\n\n```\nclass CanActivateTeam implements CanActivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<boolean> {\n    return this.permissions.canActivate(this.currentUser, this.route.params.id);\n  }\n}\nbootstrap(AppComponent, [\n  CanActivateTeam,\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canActivate: [CanActivateTeam]\n  }])\n);\n```\n### 4. [CanDeactivate](https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html)\n\n### 5. 其他选项[ExtraOptions](https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html)\n\n### 6. 解决 [Resolve](https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html)\n实现此接口并重写`Resolve`方法。\n\n```\nclass TeamResolver implements Resolve {\n  constructor(private backend: Backend) {}\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable<any> {\n    return this.backend.fetchTeam(this.route.params.id);\n  }\n}\nbootstrap(AppComponent, [\n  TeamResolver,\n  provideRouter([{\n    path: 'team/:id',\n    component: TeamCmp,\n    resolve: {\n      team: TeamResolver\n    }\n  }])\n);\n```\n### 7. 路由 [Route](https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html)\n\n```\n\nclass Route {\npath : string\nterminal : boolean\npathMatch : 'full'|'prefix'\ncomponent : Type|string\nredirectTo : string\noutlet : string\ncanActivate : any[]\ncanDeactivate : any[]\ndata : Data\nresolve : ResolveData\nchildren : Route[]\n}\n```\n\n### 8. 路由状态 [RouterState](https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html)\n\n```\nclass MyComponent {\n  constructor(router: Router) {\n    const state = router.routerState;\n    const id: Observable<string> = state.firstChild(state.root).params.map(p => p.id);\n    const isDebug: Observable<string> = state.queryParams.map(q => q.debug);\n  }\n}\n```\n\n### 9. 路由状态快照[RouterStateSnapshot](https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html)\n\n```\nconstructor(router: Router) {\n  const snapshot = router.routerState.snapshot;\n}\n}\n```\n\n### 10. 路径树 [UrlTree](https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html)\n\n```\nclass UrlTree {\nroot : UrlSegment\nqueryParams : {[key: string]: string}\nfragment : string\ntoString() : string\n}\n```\n\n## 三、类\n### 1. 默认路径初始化 [DefaultUrlSerializer](https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html)\n\n```\n  class DefaultUrlSerializer {\n  parse(url: string) : UrlTree\n  serialize(tree: UrlTree) : string\n  }\n```\n\n### 2. 取消导航[NavigationCancel](https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html)\n\n```\nconstructor(id: number, url: string)\nid : number\nurl : string\ntoString() : string\n}\n```\n\n### 3. 结束导航 [NavigationEnd](https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html)\n\n```\n\nclass NavigationEnd {\nconstructor(id: number, url: string, urlAfterRedirects: string)\nid : number\nurl : string\nurlAfterRedirects : string\ntoString() : string\n}\n```\n\n### 4. 导航错误[NavigationError](https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html)\n\n```\nclass NavigationError {\nconstructor(id: number, url: string, error: any)\nid : number\nurl : string\nerror : any\ntoString() : string\n}\n```\n\n### 5. 根路由 [RootRouter](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html)\n\n```\n  class RootRouter {\n  constructor(registry: RouteRegistry, location: Location, primaryComponent: Type)\n  commit(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  dispose() : void\n  }\n```\n\n### 6. 路由数据 [RouteData](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html)\n\n```\nclass RouteData {\nconstructor(data?: {[key: string]: any})\ndata : {[key: string]: any}\nget(key: string) : any\n}\n```\n\n### 7. 路由参数 [RouteParams](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html)\n\n```\nclass RouteParams {\nconstructor(params: {[key: string]: string})\nparams : {[key: string]: string}\nget(param: string) : string\n}\n```\n\n### 8. 注册路由 [RouteRegistry](https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html)\n\n```\n  class RouteRegistry {\n  constructor(_rootComponent: Type)\n  config(parentComponent: any, config: RouteDefinition) : void\n  configFromComponent(component: any) : void\n  recognize(url: string, ancestorInstructions: Instruction[]) : Promise<Instruction>\n  generate(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any) : Instruction\n  hasRoute(name: string, parentComponent: any) : boolean\n  generateDefault(componentCursor: Type) : Instruction\n  }\n```\n\n### 9. 路由 [Router](https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html)\n\n```\n  class Router {\n  constructor(registry: RouteRegistry, parent: Router, hostComponent: any, root?: Router)\n  navigating : boolean\n  lastNavigationAttempt : string\n  currentInstruction : Instruction\n  registry : RouteRegistry\n  parent : Router\n  hostComponent : any\n  root : Router\n  childRouter(hostComponent: any) : Router\n  auxRouter(hostComponent: any) : Router\n  registerPrimaryOutlet(outlet: RouterOutlet) : Promise<any>\n  unregisterPrimaryOutlet(outlet: RouterOutlet) : void\n  registerAuxOutlet(outlet: RouterOutlet) : Promise<any>\n  isRouteActive(instruction: Instruction) : boolean\n  config(definitions: RouteDefinition[]) : Promise<any>\n  navigate(linkParams: any[]) : Promise<any>\n  navigateByUrl(url: string, _skipLocationChange?: boolean) : Promise<any>\n  navigateByInstruction(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  commit(instruction: Instruction, _skipLocationChange?: boolean) : Promise<any>\n  subscribe(onNext: (value: any) => void, onError?: (value: any) => void) : Object\n  deactivate(instruction: Instruction) : Promise<any>\n  recognize(url: string) : Promise<Instruction>\n  renavigate() : Promise<any>\n  generate(linkParams: any[]) : Instruction\n  }\n```\n\n## 四、 指令\n\n### 1. [RouterLink](https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html)\n\n```\nclass RouterLink {\ncommands : any[]\nqueryParams : {[k: string]: any}\nfragment : string\nurlTree : UrlTree\nrouter : Router\nroute : ActivatedRoute\nlocationStrategy : LocationStrategy\nrouterLink\nonClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\n}\n```\n\n### 2. [RouterLinkActive](https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html)\n\n```\nclass RouterLinkActive {\nlinks : QueryList<RouterLink>\nlinksWithHrefs : QueryList<RouterLinkWithHref>\nclasses : string[]\nsubscription : Subscription\nrouterLinkActiveOptions : {exact: boolean}\nrouter : Router\nelement : ElementRef\nrenderer : Renderer\nngAfterContentInit() : void\nrouterLinkActive\nngOnChanges(changes: {}) : any\nngOnDestroy() : any\nupdate() : void\nreduceList(currentUrlTree: UrlTree, q: QueryList<any>) : boolean\n}\n```\n\n### 3. [RouterLinkWithHref](https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html)\n\n```\nclass RouterLinkWithHref {\ntarget : string\ncommands : any[]\nqueryParams : {[k: string]: any}\nfragment : string\nhref : string\nurlTree : UrlTree\nrouter : Router\nroute : ActivatedRoute\nlocationStrategy : LocationStrategy\nrouterLink\nngOnChanges(changes: {}) : any\nonClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\nupdateTargetUrlAndHref() : void\n}\n```\n\n### 4. [RouterOutlet](https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html)\n\n```\nclass RouterOutlet {\nactivated : ComponentRef<any>\noutletMap : RouterOutletMap\nlocation : ViewContainerRef\ncomponentFactoryResolver : ComponentFactoryResolver\nisActivated : boolean\ncomponent : Object\nactivatedRoute : ActivatedRoute\ndeactivate() : void\nactivate(activatedRoute: ActivatedRoute, providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap) : void\n}\n```\n","slug":"angular2_api_roter","published":1,"updated":"2016-07-23T05:39:12.019Z","_id":"ciqw2ztxw000l5gmcajga08sn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br><a id=\"more\"></a><br><a href=\"https://github.com/qq83387856\" target=\"_blank\" rel=\"external\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、常量\"><a href=\"#一、常量\" class=\"headerlink\" title=\"一、常量\"></a>一、常量</h2><h3 id=\"1-PRIMARY-OUTLET\"><a href=\"#1-PRIMARY-OUTLET\" class=\"headerlink\" title=\"1. PRIMARY_OUTLET\"></a>1. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html\" target=\"_blank\" rel=\"external\">PRIMARY_OUTLET</a></h3><h3 id=\"2-ROUTER-DIRECTIVES\"><a href=\"#2-ROUTER-DIRECTIVES\" class=\"headerlink\" title=\"2. ROUTER_DIRECTIVES\"></a>2. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html\" target=\"_blank\" rel=\"external\">ROUTER_DIRECTIVES</a></h3><p>路由指令集合常量</p>\n<h2 id=\"二、接口\"><a href=\"#二、接口\" class=\"headerlink\" title=\"二、接口\"></a>二、接口</h2><h3 id=\"1-活跃路由ActivatedRoute\"><a href=\"#1-活跃路由ActivatedRoute\" class=\"headerlink\" title=\"1. 活跃路由ActivatedRoute\"></a>1. 活跃路由<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html\" target=\"_blank\" rel=\"external\">ActivatedRoute</a></h3><p>可以获取当前路由的参数和数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> MyComponent &#123;</span><br><span class=\"line\">  constructor(route: ActivatedRoute) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id: Observable&lt;<span class=\"built_in\">string</span>&gt; = route.params.<span class=\"built_in\">map</span>(p =&gt; p.id);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = route.data.<span class=\"built_in\">map</span>(d =&gt; d.user); <span class=\"comment\">//includes `data` and `resolve`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-活跃路由快照ActivatedRouteSnapshot\"><a href=\"#2-活跃路由快照ActivatedRouteSnapshot\" class=\"headerlink\" title=\"2. 活跃路由快照ActivatedRouteSnapshot\"></a>2. 活跃路由快照<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html\" target=\"_blank\" rel=\"external\">ActivatedRouteSnapshot</a></h3><p>具体功能不明</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> &#123;</span><br><span class=\"line\">  constructor(route: ActivatedRoute) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id: <span class=\"keyword\">string</span> = route.snapshot.<span class=\"keyword\">params</span>.id;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = route.snapshot.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可激活CanActivate\"><a href=\"#3-可激活CanActivate\" class=\"headerlink\" title=\"3. 可激活CanActivate\"></a>3. 可激活<a href=\"https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html\" target=\"_blank\" rel=\"external\">CanActivate</a></h3><p>实现此接口并重写<code>canActivate</code>方法。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CanActivateTeam</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanActivate</span> &#123;</span></span><br><span class=\"line\">  constructor(<span class=\"keyword\">private</span> <span class=\"string\">permissions:</span> Permissions, <span class=\"keyword\">private</span> <span class=\"string\">currentUser:</span> UserToken) &#123;&#125;</span><br><span class=\"line\">  canActivate(<span class=\"string\">route:</span> ActivatedRouteSnapshot, <span class=\"string\">state:</span> RouterStateSnapshot):Observable&lt;<span class=\"keyword\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.permissions.canActivate(<span class=\"keyword\">this</span>.currentUser, <span class=\"keyword\">this</span>.route.params.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(AppComponent, [</span><br><span class=\"line\">  CanActivateTeam,</span><br><span class=\"line\">  provideRouter([&#123;</span><br><span class=\"line\"><span class=\"symbol\">    path:</span> <span class=\"string\">'team/:id'</span>,</span><br><span class=\"line\"><span class=\"symbol\">    component:</span> Team,</span><br><span class=\"line\"><span class=\"symbol\">    canActivate:</span> [CanActivateTeam]</span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-CanDeactivate\"><a href=\"#4-CanDeactivate\" class=\"headerlink\" title=\"4. CanDeactivate\"></a>4. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html\" target=\"_blank\" rel=\"external\">CanDeactivate</a></h3><h3 id=\"5-其他选项ExtraOptions\"><a href=\"#5-其他选项ExtraOptions\" class=\"headerlink\" title=\"5. 其他选项ExtraOptions\"></a>5. 其他选项<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html\" target=\"_blank\" rel=\"external\">ExtraOptions</a></h3><h3 id=\"6-解决-Resolve\"><a href=\"#6-解决-Resolve\" class=\"headerlink\" title=\"6. 解决 Resolve\"></a>6. 解决 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html\" target=\"_blank\" rel=\"external\">Resolve</a></h3><p>实现此接口并重写<code>Resolve</code>方法。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">Resolve</span> &#123;</span></span><br><span class=\"line\">  constructor(<span class=\"keyword\">private</span> <span class=\"string\">backend:</span> Backend) &#123;&#125;</span><br><span class=\"line\">  resolve(<span class=\"string\">route:</span> ActivatedRouteSnapshot, <span class=\"string\">state:</span> RouterStateSnapshot):Observable&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.backend.fetchTeam(<span class=\"keyword\">this</span>.route.params.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(AppComponent, [</span><br><span class=\"line\">  TeamResolver,</span><br><span class=\"line\">  provideRouter([&#123;</span><br><span class=\"line\"><span class=\"symbol\">    path:</span> <span class=\"string\">'team/:id'</span>,</span><br><span class=\"line\"><span class=\"symbol\">    component:</span> TeamCmp,</span><br><span class=\"line\"><span class=\"symbol\">    resolve:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      team:</span> TeamResolver</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-路由-Route\"><a href=\"#7-路由-Route\" class=\"headerlink\" title=\"7. 路由 Route\"></a>7. 路由 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html\" target=\"_blank\" rel=\"external\">Route</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Route</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">path :</span> string</span><br><span class=\"line\"><span class=\"string\">terminal :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">pathMatch :</span> <span class=\"string\">'full'</span>|<span class=\"string\">'prefix'</span></span><br><span class=\"line\"><span class=\"string\">component :</span> Type|string</span><br><span class=\"line\"><span class=\"string\">redirectTo :</span> string</span><br><span class=\"line\"><span class=\"string\">outlet :</span> string</span><br><span class=\"line\"><span class=\"string\">canActivate :</span> any[]</span><br><span class=\"line\"><span class=\"string\">canDeactivate :</span> any[]</span><br><span class=\"line\"><span class=\"string\">data :</span> Data</span><br><span class=\"line\"><span class=\"string\">resolve :</span> ResolveData</span><br><span class=\"line\"><span class=\"string\">children :</span> Route[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-路由状态-RouterState\"><a href=\"#8-路由状态-RouterState\" class=\"headerlink\" title=\"8. 路由状态 RouterState\"></a>8. 路由状态 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html\" target=\"_blank\" rel=\"external\">RouterState</a></h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyComponent &#123;</span><br><span class=\"line\">  constructor(router: Router) &#123;</span><br><span class=\"line\">    const <span class=\"keyword\">state</span> = router.routerState;</span><br><span class=\"line\">    const id: Observable<span class=\"variable\">&lt;string&gt;</span> = <span class=\"keyword\">state</span>.firstChild(<span class=\"keyword\">state</span>.root).params.map(p =&gt; p.id);</span><br><span class=\"line\">    const isDebug: Observable<span class=\"variable\">&lt;string&gt;</span> = <span class=\"keyword\">state</span>.queryParams.map(q =&gt; q.<span class=\"keyword\">debug</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-路由状态快照RouterStateSnapshot\"><a href=\"#9-路由状态快照RouterStateSnapshot\" class=\"headerlink\" title=\"9. 路由状态快照RouterStateSnapshot\"></a>9. 路由状态快照<a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html\" target=\"_blank\" rel=\"external\">RouterStateSnapshot</a></h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(router: Router)</span> <span class=\"comment\">&#123;</span><br><span class=\"line\">  const snapshot = router.routerState.snapshot;</span><br><span class=\"line\">&#125;</span></span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-路径树-UrlTree\"><a href=\"#10-路径树-UrlTree\" class=\"headerlink\" title=\"10. 路径树 UrlTree\"></a>10. 路径树 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html\" target=\"_blank\" rel=\"external\">UrlTree</a></h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTree</span> &#123;</span><br><span class=\"line\">root : UrlSegment</span><br><span class=\"line\">queryParams : &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;</span><br><span class=\"line\">fragment : <span class=\"function\"><span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"title\">toString</span>(<span class=\"params\"></span>) : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、类\"><a href=\"#三、类\" class=\"headerlink\" title=\"三、类\"></a>三、类</h2><h3 id=\"1-默认路径初始化-DefaultUrlSerializer\"><a href=\"#1-默认路径初始化-DefaultUrlSerializer\" class=\"headerlink\" title=\"1. 默认路径初始化 DefaultUrlSerializer\"></a>1. 默认路径初始化 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html\" target=\"_blank\" rel=\"external\">DefaultUrlSerializer</a></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DefaultUrlSerializer &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parse</span><span class=\"params\">(url: string)</span></span> : UrlTree</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">serialize</span><span class=\"params\">(tree: UrlTree)</span></span> : string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-取消导航NavigationCancel\"><a href=\"#2-取消导航NavigationCancel\" class=\"headerlink\" title=\"2. 取消导航NavigationCancel\"></a>2. 取消导航<a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html\" target=\"_blank\" rel=\"external\">NavigationCancel</a></h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(id: number, url: <span class=\"keyword\">string</span>)</span></span><br><span class=\"line\"><span class=\"title\">id</span> :</span> number</span><br><span class=\"line\">url : <span class=\"keyword\">string</span></span><br><span class=\"line\">toString() : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-结束导航-NavigationEnd\"><a href=\"#3-结束导航-NavigationEnd\" class=\"headerlink\" title=\"3. 结束导航 NavigationEnd\"></a>3. 结束导航 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html\" target=\"_blank\" rel=\"external\">NavigationEnd</a></h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">class</span> NavigationEnd &#123;</span><br><span class=\"line\">constructor(<span class=\"built_in\">id</span>: <span class=\"built_in\">number</span>, url: <span class=\"built_in\">string</span>, urlAfterRedirects: <span class=\"built_in\">string</span>)</span><br><span class=\"line\"><span class=\"built_in\">id</span> : <span class=\"built_in\">number</span></span><br><span class=\"line\">url : <span class=\"built_in\">string</span></span><br><span class=\"line\">urlAfterRedirects : <span class=\"built_in\">string</span></span><br><span class=\"line\">toString() : <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-导航错误NavigationError\"><a href=\"#4-导航错误NavigationError\" class=\"headerlink\" title=\"4. 导航错误NavigationError\"></a>4. 导航错误<a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html\" target=\"_blank\" rel=\"external\">NavigationError</a></h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">class</span> NavigationError &#123;</span><br><span class=\"line\">constructor(<span class=\"built_in\">id</span>: <span class=\"built_in\">number</span>, url: <span class=\"built_in\">string</span>, <span class=\"keyword\">error</span>: any)</span><br><span class=\"line\"><span class=\"built_in\">id</span> : <span class=\"built_in\">number</span></span><br><span class=\"line\">url : <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">error</span> : any</span><br><span class=\"line\">toString() : <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-根路由-RootRouter\"><a href=\"#5-根路由-RootRouter\" class=\"headerlink\" title=\"5. 根路由 RootRouter\"></a>5. 根路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html\" target=\"_blank\" rel=\"external\">RootRouter</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootRouter</span> &#123;</span></span><br><span class=\"line\">constructor(<span class=\"string\">registry:</span> RouteRegistry, <span class=\"string\">location:</span> Location, <span class=\"string\">primaryComponent:</span> Type)</span><br><span class=\"line\">commit(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">dispose() : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-路由数据-RouteData\"><a href=\"#6-路由数据-RouteData\" class=\"headerlink\" title=\"6. 路由数据 RouteData\"></a>6. 路由数据 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html\" target=\"_blank\" rel=\"external\">RouteData</a></h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RouteData &#123;</span><br><span class=\"line\">constructor(data?: &#123;[<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125;)</span><br><span class=\"line\">data : &#123;[<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>) : <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-路由参数-RouteParams\"><a href=\"#7-路由参数-RouteParams\" class=\"headerlink\" title=\"7. 路由参数 RouteParams\"></a>7. 路由参数 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html\" target=\"_blank\" rel=\"external\">RouteParams</a></h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">RouteParams</span> &#123;</span><br><span class=\"line\">constructor(<span class=\"keyword\">params</span>: &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">params</span> : &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span>(param: <span class=\"keyword\">string</span>) : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-注册路由-RouteRegistry\"><a href=\"#8-注册路由-RouteRegistry\" class=\"headerlink\" title=\"8. 注册路由 RouteRegistry\"></a>8. 注册路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html\" target=\"_blank\" rel=\"external\">RouteRegistry</a></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RouteRegistry &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span><span class=\"params\">(_rootComponent: Type)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">config</span><span class=\"params\">(parentComponent: any, config: RouteDefinition)</span></span> : void</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configFromComponent</span><span class=\"params\">(component: any)</span></span> : void</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">recognize</span><span class=\"params\">(url: string, ancestorInstructions: Instruction[])</span></span> : Promise&lt;Instruction&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">generate</span><span class=\"params\">(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any)</span></span> : Instruction</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasRoute</span><span class=\"params\">(name: string, parentComponent: any)</span></span> : boolean</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">generateDefault</span><span class=\"params\">(componentCursor: Type)</span></span> : Instruction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-路由-Router\"><a href=\"#9-路由-Router\" class=\"headerlink\" title=\"9. 路由 Router\"></a>9. 路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html\" target=\"_blank\" rel=\"external\">Router</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Router</span> &#123;</span></span><br><span class=\"line\">constructor(<span class=\"string\">registry:</span> RouteRegistry, <span class=\"string\">parent:</span> Router, <span class=\"string\">hostComponent:</span> any, root?: Router)</span><br><span class=\"line\"><span class=\"string\">navigating :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">lastNavigationAttempt :</span> string</span><br><span class=\"line\"><span class=\"string\">currentInstruction :</span> Instruction</span><br><span class=\"line\"><span class=\"string\">registry :</span> RouteRegistry</span><br><span class=\"line\"><span class=\"string\">parent :</span> Router</span><br><span class=\"line\"><span class=\"string\">hostComponent :</span> any</span><br><span class=\"line\"><span class=\"string\">root :</span> Router</span><br><span class=\"line\">childRouter(<span class=\"string\">hostComponent:</span> any) : Router</span><br><span class=\"line\">auxRouter(<span class=\"string\">hostComponent:</span> any) : Router</span><br><span class=\"line\">registerPrimaryOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class=\"line\">unregisterPrimaryOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : <span class=\"keyword\">void</span></span><br><span class=\"line\">registerAuxOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class=\"line\">isRouteActive(<span class=\"string\">instruction:</span> Instruction) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">config(<span class=\"string\">definitions:</span> RouteDefinition[]) : Promise&lt;any&gt;</span><br><span class=\"line\">navigate(<span class=\"string\">linkParams:</span> any[]) : Promise&lt;any&gt;</span><br><span class=\"line\">navigateByUrl(<span class=\"string\">url:</span> string, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">navigateByInstruction(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">commit(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">subscribe(<span class=\"string\">onNext:</span> (<span class=\"string\">value:</span> any) =&gt; <span class=\"keyword\">void</span>, onError?: (<span class=\"string\">value:</span> any) =&gt; <span class=\"keyword\">void</span>) : Object</span><br><span class=\"line\">deactivate(<span class=\"string\">instruction:</span> Instruction) : Promise&lt;any&gt;</span><br><span class=\"line\">recognize(<span class=\"string\">url:</span> string) : Promise&lt;Instruction&gt;</span><br><span class=\"line\">renavigate() : Promise&lt;any&gt;</span><br><span class=\"line\">generate(<span class=\"string\">linkParams:</span> any[]) : Instruction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-指令\"><a href=\"#四、-指令\" class=\"headerlink\" title=\"四、 指令\"></a>四、 指令</h2><h3 id=\"1-RouterLink\"><a href=\"#1-RouterLink\" class=\"headerlink\" title=\"1. RouterLink\"></a>1. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html\" target=\"_blank\" rel=\"external\">RouterLink</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLink</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">commands :</span> any[]</span><br><span class=\"line\"><span class=\"string\">queryParams :</span> &#123;[<span class=\"string\">k:</span> string]: any&#125;</span><br><span class=\"line\"><span class=\"string\">fragment :</span> string</span><br><span class=\"line\"><span class=\"string\">urlTree :</span> UrlTree</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">route :</span> ActivatedRoute</span><br><span class=\"line\"><span class=\"string\">locationStrategy :</span> LocationStrategy</span><br><span class=\"line\">routerLink</span><br><span class=\"line\">onClick(<span class=\"string\">button:</span> number, <span class=\"string\">ctrlKey:</span> <span class=\"keyword\">boolean</span>, <span class=\"string\">metaKey:</span> <span class=\"keyword\">boolean</span>) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-RouterLinkActive\"><a href=\"#2-RouterLinkActive\" class=\"headerlink\" title=\"2. RouterLinkActive\"></a>2. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html\" target=\"_blank\" rel=\"external\">RouterLinkActive</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLinkActive</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">links :</span> QueryList&lt;RouterLink&gt;</span><br><span class=\"line\"><span class=\"string\">linksWithHrefs :</span> QueryList&lt;RouterLinkWithHref&gt;</span><br><span class=\"line\"><span class=\"string\">classes :</span> string[]</span><br><span class=\"line\"><span class=\"string\">subscription :</span> Subscription</span><br><span class=\"line\"><span class=\"string\">routerLinkActiveOptions :</span> &#123;<span class=\"string\">exact:</span> <span class=\"keyword\">boolean</span>&#125;</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">element :</span> ElementRef</span><br><span class=\"line\"><span class=\"string\">renderer :</span> Renderer</span><br><span class=\"line\">ngAfterContentInit() : <span class=\"keyword\">void</span></span><br><span class=\"line\">routerLinkActive</span><br><span class=\"line\">ngOnChanges(<span class=\"string\">changes:</span> &#123;&#125;) : any</span><br><span class=\"line\">ngOnDestroy() : any</span><br><span class=\"line\">update() : <span class=\"keyword\">void</span></span><br><span class=\"line\">reduceList(<span class=\"string\">currentUrlTree:</span> UrlTree, <span class=\"string\">q:</span> QueryList&lt;any&gt;) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-RouterLinkWithHref\"><a href=\"#3-RouterLinkWithHref\" class=\"headerlink\" title=\"3. RouterLinkWithHref\"></a>3. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html\" target=\"_blank\" rel=\"external\">RouterLinkWithHref</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLinkWithHref</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">target :</span> string</span><br><span class=\"line\"><span class=\"string\">commands :</span> any[]</span><br><span class=\"line\"><span class=\"string\">queryParams :</span> &#123;[<span class=\"string\">k:</span> string]: any&#125;</span><br><span class=\"line\"><span class=\"string\">fragment :</span> string</span><br><span class=\"line\"><span class=\"string\">href :</span> string</span><br><span class=\"line\"><span class=\"string\">urlTree :</span> UrlTree</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">route :</span> ActivatedRoute</span><br><span class=\"line\"><span class=\"string\">locationStrategy :</span> LocationStrategy</span><br><span class=\"line\">routerLink</span><br><span class=\"line\">ngOnChanges(<span class=\"string\">changes:</span> &#123;&#125;) : any</span><br><span class=\"line\">onClick(<span class=\"string\">button:</span> number, <span class=\"string\">ctrlKey:</span> <span class=\"keyword\">boolean</span>, <span class=\"string\">metaKey:</span> <span class=\"keyword\">boolean</span>) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">updateTargetUrlAndHref() : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-RouterOutlet\"><a href=\"#4-RouterOutlet\" class=\"headerlink\" title=\"4. RouterOutlet\"></a>4. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html\" target=\"_blank\" rel=\"external\">RouterOutlet</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterOutlet</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">activated :</span> ComponentRef&lt;any&gt;</span><br><span class=\"line\"><span class=\"string\">outletMap :</span> RouterOutletMap</span><br><span class=\"line\"><span class=\"string\">location :</span> ViewContainerRef</span><br><span class=\"line\"><span class=\"string\">componentFactoryResolver :</span> ComponentFactoryResolver</span><br><span class=\"line\"><span class=\"string\">isActivated :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">component :</span> Object</span><br><span class=\"line\"><span class=\"string\">activatedRoute :</span> ActivatedRoute</span><br><span class=\"line\">deactivate() : <span class=\"keyword\">void</span></span><br><span class=\"line\">activate(<span class=\"string\">activatedRoute:</span> ActivatedRoute, <span class=\"string\">providers:</span> ResolvedReflectiveProvider[], <span class=\"string\">outletMap:</span> RouterOutletMap) : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>不知不觉接触angular2也有半年时间了，但是对于angular2仍然是一知半解。总觉得应该系统的了解一下它的api，正好ng2马上要有稳定版本了。是时候花一些时间整理一下了<br>","more":"<br><a href=\"https://github.com/qq83387856\"><img src=\"http://static.xiaomo.info/images/angular.png\" alt=\"点击访问小莫的github\"></a></p>\n<h2 id=\"一、常量\"><a href=\"#一、常量\" class=\"headerlink\" title=\"一、常量\"></a>一、常量</h2><h3 id=\"1-PRIMARY-OUTLET\"><a href=\"#1-PRIMARY-OUTLET\" class=\"headerlink\" title=\"1. PRIMARY_OUTLET\"></a>1. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html\">PRIMARY_OUTLET</a></h3><h3 id=\"2-ROUTER-DIRECTIVES\"><a href=\"#2-ROUTER-DIRECTIVES\" class=\"headerlink\" title=\"2. ROUTER_DIRECTIVES\"></a>2. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html\">ROUTER_DIRECTIVES</a></h3><p>路由指令集合常量</p>\n<h2 id=\"二、接口\"><a href=\"#二、接口\" class=\"headerlink\" title=\"二、接口\"></a>二、接口</h2><h3 id=\"1-活跃路由ActivatedRoute\"><a href=\"#1-活跃路由ActivatedRoute\" class=\"headerlink\" title=\"1. 活跃路由ActivatedRoute\"></a>1. 活跃路由<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ActivatedRoute-interface.html\">ActivatedRoute</a></h3><p>可以获取当前路由的参数和数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> MyComponent &#123;</span><br><span class=\"line\">  constructor(route: ActivatedRoute) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id: Observable&lt;<span class=\"built_in\">string</span>&gt; = route.params.<span class=\"built_in\">map</span>(p =&gt; p.id);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = route.data.<span class=\"built_in\">map</span>(d =&gt; d.user); <span class=\"comment\">//includes `data` and `resolve`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-活跃路由快照ActivatedRouteSnapshot\"><a href=\"#2-活跃路由快照ActivatedRouteSnapshot\" class=\"headerlink\" title=\"2. 活跃路由快照ActivatedRouteSnapshot\"></a>2. 活跃路由快照<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html\">ActivatedRouteSnapshot</a></h3><p>具体功能不明</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> &#123;</span><br><span class=\"line\">  constructor(route: ActivatedRoute) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id: <span class=\"keyword\">string</span> = route.snapshot.<span class=\"keyword\">params</span>.id;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = route.snapshot.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-可激活CanActivate\"><a href=\"#3-可激活CanActivate\" class=\"headerlink\" title=\"3. 可激活CanActivate\"></a>3. 可激活<a href=\"https://angular.cn/docs/ts/latest/api/router/index/CanActivate-interface.html\">CanActivate</a></h3><p>实现此接口并重写<code>canActivate</code>方法。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CanActivateTeam</span> <span class=\"keyword\">implements</span> <span class=\"title\">CanActivate</span> &#123;</span></span><br><span class=\"line\">  constructor(<span class=\"keyword\">private</span> <span class=\"string\">permissions:</span> Permissions, <span class=\"keyword\">private</span> <span class=\"string\">currentUser:</span> UserToken) &#123;&#125;</span><br><span class=\"line\">  canActivate(<span class=\"string\">route:</span> ActivatedRouteSnapshot, <span class=\"string\">state:</span> RouterStateSnapshot):Observable&lt;<span class=\"keyword\">boolean</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.permissions.canActivate(<span class=\"keyword\">this</span>.currentUser, <span class=\"keyword\">this</span>.route.params.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(AppComponent, [</span><br><span class=\"line\">  CanActivateTeam,</span><br><span class=\"line\">  provideRouter([&#123;</span><br><span class=\"line\"><span class=\"symbol\">    path:</span> <span class=\"string\">'team/:id'</span>,</span><br><span class=\"line\"><span class=\"symbol\">    component:</span> Team,</span><br><span class=\"line\"><span class=\"symbol\">    canActivate:</span> [CanActivateTeam]</span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-CanDeactivate\"><a href=\"#4-CanDeactivate\" class=\"headerlink\" title=\"4. CanDeactivate\"></a>4. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/CanDeactivate-interface.html\">CanDeactivate</a></h3><h3 id=\"5-其他选项ExtraOptions\"><a href=\"#5-其他选项ExtraOptions\" class=\"headerlink\" title=\"5. 其他选项ExtraOptions\"></a>5. 其他选项<a href=\"https://angular.cn/docs/ts/latest/api/router/index/ExtraOptions-interface.html\">ExtraOptions</a></h3><h3 id=\"6-解决-Resolve\"><a href=\"#6-解决-Resolve\" class=\"headerlink\" title=\"6. 解决 Resolve\"></a>6. 解决 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/Resolve-interface.html\">Resolve</a></h3><p>实现此接口并重写<code>Resolve</code>方法。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TeamResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">Resolve</span> &#123;</span></span><br><span class=\"line\">  constructor(<span class=\"keyword\">private</span> <span class=\"string\">backend:</span> Backend) &#123;&#125;</span><br><span class=\"line\">  resolve(<span class=\"string\">route:</span> ActivatedRouteSnapshot, <span class=\"string\">state:</span> RouterStateSnapshot):Observable&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.backend.fetchTeam(<span class=\"keyword\">this</span>.route.params.id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bootstrap(AppComponent, [</span><br><span class=\"line\">  TeamResolver,</span><br><span class=\"line\">  provideRouter([&#123;</span><br><span class=\"line\"><span class=\"symbol\">    path:</span> <span class=\"string\">'team/:id'</span>,</span><br><span class=\"line\"><span class=\"symbol\">    component:</span> TeamCmp,</span><br><span class=\"line\"><span class=\"symbol\">    resolve:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">      team:</span> TeamResolver</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;])</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-路由-Route\"><a href=\"#7-路由-Route\" class=\"headerlink\" title=\"7. 路由 Route\"></a>7. 路由 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/Route-interface.html\">Route</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Route</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">path :</span> string</span><br><span class=\"line\"><span class=\"string\">terminal :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">pathMatch :</span> <span class=\"string\">'full'</span>|<span class=\"string\">'prefix'</span></span><br><span class=\"line\"><span class=\"string\">component :</span> Type|string</span><br><span class=\"line\"><span class=\"string\">redirectTo :</span> string</span><br><span class=\"line\"><span class=\"string\">outlet :</span> string</span><br><span class=\"line\"><span class=\"string\">canActivate :</span> any[]</span><br><span class=\"line\"><span class=\"string\">canDeactivate :</span> any[]</span><br><span class=\"line\"><span class=\"string\">data :</span> Data</span><br><span class=\"line\"><span class=\"string\">resolve :</span> ResolveData</span><br><span class=\"line\"><span class=\"string\">children :</span> Route[]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-路由状态-RouterState\"><a href=\"#8-路由状态-RouterState\" class=\"headerlink\" title=\"8. 路由状态 RouterState\"></a>8. 路由状态 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterState-interface.html\">RouterState</a></h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyComponent &#123;</span><br><span class=\"line\">  constructor(router: Router) &#123;</span><br><span class=\"line\">    const <span class=\"keyword\">state</span> = router.routerState;</span><br><span class=\"line\">    const id: Observable<span class=\"variable\">&lt;string&gt;</span> = <span class=\"keyword\">state</span>.firstChild(<span class=\"keyword\">state</span>.root).params.map(p =&gt; p.id);</span><br><span class=\"line\">    const isDebug: Observable<span class=\"variable\">&lt;string&gt;</span> = <span class=\"keyword\">state</span>.queryParams.map(q =&gt; q.<span class=\"keyword\">debug</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-路由状态快照RouterStateSnapshot\"><a href=\"#9-路由状态快照RouterStateSnapshot\" class=\"headerlink\" title=\"9. 路由状态快照RouterStateSnapshot\"></a>9. 路由状态快照<a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html\">RouterStateSnapshot</a></h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(router: Router)</span> <span class=\"comment\">&#123;</span><br><span class=\"line\">  const snapshot = router.routerState.snapshot;</span><br><span class=\"line\">&#125;</span></span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-路径树-UrlTree\"><a href=\"#10-路径树-UrlTree\" class=\"headerlink\" title=\"10. 路径树 UrlTree\"></a>10. 路径树 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/UrlTree-interface.html\">UrlTree</a></h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">UrlTree</span> &#123;</span><br><span class=\"line\">root : UrlSegment</span><br><span class=\"line\">queryParams : &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;</span><br><span class=\"line\">fragment : <span class=\"function\"><span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"title\">toString</span>(<span class=\"params\"></span>) : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、类\"><a href=\"#三、类\" class=\"headerlink\" title=\"三、类\"></a>三、类</h2><h3 id=\"1-默认路径初始化-DefaultUrlSerializer\"><a href=\"#1-默认路径初始化-DefaultUrlSerializer\" class=\"headerlink\" title=\"1. 默认路径初始化 DefaultUrlSerializer\"></a>1. 默认路径初始化 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html\">DefaultUrlSerializer</a></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class DefaultUrlSerializer &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parse</span><span class=\"params\">(url: string)</span></span> : UrlTree</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">serialize</span><span class=\"params\">(tree: UrlTree)</span></span> : string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-取消导航NavigationCancel\"><a href=\"#2-取消导航NavigationCancel\" class=\"headerlink\" title=\"2. 取消导航NavigationCancel\"></a>2. 取消导航<a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationCancel-class.html\">NavigationCancel</a></h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(id: number, url: <span class=\"keyword\">string</span>)</span></span><br><span class=\"line\"><span class=\"title\">id</span> :</span> number</span><br><span class=\"line\">url : <span class=\"keyword\">string</span></span><br><span class=\"line\">toString() : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-结束导航-NavigationEnd\"><a href=\"#3-结束导航-NavigationEnd\" class=\"headerlink\" title=\"3. 结束导航 NavigationEnd\"></a>3. 结束导航 <a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationEnd-class.html\">NavigationEnd</a></h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">class</span> NavigationEnd &#123;</span><br><span class=\"line\">constructor(<span class=\"built_in\">id</span>: <span class=\"built_in\">number</span>, url: <span class=\"built_in\">string</span>, urlAfterRedirects: <span class=\"built_in\">string</span>)</span><br><span class=\"line\"><span class=\"built_in\">id</span> : <span class=\"built_in\">number</span></span><br><span class=\"line\">url : <span class=\"built_in\">string</span></span><br><span class=\"line\">urlAfterRedirects : <span class=\"built_in\">string</span></span><br><span class=\"line\">toString() : <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-导航错误NavigationError\"><a href=\"#4-导航错误NavigationError\" class=\"headerlink\" title=\"4. 导航错误NavigationError\"></a>4. 导航错误<a href=\"https://angular.cn/docs/ts/latest/api/router/index/NavigationError-class.html\">NavigationError</a></h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">class</span> NavigationError &#123;</span><br><span class=\"line\">constructor(<span class=\"built_in\">id</span>: <span class=\"built_in\">number</span>, url: <span class=\"built_in\">string</span>, <span class=\"keyword\">error</span>: any)</span><br><span class=\"line\"><span class=\"built_in\">id</span> : <span class=\"built_in\">number</span></span><br><span class=\"line\">url : <span class=\"built_in\">string</span></span><br><span class=\"line\"><span class=\"keyword\">error</span> : any</span><br><span class=\"line\">toString() : <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-根路由-RootRouter\"><a href=\"#5-根路由-RootRouter\" class=\"headerlink\" title=\"5. 根路由 RootRouter\"></a>5. 根路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html\">RootRouter</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootRouter</span> &#123;</span></span><br><span class=\"line\">constructor(<span class=\"string\">registry:</span> RouteRegistry, <span class=\"string\">location:</span> Location, <span class=\"string\">primaryComponent:</span> Type)</span><br><span class=\"line\">commit(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">dispose() : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-路由数据-RouteData\"><a href=\"#6-路由数据-RouteData\" class=\"headerlink\" title=\"6. 路由数据 RouteData\"></a>6. 路由数据 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteData-class.html\">RouteData</a></h3><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RouteData &#123;</span><br><span class=\"line\">constructor(data?: &#123;[<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125;)</span><br><span class=\"line\">data : &#123;[<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">get</span>(<span class=\"built_in\">key</span>: <span class=\"built_in\">string</span>) : <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-路由参数-RouteParams\"><a href=\"#7-路由参数-RouteParams\" class=\"headerlink\" title=\"7. 路由参数 RouteParams\"></a>7. 路由参数 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html\">RouteParams</a></h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">RouteParams</span> &#123;</span><br><span class=\"line\">constructor(<span class=\"keyword\">params</span>: &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">params</span> : &#123;[key: <span class=\"keyword\">string</span>]: <span class=\"keyword\">string</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span>(param: <span class=\"keyword\">string</span>) : <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-注册路由-RouteRegistry\"><a href=\"#8-注册路由-RouteRegistry\" class=\"headerlink\" title=\"8. 注册路由 RouteRegistry\"></a>8. 注册路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html\">RouteRegistry</a></h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RouteRegistry &#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span><span class=\"params\">(_rootComponent: Type)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">config</span><span class=\"params\">(parentComponent: any, config: RouteDefinition)</span></span> : void</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">configFromComponent</span><span class=\"params\">(component: any)</span></span> : void</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">recognize</span><span class=\"params\">(url: string, ancestorInstructions: Instruction[])</span></span> : Promise&lt;Instruction&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">generate</span><span class=\"params\">(linkParams: any[], ancestorInstructions: Instruction[], _aux?: any)</span></span> : Instruction</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">hasRoute</span><span class=\"params\">(name: string, parentComponent: any)</span></span> : boolean</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">generateDefault</span><span class=\"params\">(componentCursor: Type)</span></span> : Instruction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-路由-Router\"><a href=\"#9-路由-Router\" class=\"headerlink\" title=\"9. 路由 Router\"></a>9. 路由 <a href=\"https://angular.cn/docs/ts/latest/api/router-deprecated/index/Router-class.html\">Router</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Router</span> &#123;</span></span><br><span class=\"line\">constructor(<span class=\"string\">registry:</span> RouteRegistry, <span class=\"string\">parent:</span> Router, <span class=\"string\">hostComponent:</span> any, root?: Router)</span><br><span class=\"line\"><span class=\"string\">navigating :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">lastNavigationAttempt :</span> string</span><br><span class=\"line\"><span class=\"string\">currentInstruction :</span> Instruction</span><br><span class=\"line\"><span class=\"string\">registry :</span> RouteRegistry</span><br><span class=\"line\"><span class=\"string\">parent :</span> Router</span><br><span class=\"line\"><span class=\"string\">hostComponent :</span> any</span><br><span class=\"line\"><span class=\"string\">root :</span> Router</span><br><span class=\"line\">childRouter(<span class=\"string\">hostComponent:</span> any) : Router</span><br><span class=\"line\">auxRouter(<span class=\"string\">hostComponent:</span> any) : Router</span><br><span class=\"line\">registerPrimaryOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class=\"line\">unregisterPrimaryOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : <span class=\"keyword\">void</span></span><br><span class=\"line\">registerAuxOutlet(<span class=\"string\">outlet:</span> RouterOutlet) : Promise&lt;any&gt;</span><br><span class=\"line\">isRouteActive(<span class=\"string\">instruction:</span> Instruction) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">config(<span class=\"string\">definitions:</span> RouteDefinition[]) : Promise&lt;any&gt;</span><br><span class=\"line\">navigate(<span class=\"string\">linkParams:</span> any[]) : Promise&lt;any&gt;</span><br><span class=\"line\">navigateByUrl(<span class=\"string\">url:</span> string, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">navigateByInstruction(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">commit(<span class=\"string\">instruction:</span> Instruction, _skipLocationChange?: <span class=\"keyword\">boolean</span>) : Promise&lt;any&gt;</span><br><span class=\"line\">subscribe(<span class=\"string\">onNext:</span> (<span class=\"string\">value:</span> any) =&gt; <span class=\"keyword\">void</span>, onError?: (<span class=\"string\">value:</span> any) =&gt; <span class=\"keyword\">void</span>) : Object</span><br><span class=\"line\">deactivate(<span class=\"string\">instruction:</span> Instruction) : Promise&lt;any&gt;</span><br><span class=\"line\">recognize(<span class=\"string\">url:</span> string) : Promise&lt;Instruction&gt;</span><br><span class=\"line\">renavigate() : Promise&lt;any&gt;</span><br><span class=\"line\">generate(<span class=\"string\">linkParams:</span> any[]) : Instruction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-指令\"><a href=\"#四、-指令\" class=\"headerlink\" title=\"四、 指令\"></a>四、 指令</h2><h3 id=\"1-RouterLink\"><a href=\"#1-RouterLink\" class=\"headerlink\" title=\"1. RouterLink\"></a>1. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLink-directive.html\">RouterLink</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLink</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">commands :</span> any[]</span><br><span class=\"line\"><span class=\"string\">queryParams :</span> &#123;[<span class=\"string\">k:</span> string]: any&#125;</span><br><span class=\"line\"><span class=\"string\">fragment :</span> string</span><br><span class=\"line\"><span class=\"string\">urlTree :</span> UrlTree</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">route :</span> ActivatedRoute</span><br><span class=\"line\"><span class=\"string\">locationStrategy :</span> LocationStrategy</span><br><span class=\"line\">routerLink</span><br><span class=\"line\">onClick(<span class=\"string\">button:</span> number, <span class=\"string\">ctrlKey:</span> <span class=\"keyword\">boolean</span>, <span class=\"string\">metaKey:</span> <span class=\"keyword\">boolean</span>) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-RouterLinkActive\"><a href=\"#2-RouterLinkActive\" class=\"headerlink\" title=\"2. RouterLinkActive\"></a>2. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLinkActive-directive.html\">RouterLinkActive</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLinkActive</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">links :</span> QueryList&lt;RouterLink&gt;</span><br><span class=\"line\"><span class=\"string\">linksWithHrefs :</span> QueryList&lt;RouterLinkWithHref&gt;</span><br><span class=\"line\"><span class=\"string\">classes :</span> string[]</span><br><span class=\"line\"><span class=\"string\">subscription :</span> Subscription</span><br><span class=\"line\"><span class=\"string\">routerLinkActiveOptions :</span> &#123;<span class=\"string\">exact:</span> <span class=\"keyword\">boolean</span>&#125;</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">element :</span> ElementRef</span><br><span class=\"line\"><span class=\"string\">renderer :</span> Renderer</span><br><span class=\"line\">ngAfterContentInit() : <span class=\"keyword\">void</span></span><br><span class=\"line\">routerLinkActive</span><br><span class=\"line\">ngOnChanges(<span class=\"string\">changes:</span> &#123;&#125;) : any</span><br><span class=\"line\">ngOnDestroy() : any</span><br><span class=\"line\">update() : <span class=\"keyword\">void</span></span><br><span class=\"line\">reduceList(<span class=\"string\">currentUrlTree:</span> UrlTree, <span class=\"string\">q:</span> QueryList&lt;any&gt;) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-RouterLinkWithHref\"><a href=\"#3-RouterLinkWithHref\" class=\"headerlink\" title=\"3. RouterLinkWithHref\"></a>3. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html\">RouterLinkWithHref</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterLinkWithHref</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">target :</span> string</span><br><span class=\"line\"><span class=\"string\">commands :</span> any[]</span><br><span class=\"line\"><span class=\"string\">queryParams :</span> &#123;[<span class=\"string\">k:</span> string]: any&#125;</span><br><span class=\"line\"><span class=\"string\">fragment :</span> string</span><br><span class=\"line\"><span class=\"string\">href :</span> string</span><br><span class=\"line\"><span class=\"string\">urlTree :</span> UrlTree</span><br><span class=\"line\"><span class=\"string\">router :</span> Router</span><br><span class=\"line\"><span class=\"string\">route :</span> ActivatedRoute</span><br><span class=\"line\"><span class=\"string\">locationStrategy :</span> LocationStrategy</span><br><span class=\"line\">routerLink</span><br><span class=\"line\">ngOnChanges(<span class=\"string\">changes:</span> &#123;&#125;) : any</span><br><span class=\"line\">onClick(<span class=\"string\">button:</span> number, <span class=\"string\">ctrlKey:</span> <span class=\"keyword\">boolean</span>, <span class=\"string\">metaKey:</span> <span class=\"keyword\">boolean</span>) : <span class=\"keyword\">boolean</span></span><br><span class=\"line\">updateTargetUrlAndHref() : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-RouterOutlet\"><a href=\"#4-RouterOutlet\" class=\"headerlink\" title=\"4. RouterOutlet\"></a>4. <a href=\"https://angular.cn/docs/ts/latest/api/router/index/RouterOutlet-directive.html\">RouterOutlet</a></h3><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouterOutlet</span> &#123;</span></span><br><span class=\"line\"><span class=\"string\">activated :</span> ComponentRef&lt;any&gt;</span><br><span class=\"line\"><span class=\"string\">outletMap :</span> RouterOutletMap</span><br><span class=\"line\"><span class=\"string\">location :</span> ViewContainerRef</span><br><span class=\"line\"><span class=\"string\">componentFactoryResolver :</span> ComponentFactoryResolver</span><br><span class=\"line\"><span class=\"string\">isActivated :</span> <span class=\"keyword\">boolean</span></span><br><span class=\"line\"><span class=\"string\">component :</span> Object</span><br><span class=\"line\"><span class=\"string\">activatedRoute :</span> ActivatedRoute</span><br><span class=\"line\">deactivate() : <span class=\"keyword\">void</span></span><br><span class=\"line\">activate(<span class=\"string\">activatedRoute:</span> ActivatedRoute, <span class=\"string\">providers:</span> ResolvedReflectiveProvider[], <span class=\"string\">outletMap:</span> RouterOutletMap) : <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cipjfs5sd00004wmcfn519w9f","category_id":"ciphvpgyn0005scmcdhcydd90","_id":"cipjfs5ti00044wmck0vfuien"},{"post_id":"cipjfs5sl00014wmcc0ggb7tr","category_id":"ciphvpgzh000pscmcgzeo0p08","_id":"cipjfs5tk00064wmc79mhif9r"},{"post_id":"cipjfs5tg00034wmce2ed5wy6","category_id":"ciphvpgz3000cscmc2kbxkhj4","_id":"cipjfs5tn000a4wmcztp0gfyw"},{"post_id":"cipjfs5ti00054wmc6zsg0cj6","category_id":"ciphvpgzc000jscmcuqffoufb","_id":"cipjfs5tr000d4wmc891beucy"},{"post_id":"cipjfs5tl00084wmc3qg9d0pe","category_id":"ciphvph170035scmc27c6jwrl","_id":"cipjfs5tv000h4wmcelat3me7"},{"post_id":"cipjfs5tn000b4wmclfa475e2","category_id":"ciphvph180037scmcp0mekcbn","_id":"cipjfs5tz000l4wmcz9g9k4im"},{"post_id":"cipjfs5tw000i4wmcy8mb07mh","category_id":"ciphvph170032scmc7e7nd3nu","_id":"cipjfs5u3000r4wmcefnvqj7c"},{"post_id":"cipjfs5tz000m4wmcoybhkkxj","category_id":"ciphvpgzm000vscmcip5awyxh","_id":"cipjfs5u6000v4wmcghejiidl"},{"post_id":"cipjfs5u1000p4wmcs8100oqi","category_id":"ciphvpgzx0012scmcs3j076ke","_id":"cipjfs5ub000y4wmcydtbkhb8"},{"post_id":"cipjfs5tt000e4wmcyz6puicx","category_id":"cipjfs5ty000k4wmckbdw57gq","_id":"cipjfs5ue00124wmcj2geuojw"},{"post_id":"cipjfs5u3000s4wmcrf829lyu","category_id":"ciphvph020018scmcz5oezgbh","_id":"cipjfs5ug00154wmctwcf95dh"},{"post_id":"cipjfs5uc000z4wmcopnv2nfk","category_id":"cipje13hl0009fcmcpo8hxkqz","_id":"cipjfs5uj001c4wmcdidmj4jr"},{"post_id":"cipjfs5ue00134wmch0wjwj3t","category_id":"ciphvph0u0023scmc4thbcvhs","_id":"cipjfs5um001f4wmc476qcszt"},{"post_id":"cipjfs5ug00164wmca99h19om","category_id":"ciphvph0p001vscmcvlkx38xw","_id":"cipjfs5uq001j4wmc0retjwyj"},{"post_id":"cipjfs5ui001a4wmc6wttlsq7","category_id":"ciphvph0y002escmc2z4653bl","_id":"cipjfs5uu001n4wmcatys8nw9"},{"post_id":"cipjfs5un001h4wmcj3jwhryo","category_id":"ciphvph0z002iscmck2e5wnrv","_id":"cipjfs5uy001r4wmcuconb1p5"},{"post_id":"cipjfs5ur001k4wmcc2evmhjg","category_id":"ciphvph11002qscmc76gsz76a","_id":"cipjfs5v1001u4wmc002v76vq"},{"post_id":"cipjfs5uu001o4wmcxpyslymr","category_id":"cipje13hl0009fcmcpo8hxkqz","_id":"cipjfs5v4001y4wmc7u38i6ka"},{"post_id":"cipjfs5uk001d4wmc39wpdyah","category_id":"ciphvph0x002ascmcn1y661qn","_id":"cipjfs5v800214wmc5a2ygoz5"},{"post_id":"cipjfs5uy001s4wmctb008uzm","category_id":"cipje13hl0009fcmcpo8hxkqz","_id":"cipjfs5vc00284wmct26hptfo"},{"post_id":"cipjfs5v1001v4wmcjjwrt2w9","category_id":"ciphvph10002mscmcbh1qbhyw","_id":"cipjfs5vf002b4wmcyj402o4d"},{"post_id":"cipjfs5v5001z4wmc4fr1ixcd","category_id":"cipje13i0000qfcmckwnh5vaf","_id":"cipjfs5vi002f4wmcj3wa0dov"},{"post_id":"cipjfs5v5001z4wmc4fr1ixcd","category_id":"cipje13ia0015fcmc56csnpn9","_id":"cipjfs5vl002i4wmcv34j7omr"},{"post_id":"cipjfs5v800224wmctbpax26h","category_id":"ciphvph11002qscmc76gsz76a","_id":"cipjfs5vo002n4wmcfcb6ud0d"},{"post_id":"cipjfs5va00264wmciozrmpro","category_id":"ciphvph15002yscmcqgggofjz","_id":"cipjfs5vp002q4wmcdilhpa2a"},{"post_id":"cipjfs5vc00294wmceb16bfj2","category_id":"ciphvph190039scmcllaivg9q","_id":"cipjfs5vr002u4wmc07g0gzpt"},{"post_id":"cipjfs5vf002d4wmcwynsrgae","category_id":"ciphvpgzm000vscmcip5awyxh","_id":"cipjfs5vv002x4wmc85suc108"},{"post_id":"cipjfs5vl002j4wmck5edl5el","category_id":"ciphvph190039scmcllaivg9q","_id":"cipjfs5vz00314wmc7g0bfj2g"},{"post_id":"cipjfs5vo002o4wmc1v6gsu2e","category_id":"cipje13i0000qfcmckwnh5vaf","_id":"cipjfs5w100344wmcyzhbv2ha"},{"post_id":"cipjfs5vo002o4wmc1v6gsu2e","category_id":"cipje13ia0015fcmc56csnpn9","_id":"cipjfs5w500384wmch42gp4pd"},{"post_id":"cipjfs5vj002g4wmciy2ir3d7","category_id":"cipjfs5vo002m4wmcmlxmgy7r","_id":"cipjfs5wa003f4wmcsbow0fwy"},{"post_id":"cipjfs5vs002v4wmc5w94y6l2","category_id":"cipje13hl0009fcmcpo8hxkqz","_id":"cipjfs5wc003i4wmcq2cfhaht"},{"post_id":"cipjfs5vv002y4wmc0220fft2","category_id":"cipje13i0000qfcmckwnh5vaf","_id":"cipjfs5we003m4wmcvb811o5l"},{"post_id":"cipjfs5vv002y4wmc0220fft2","category_id":"cipje13ia0015fcmc56csnpn9","_id":"cipjfs5wh003o4wmcr05mfce5"},{"post_id":"cipjfs5w200354wmcjui8gach","category_id":"ciphvph1b003fscmcjqqcrdav","_id":"cipjfs5wl003t4wmccmi95a2p"},{"post_id":"cipjfs5w500394wmcesugwzzo","category_id":"cipje13hf0004fcmc73jta0ld","_id":"cipjfs5wl003w4wmcmz1nnwlm"},{"post_id":"cipjfs5w7003c4wmc6n0zeh82","category_id":"cipj47bs10002wgmc6j1w3s27","_id":"cipjfs5wm003y4wmcpw7fxh5j"},{"post_id":"cipjfs5wb003g4wmceqzav7r5","category_id":"cipje13hf0004fcmc73jta0ld","_id":"cipjfs5wm00404wmck93sifrb"},{"post_id":"cipjfs5wc003j4wmcasa6rbpy","category_id":"cipj3unqq0001m8mc2ls5t6si","_id":"cipjfs5wn00434wmcbrxyt5sz"},{"post_id":"cipjfs5xq006j4wmc2js4v6t0","category_id":"cipje13hl0009fcmcpo8hxkqz","_id":"cipjfs5xv006l4wmcxd3nuvr8"},{"post_id":"cipjfs5uk001d4wmc39wpdyah","category_id":"cipnfoiyg00042cmc8afwtrsc","_id":"cipnfoiyw000b2cmcseopuni6"},{"post_id":"cipjfs5uk001d4wmc39wpdyah","category_id":"cipnfoiyt00082cmcs3p7s7e5","_id":"cipnfoiyw000c2cmcyo8stumj"},{"post_id":"cipjfs5uk001d4wmc39wpdyah","category_id":"cipng1u160003acmcspzpza8w","_id":"cipng1u1n0005acmcu3t3tyhc"},{"post_id":"cipjfs5u7000w4wmcpihdwhow","category_id":"cipng6zt500002omcebgk4vwk","_id":"cipng6ztn00012omc9ko317gb"},{"post_id":"cipnrw09q000034mc38o46fue","category_id":"cipnrw0ab000234mct8yl0rn1","_id":"cipnrw0ae000534mchq87up70"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxpw1j90004momcvc7hwsao"},{"post_id":"cipxq33mp00007wmc0o90ez0o","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxq33mt00037wmca4riiyvt"},{"post_id":"cipxtqv2u00001omchi2ljair","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxtqv3800041omcdu31jecc"},{"post_id":"cipxtqv3100011omc7fmlai78","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxtqv3900061omcmdbxtbdd"},{"post_id":"cipxu8vgf0000pomcmezaudrr","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxu8vhe0005pomci03omf7p"},{"post_id":"cipxu8vgu0001pomck65xhnnu","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipxu8vhg0007pomc6cu1dq7u"},{"post_id":"cipxux8to0000jomc0a3jdau8","category_id":"cipxux8tx0002jomcgbi58yva","_id":"cipxux8ug0003jomco1pytj02"},{"post_id":"cipy4kfh90000nvwxzexhvgqp","category_id":"cipxux8tx0002jomcgbi58yva","_id":"cipy4kfhq0002nvwxlftalt6e"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipyxgvxx0003t0mc1cp6lp26"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","category_id":"cipxmbse70003jsmc527q6h4u","_id":"cipyxgw0i000at0mcaoizhk04"},{"post_id":"ciq1t0f350000rkmcdyzunnke","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciq1t0f3u0003rkmcsg001727"},{"post_id":"ciqj4jcan0000ssmcamk0ccb5","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqj4jcbn0002ssmcerxpau9b"},{"post_id":"ciqw2ztwi00005gmcug7xr451","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztx000055gmc7lypazib"},{"post_id":"ciqw2ztwr00015gmc8clmyx08","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztx700085gmch2q677il"},{"post_id":"ciqw2ztwx00035gmcguoa3byd","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztxb000b5gmcq8mnltuz"},{"post_id":"ciqw2ztx000065gmcdl8j6ei7","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztxe000e5gmcdknxbvv3"},{"post_id":"ciqw2ztx800095gmch6mp8do7","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztxh000h5gmcgmbo270v"},{"post_id":"ciqw2ztxb000c5gmc17z5qziw","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztxj000j5gmcewe6b94n"},{"post_id":"ciqw2ztxe000f5gmcigl3myus","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2ztxj000k5gmc50vfaofy"},{"post_id":"ciqw2ztxw000l5gmcajga08sn","category_id":"cipxmbse70003jsmc527q6h4u","_id":"ciqw2zty2000n5gmces6mu32x"}],"PostTag":[{"post_id":"cipjfs5ti00054wmc6zsg0cj6","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipjfs5tm00094wmcjvhcsmjo"},{"post_id":"cipjfs5ti00054wmc6zsg0cj6","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5tr000c4wmcsq94mb4g"},{"post_id":"cipjfs5tl00084wmc3qg9d0pe","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipjfs5tv000g4wmclejhpjgd"},{"post_id":"cipjfs5tl00084wmc3qg9d0pe","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5ty000j4wmc6izexgom"},{"post_id":"cipjfs5sd00004wmcfn519w9f","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipjfs5u1000o4wmc2igvein5"},{"post_id":"cipjfs5sd00004wmcfn519w9f","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5u3000q4wmc3zedvczf"},{"post_id":"cipjfs5sl00014wmcc0ggb7tr","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipjfs5ue00114wmcyhdj3ieb"},{"post_id":"cipjfs5sl00014wmcc0ggb7tr","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5ug00144wmchwz0vpfx"},{"post_id":"cipjfs5tg00034wmce2ed5wy6","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipjfs5ut001m4wmc6voxtyb8"},{"post_id":"cipjfs5tg00034wmce2ed5wy6","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5ux001q4wmc11du6fy4"},{"post_id":"cipjfs5ug00164wmca99h19om","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5v800204wmcvnr36f0m"},{"post_id":"cipjfs5ug00164wmca99h19om","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5v900234wmcsx9q7ijp"},{"post_id":"cipjfs5uk001d4wmc39wpdyah","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipjfs5vb00274wmcqkv3xnfz"},{"post_id":"cipjfs5un001h4wmcj3jwhryo","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5ve002a4wmc9tar187n"},{"post_id":"cipjfs5un001h4wmcj3jwhryo","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5vi002e4wmc67cudawl"},{"post_id":"cipjfs5tn000b4wmclfa475e2","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipjfs5vp002p4wmcegguq06z"},{"post_id":"cipjfs5tt000e4wmcyz6puicx","tag_id":"ciphvph000015scmca7cejpae","_id":"cipjfs5vr002t4wmcfvlu3prl"},{"post_id":"cipjfs5tz000m4wmcoybhkkxj","tag_id":"ciphvpgzf000mscmcnvhb68ht","_id":"cipjfs5w100334wmckze10aht"},{"post_id":"cipjfs5u1000p4wmcs8100oqi","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5w9003d4wmca5u9hba3"},{"post_id":"cipjfs5u1000p4wmcs8100oqi","tag_id":"ciphvph000015scmca7cejpae","_id":"cipjfs5we003k4wmcg8lkwtu4"},{"post_id":"cipjfs5vf002d4wmcwynsrgae","tag_id":"ciphvpgzf000mscmcnvhb68ht","_id":"cipjfs5wg003n4wmcv7kn01zg"},{"post_id":"cipjfs5u3000s4wmcrf829lyu","tag_id":"ciphvpgzu000zscmcklfkvub0","_id":"cipjfs5wj003p4wmc0qsemh37"},{"post_id":"cipjfs5u7000w4wmcpihdwhow","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipjfs5wl003u4wmc8hwxt4s5"},{"post_id":"cipjfs5w500394wmcesugwzzo","tag_id":"cipje13hp000dfcmc25lysat2","_id":"cipjfs5wq004g4wmc98tg48py"},{"post_id":"cipjfs5ue00134wmch0wjwj3t","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipjfs5wr004h4wmcikxi3s87"},{"post_id":"cipjfs5ui001a4wmc6wttlsq7","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipjfs5wv004t4wmc7kbce5oy"},{"post_id":"cipjfs5ur001k4wmcc2evmhjg","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5wx004z4wmc7f7wkoyb"},{"post_id":"cipjfs5ur001k4wmcc2evmhjg","tag_id":"cipjfs5wl003v4wmckcds54mh","_id":"cipjfs5wy00514wmcvd5w21s1"},{"post_id":"cipjfs5uu001o4wmcxpyslymr","tag_id":"cipje13iy002jfcmcxslxigw9","_id":"cipjfs5wz00524wmcf79aask3"},{"post_id":"cipjfs5uy001s4wmctb008uzm","tag_id":"cipjfs5wo00484wmc7d5ry228","_id":"cipjfs5x300594wmctck70lk8"},{"post_id":"cipjfs5uy001s4wmctb008uzm","tag_id":"cipjfs5wp004c4wmcm3hquzmc","_id":"cipjfs5x3005b4wmc1dwg94u2"},{"post_id":"cipjfs5v1001v4wmcjjwrt2w9","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5x4005c4wmcn00d6b7x"},{"post_id":"cipjfs5v1001v4wmcjjwrt2w9","tag_id":"cipjfs5wr004i4wmc52gp8yhg","_id":"cipjfs5x5005e4wmcg45kb1xq"},{"post_id":"cipjfs5v1001v4wmcjjwrt2w9","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5x5005f4wmc08lzrcvb"},{"post_id":"cipjfs5v1001v4wmcjjwrt2w9","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5x6005h4wmcz0ilb5vn"},{"post_id":"cipjfs5v800224wmctbpax26h","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5x6005i4wmc69ugwqwv"},{"post_id":"cipjfs5v800224wmctbpax26h","tag_id":"cipjfs5wr004i4wmc52gp8yhg","_id":"cipjfs5x7005k4wmcvumcs658"},{"post_id":"cipjfs5v800224wmctbpax26h","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5x7005l4wmc0k4a0anx"},{"post_id":"cipjfs5v800224wmctbpax26h","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5x7005n4wmc4p7a3qru"},{"post_id":"cipjfs5va00264wmciozrmpro","tag_id":"ciphvph0z002jscmcg4y3bxfa","_id":"cipjfs5x8005o4wmcy8tbrabp"},{"post_id":"cipjfs5va00264wmciozrmpro","tag_id":"cipjfs5wr004i4wmc52gp8yhg","_id":"cipjfs5x9005q4wmcaonqdxvu"},{"post_id":"cipjfs5va00264wmciozrmpro","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipjfs5xb005r4wmc8zpkh9tu"},{"post_id":"cipjfs5va00264wmciozrmpro","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5xb005t4wmcvqknjyuc"},{"post_id":"cipjfs5vc00294wmceb16bfj2","tag_id":"ciphvph11002rscmcxoryb0fk","_id":"cipjfs5xc005u4wmcphhq5oln"},{"post_id":"cipjfs5vc00294wmceb16bfj2","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5xc005v4wmcjlrhdr5k"},{"post_id":"cipjfs5vc00294wmceb16bfj2","tag_id":"cipjfs5wr004i4wmc52gp8yhg","_id":"cipjfs5xd005x4wmct9ke4lvu"},{"post_id":"cipjfs5vj002g4wmciy2ir3d7","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5xd005y4wmcw9pgq0lg"},{"post_id":"cipjfs5vj002g4wmciy2ir3d7","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5xe00624wmcxd3tzgxs"},{"post_id":"cipjfs5vl002j4wmck5edl5el","tag_id":"ciphvph11002rscmcxoryb0fk","_id":"cipjfs5xf00634wmc1jy4ko3b"},{"post_id":"cipjfs5vl002j4wmck5edl5el","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5xf00654wmcuqt2u7jr"},{"post_id":"cipjfs5vl002j4wmck5edl5el","tag_id":"cipjfs5x6005j4wmc33u1148y","_id":"cipjfs5xf00664wmc8jv0ylmb"},{"post_id":"cipjfs5vl002j4wmck5edl5el","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipjfs5xg00674wmc2ij7qtxy"},{"post_id":"cipjfs5vo002o4wmc1v6gsu2e","tag_id":"cipjfs5wp004c4wmcm3hquzmc","_id":"cipjfs5xg00684wmc23ykxbfm"},{"post_id":"cipjfs5w200354wmcjui8gach","tag_id":"ciphvph16002zscmcj9esupgg","_id":"cipjfs5xg006a4wmcoji7lut9"},{"post_id":"cipjfs5w200354wmcjui8gach","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipjfs5xh006c4wmcv5fecjz6"},{"post_id":"cipjfs5w200354wmcjui8gach","tag_id":"cipje13hp000dfcmc25lysat2","_id":"cipjfs5xh006d4wmc0hh30u9x"},{"post_id":"cipjfs5w200354wmcjui8gach","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipjfs5xh006e4wmcxirneoun"},{"post_id":"cipjfs5w7003c4wmc6n0zeh82","tag_id":"ciphvph000015scmca7cejpae","_id":"cipjfs5xh006f4wmcenxplw48"},{"post_id":"cipjfs5wc003j4wmcasa6rbpy","tag_id":"ciphvph000015scmca7cejpae","_id":"cipjg9uxt00003smcz6m13z40"},{"post_id":"cipjfs5tw000i4wmcy8mb07mh","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipnfoiy400002cmch43g6k8f"},{"post_id":"cipjfs5ug00164wmca99h19om","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipnfoiy700012cmce2r9wa8r"},{"post_id":"cipjfs5ui001a4wmc6wttlsq7","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipnfoiy900022cmc817ytfsg"},{"post_id":"cipjfs5ui001a4wmc6wttlsq7","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipnfoiyc00032cmcsubr6sp4"},{"post_id":"cipjfs5ue00134wmch0wjwj3t","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipnfoiyq00052cmcsqvvbk8x"},{"post_id":"cipjfs5ue00134wmch0wjwj3t","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipnfoiys00062cmcuz9wsxdq"},{"post_id":"cipjfs5u1000p4wmcs8100oqi","tag_id":"cipjfs5wq004f4wmcmszdp0tm","_id":"cipng1u0t0000acmcqbv0powc"},{"post_id":"cipjfs5u7000w4wmcpihdwhow","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u0x0001acmcdhymw9d3"},{"post_id":"cipjfs5ui001a4wmc6wttlsq7","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u150002acmcu6r4ywb5"},{"post_id":"cipjfs5uc000z4wmcopnv2nfk","tag_id":"ciphvpgzf000mscmcnvhb68ht","_id":"cipng1u1g0004acmcqrfadan2"},{"post_id":"cipjfs5v5001z4wmc4fr1ixcd","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u1p0006acmcycxqggyt"},{"post_id":"cipjfs5vv002y4wmc0220fft2","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u1x0009acmcnv1z4ykk"},{"post_id":"cipjfs5w200354wmcjui8gach","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u1x000aacmc7cxrrles"},{"post_id":"cipjfs5w500394wmcesugwzzo","tag_id":"ciphvpgzf000mscmcnvhb68ht","_id":"cipng1u1y000bacmc8cayuhih"},{"post_id":"cipjfs5w500394wmcesugwzzo","tag_id":"cipjfs5wp004c4wmcm3hquzmc","_id":"cipng1u1y000cacmcg6rtmiiw"},{"post_id":"cipjfs5vs002v4wmc5w94y6l2","tag_id":"cipng1u1q0007acmcm4txncn1","_id":"cipng1u1y000dacmc0ymqwekb"},{"post_id":"cipjfs5wb003g4wmceqzav7r5","tag_id":"cipng1u1w0008acmc2nmjd3ya","_id":"cipng1u1y000eacmc3jaq636r"},{"post_id":"cipjfs5xq006j4wmc2js4v6t0","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipng1u2b000facmc4xxo9jar"},{"post_id":"cipjfs5ue00134wmch0wjwj3t","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipngsp8n0000c4mc0nqcd0v4"},{"post_id":"cipjfs5vj002g4wmciy2ir3d7","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipngsp9f0001c4mcq9fdude6"},{"post_id":"cipjfs5tw000i4wmcy8mb07mh","tag_id":"cipjfs5sq00024wmcyjyozapl","_id":"cipnrw0ad000334mck6gje2mi"},{"post_id":"cipnrw09q000034mc38o46fue","tag_id":"cipnrw0a0000134mc7j76ppy0","_id":"cipnrw0ae000434mc2p974lpv"},{"post_id":"cipnrw09q000034mc38o46fue","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipnrw0ae000634mcjhsojsuv"},{"post_id":"cipnrw09q000034mc38o46fue","tag_id":"ciphvph0x002bscmc7b2cmzwe","_id":"cipnrw0af000734mc95hluwk5"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxpw1j70002momcraiw3zdn"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxpw1j80003momcsrxxzaja"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxpw1j90005momcjamlp5ri"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxpw1ja0007momcu3lo61nc"},{"post_id":"cipxpw1iu0000momcdbbvfwu9","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxpw1ja0008momc5mnb5qqx"},{"post_id":"cipxq33mp00007wmc0o90ez0o","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxq33ms00017wmcua0o8bw2"},{"post_id":"cipxq33mp00007wmc0o90ez0o","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxq33mt00027wmc38j71oui"},{"post_id":"cipxq33mp00007wmc0o90ez0o","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxq33mt00047wmcdr2cebx1"},{"post_id":"cipxq33mp00007wmc0o90ez0o","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxq33mu00057wmcbw8kquj2"},{"post_id":"cipxq33mp00007wmc0o90ez0o","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxq33mu00067wmcdtdwnabi"},{"post_id":"cipxtqv2u00001omchi2ljair","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxtqv3600021omcdhfzco2z"},{"post_id":"cipxtqv2u00001omchi2ljair","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxtqv3800031omc3oymp93i"},{"post_id":"cipxtqv2u00001omchi2ljair","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxtqv3900051omc9xj7ywvf"},{"post_id":"cipxtqv2u00001omchi2ljair","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxtqv3900071omca91m5vdg"},{"post_id":"cipxtqv2u00001omchi2ljair","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxtqv3a00081omcin25tvsk"},{"post_id":"cipxtqv3100011omc7fmlai78","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxtqv3a00091omcg8jpdq2x"},{"post_id":"cipxtqv3100011omc7fmlai78","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxtqv3a000a1omcmdc1xe1y"},{"post_id":"cipxtqv3100011omc7fmlai78","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxtqv3b000b1omc3f3tuoaj"},{"post_id":"cipxtqv3100011omc7fmlai78","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxtqv3b000c1omcrys0dz82"},{"post_id":"cipxtqv3100011omc7fmlai78","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxtqv3b000d1omctbqxg4de"},{"post_id":"cipxu8vgf0000pomcmezaudrr","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxu8vha0002pomchceon9u2"},{"post_id":"cipxu8vgf0000pomcmezaudrr","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxu8vhd0004pomc91wawcuw"},{"post_id":"cipxu8vgf0000pomcmezaudrr","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxu8vhg0006pomc3gq11w8l"},{"post_id":"cipxu8vgf0000pomcmezaudrr","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxu8vhh0008pomcgzbvrj5v"},{"post_id":"cipxu8vgf0000pomcmezaudrr","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxu8vhi000apomcdii75p7e"},{"post_id":"cipxu8vgu0001pomck65xhnnu","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipxu8vhj000bpomcpfoy0h7r"},{"post_id":"cipxu8vgu0001pomck65xhnnu","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipxu8vhj000cpomcjmoh9tgf"},{"post_id":"cipxu8vgu0001pomck65xhnnu","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipxu8vhj000dpomcapt9b8wg"},{"post_id":"cipxu8vgu0001pomck65xhnnu","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipxu8vhk000epomc2xeh6fx0"},{"post_id":"cipxu8vgu0001pomck65xhnnu","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipxu8vhk000fpomcb2agvup5"},{"post_id":"cipxux8to0000jomc0a3jdau8","tag_id":"cipjfs5um001g4wmc9dhfy9kw","_id":"cipxux8tw0001jomcdv0ydltx"},{"post_id":"cipy4kfh90000nvwxzexhvgqp","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipy4kfhn0001nvwxwvivdpk2"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipyxgvxw0001t0mc2a1sks6l"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipyxgvxx0002t0mcr6cyyyh9"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipyxgvxy0004t0mcznreva8p"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipyxgvxy0005t0mcegwp2h40"},{"post_id":"cipyxgvxh0000t0mcsbxwfuqi","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipyxgvxz0006t0mcs6xysn6x"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","tag_id":"ciphvph04001cscmchxmhriib","_id":"cipyxgw0d0008t0mc7qqvznku"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"cipyxgw0g0009t0mc0ejlhdlr"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"cipyxgw0j000bt0mciglgyfki"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"cipyxgw0j000ct0mcykawu20b"},{"post_id":"cipyxgvzz0007t0mc4y8uu7i2","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"cipyxgw0j000dt0mcyj1vgvza"},{"post_id":"ciq1t0f350000rkmcdyzunnke","tag_id":"ciphvph04001cscmchxmhriib","_id":"ciq1t0f3s0001rkmcvijkux4p"},{"post_id":"ciq1t0f350000rkmcdyzunnke","tag_id":"ciphvph0y002fscmcciouxjm4","_id":"ciq1t0f3t0002rkmcyv0nx5hc"},{"post_id":"ciq1t0f350000rkmcdyzunnke","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciq1t0f3u0004rkmc57q1er89"},{"post_id":"ciq1t0f350000rkmcdyzunnke","tag_id":"cipqkn2vo0000xcmcu8lcd2iw","_id":"ciq1t0f3v0005rkmcha5ljax7"},{"post_id":"ciq1t0f350000rkmcdyzunnke","tag_id":"cipqkn2wl0001xcmc2cly1nm1","_id":"ciq1t0f3w0006rkmcpggeuhes"},{"post_id":"ciqj4jcan0000ssmcamk0ccb5","tag_id":"ciqj4jcaz0001ssmc40oduc6c","_id":"ciqj4jcbq0003ssmc91txw5zo"},{"post_id":"ciqj4jcan0000ssmcamk0ccb5","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqj4jcbr0004ssmc194q26cw"},{"post_id":"ciqw2ztwi00005gmcug7xr451","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztwx00025gmcj9irb41j"},{"post_id":"ciqw2ztwr00015gmc8clmyx08","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztx000045gmcpgg7g6oa"},{"post_id":"ciqw2ztwx00035gmcguoa3byd","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztx700075gmcust5subv"},{"post_id":"ciqw2ztx000065gmcdl8j6ei7","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztxb000a5gmcr0d9ikw5"},{"post_id":"ciqw2ztx800095gmch6mp8do7","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztxe000d5gmcmqc9s2xy"},{"post_id":"ciqw2ztxb000c5gmc17z5qziw","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztxh000g5gmcafojjxen"},{"post_id":"ciqw2ztxe000f5gmcigl3myus","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2ztxi000i5gmchnla8s5j"},{"post_id":"ciqw2ztxw000l5gmcajga08sn","tag_id":"cipxmbsd50002jsmcj0yhy78u","_id":"ciqw2zty0000m5gmc8cqoouqi"}],"Tag":[{"name":"angularjs","_id":"ciphvpgyl0004scmcfqu1q6vi"},{"name":"markdown","_id":"ciphvpgzf000mscmcnvhb68ht"},{"name":"nodejs","_id":"ciphvpgzk000tscmctockvv6u"},{"name":"生活","_id":"ciphvpgzu000zscmcklfkvub0"},{"name":"linux","_id":"ciphvph000015scmca7cejpae"},{"name":"webpack","_id":"ciphvph04001cscmchxmhriib"},{"name":"es6","_id":"ciphvph0x002bscmc7b2cmzwe"},{"name":"javascript","_id":"ciphvph0y002fscmcciouxjm4"},{"name":"mongodb","_id":"ciphvph0z002jscmcg4y3bxfa"},{"name":"atom","_id":"ciphvph10002nscmc38xbkn8k"},{"name":"npm","_id":"ciphvph11002rscmcxoryb0fk"},{"name":"gulp","_id":"ciphvph16002zscmcj9esupgg"},{"name":"linux磁盘挂载","_id":"cipj3e6ty0001x0mcnbxt8ad3"},{"name":"HTML","_id":"cipje13h00003fcmcgkdfu23d"},{"name":"CSS","_id":"cipje13hk0007fcmcbuwvfzmy"},{"name":"JavaScript","_id":"cipje13hp000dfcmc25lysat2"},{"name":"Git","_id":"cipje13hv000kfcmc1pvkpuwc"},{"name":"EndNote","_id":"cipje13i0000sfcmc3as1k079"},{"name":"Markdown","_id":"cipje13i80011fcmc8n2qrq19"},{"name":"Reference","_id":"cipje13ib0016fcmcyxrc3uko"},{"name":"多说","_id":"cipje13id001afcmc80s3kjrb"},{"name":"UA","_id":"cipje13ik001lfcmc5ej37prl"},{"name":"Hexo","_id":"cipje13il001rfcmc9kc2k38l"},{"name":"Windows","_id":"cipje13in001sfcmcm41no6gg"},{"name":"Mac","_id":"cipje13io001vfcmcrys49iho"},{"name":"Software","_id":"cipje13ip001yfcmcc23wbzyx"},{"name":"TagCloud","_id":"cipje13iv0028fcmcdip2zuj3"},{"name":"Excel","_id":"cipje13iv0029fcmcw9giduuc"},{"name":"Table","_id":"cipje13iw002dfcmcqi6dgkw3"},{"name":"GitHub","_id":"cipje13ix002hfcmcitwk7rk1"},{"name":"PhotoShop","_id":"cipje13iy002jfcmcxslxigw9"},{"name":"GIF","_id":"cipje13iz002mfcmcdr0jkxrz"},{"name":"PNG","_id":"cipje13iz002nfcmcfb55n41f"},{"name":"PowerPoint","_id":"cipje13iz002ofcmccgnqqdeq"},{"name":"Anki","_id":"cipje13j0002pfcmc4yfnkmhw"},{"name":"Sublime","_id":"cipje13j1002sfcmcz8d2lb36"},{"name":"font-family","_id":"cipje13js0031fcmcvpydvq2b"},{"name":"DNS","_id":"cipje13kb003ofcmc3obs2buq"},{"name":"Browsersync","_id":"cipje13kg003wfcmccwgqv3ai"},{"name":"jQuery","_id":"cipje13km0044fcmckg780w98"},{"name":"Yelee","_id":"cipje13kq004cfcmc2c0z0o4m"},{"name":"Font-Awesome","_id":"cipje13kt004hfcmc5hsgg7ji"},{"name":"Disqus","_id":"cipje13kw004sfcmcobxbyy56"},{"name":"JSON","_id":"cipje13kx004vfcmcwo57nimd"},{"name":"WordPress","_id":"cipje13kx004yfcmcg5emkbsk"},{"name":"angular","_id":"cipjfs5sq00024wmcyjyozapl"},{"name":"validate","_id":"cipjfs5tk00074wmcg0szg4vg"},{"name":"ui-router","_id":"cipjfs5u0000n4wmcykym2ziv"},{"name":"http","_id":"cipjfs5ud00104wmcmfxhvsgv"},{"name":"plugins","_id":"cipjfs5uh00184wmche3nd9ob"},{"name":"开发工具","_id":"cipjfs5um001g4wmc9dhfy9kw"},{"name":"定时任务","_id":"cipjfs5uw001p4wmce6p5rga6"},{"name":"博客","_id":"cipjfs5v2001w4wmcihlq2pse"},{"name":"telnet","_id":"cipjfs5va00244wmc2z14zgmh"},{"name":"关于我","_id":"cipjfs5vf002c4wmcbsfck4ub"},{"name":"自动化构建工具","_id":"cipjfs5vn002k4wmco2y9yxrk"},{"name":"loaders","_id":"cipjfs5vr002s4wmcl33djssp"},{"name":"es5","_id":"cipjfs5wl003v4wmckcds54mh"},{"name":"gif","_id":"cipjfs5wm00414wmc5amuzew7"},{"name":"png","_id":"cipjfs5wn00454wmc0vj3paap"},{"name":"html","_id":"cipjfs5wo00484wmc7d5ry228"},{"name":"css","_id":"cipjfs5wp004c4wmcm3hquzmc"},{"name":"node","_id":"cipjfs5wq004f4wmcmszdp0tm"},{"name":"koa","_id":"cipjfs5wr004i4wmc52gp8yhg"},{"name":"爬虫","_id":"cipjfs5x000564wmcjro2v9sp"},{"name":"javscript","_id":"cipjfs5x3005a4wmc3mi6htbh"},{"name":"script","_id":"cipjfs5x4005d4wmc9anuu34h"},{"name":"git","_id":"cipjfs5x6005j4wmc33u1148y"},{"name":"服务器","_id":"cipjfs5xb005s4wmctch5nhdi"},{"name":"liux","_id":"cipjfs5xc005w4wmci4ef6idr"},{"name":"硬盘","_id":"cipjfs5xd005z4wmc0i11tuzq"},{"name":"前端","_id":"cipnfoiys00072cmcud97ggci"},{"name":"excel","_id":"cipng1u1q0007acmcm4txncn1"},{"name":"jquery","_id":"cipng1u1w0008acmc2nmjd3ya"},{"name":"reactjs","_id":"cipnrw0a0000134mc7j76ppy0"},{"name":"sass","_id":"cipqkn2vo0000xcmcu8lcd2iw"},{"name":"typescript","_id":"cipqkn2wl0001xcmc2cly1nm1"},{"name":"angular2","_id":"cipxmbsd50002jsmcj0yhy78u"},{"name":"rxjs","_id":"ciqj4jcaz0001ssmc40oduc6c"}]}}